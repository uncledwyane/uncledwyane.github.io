<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>webpack项目的创建及初始化</title>
    <url>/2020/04/27/webpack-dev-server_create/</url>
    <content><![CDATA[<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h3><ol>
<li>创建项目根目录Demo</li>
<li>在Demo目录下创建dist、src目录</li>
<li>在src目录下创建css、images、js文件夹</li>
<li>在src目录下创建main.js、index.html文件</li>
<li>在Demo根目录下创建webpack.config.js文件</li>
</ol>
<h3 id="文件结构图"><a href="#文件结构图" class="headerlink" title="文件结构图"></a><strong>文件结构图</strong></h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">|-- Demo</span><br><span class="line">    |-- webpack.config.js // webpack配置文件，配置各种loader和plugin等</span><br><span class="line">    |-- dist // 打包后的存放目录</span><br><span class="line">    |-- src // 资源文件夹吧</span><br><span class="line">        |-- index.html   // 项目入口</span><br><span class="line">        |-- main.js 	 // 导入各种包的文件</span><br><span class="line">        |-- css 	 // 存放样式的目录</span><br><span class="line">        |-- images	 // 存放图片资源的目录</span><br><span class="line">        |-- js           // 存放其他脚本文件</span><br></pre></td></tr></table></figure>

<h3 id="准备工作完了，开始创建"><a href="#准备工作完了，开始创建" class="headerlink" title="准备工作完了，开始创建"></a><strong>准备工作完了，开始创建</strong></h3><ul>
<li>使用<code>npm install webpack --save-dev</code>以依赖方式安装webpack</li>
<li>使用<code>npm install webpack-cli --save-dev</code>安装webpack脚手架</li>
<li>使用<code>npm install webpack-dev-server --save-dev</code>安装webpack工具，这样可以自动打包项目并更新</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h3><p>编辑<code>webpack.config.js</code>配置文件如下：</p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>); </span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="hljs-string">'./src/man.js'</span>, <span class="hljs-comment">// 入口，需要被webpack编译打包的文件</span></span><br><span class="line">    output: &#123; 	<span class="hljs-comment">// 出口</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="hljs-string">'./dist'</span>), <span class="hljs-comment">// 打包出口路径</span></span><br><span class="line">        filename: <span class="hljs-string">'bundle.js'</span> <span class="hljs-comment">// 打包后的文件名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>package.json</code>文件中的scripts下新建一条规则：</p>
<figure class="highlight hljs"><table><tr><td class="code"><pre><span class="line">"dev": "webpack-dev-server --open --contentBase src --hot"</span><br><span class="line"></span><br><span class="line">--open 是自动打开项目地址</span><br><span class="line">--contentBase 参数是src，默认打开项目地址中的src，</span><br><span class="line">也就是启动项目会自动打开index.html这个项目入口</span><br><span class="line">--hot 热更新，在代码中更改了页面中的某些样式的时候，</span><br><span class="line">页面不用刷新也能看到样式的改变</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>npm install jquery --save-dev</code>安装jquery做一下测试</li>
</ul>
<p>安装完成jQuery之后，在<code>main.js</code>写几条语句测试：</p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="hljs-string">'#app'</span>).css(<span class="hljs-string">'color'</span>,<span class="hljs-string">'red'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在<code>index.html</code>中添加一个id为app的div，并引入bundle.js</p>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'/bundlr.js'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'app'</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在所有基本工作已结束，使用<code>npm run dev</code>运行项目，运行成功没有报错的话会在默认浏览器中自动打开项目的src中的index.html并且已经成功看到id为app的div中的字体颜色为红色了。</p>
<h3 id="完善项目配置"><a href="#完善项目配置" class="headerlink" title="完善项目配置"></a><strong>完善项目配置</strong></h3><p>在上述步骤中，其实还没发挥webpack的真正实力，现在通过对webpack.config.js进行配置，逐步来实现webpack更强大的功能。</p>
<p>借参考资料上面的说明：在webpack的世界里，每个文件都是一个模块，比如.css、.js、.html、.less等。对于不同的模块，webpack不能直接识别，所以就需要不同的<code>加载器(loader)</code>来处理，而<code>加载器</code>就是webpack最重要的功能。通过安装不同的加载器可以对各种后缀名的文件进行处理。接下来就是一些loader的使用</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个项目下线啦</title>
    <url>/2020/04/25/myfirstpractice/</url>
    <content><![CDATA[<p>历时一个多月学习了Vue之后结合教程做的第一个小项目，我觉得可以归类为移动端的小程序。</p>
<p>通过这个小小的项目，一个在以后看起来很渣渣的小项目，让现在的我对Vue的理解更加深刻，还学习了webpack、axios、Promise、接口、vue-cli等很多以及其他UI组件库的使用。</p>
<p>这个项目还有很多不足，存在的问题有：</p>
<ul>
<li>重复请求api数据，点击过的页面和获取过的数据重新进入会丢失并重新发起请求</li>
<li>新闻列表点进一条新闻之后再回到新闻列表不能还原点击之前的分类和界面</li>
<li>新闻列表传参是显示传参，后期会优化为隐式传参</li>
</ul>
<a id="more"></a>

<hr>
<div align="center">
    <img src="/images/appinfo.jpg" alt="项目结构">    
</div>



<hr>
<div align="center">
    <p>项目演示</p>
</div>



<figure class="half">
    <img src="https://s1.ax1x.com/2020/04/25/JyUoMF.gif">
    <img src="https://s1.ax1x.com/2020/04/25/JyU5xU.gif">
</figure>



<hr>
<p>项目使用的相关：</p>
<ul>
<li>UI<ul>
<li>Mint-UI</li>
<li>Vant-UI</li>
<li>Muse-UI</li>
<li>MUI</li>
</ul>
</li>
<li>技术栈<ul>
<li>Webpack</li>
<li>Vue.js</li>
<li>Axios</li>
</ul>
</li>
<li>接口：<ul>
<li>聚合数据</li>
<li>进制数据</li>
<li>一言</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>记录在使用webpack做的项目过程中遇到的问题及解决办法和总结</title>
    <url>/2020/04/17/my-project-note/</url>
    <content><![CDATA[<p>问题一： </p>
<ul>
<li>背景：做一个新闻页面，每一条新闻点进去进入新闻详情的时候，之前是点进去之后再次请求服务器数据，这样就请求了两次，对访问速度也有影响，也浪费资源。</li>
<li>问题：怎么才能直接把每条新闻获取的数据在点击之后直接传到新闻详情页</li>
<li>解决：<ul>
<li>试过使用中央事件总线bus来在两个组件之间传递数据，但是测试的时候，只能在控制台看见数据，不能传给接收组件自己的变量。或者说是我的使用方式不正确。效果不佳，舍弃。</li>
<li>搜索一番发现，可以使用<code>$router</code>来传值，很方便.</li>
</ul>
</li>
</ul>
<p>点击<code>阅读更多</code>查看使用方法</p>
<a id="more"></a>

<p>下面是使用方法:<br>要发送数据的组件：</p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">   	<span class="hljs-keyword">return</span>: &#123;</span><br><span class="line">       	data: <span class="hljs-string">'Hello'</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">   	sendData()&#123;</span><br><span class="line">       	<span class="hljs-keyword">this</span>.$router.push(&#123;</span><br><span class="line">               path: <span class="hljs-string">'/home'</span>,</span><br><span class="line">               query: &#123;</span><br><span class="line">                   data: <span class="hljs-keyword">this</span>.data</span><br><span class="line">               &#125;</span><br><span class="line">		&#125;)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>要接收数据的组件：</p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">   	<span class="hljs-keyword">return</span>: &#123;</span><br><span class="line">       	mydata: <span class="hljs-string">''</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">methods: &#123;</span><br><span class="line">   	getData()&#123;</span><br><span class="line">       	<span class="hljs-keyword">this</span>.mydata = <span class="hljs-keyword">this</span>.$route.query.data</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>问题二:</p>
<ul>
<li>如何在手机上调试项目</li>
<li>背景：局域网ip为192.168.101.8<ul>
<li>保证电脑和手机在同一局域网下（连接同一wifi）</li>
<li>在<code>package.json</code>中的启动参数中添加<code>--host 192.168.101.8</code></li>
<li>手机访问这个ip地址+端口号+项目首地址</li>
<li>例如：原本项目地址为：<code>localhost:8080/#/home</code></li>
<li>配置后：<code>192.168.101.8:8080/#/home</code></li>
<li>手机访问这个地址即可</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>配置了跨域，但是请求还是显示404的解决办法</title>
    <url>/2020/04/13/solution-404/</url>
    <content><![CDATA[<p>原来使用<code>npm run dev</code>重启以下项目就行了，因为这个问题头疼了很久，以为跨域配置错误</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记, Vue.js, Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件中css不能更改v-html内的样式的解决办法</title>
    <url>/2020/04/12/vue-deep-scoped/</url>
    <content><![CDATA[<p>今天在项目中使用axios请求数据的时候，返回的内容里含有html的各种标签，使用v-html渲染到组件页面的时候发现在style里直接更改v-html内的元素的样式没有任何效果，但是删除style的scoped属性之后，就有效果了，但是这种会引起问题，scoped对渲染的范围作了限制，去掉就没有限制。<br>针对这个问题，搜了一下，发现可以使用<code>deep scoped</code>来更改v-html内的样式</p>
<a id="more"></a>
<p>使用方法(举例一个div, 假设v-html中有一个类名称为content)：</p>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'container'</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">'content'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>渲染：</p>
<figure class="highlight css hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &gt;&gt;&gt; <span class="hljs-selector-class">.content</span>&#123;</span><br><span class="line">   	<span class="hljs-attribute">background-color</span>: red;</span><br><span class="line">       <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>现在v-html中的.content就会有指定的样式了</p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack中跨域问题(已解决)</title>
    <url>/2020/04/07/cross-origin/</url>
    <content><![CDATA[<img src="https://s1.ax1x.com/2020/04/07/GgUB8J.jpg" border="0">
<p>
<span style="letter-spacing: 2px;">
    最近几天学完了vue的基本课程，想跟着教程做个实战，由于教程不是最新的，里面涉及到的接口就失效了，于是网上找了个接口，使用axios请求数据发现控制台居然报了上面这个错，还是小白的我一脸懵b，马上百度，发现一个专有名词： <span style="color: red;font-weight: bolder;font-size: 16px;">跨域</span>，跨域的解释这里就不啰嗦了，百度一大堆。为了解决这个问题，翻了很多篇教程，无果.........
</span>
</p>
<a id="more"></a>
<p style="letter-spacing: 2px;">
一直解决不了这个问题，作为小白真想放弃，但第二天还是决定认真看一看其他教程，最终找到了webpack中解决跨域问题的办法，就是在`webpack.config.js`中加入以下语句：
</p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">	devServer: &#123;</span><br><span class="line">    	proxy: &#123;</span><br><span class="line">        	<span class="hljs-string">'/api'</span>: &#123;</span><br><span class="line">            	target: <span class="hljs-string">'http: www.exsample.cn'</span>,</span><br><span class="line">                changeOrigin: <span class="hljs-literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点就是这个<code>changeOrigin: true</code>，<br>在上面的代码中,<code>/api</code>就是在请求中，遇到这个开头的就马上代理为本地服务器，比如要请求的网络地址是<code>http://jiekou.cn/api/data.json</code>，那么经过webpack这段配置文件处理过后请求的地址就转变为本地服务器地址<code>http://localhost:8080/api/data.json</code>，这样本地服务器去请求接口数据的头部都是<code>localhost:8080</code>了</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHub仓库来保存自己的代码</title>
    <url>/2020/04/07/git-res-tutorial/</url>
    <content><![CDATA[<h3 id="绑定GitHub"><a href="#绑定GitHub" class="headerlink" title="绑定GitHub"></a>绑定GitHub</h3><h4 id="获取电脑的密钥"><a href="#获取电脑的密钥" class="headerlink" title="获取电脑的密钥"></a>获取电脑的密钥</h4><ul>
<li>在Gitbash中输入<span style="color: red;font-weight: bold;"><code>Add-AppxPackage -register AppxManifest.xml</code></span>并回车，回车，再回车</li>
<li>打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开复制里面的内容，这就是密钥</li>
<li>点击Github自己的头像里面的<code>setting</code>，找到<code>SSH and GPG keys</code>，点击右侧<code>New SSH key</code>随意填一个名称，在下面填入<code>id_rsa.pub</code>里面的内容，保存，这样就把电脑和Github绑定了<a id="more"></a>
<h4 id="本地上传到GitHub"><a href="#本地上传到GitHub" class="headerlink" title="本地上传到GitHub"></a>本地上传到GitHub</h4></li>
<li>GitHub里面新建一个代码仓库，名称随意</li>
<li>进入仓库,复生成的https链接：</li>
</ul>
<div align="center">
    <img src="https://s1.ax1x.com/2020/04/05/GDEZrD.md.png">
</div>

<ul>
<li><p>在本地新建一个文件夹，使用<code>GitBash</code>进入这个文件夹，执行命令：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令执行完毕后这个文件夹下面就会生成一个.git的文件夹，这样就初始化完毕了</p>
</li>
<li><p>在文件夹下新建一个helloGit.txt文件做测试</p>
</li>
<li><p>执行以下命令</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">git add helloGit.txt // 选择文件</span><br><span class="line">git commit -m &quot;提交测试&quot; // 本次提交的描述信息</span><br><span class="line">git remote add origin 刚刚复制的链接 // 绑定刚刚创建的远程Git仓库</span><br><span class="line">git push -u origin master // 提交</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这样就完成了将自己电脑和GitHub远程仓库的绑定</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack中的各种loader的安装及使用案例</title>
    <url>/2020/03/29/webpack-loaders/</url>
    <content><![CDATA[<p>webpack在不使用loader的情况下很多语句都不能被解析，所以需要不同的第三方loader来解析不能被webpack解析的语句。</p>
<a id="more"></a>

<h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css loader"></a><strong>css loader</strong></h2><p>安装： </p>
<blockquote>
<p>npm install style-loader css-loader</p>
</blockquote>
<p>配置（在<code>webpack.config.js</code>的<code>module</code>中新建一条rules）：</p>
<blockquote>
<p>test: /.css$/, use: [‘style-loader’, ‘css-loader’]</p>
</blockquote>
<h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url loader"></a><strong>url loader</strong></h2><p>安装（file-loader为url-loader的内部依赖，在规则里可以不用写url-loader）： </p>
<blockquote>
<p>npm install url-loader file-loader </p>
</blockquote>
<p>配置（在<code>webpack.config.js</code>的<code>module</code>中新建一条rules,这里以图片举例）：</p>
<blockquote>
<p>test: /.(jpg|png|gif|bmp|jpeg)$/, use: [‘url-loader?limit=7000’]  //针对图片<br>test: /.(ttf|eot|svg|woff|woff2)$/, use: [‘url-loader’]   //针对字体</p>
</blockquote>
<p>给url-loader添加参数，不让所有的图片都被解析为Base64格式，上面的<code>?limit=7000</code>意思是如果图片大小等于或者大于7000字节则图片不会被转为Base64编码格式（limit单位为byte），如果小于，则会被转为Base64格式。</p>
<h2 id="在webpack中使用-vue-开发"><a href="#在webpack中使用-vue-开发" class="headerlink" title="在webpack中使用 vue 开发"></a><strong>在webpack中使用 vue 开发</strong></h2><blockquote>
<p>npm install vue -D</p>
</blockquote>
<p>配置webpack.config.js（在resolve中的alias中添加一条规则）：</p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">	alias: &#123;</span><br><span class="line">    	<span class="hljs-string">"vue"</span>: <span class="hljs-string">"vue/dist/vue.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main.js中添加一条语句</p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span></span><br></pre></td></tr></table></figure>

<h2 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a><strong>vue-loader</strong></h2><p>在webpack中，推荐使用 <code>.vue</code> 这个组件模板文件定义组件，所以需要安装 <code>vue-loader</code> </p>
<blockquote>
<p>npm install vue-loader vue-template-compiler -D</p>
</blockquote>
<h2 id="上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上"><a href="#上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上" class="headerlink" title="上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上"></a>上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上</h2><ol>
<li><p>在js目录中新建一个login.vue文件，内容如下（vue模板，包含三部分）：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">    	&lt;h1&gt;这是登录组件&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在main.js中导入这个组件，导入vue，并且new一个vue实例，并注册从login.vue导入的组件</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import login from &apos;./src/js/login.vue&apos;</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">	el:&apos;#app&apos;,</span><br><span class="line">    components: &#123;</span><br><span class="line">    	&apos;login&apos;: login</span><br><span class="line">    &#125;,</span><br><span class="line">    //原始版：</span><br><span class="line">    render: function(createElement)&#123;</span><br><span class="line">    	return createElement(login)</span><br><span class="line">    &#125;</span><br><span class="line">    //简写版：</span><br><span class="line">    render: c =&gt; c(login)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后在index.html中创建一个id为app的div元素，作为app的实例要控制的区域</p>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'app'</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>如何有效的卸载Windows的软件</title>
    <url>/2020/03/28/howtouninstall/</url>
    <content><![CDATA[<p>在电脑中，卸载软件不如手机那么方便，方法多种多样，但往往都卸载不干净，残留注册表等不好删除。所以需要借助第三方工具来帮助我们轻松并且完完全全的卸载掉想要卸载的软件，这篇文章要推荐的就是IObit Uninstaller这款软件，它UI漂亮，操作便捷，卸载彻底！试一试吧！</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>电脑相关</category>
      </categories>
      <tags>
        <tag>Windows技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>开始学习webpack啦！ 使用webpack处理一个简易的项目</title>
    <url>/2020/03/27/webpack-create/</url>
    <content><![CDATA[<p>这只是开始学习webpack的第一步，确是我人生的一大步。<br><strong>介绍：</strong>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；Webpack是基于整个项目进行构建的；借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</p>
<a id="more"></a>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h3><ol>
<li>新建一个项目文件夹</li>
<li>在这个项目文件夹下新建名为dist、src的文件夹</li>
<li>在src文件夹下新建名为css、images、js的三个文件夹</li>
<li>在src文件夹下新建名为index.html和main.js的文件</li>
<li>上述步骤完成之后，在编辑器终端中进入这个项目文件夹，依次执行以下命令</li>
</ol>
<ul>
<li><code>npm init</code> //初始化</li>
<li><code>npm install webpack --save-dev</code> // 安装webpack</li>
</ul>
<hr>
<div align="center">
    <img src="/images/webpack/webpack_demo.jpg" alt="项目结构">
</div>
---

<h4 id="项目实例"><a href="#项目实例" class="headerlink" title="项目实例"></a><strong>项目实例</strong></h4><h5 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h5><figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../src/main.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Hello Vue 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Hello Vue 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Hello Vue 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Hello Vue 4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h5><figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-comment">// 这个例子是安装了jquery之后</span></span><br><span class="line"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span></span><br><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="hljs-string">'li:odd'</span>).css(<span class="hljs-string">'backgroundColor'</span>, <span class="hljs-string">'lightred'</span>)</span><br><span class="line">    $(<span class="hljs-string">'li:even'</span>).css(<span class="hljs-string">'backgroundColor'</span>, <span class="hljs-string">'lightpink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当index.html和main.js写好之后，直接打开index.html是看不到效果的，srcipt标签引用的main.js不能直接被浏览器解析，第一行<strong><code>import $ from &#39;jquery&#39;</code></strong>就属于es6的高级语法，浏览器不能解析。<br>这样就开始webpack的第一次使用，在终端运行<strong><code>webpack ./src/main.js -o ./dist/bundle.js --mode=none</code></strong>,等待执行完毕</p>
<hr>
<div align="center">
    <img src="/images/webpack/webpack_rezult1.jpg" alt="执行成功">
</div>
- - -

<p>Asset就为webpack处理后的js文件，这样一来，修改script标签中的src为<code>src=&#39;../dist/bundle.js&#39;</code>就可以看到页面成功渲染为main.js中的样式</p>
<p><strong>问题来了：</strong>每次编译都要输入<code>webpack ./src/main.js -o ./dist/bundle.js --mode=none</code>很麻烦，怎么变简单一点？<br><strong>解决：</strong> 配置webpack配置文件，在项目根目录新建一个名为<code>webpack.config.js</code>的文件,设置简易配置:<br><code>entry: 入口文件，要被webpack处理的文件</code><br><code>output: 出口，webpack处理后的放置文件的目录和文件名（默认为bundle.js）</code></p>
<hr>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)</span><br><span class="line">   <span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">   	mode: <span class="hljs-string">'none'</span>,</span><br><span class="line">       entry: path.join(__dirname, <span class="hljs-string">'./src/main.js'</span>),</span><br><span class="line">       output: &#123;</span><br><span class="line">       	path: path.join(__dirname, <span class="hljs-string">'./dist'</span>),</span><br><span class="line">           filename: <span class="hljs-string">'bundle.js'</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>这样一来，直接在终端运行webpack即可使用webpack处理</p>
<p>有新的问题： 开发中修改代码是常事，每次修改了都要输入webpack命令然后打开网页刷新，很麻烦，怎么修改之后自动编译并且刷新页面<br><strong>解决：</strong>使用webpack-dev-server来自动化处理<br><strong>如果运行npm run dev出现can’t find moudle</strong>这种错误，删除掉项目中的node_modules目录重新在终端执行<code>npm install</code>即可</p>
<ul>
<li>安装：<code>npm install webpack-dev-server -D</code></li>
<li>设置项目的package.json，在scripts中添加一条：<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>并保存</li>
<li>项目终端运行<code>npm run dev</code>就可以运行,输出的log中的<a href="http://localhost:8080/即为项目的本地服务器地址" target="_blank" rel="noopener">http://localhost:8080/即为项目的本地服务器地址</a></li>
<li>修改script标签中的src为<code>src=&#39;/bundle.js&#39;</code>，再点击本地服务器地址，点击页面中的src即可看见index.html并且已被正确渲染</li>
<li>现在只要main.js被修改并且保存了就会触发更新，自动刷新页面</li>
</ul>
<hr>
<div align="center">
    <img src="/images/webpack/webpack_dev_server.jpg" alt="运行成功">
</div>
- - -




























]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中监听数据变化的两种方式</title>
    <url>/2020/03/25/vue-twoWayToUpdateDate/</url>
    <content><![CDATA[<p>当vue中的数据有变化，例如用户输入新的数据之后，如何处理更新后的数据？这就提供了针对这种情况的两种方式。</p>
<a id="more"></a>
<ol>
<li>使用keyup<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="hljs-comment">&lt;!-- 分析： --&gt;</span></span><br><span class="line">   <span class="hljs-comment">&lt;!-- 1. 我们要监听到 文本框数据的改变，这样才能知道 什么时候去拼接 出一个 fullname --&gt;</span></span><br><span class="line">   <span class="hljs-comment">&lt;!-- 2. 如何监听到 文本框的数据改变呢？？？ --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"firstname"</span> @<span class="hljs-attr">keyup</span>=<span class="hljs-string">"getFullname"</span>&gt;</span> +</span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"lastname"</span> @<span class="hljs-attr">keyup</span>=<span class="hljs-string">"getFullname"</span>&gt;</span> =</span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fullname"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">   <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       firstname: <span class="hljs-string">''</span>,</span><br><span class="line">       lastname: <span class="hljs-string">''</span>,</span><br><span class="line">       fullname: <span class="hljs-string">''</span></span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       getFullname() &#123;</span><br><span class="line">         <span class="hljs-keyword">this</span>.fullname = <span class="hljs-keyword">this</span>.firstname + <span class="hljs-string">'-'</span> + <span class="hljs-keyword">this</span>.lastname</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用watch, watch中监听添加的需要被监听的组件，用一个带有两个参数的函数处理更新后的数据<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"firstname"</span>&gt;</span> +</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"lastname"</span>&gt;</span> =</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fullname"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstname: <span class="hljs-string">''</span>,</span><br><span class="line">        lastname: <span class="hljs-string">''</span>,</span><br><span class="line">        fullname: <span class="hljs-string">''</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123; <span class="hljs-comment">// 使用这个 属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数</span></span><br><span class="line">        <span class="hljs-string">'firstname'</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">          <span class="hljs-comment">// console.log('监视到了 firstname 的变化')</span></span><br><span class="line">          <span class="hljs-comment">// this.fullname = this.firstname + '-' + this.lastname</span></span><br><span class="line"></span><br><span class="line">          <span class="hljs-comment">// console.log(newVal + ' --- ' + oldVal)</span></span><br><span class="line"></span><br><span class="line">          <span class="hljs-keyword">this</span>.fullname = newVal + <span class="hljs-string">'-'</span> + <span class="hljs-keyword">this</span>.lastname</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-string">'lastname'</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) </span>&#123;</span><br><span class="line">          <span class="hljs-keyword">this</span>.fullname = <span class="hljs-keyword">this</span>.firstname + <span class="hljs-string">'-'</span> + newVal</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue路由嵌套</title>
    <url>/2020/03/25/vue-router1/</url>
    <content><![CDATA[<p><strong>必须注意的两个点</strong></p>
<ol>
<li>子路由的<strong>router-link</strong>中的path必须是完整的path（带父级path），例如父级是/parent，子级是/son，那么子路由的router-link中的path必须为/parent/son；</li>
<li>routes里的children中的子路由的path前面不能带 <span style="color: red">/</span>，例如：</li>
</ol>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="hljs-string">'/parent'</span>,</span><br><span class="line">        component: parent,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="hljs-string">'son'</span>,<span class="hljs-comment">//这里就没有前面的 /</span></span><br><span class="line">                component: son</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>点击<span style="color: red">阅读更多</span>查看代码</p>
<a id="more"></a>
<div align="center">
    <img src="/images/vue_router/vue_router1.gif" alt style="width: 400px;">
    <img src="/images/vue_router/vue_router1-1.gif" alt style="width: 400px;">
</div>

<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'app'</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/home"</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"home"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/home/son"</span>&gt;</span>Son<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"son"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>I am Son<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nesciunt in voluptatibus expedita repudiandae. Soluta distinctio quod quos dolorem blanditiis magni molestiae, minima dolores ipsum! Minima possimus sunt eius quis debitis!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">var home = &#123;</span><br><span class="line">            template: &apos;#home&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        var son = &#123;</span><br><span class="line">            template: &apos;#son&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        var router = new VueRouter(&#123;</span><br><span class="line">            routes: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &apos;/home&apos;,</span><br><span class="line">                    component: home,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;path: &apos;son&apos;, component: son&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">            linkActiveClass: &apos;myActive&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            router: router,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue路由笔记</title>
    <url>/2020/03/22/vue-component-note2/</url>
    <content><![CDATA[<center></center>
<a id="more"></a>

<p><strong>redirect重定位，给路由指定默认的组件，打开就是指向的默认组件</strong></p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="line">    route: [</span><br><span class="line">        <span class="hljs-comment">//这里path后不是conponent，而是用redirect指向一个组件路径</span></span><br><span class="line">        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">'/login'</span>&#125;,</span><br><span class="line">        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/login'</span>, <span class="hljs-attr">conponent</span>: login&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>给激活的router-link添加高亮的两种方式</strong></p>
<ul>
<li>直接给默认的linkActiveClass添加样式</li>
<li>改变router-link的默认类，使用构造方法VueRouter中的linkActiveClass来给自定义新的类</li>
</ul>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="line">    route: [</span><br><span class="line">        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/login'</span>, <span class="hljs-attr">conponent</span>: login&#125;</span><br><span class="line">    ],</span><br><span class="line">    linkActiveClass: <span class="hljs-string">'myActive'</span>, <span class="hljs-comment">//改变了默认的类，可以给这个类指定样式使得激活后高亮</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>给router-link添加参数传递的两种方式</strong></p>
<ol>
<li>在router-link中的to中加入参数：?id=10&amp;name=username，组件中可以通过<strong>$route.query.id</strong>和<strong>$route.query.name</strong>来获取传递的参数值</li>
</ol>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">'/login?id=10&amp;name=username'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在路由的构造函数的routes的path中使用<strong>/:name</strong>来说明这里是会有参数传递的，也可以理解为占一个位置，可以通过<strong>$route.params.id</strong>和<strong>$route.params.name</strong>获取</li>
</ol>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/login/:id/:name'</span>, <span class="hljs-attr">conponent</span>: login&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​    传递参数： 这里的实际参数id就为10，name就是username</p>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">'/login/10/username'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>路由嵌套</strong></p>
<p>​    在路由构造函数实例中的<strong>path</strong>中添加<strong>children</strong>指向子路由，组件中还有router-link指向子组件</p>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> parent = &#123;</span><br><span class="line">    template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">		&lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">			Parent</span></span><br><span class="line"><span class="hljs-string">			&lt;router-link to='/parent/son'&gt;&lt;/router-link&gt;</span></span><br><span class="line"><span class="hljs-string">		&lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">	`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="line">    route: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="hljs-string">'/parent'</span>,</span><br><span class="line">            component: parent,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'son'</span>, <span class="hljs-attr">component</span>: son&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>使用命名视图给路由组件添加名称，方便给每个组件渲染样式</strong></p>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'app'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'left'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'main'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> header = &#123;</span><br><span class="line">    template: <span class="hljs-string">'&lt;h1&gt;顶部&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> leftBox = &#123;</span><br><span class="line">    template: <span class="hljs-string">'&lt;h1&gt;左侧侧边栏&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> rightBox = &#123;</span><br><span class="line">    template: <span class="hljs-string">'&lt;h1&gt;主体区域&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; </span><br><span class="line">            path: <span class="hljs-string">'/'</span>, </span><br><span class="line">            components: &#123;</span><br><span class="line">                <span class="hljs-string">'default'</span>: header,</span><br><span class="line">                <span class="hljs-string">'left'</span>: leftBox,</span><br><span class="line">                <span class="hljs-string">'main'</span>: rightBox</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">    router: router,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 笔记 Day1</title>
    <url>/2020/03/13/vue-heima-1/</url>
    <content><![CDATA[<p>黑马的课堂笔记总结，总共五天。附上Vue生命周期图</p>
<div align="center">
    <img src="/images/lifecycle.png" alt="生命周期">
</div>
<a id="more"></a>
<h1 align="center" style="color: red;">Day1</h1>
# Vue.js - Day1

<h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><p>前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>后5天： 以项目驱动教学；</p>
<h3 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h3><ul>
<li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p>
</li>
<li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>
</li>
<li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p>
</li>
<li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>
</li>
</ul>
<h2 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h2><ul>
<li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；<ul>
<li>企业中，使用框架，能够提高开发的效率；</li>
</ul>
</li>
</ul>
<ul>
<li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li>
<li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li>
</ul>
<ul>
<li>增强自己就业时候的竞争力<ul>
<li>人无我有，人有我优</li>
<li>你平时不忙的时候，都在干嘛？</li>
</ul>
</li>
</ul>
<h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul>
<li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p>
<ul>
<li>node 中的 express；</li>
</ul>
</li>
</ul>
<ul>
<li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。<ul>
<li><ol>
<li>从Jquery 切换到 Zepto</li>
</ol>
</li>
<li><ol start="2">
<li>从 EJS 切换到 art-template</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul>
<li><p>MVC 是后端的分层开发概念；</p>
</li>
<li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p>
</li>
<li><p>为什么有了MVC还要有MVVM</p>
</li>
</ul>
<h2 id="Vue-js-基本代码-和-MVVM-之间的对应关系"><a href="#Vue-js-基本代码-和-MVVM-之间的对应关系" class="headerlink" title="Vue.js 基本代码 和 MVVM 之间的对应关系"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h2><h2 id="Vue之-基本的代码结构和插值表达式、v-cloak"><a href="#Vue之-基本的代码结构和插值表达式、v-cloak" class="headerlink" title="Vue之 - 基本的代码结构和插值表达式、v-cloak"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id="Vue指令之v-text和v-html"><a href="#Vue指令之v-text和v-html" class="headerlink" title="Vue指令之v-text和v-html"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><h2 id="Vue指令之v-bind的三种用法"><a href="#Vue指令之v-bind的三种用法" class="headerlink" title="Vue指令之v-bind的三种用法"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol>
<li><p>直接使用指令<code>v-bind</code></p>
</li>
<li><p>使用简化指令<code>:</code></p>
</li>
<li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p>
</li>
</ol>
<h2 id="Vue指令之v-on和跑马灯效果"><a href="#Vue指令之v-on和跑马灯效果" class="headerlink" title="Vue指令之v-on和跑马灯效果"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h2><h3 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h3><ol>
<li>HTML结构：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;开启&quot; v-on:click=&quot;go&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;停止&quot; v-on:click=&quot;stop&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Vue实例：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 创建 Vue 实例，得到 ViewModel</span><br><span class="line"></span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">     el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">       info: &apos;猥琐发育，别浪~！&apos;,</span><br><span class="line"></span><br><span class="line">       intervalId: null</span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">     methods: &#123;</span><br><span class="line"></span><br><span class="line">       go() &#123;</span><br><span class="line"></span><br><span class="line">         // 如果当前有定时器在运行，则直接return</span><br><span class="line"></span><br><span class="line">         if (this.intervalId != null) &#123;</span><br><span class="line"></span><br><span class="line">           return;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // 开始定时器</span><br><span class="line"></span><br><span class="line">         this.intervalId = setInterval(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">           this.info = this.info.substring(1) + this.info.substring(0, 1);</span><br><span class="line"></span><br><span class="line">         &#125;, 500);</span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line">       stop() &#123;</span><br><span class="line"></span><br><span class="line">         clearInterval(this.intervalId);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Vue指令之v-on的缩写和事件修饰符"><a href="#Vue指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue指令之v-on的缩写和事件修饰符"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h3><ul>
<li><p>.stop       阻止冒泡</p>
</li>
<li><p>.prevent    阻止默认事件</p>
</li>
<li><p>.capture    添加事件侦听器时使用事件捕获模式</p>
</li>
<li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p>
</li>
<li><p>.once       事件只触发一次</p>
</li>
</ul>
<h2 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id="简易计算器案例"><a href="#简易计算器案例" class="headerlink" title="简易计算器案例"></a>简易计算器案例</h2><ol>
<li>HTML 代码结构</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;select v-model=&quot;opt&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=&quot;0&quot;&gt;+&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=&quot;1&quot;&gt;-&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=&quot;2&quot;&gt;*&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=&quot;3&quot;&gt;÷&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;=&quot; v-on:click=&quot;getResult&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Vue实例代码：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 创建 Vue 实例，得到 ViewModel</span><br><span class="line"></span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">     el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">       n1: 0,</span><br><span class="line"></span><br><span class="line">       n2: 0,</span><br><span class="line"></span><br><span class="line">       result: 0,</span><br><span class="line"></span><br><span class="line">       opt: &apos;0&apos;</span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">     methods: &#123;</span><br><span class="line"></span><br><span class="line">       getResult() &#123;</span><br><span class="line"></span><br><span class="line">         switch (this.opt) &#123;</span><br><span class="line"></span><br><span class="line">           case &apos;0&apos;:</span><br><span class="line"></span><br><span class="line">             this.result = parseInt(this.n1) + parseInt(this.n2);</span><br><span class="line"></span><br><span class="line">             break;</span><br><span class="line"></span><br><span class="line">           case &apos;1&apos;:</span><br><span class="line"></span><br><span class="line">             this.result = parseInt(this.n1) - parseInt(this.n2);</span><br><span class="line"></span><br><span class="line">             break;</span><br><span class="line"></span><br><span class="line">           case &apos;2&apos;:</span><br><span class="line"></span><br><span class="line">             this.result = parseInt(this.n1) * parseInt(this.n2);</span><br><span class="line"></span><br><span class="line">             break;</span><br><span class="line"></span><br><span class="line">           case &apos;3&apos;:</span><br><span class="line"></span><br><span class="line">             this.result = parseInt(this.n1) / parseInt(this.n2);</span><br><span class="line"></span><br><span class="line">             break;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h2><h3 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h3><ol>
<li><p>数组</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组中使用三元表达式</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;, isactive?&apos;active&apos;:&apos;&apos;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组中嵌套对象</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;, &#123;&apos;active&apos;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接使用对象</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;h1 :class=&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h3><ol>
<li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;h1 :style=&quot;&#123;color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;&#125;&quot;&gt;这是一个善良的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p>
<ul>
<li><p>在data上定义样式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;, &apos;font-weight&apos;: &apos;200&apos; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;h1 :style=&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p>
<ul>
<li><p>在data上定义样式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;, &apos;font-weight&apos;: &apos;200&apos; &#125;,</span><br><span class="line">        h1StyleObj2: &#123; fontStyle: &apos;italic&apos; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;h1 :style=&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h2 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol>
<li>迭代数组</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>迭代对象中的属性</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div v-for=&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>迭代数字</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;p v-for=&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p>
</blockquote>
<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p>
<p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p>
<h2 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><blockquote>
<p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p>
</blockquote>
<h2 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h2><h3 id="添加新品牌"><a href="#添加新品牌" class="headerlink" title="添加新品牌"></a>添加新品牌</h3><h3 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h3><h3 id="根据条件筛选品牌"><a href="#根据条件筛选品牌" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h3><ol>
<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>
</ol>
<p><a href="https://v1-cn.vuejs.org/api/#filterBy" target="_blank" rel="noopener">filterBy - 指令</a></p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tr v-for=&quot;item in list | filterBy searchName in &apos;name&apos;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="noopener">手动实现筛选的方式</a>：</li>
</ol>
<ul>
<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>
</ul>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;hr&gt; 输入筛选名称：</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>
</ul>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tr v-for=&quot;item in search(searchName)&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/tbody&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>
</ul>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">search(name) &#123;</span><br><span class="line"></span><br><span class="line">  return this.list.filter(x =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    return x.name.indexOf(name) != -1;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vue调试工具vue-devtools的安装步骤和使用"><a href="#Vue调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>
<h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol>
<li>HTML元素：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&apos;yyyy-mm-dd&apos;)&#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>私有 <code>filters</code> 定义方式：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">filters: &#123; // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class="line"></span><br><span class="line">    dataFormat(input, pattern = &quot;&quot;) &#123; // 在参数列表中 通过 pattern=&quot;&quot; 来指定形参默认值，防止报错</span><br><span class="line"></span><br><span class="line">      var dt = new Date(input);</span><br><span class="line"></span><br><span class="line">      // 获取年月日</span><br><span class="line"></span><br><span class="line">      var y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">      var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">      var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">      // 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">      if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</span><br><span class="line"></span><br><span class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</span><br><span class="line"></span><br><span class="line">      &#125; else &#123;</span><br><span class="line"></span><br><span class="line">        // 获取时分秒</span><br><span class="line"></span><br><span class="line">        var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">        var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">        var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>
</blockquote>
<h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 定义一个全局过滤器</span><br><span class="line"></span><br><span class="line">Vue.filter(&apos;dataFormat&apos;, function (input, pattern = &apos;&apos;) &#123;</span><br><span class="line"></span><br><span class="line">  var dt = new Date(input);</span><br><span class="line"></span><br><span class="line">  // 获取年月日</span><br><span class="line"></span><br><span class="line">  var y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">  var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">  var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">  // 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">  if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</span><br><span class="line"></span><br><span class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    // 获取时分秒</span><br><span class="line"></span><br><span class="line">    var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">    var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">    var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>
</blockquote>
<h2 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id="1-x中自定义键盘修饰符【了解即可】"><a href="#1-x中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.directive(&apos;on&apos;).keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure>

<h3 id="2-x中自定义键盘修饰符"><a href="#2-x中自定义键盘修饰符" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" target="_blank" rel="noopener">2.x中自定义键盘修饰符</a></h3><ol>
<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.config.keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用自定义的按键修饰符：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;name&quot; @keyup.f2=&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></h2><ol>
<li>自定义全局和局部的 自定义指令：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class="line"></span><br><span class="line">Vue.directive(&apos;focus&apos;, &#123;</span><br><span class="line"></span><br><span class="line">  inserted: function (el) &#123; // inserted 表示被绑定元素插入父节点时调用</span><br><span class="line"></span><br><span class="line">    el.focus();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class="line"></span><br><span class="line">  directives: &#123;</span><br><span class="line"></span><br><span class="line">    color: &#123; // 为元素设置指定的字体颜色</span><br><span class="line"></span><br><span class="line">      bind(el, binding) &#123;</span><br><span class="line"></span><br><span class="line">        el.style.color = binding.value;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &apos;font-weight&apos;: function (el, binding2) &#123; // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class="line"></span><br><span class="line">      el.style.fontWeight = binding2.value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>自定义指令的使用方式：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot; v-focus v-color=&quot;&apos;red&apos;&quot; v-font-weight=&quot;900&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">Vue.elementDirective(&apos;red-color&apos;, &#123;</span><br><span class="line">  bind: function () &#123;</span><br><span class="line">    this.el.style.color = &apos;red&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用方式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;red-color&gt;1232&lt;/red-color&gt;</span><br></pre></td></tr></table></figure>

<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol>
<li><a href="https://v1-cn.vuejs.org/" target="_blank" rel="noopener">vue.js 1.x 文档</a></li>
<li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue.js 2.x 文档</a></li>
<li><a href="http://www.css88.com/archives/7715" target="_blank" rel="noopener">String.prototype.padStart(maxLength, fillString)</a></li>
<li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">js 里面的键盘事件对应的键码</a></li>
<li><a href="http://www.cnblogs.com/kidney/p/6052935.html" target="_blank" rel="noopener">Vue.js双向绑定的实现原理</a></li>
</ol>
<h1 align="center" style="color: red;">Day2</h1>
# Vue.js - Day2

<h2 id="品牌管理案例-1"><a href="#品牌管理案例-1" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h2><h3 id="添加新品牌-1"><a href="#添加新品牌-1" class="headerlink" title="添加新品牌"></a>添加新品牌</h3><h3 id="删除品牌-1"><a href="#删除品牌-1" class="headerlink" title="删除品牌"></a>删除品牌</h3><h3 id="根据条件筛选品牌-1"><a href="#根据条件筛选品牌-1" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h3><ol>
<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>
</ol>
<p><a href="https://v1-cn.vuejs.org/api/#filterBy" target="_blank" rel="noopener">filterBy - 指令</a></p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tr v-for=&quot;item in list | filterBy searchName in &apos;name&apos;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="noopener">手动实现筛选的方式</a>：</li>
</ol>
<ul>
<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>
</ul>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;hr&gt; 输入筛选名称：</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>
</ul>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tr v-for=&quot;item in search(searchName)&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/tbody&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>
</ul>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">search(name) &#123;</span><br><span class="line"></span><br><span class="line">  return this.list.filter(x =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    return x.name.indexOf(name) != -1;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vue调试工具vue-devtools的安装步骤和使用-1"><a href="#Vue调试工具vue-devtools的安装步骤和使用-1" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>
<h2 id="过滤器-1"><a href="#过滤器-1" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>
<h3 id="私有过滤器-1"><a href="#私有过滤器-1" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol>
<li>HTML元素：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&apos;yyyy-mm-dd&apos;)&#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>私有 <code>filters</code> 定义方式：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">filters: &#123; // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class="line"></span><br><span class="line">    dataFormat(input, pattern = &quot;&quot;) &#123; // 在参数列表中 通过 pattern=&quot;&quot; 来指定形参默认值，防止报错</span><br><span class="line"></span><br><span class="line">      var dt = new Date(input);</span><br><span class="line"></span><br><span class="line">      // 获取年月日</span><br><span class="line"></span><br><span class="line">      var y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">      var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">      var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">      // 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">      if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</span><br><span class="line"></span><br><span class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</span><br><span class="line"></span><br><span class="line">      &#125; else &#123;</span><br><span class="line"></span><br><span class="line">        // 获取时分秒</span><br><span class="line"></span><br><span class="line">        var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">        var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">        var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>
</blockquote>
<h3 id="全局过滤器-1"><a href="#全局过滤器-1" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 定义一个全局过滤器</span><br><span class="line"></span><br><span class="line">Vue.filter(&apos;dataFormat&apos;, function (input, pattern = &apos;&apos;) &#123;</span><br><span class="line"></span><br><span class="line">  var dt = new Date(input);</span><br><span class="line"></span><br><span class="line">  // 获取年月日</span><br><span class="line"></span><br><span class="line">  var y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">  var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">  var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">  // 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">  if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</span><br><span class="line"></span><br><span class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    // 获取时分秒</span><br><span class="line"></span><br><span class="line">    var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">    var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">    var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>
</blockquote>
<h2 id="键盘修饰符以及自定义键盘修饰符-1"><a href="#键盘修饰符以及自定义键盘修饰符-1" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id="1-x中自定义键盘修饰符【了解即可】-1"><a href="#1-x中自定义键盘修饰符【了解即可】-1" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.directive(&apos;on&apos;).keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure>

<h3 id="2-x中自定义键盘修饰符-1"><a href="#2-x中自定义键盘修饰符-1" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" target="_blank" rel="noopener">2.x中自定义键盘修饰符</a></h3><ol>
<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.config.keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用自定义的按键修饰符：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;name&quot; @keyup.f2=&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义指令-1"><a href="#自定义指令-1" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></h2><ol>
<li>自定义全局和局部的 自定义指令：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class="line"></span><br><span class="line">Vue.directive(&apos;focus&apos;, &#123;</span><br><span class="line"></span><br><span class="line">  inserted: function (el) &#123; // inserted 表示被绑定元素插入父节点时调用</span><br><span class="line"></span><br><span class="line">    el.focus();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class="line"></span><br><span class="line">  directives: &#123;</span><br><span class="line"></span><br><span class="line">    color: &#123; // 为元素设置指定的字体颜色</span><br><span class="line"></span><br><span class="line">      bind(el, binding) &#123;</span><br><span class="line"></span><br><span class="line">        el.style.color = binding.value;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &apos;font-weight&apos;: function (el, binding2) &#123; // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class="line"></span><br><span class="line">      el.style.fontWeight = binding2.value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>自定义指令的使用方式：</li>
</ol>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot; v-focus v-color=&quot;&apos;red&apos;&quot; v-font-weight=&quot;900&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】-1"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】-1" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">Vue.elementDirective(&apos;red-color&apos;, &#123;</span><br><span class="line">  bind: function () &#123;</span><br><span class="line">    this.el.style.color = &apos;red&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用方式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;red-color&gt;1232&lt;/red-color&gt;</span><br></pre></td></tr></table></figure>

<h2 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#实例生命周期" target="_blank" rel="noopener">vue实例的生命周期</a></h2><ul>
<li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li>
<li><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</li>
<li>生命周期钩子 = 生命周期函数 = 生命周期事件</li>
<li>主要的生命周期函数分类：<ul>
<li>创建期间的生命周期函数：<ul>
<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li>
<li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li>
<li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>
<li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li>
</ul>
</li>
<li>运行期间的生命周期函数：<ul>
<li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>
<li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li>
</ul>
</li>
<li>销毁期间的生命周期函数：<ul>
<li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li>
<li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="vue-resource-实现-get-post-jsonp请求"><a href="#vue-resource-实现-get-post-jsonp请求" class="headerlink" title="vue-resource 实现 get, post, jsonp请求"></a><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p>
<ol>
<li><p>之前的学习中，如何发起数据请求？</p>
</li>
<li><p>常见的数据请求类型？  get  post jsonp</p>
</li>
<li><p>测试的URL请求资源地址：</p>
<ul>
<li>get请求地址： <a href="http://vue.studyit.io/api/getlunbo" target="_blank" rel="noopener">http://vue.studyit.io/api/getlunbo</a></li>
<li>post请求地址：<a href="http://vue.studyit.io/api/post" target="_blank" rel="noopener">http://vue.studyit.io/api/post</a></li>
<li>jsonp请求地址：<a href="http://vue.studyit.io/api/jsonp" target="_blank" rel="noopener">http://vue.studyit.io/api/jsonp</a></li>
</ul>
</li>
<li><p>JSONP的实现原理</p>
<ul>
<li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li>
<li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li>
<li>具体实现过程：<ul>
<li>先在客户端定义一个回调方法，预定义对数据的操作；</li>
<li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li>
<li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li>
<li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li>
</ul>
</li>
<li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">// 导入解析 URL 地址的核心模块</span><br><span class="line">const urlModule = require(&apos;url&apos;);</span><br><span class="line"></span><br><span class="line">const server = http.createServer();</span><br><span class="line">// 监听 服务器的 request 请求事件，处理每个请求</span><br><span class="line">server.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  const url = req.url;</span><br><span class="line"></span><br><span class="line">  // 解析客户端请求的URL地址</span><br><span class="line">  var info = urlModule.parse(url, true);</span><br><span class="line"></span><br><span class="line">  // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据</span><br><span class="line">  if (info.pathname === &apos;/getjsonp&apos;) &#123;</span><br><span class="line">    // 获取客户端指定的回调函数的名称</span><br><span class="line">    var cbName = info.query.callback;</span><br><span class="line">    // 手动拼接要返回给客户端的数据对象</span><br><span class="line">    var data = &#123;</span><br><span class="line">      name: &apos;zs&apos;,</span><br><span class="line">      age: 22,</span><br><span class="line">      gender: &apos;男&apos;,</span><br><span class="line">      hobby: [&apos;吃饭&apos;, &apos;睡觉&apos;, &apos;运动&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">    // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class="line">    var result = `$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)`;</span><br><span class="line">    // 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class="line">    res.end(result);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    res.end(&apos;404&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;server running at http://127.0.0.1:3000&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>vue-resource 的配置步骤：</p>
<ul>
<li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li>
<li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li>
</ul>
</li>
<li><p>发送get请求：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">getInfo() &#123; // get 方式获取数据</span><br><span class="line">  this.$http.get(&apos;http://127.0.0.1:8899/api/getlunbo&apos;).then(res =&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送post请求：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">postInfo() &#123;</span><br><span class="line">  var url = &apos;http://127.0.0.1:8899/api/post&apos;;</span><br><span class="line">  // post 方法接收三个参数：</span><br><span class="line">  // 参数1： 要请求的URL地址</span><br><span class="line">  // 参数2： 要发送的数据对象</span><br><span class="line">  // 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded</span><br><span class="line">  this.$http.post(url, &#123; name: &apos;zs&apos; &#125;, &#123; emulateJSON: true &#125;).then(res =&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送JSONP请求获取数据：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">jsonpInfo() &#123; // JSONP形式从服务器获取数据</span><br><span class="line">  var url = &apos;http://127.0.0.1:8899/api/jsonp&apos;;</span><br><span class="line">  this.$http.jsonp(url).then(res =&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="配置本地数据库和数据接口API"><a href="#配置本地数据库和数据接口API" class="headerlink" title="配置本地数据库和数据接口API"></a>配置本地数据库和数据接口API</h2><ol>
<li>先解压安装 <code>PHPStudy</code>;</li>
<li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li>
<li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li>
<li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li>
<li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li>
<li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li>
<li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li>
</ol>
<h2 id="品牌管理改造"><a href="#品牌管理改造" class="headerlink" title="品牌管理改造"></a>品牌管理改造</h2><h3 id="展示品牌列表"><a href="#展示品牌列表" class="headerlink" title="展示品牌列表"></a>展示品牌列表</h3><h3 id="添加品牌数据"><a href="#添加品牌数据" class="headerlink" title="添加品牌数据"></a>添加品牌数据</h3><h3 id="删除品牌数据"><a href="#删除品牌数据" class="headerlink" title="删除品牌数据"></a>删除品牌数据</h3><h2 id="Vue中的动画"><a href="#Vue中的动画" class="headerlink" title="Vue中的动画"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">Vue中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p>
<h3 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h3><ol>
<li><p>HTML结构：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;动起来&quot; @click=&quot;myAnimate&quot;&gt;</span><br><span class="line">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class="line">    &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">      &lt;div v-show=&quot;isshow&quot;&gt;动画哦&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>VM 实例：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 创建 Vue 实例，得到 ViewModel</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    isshow: false</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myAnimate() &#123;</span><br><span class="line">      this.isshow = !this.isshow;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义两组类样式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">/* 定义进入和离开时候的过渡状态 */</span><br><span class="line">    .fade-enter-active,</span><br><span class="line">    .fade-leave-active &#123;</span><br><span class="line">      transition: all 0.2s ease;</span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 定义进入过渡的开始状态 和 离开过渡的结束状态 */</span><br><span class="line">    .fade-enter,</span><br><span class="line">    .fade-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateX(100px);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="使用第三方-CSS-动画库"><a href="#使用第三方-CSS-动画库" class="headerlink" title="使用第三方 CSS 动画库"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名" target="_blank" rel="noopener">使用第三方 CSS 动画库</a></h3><ol>
<li><p>导入动画类库：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./lib/animate.css&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义 transition 及属性：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">	enter-active-class=&quot;fadeInRight&quot;</span><br><span class="line">    leave-active-class=&quot;fadeOutRight&quot;</span><br><span class="line">    :duration=&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class="line">  	&lt;div class=&quot;animated&quot; v-show=&quot;isshow&quot;&gt;动画哦&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h3><ol>
<li><p>定义 transition 组件以及三个钩子函数：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;切换动画&quot; @click=&quot;isshow = !isshow&quot;&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">    @before-enter=&quot;beforeEnter&quot;</span><br><span class="line">    @enter=&quot;enter&quot;</span><br><span class="line">    @after-enter=&quot;afterEnter&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;isshow&quot; class=&quot;show&quot;&gt;OK&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义三个 methods 钩子方法：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        beforeEnter(el) &#123; // 动画进入之前的回调</span><br><span class="line">          el.style.transform = &apos;translateX(500px)&apos;;</span><br><span class="line">        &#125;,</span><br><span class="line">        enter(el, done) &#123; // 动画进入完成时候的回调</span><br><span class="line">          el.offsetWidth;</span><br><span class="line">          el.style.transform = &apos;translateX(0px)&apos;;</span><br><span class="line">          done();</span><br><span class="line">        &#125;,</span><br><span class="line">        afterEnter(el) &#123; // 动画进入完成之后的回调</span><br><span class="line">          this.isshow = !this.isshow;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义动画过渡时长和样式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">.show&#123;</span><br><span class="line">      transition: all 0.4s ease;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡" target="_blank" rel="noopener">v-for 的列表过渡</a></h3><ol>
<li><p>定义过渡样式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .list-enter,</span><br><span class="line">    .list-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(10px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .list-enter-active,</span><br><span class="line">    .list-leave-active &#123;</span><br><span class="line">      transition: all 0.3s ease;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;txt&quot; @keyup.enter=&quot;add&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;transition-group tag=&quot;ul&quot; name=&quot;list&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, i) in list&quot; :key=&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/transition-group&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义 VM中的结构：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 创建 Vue 实例，得到 ViewModel</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    txt: &apos;&apos;,</span><br><span class="line">    list: [1, 2, 3, 4]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.list.push(this.txt);</span><br><span class="line">      this.txt = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p>
<ul>
<li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">.v-move&#123;</span><br><span class="line">  transition: all 0.8s ease;</span><br><span class="line">&#125;</span><br><span class="line">.v-leave-active&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="相关文章-1"><a href="#相关文章-1" class="headerlink" title="相关文章"></a>相关文章</h2><ol>
<li><a href="https://v1-cn.vuejs.org/" target="_blank" rel="noopener">vue.js 1.x 文档</a></li>
<li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue.js 2.x 文档</a></li>
<li><a href="http://www.css88.com/archives/7715" target="_blank" rel="noopener">String.prototype.padStart(maxLength, fillString)</a></li>
<li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">js 里面的键盘事件对应的键码</a></li>
<li><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">pagekit/vue-resource</a></li>
<li><a href="https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html" target="_blank" rel="noopener">navicat如何导入sql文件和导出sql文件</a></li>
<li><a href="http://cubic-bezier.com/#.4,-0.3,1,.33" target="_blank" rel="noopener">贝塞尔在线生成器</a></li>
</ol>
<h1 align="center" style="color: red;">Day3</h1>
# Vue.js - Day3

<h2 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p>
<ul>
<li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li>
<li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h3><ol>
<li>使用 Vue.extend 配合 Vue.component 方法：<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">    Vue.component(&apos;login&apos;, login);</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<ol start="2">
<li><p>直接使用 Vue.component 方法：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;register&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将模板字符串，定义到script标签种：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;script id=&quot;tmpl&quot; type=&quot;x-template&quot;&gt;</span><br><span class="line">      &lt;div&gt;&lt;a href=&quot;#&quot;&gt;登录&lt;/a&gt; | &lt;a href=&quot;#&quot;&gt;注册&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>同时，需要使用 Vue.component 来定义组件：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;account&apos;, &#123;</span><br><span class="line">      template: &apos;#tmpl&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p>
</blockquote>
<h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3><ol>
<li><p>在组件中，<code>data</code>需要被定义为一个方法，例如：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;account&apos;, &#123;</span><br><span class="line">      template: &apos;#tmpl&apos;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          msg: &apos;大家好！&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        login()&#123;</span><br><span class="line">          alert(&apos;点击了登录按钮&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</p>
</li>
</ol>
<h3 id="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"><a href="#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象" class="headerlink" title="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol>
<li>通过计数器案例演示</li>
</ol>
<h3 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用<code>components</code>属性定义局部子组件</h3><ol>
<li><p>组件实例定义方式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123; // 定义子组件</span><br><span class="line">        account: &#123; // account 组件</span><br><span class="line">          template: &apos;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;login&gt;&lt;/login&gt;&lt;/div&gt;&apos;, // 在这里使用定义的子组件</span><br><span class="line">          components: &#123; // 定义子组件的子组件</span><br><span class="line">            login: &#123; // login 组件</span><br><span class="line">              template: &quot;&lt;h3&gt;这是登录组件&lt;/h3&gt;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用组件：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;account&gt;&lt;/account&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用flag标识符结合v-if和v-else切换组件"><a href="#使用flag标识符结合v-if和v-else切换组件" class="headerlink" title="使用flag标识符结合v-if和v-else切换组件"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol>
<li><p>页面结构：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;flag=!flag&quot;&gt;</span><br><span class="line">    &lt;my-com1 v-if=&quot;flag&quot;&gt;&lt;/my-com1&gt;</span><br><span class="line">    &lt;my-com2 v-else=&quot;flag&quot;&gt;&lt;/my-com2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue实例定义：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&apos;myCom1&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h3&gt;奔波霸&lt;/h3&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&apos;myCom2&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h3&gt;霸波奔&lt;/h3&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: true</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用-is属性来切换不同的子组件-并添加切换动画"><a href="#使用-is属性来切换不同的子组件-并添加切换动画" class="headerlink" title="使用:is属性来切换不同的子组件,并添加切换动画"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol>
<li><p>组件实例定义方式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 登录组件</span><br><span class="line">  const login = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;登录组件&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&apos;login&apos;, login);</span><br><span class="line"></span><br><span class="line">  // 注册组件</span><br><span class="line">  const register = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;注册组件&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&apos;register&apos;, register);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123; comName: &apos;login&apos; &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;#&quot; @click.prevent=&quot;comName=&apos;login&apos;&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;#&quot; @click.prevent=&quot;comName=&apos;register&apos;&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;transition mode=&quot;out-in&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加切换样式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .v-enter,</span><br><span class="line">  .v-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(30px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .v-enter-active,</span><br><span class="line">  .v-leave-active &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    transition: all 0.3s ease;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol>
<li><p>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &apos;这是父组件中的消息&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        son: &#123;</span><br><span class="line">          template: &apos;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;/h1&gt;&apos;,</span><br><span class="line">          props: [&apos;finfo&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;son :finfo=&quot;msg&quot;&gt;&lt;/son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol>
<li><p>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</p>
</li>
<li><p>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;son @func=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 引用父组件 --&gt;</span><br><span class="line">    &lt;son @func=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件模板定义 --&gt;</span><br><span class="line">    &lt;script type=&quot;x-template&quot; id=&quot;son&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;向父组件传值&quot; @click=&quot;sendMsg&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 子组件的定义方式</span><br><span class="line">    Vue.component(&apos;son&apos;, &#123;</span><br><span class="line">      template: &apos;#son&apos;, // 组件模板Id</span><br><span class="line">      methods: &#123;</span><br><span class="line">        sendMsg() &#123; // 按钮的点击事件</span><br><span class="line">          this.$emit(&apos;func&apos;, &apos;OK&apos;); // 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getMsg(val)&#123; // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class="line">          alert(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>
<h2 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;获取元素内容&quot; @click=&quot;getElement&quot; /&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class="line">    &lt;h1 ref=&quot;myh1&quot;&gt;这是一个大大的H1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class="line">    &lt;my-com ref=&quot;mycom&quot;&gt;&lt;/my-com&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(&apos;my-com&apos;, &#123;</span><br><span class="line">    template: &apos;&lt;h5&gt;这是一个子组件&lt;/h5&gt;&apos;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &apos;子组件&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line">        // 通过 this.$refs 来获取元素</span><br><span class="line">        console.log(this.$refs.myh1.innerText);</span><br><span class="line">        // 通过 this.$refs 来获取组件</span><br><span class="line">        console.log(this.$refs.mycom.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><ol>
<li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>
</li>
<li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>
</li>
<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>
</li>
</ol>
<h2 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h2><ol>
<li><p>导入 vue-router 组件类库：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class="line">  &lt;script src=&quot;./lib/vue-router-2.7.0.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 router-link 组件来导航</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 router-view 组件来显示匹配到的组件</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建使用<code>Vue.extend</code>创建组件</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 4.1 使用 Vue.extend 来创建登录组件</span><br><span class="line">var login = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 4.2 使用 Vue.extend 来创建注册组件</span><br><span class="line">var register = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &apos;/login&apos;, component: login &#125;,</span><br><span class="line">        &#123; path: &apos;/register&apos;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 router 属性来使用路由规则</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 6. 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      router: router // 使用 router 属性来使用路由规则</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h2><h2 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h2><h2 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h2><ol>
<li><p>在规则中定义参数：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&#123; path: &apos;/register/:id&apos;, component: register &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <code>this.$route.params</code>来获取路由中的参数：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;router-link to=&quot;/account&quot;&gt;Account&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 父路由中的组件</span><br><span class="line">  const account = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      这是account组件</span><br><span class="line">      &lt;router-link to=&quot;/account/login&quot;&gt;login&lt;/router-link&gt; | </span><br><span class="line">      &lt;router-link to=&quot;/account/register&quot;&gt;register&lt;/router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 子路由中的 login 组件</span><br><span class="line">  const login = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;登录组件&lt;/div&gt;&apos;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 子路由中的 register 组件</span><br><span class="line">  const register = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;注册组件&lt;/div&gt;&apos;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 路由实例</span><br><span class="line">  var router = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      &#123; path: &apos;/&apos;, redirect: &apos;/account/login&apos; &#125;, // 使用 redirect 实现路由重定向</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/account&apos;,</span><br><span class="line">        component: account,</span><br><span class="line">        children: [ // 通过 children 数组属性，来实现路由的嵌套</span><br><span class="line">          &#123; path: &apos;login&apos;, component: login &#125;, // 注意，子路由的开头位置，不要加 / 路径符</span><br><span class="line">          &#123; path: &apos;register&apos;, component: register &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      account</span><br><span class="line">    &#125;,</span><br><span class="line">    router: router</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h2><ol>
<li><p>标签代码结构：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;router-view name=&quot;a&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;router-view name=&quot;b&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JS代码：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var header = Vue.component(&apos;header&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;header&quot;&gt;header&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var sidebar = Vue.component(&apos;sidebar&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;sidebar&quot;&gt;sidebar&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var mainbox = Vue.component(&apos;mainbox&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;mainbox&quot;&gt;mainbox&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建路由对象</span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &apos;/&apos;, components: &#123;</span><br><span class="line">            default: header,</span><br><span class="line">            a: sidebar,</span><br><span class="line">            b: mainbox</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>CSS 样式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .header &#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    border: 1px solid green;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  .mainbox&#123;</span><br><span class="line">    flex: 8;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>
<ol>
<li><p>监听<code>data</code>中属性的改变：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;,</span><br><span class="line">        fullName: &apos;jack - chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;firstName&apos;: function (newVal, oldVal) &#123; // 第一个参数是新数据，第二个参数是旧数据</span><br><span class="line">          this.fullName = newVal + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;lastName&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          this.fullName = this.firstName + &apos; - &apos; + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听路由对象的改变：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &quot;/login&quot;, component: login &#125;,</span><br><span class="line">        &#123; path: &quot;/register&quot;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: router,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;$route&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          if (newVal.path === &apos;/login&apos;) &#123;</span><br><span class="line">            console.log(&apos;这是登录组件&apos;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h2><ol>
<li><p>默认只有<code>getter</code>的计算属性：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="line">        fullName() &#123;</span><br><span class="line">          return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义有<code>getter</code>和<code>setter</code>的计算属性：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;修改fullName&quot; @click=&quot;changeName&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          this.fullName = &apos;TOM - chen2&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          get: function () &#123;</span><br><span class="line">            return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: function (newVal) &#123;</span><br><span class="line">            var parts = newVal.split(&apos; - &apos;);</span><br><span class="line">            this.firstName = parts[0];</span><br><span class="line">            this.lastName = parts[1];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>
<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>
<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>
<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>
</ol>
<h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>
<ol>
<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>
<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>
<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>
</ol>
<h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol>
<li><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="noopener">URL中的hash（井号）</a></li>
</ol>
<h1 align="center" style="color: red;">Day4</h1>
# Vue.js - Day4

<h2 id="父组件向子组件传值-1"><a href="#父组件向子组件传值-1" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol>
<li><p>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &apos;这是父组件中的消息&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        son: &#123;</span><br><span class="line">          template: &apos;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;/h1&gt;&apos;,</span><br><span class="line">          props: [&apos;finfo&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;son :finfo=&quot;msg&quot;&gt;&lt;/son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="子组件向父组件传值-1"><a href="#子组件向父组件传值-1" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol>
<li><p>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</p>
</li>
<li><p>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;son @func=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 引用父组件 --&gt;</span><br><span class="line">    &lt;son @func=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件模板定义 --&gt;</span><br><span class="line">    &lt;script type=&quot;x-template&quot; id=&quot;son&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;向父组件传值&quot; @click=&quot;sendMsg&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 子组件的定义方式</span><br><span class="line">    Vue.component(&apos;son&apos;, &#123;</span><br><span class="line">      template: &apos;#son&apos;, // 组件模板Id</span><br><span class="line">      methods: &#123;</span><br><span class="line">        sendMsg() &#123; // 按钮的点击事件</span><br><span class="line">          this.$emit(&apos;func&apos;, &apos;OK&apos;); // 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getMsg(val)&#123; // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class="line">          alert(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="组件中data和props的区别"><a href="#组件中data和props的区别" class="headerlink" title="组件中data和props的区别"></a>组件中data和props的区别</h2><h2 id="评论列表案例-1"><a href="#评论列表案例-1" class="headerlink" title="评论列表案例"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>
<h2 id="使用-this-refs-来获取元素和组件-1"><a href="#使用-this-refs-来获取元素和组件-1" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;获取元素内容&quot; @click=&quot;getElement&quot; /&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class="line">    &lt;h1 ref=&quot;myh1&quot;&gt;这是一个大大的H1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class="line">    &lt;my-com ref=&quot;mycom&quot;&gt;&lt;/my-com&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(&apos;my-com&apos;, &#123;</span><br><span class="line">    template: &apos;&lt;h5&gt;这是一个子组件&lt;/h5&gt;&apos;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &apos;子组件&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line">        // 通过 this.$refs 来获取元素</span><br><span class="line">        console.log(this.$refs.myh1.innerText);</span><br><span class="line">        // 通过 this.$refs 来获取组件</span><br><span class="line">        console.log(this.$refs.mycom.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="什么是路由-1"><a href="#什么是路由-1" class="headerlink" title="什么是路由"></a>什么是路由</h2><ol>
<li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>
</li>
<li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>
</li>
<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>
</li>
</ol>
<h2 id="在-vue-中使用-vue-router-1"><a href="#在-vue-中使用-vue-router-1" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h2><ol>
<li><p>导入 vue-router 组件类库：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class="line">  &lt;script src=&quot;./lib/vue-router-2.7.0.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 router-link 组件来导航</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 router-view 组件来显示匹配到的组件</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建使用<code>Vue.extend</code>创建组件</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 4.1 使用 Vue.extend 来创建登录组件</span><br><span class="line">var login = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 4.2 使用 Vue.extend 来创建注册组件</span><br><span class="line">var register = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &apos;/login&apos;, component: login &#125;,</span><br><span class="line">        &#123; path: &apos;/register&apos;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 router 属性来使用路由规则</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 6. 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      router: router // 使用 router 属性来使用路由规则</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用tag属性指定router-link渲染的标签类型"><a href="#使用tag属性指定router-link渲染的标签类型" class="headerlink" title="使用tag属性指定router-link渲染的标签类型"></a>使用tag属性指定router-link渲染的标签类型</h2><h2 id="设置路由重定向"><a href="#设置路由重定向" class="headerlink" title="设置路由重定向"></a>设置路由重定向</h2><h2 id="设置路由高亮-1"><a href="#设置路由高亮-1" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h2><h2 id="设置路由切换动效-1"><a href="#设置路由切换动效-1" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h2><h2 id="在路由规则中定义参数-1"><a href="#在路由规则中定义参数-1" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h2><ol>
<li><p>在规则中定义参数：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&#123; path: &apos;/register/:id&apos;, component: register &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <code>this.$route.params</code>来获取路由中的参数：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用-children-属性实现路由嵌套-1"><a href="#使用-children-属性实现路由嵌套-1" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;router-link to=&quot;/account&quot;&gt;Account&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 父路由中的组件</span><br><span class="line">  const account = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      这是account组件</span><br><span class="line">      &lt;router-link to=&quot;/account/login&quot;&gt;login&lt;/router-link&gt; | </span><br><span class="line">      &lt;router-link to=&quot;/account/register&quot;&gt;register&lt;/router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 子路由中的 login 组件</span><br><span class="line">  const login = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;登录组件&lt;/div&gt;&apos;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 子路由中的 register 组件</span><br><span class="line">  const register = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;注册组件&lt;/div&gt;&apos;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 路由实例</span><br><span class="line">  var router = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      &#123; path: &apos;/&apos;, redirect: &apos;/account/login&apos; &#125;, // 使用 redirect 实现路由重定向</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/account&apos;,</span><br><span class="line">        component: account,</span><br><span class="line">        children: [ // 通过 children 数组属性，来实现路由的嵌套</span><br><span class="line">          &#123; path: &apos;login&apos;, component: login &#125;, // 注意，子路由的开头位置，不要加 / 路径符</span><br><span class="line">          &#123; path: &apos;register&apos;, component: register &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      account</span><br><span class="line">    &#125;,</span><br><span class="line">    router: router</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="命名视图实现经典布局-1"><a href="#命名视图实现经典布局-1" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h2><ol>
<li><p>标签代码结构：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;router-view name=&quot;a&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;router-view name=&quot;b&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JS代码：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var header = Vue.component(&apos;header&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;header&quot;&gt;header&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var sidebar = Vue.component(&apos;sidebar&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;sidebar&quot;&gt;sidebar&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var mainbox = Vue.component(&apos;mainbox&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;mainbox&quot;&gt;mainbox&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建路由对象</span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &apos;/&apos;, components: &#123;</span><br><span class="line">            default: header,</span><br><span class="line">            a: sidebar,</span><br><span class="line">            b: mainbox</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>CSS 样式：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .header &#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    border: 1px solid green;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  .mainbox&#123;</span><br><span class="line">    flex: 8;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="watch属性的使用-1"><a href="#watch属性的使用-1" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>
<ol>
<li><p>监听<code>data</code>中属性的改变：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;,</span><br><span class="line">        fullName: &apos;jack - chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;firstName&apos;: function (newVal, oldVal) &#123; // 第一个参数是新数据，第二个参数是旧数据</span><br><span class="line">          this.fullName = newVal + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;lastName&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          this.fullName = this.firstName + &apos; - &apos; + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听路由对象的改变：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &quot;/login&quot;, component: login &#125;,</span><br><span class="line">        &#123; path: &quot;/register&quot;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: router,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;$route&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          if (newVal.path === &apos;/login&apos;) &#123;</span><br><span class="line">            console.log(&apos;这是登录组件&apos;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="computed计算属性的使用-1"><a href="#computed计算属性的使用-1" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h2><ol>
<li><p>默认只有<code>getter</code>的计算属性：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="line">        fullName() &#123;</span><br><span class="line">          return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义有<code>getter</code>和<code>setter</code>的计算属性：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;修改fullName&quot; @click=&quot;changeName&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          this.fullName = &apos;TOM - chen2&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          get: function () &#123;</span><br><span class="line">            return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: function (newVal) &#123;</span><br><span class="line">            var parts = newVal.split(&apos; - &apos;);</span><br><span class="line">            this.firstName = parts[0];</span><br><span class="line">            this.lastName = parts[1];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="watch、computed和methods之间的对比-1"><a href="#watch、computed和methods之间的对比-1" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>
<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>
<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>
<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>
</ol>
<h2 id="nrm的安装使用-1"><a href="#nrm的安装使用-1" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>
<ol>
<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>
<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>
<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>
</ol>
<h2 id="相关文件-1"><a href="#相关文件-1" class="headerlink" title="相关文件"></a>相关文件</h2><ol>
<li><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="noopener">URL中的hash（井号）</a></li>
</ol>
<h1 align="center" style="color: red;">Day5</h1>
# Vue.js - Day5 - Webpack

<h2 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h2><ul>
<li>JS<ul>
<li>.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）</li>
</ul>
</li>
<li>CSS<ul>
<li>.css  .less   .sass  .scss</li>
</ul>
</li>
<li>Images<ul>
<li>.jpg   .png   .gif   .bmp   .svg</li>
</ul>
</li>
<li>字体文件（Fonts）<ul>
<li>.svg   .ttf   .eot   .woff   .woff2</li>
</ul>
</li>
<li>模板文件<ul>
<li>.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】</li>
</ul>
</li>
</ul>
<h2 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol>
<li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li>
<li>要处理错综复杂的依赖关系</li>
</ol>
<h2 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h2><ol>
<li>合并、压缩、精灵图、图片的Base64编码</li>
<li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li>
</ol>
<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack?"></a>什么是webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p>
<h2 id="如何完美实现上述的2种解决方案"><a href="#如何完美实现上述的2种解决方案" class="headerlink" title="如何完美实现上述的2种解决方案"></a>如何完美实现上述的2种解决方案</h2><ol>
<li>使用Gulp， 是基于 task 任务的；</li>
<li>使用Webpack， 是基于整个项目进行构建的；</li>
</ol>
<ul>
<li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li>
<li>根据官网的图片介绍webpack打包的过程</li>
<li><a href="http://webpack.github.io/" target="_blank" rel="noopener">webpack官网</a></li>
</ul>
<h2 id="webpack安装的两种方式"><a href="#webpack安装的两种方式" class="headerlink" title="webpack安装的两种方式"></a>webpack安装的两种方式</h2><ol>
<li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li>
<li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li>
</ol>
<h2 id="初步使用webpack打包构建列表隔行变色案例"><a href="#初步使用webpack打包构建列表隔行变色案例" class="headerlink" title="初步使用webpack打包构建列表隔行变色案例"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol>
<li><p>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包</p>
</li>
<li><p>创建项目基本的目录结构</p>
</li>
<li><p>使用<code>cnpm i jquery --save</code>安装jquery类库</p>
</li>
<li><p>创建<code>main.js</code>并书写各行变色的代码逻辑：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 导入jquery类库</span><br><span class="line">   import $ from &apos;jquery&apos;</span><br><span class="line"></span><br><span class="line">   // 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class="line">   $(&apos;#list li:even&apos;).css(&apos;backgroundColor&apos;,&apos;lightblue&apos;);</span><br><span class="line">   // 设置奇数行背景色</span><br><span class="line">   $(&apos;#list li:odd&apos;).css(&apos;backgroundColor&apos;,&apos;pink&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</p>
</li>
<li><p>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">webpack src/js/main.js dist/bundle.js</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用webpack的配置文件简化打包时候的命令"><a href="#使用webpack的配置文件简化打包时候的命令" class="headerlink" title="使用webpack的配置文件简化打包时候的命令"></a>使用webpack的配置文件简化打包时候的命令</h2><ol>
<li>在项目根目录中创建<code>webpack.config.js</code></li>
<li>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">// 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="实现webpack的实时打包构建"><a href="#实现webpack的实时打包构建" class="headerlink" title="实现webpack的实时打包构建"></a>实现webpack的实时打包构建</h2><ol>
<li><p>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</p>
</li>
<li><p>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</p>
</li>
<li><p>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中</p>
<ul>
<li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li>
<li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li>
<li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ol>
<h2 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p>
<ol>
<li><p>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</p>
</li>
<li><p>修改<code>webpack.config.js</code>配置文件如下：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">// 导入自动生成HTMl文件的插件</span><br><span class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[ // 添加plugins节点配置插件</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            template:path.resolve(__dirname, &apos;src/index.html&apos;),//模板路径</span><br><span class="line">            filename:&apos;index.html&apos;//自动生成的HTML文件的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</p>
</li>
</ol>
<h2 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p>
<h3 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h3><ul>
<li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><ol>
<li><p>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">        hot:true,</span><br><span class="line">        open:true,</span><br><span class="line">        port:4321</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在头部引入<code>webpack</code>模块：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>plugins</code>节点下新增：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用webpack打包css文件"><a href="#使用webpack打包css文件" class="headerlink" title="使用webpack打包css文件"></a>使用webpack打包css文件</h2><ol>
<li><p>运行<code>cnpm i style-loader css-loader --save-dev</code></p>
</li>
<li><p>修改<code>webpack.config.js</code>这个配置文件：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">module: &#123; // 用来配置第三方loader模块的</span><br><span class="line">        rules: [ // 文件的匹配规则</span><br><span class="line">            &#123; test: /\.css$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;] &#125;//处理css文件的规则</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</p>
</li>
</ol>
<h2 id="使用webpack打包less文件"><a href="#使用webpack打包less文件" class="headerlink" title="使用webpack打包less文件"></a>使用webpack打包less文件</h2><ol>
<li>运行<code>cnpm i less-loader less -D</code></li>
<li>修改<code>webpack.config.js</code>这个配置文件：<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.less$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;less-loader&apos;] &#125;,</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用webpack打包sass文件"><a href="#使用webpack打包sass文件" class="headerlink" title="使用webpack打包sass文件"></a>使用webpack打包sass文件</h2><ol>
<li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li>
<li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.scss$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;] &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用webpack处理css中的路径"><a href="#使用webpack处理css中的路径" class="headerlink" title="使用webpack处理css中的路径"></a>使用webpack处理css中的路径</h2><ol>
<li><p>运行<code>cnpm i url-loader file-loader --save-dev</code></p>
</li>
<li><p>在<code>webpack.config.js</code>中添加处理url路径的loader模块：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg|gif)$/, use: &apos;url-loader&apos; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg|gif)$/, use: &apos;url-loader?limit=43960&apos; &#125;,</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用babel处理高级JS语法"><a href="#使用babel处理高级JS语法" class="headerlink" title="使用babel处理高级JS语法"></a>使用babel处理高级JS语法</h2><ol>
<li><p>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</p>
</li>
<li><p>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</p>
</li>
<li><p>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.js$/, use: &apos;babel-loader&apos;, exclude: /node_modules/ &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：</p>
<figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class="line">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></p>
</li>
</ol>
<h2 id="相关文章-2"><a href="#相关文章-2" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://segmentfault.com/p/1210000008466178" target="_blank" rel="noopener">babel-preset-env：你需要的唯一Babel插件</a><br><a href="https://segmentfault.com/a/1190000009065987" target="_blank" rel="noopener">Runtime transform 运行时编译es6</a></p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue | 自定义指令</title>
    <url>/2020/03/11/vue-directive/</url>
    <content><![CDATA[<p>效果： 通过自定义指令给渲染的文本添加颜色</p>
<p>自定义指令有两种方式：可以自定义私有`directives`或者公有指令`Vue.directive('name', {bind, inserted, updated})`</p>
<a id="more"></a>
<h4 align="center">代码</h4>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">"'red'"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">//定义全局指令</span></span></span><br><span class="line"><span class="hljs-javascript">        Vue.directive(<span class="hljs-string">'color'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">            bind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>&#123; </span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次</span></span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象</span></span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 在元素 刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用</span></span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">//  因为，一个元素，只有插入DOM之后，才能获取焦点</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">//binding为传过来的参数</span></span></span><br><span class="line">                el.style.color = binding.value</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="hljs-javascript">            inserted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;  <span class="hljs-comment">// inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】</span></span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-comment">// 和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="hljs-javascript">            updated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;  <span class="hljs-comment">// 当VNode更新的时候，会执行 updated， 可能会触发多次</span></span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">            el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="hljs-javascript">                msg: <span class="hljs-string">'Hello Vue.js'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">//定义私有指令</span></span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">// directives: &#123;</span></span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">//     'color': function (el)&#123;</span></span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">//         el.style.color = 'red'</span></span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">//     &#125;</span></span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-comment">// &#125;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 实战|列表管理</title>
    <url>/2020/03/10/vue-practice5/</url>
    <content><![CDATA[<div align="center">
    <img src="/images/carlist.gif" alt="Demo">
</div>
<p>一个针对之前所学内容做的练习，用BootStrap做的样式，学习了js中几种新的遍历数组的方法（forEach, some, filter, findIndex）</p>
<p>在渲染列表的时候，没有直接使用data中carList的内容，而是对data中的carList用自定义的search方法进行了处理得到的返回值，便于查找</p>
<p>由于初始化时搜索的输入框没有内容，所以可以吧carList中的全部内容渲染到table里，当输入框输入了内容，table里渲染的内容就是在carList中匹配到的数据，这样搜索功能就实现了</p>
---
<a id="more"></a>
<h4 align="center">源码</h4>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"lib/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-class">.l1</span>&#123;</span></span><br><span class="line">            margin-left: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        button&#123;</span><br><span class="line">            margin-left: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-css">        <span class="hljs-selector-class">.panel-body</span>&#123;</span></span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">v-cloak</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-heading"</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-title"</span>&gt;</span>CarList<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-body form-inline"</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"l1"</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-right: 10px;"</span>&gt;</span>Id: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'id'</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">""</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"l1"</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-right: 10px;"</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> </span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'name'</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'add'</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">""</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"l1"</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-right: 10px;"</span>&gt;</span>Search:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'keywords'</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table table-bordered table-hover"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>添加时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">                <span class="hljs-comment">&lt;!--第一种，直接从data里的carList获取数据--&gt;</span></span><br><span class="line">                <span class="hljs-comment">&lt;!-- &lt;tr v-for='(item, index) in carList'&gt;</span></span><br><span class="line"><span class="hljs-comment">                    &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="hljs-comment">                    &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="hljs-comment">                    &lt;td&gt;&#123;&#123; item.time | formatDate &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="hljs-comment">                    &lt;td&gt;</span></span><br><span class="line"><span class="hljs-comment">                        &lt;button class="btn btn-danger" @click.present='remove(index)'&gt;删除&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-comment">                    &lt;/td&gt;</span></span><br><span class="line"><span class="hljs-comment">                &lt;/tr&gt; --&gt;</span></span><br><span class="line">                <span class="hljs-comment">&lt;!--第二种，自定义一个search方法，同时把搜索的</span></span><br><span class="line"><span class="hljs-comment">                    关键字通过传参传递给了search方法--&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">'item in search(keywords)'</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.time | formatDate &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-danger"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'remove(item.id)'</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">var</span> DateFormat = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + value : value;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            id: <span class="hljs-string">''</span>,</span><br><span class="line">            name: <span class="hljs-string">''</span>,</span><br><span class="line">            keywords: <span class="hljs-string">''</span>,</span><br><span class="line">            carList: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="hljs-number">1</span>,</span><br><span class="line">                    name: <span class="hljs-string">'宝马 M4'</span>,</span><br><span class="line">                    time: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="hljs-number">2</span>,</span><br><span class="line">                    name: <span class="hljs-string">'奔驰 C63s'</span>,</span><br><span class="line">                    time: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="hljs-number">3</span>,</span><br><span class="line">                    name: <span class="hljs-string">'奥迪 RS6 Avent'</span>,</span><br><span class="line">                    time: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        filters: &#123;</span><br><span class="line">            formatDate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">                <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">                <span class="hljs-keyword">var</span> year = date.getFullYear();</span><br><span class="line">                <span class="hljs-keyword">var</span> month = DateFormat(date.getMonth() + <span class="hljs-number">1</span>);</span><br><span class="line">                <span class="hljs-keyword">var</span> day = DateFormat(date.getDay());</span><br><span class="line">                <span class="hljs-keyword">var</span> hours = DateFormat(date.getHours());</span><br><span class="line">                <span class="hljs-keyword">var</span> minutes = DateFormat(date.getMinutes());</span><br><span class="line">                <span class="hljs-keyword">var</span> seconds = DateFormat(date.getSeconds());</span><br><span class="line"></span><br><span class="line">                <span class="hljs-comment">//ES6语法，使用占位符可以简化语句</span></span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123; year &#125;</span>-<span class="hljs-subst">$&#123; month &#125;</span>-<span class="hljs-subst">$&#123; day &#125;</span> <span class="hljs-subst">$&#123; hours &#125;</span>:<span class="hljs-subst">$&#123; minutes &#125;</span>:<span class="hljs-subst">$&#123; seconds &#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            remove: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.carList.splice(index, <span class="hljs-number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">                <span class="hljs-keyword">var</span> car = &#123;</span><br><span class="line">                    id: <span class="hljs-keyword">this</span>.id,</span><br><span class="line">                    name: <span class="hljs-keyword">this</span>.name,</span><br><span class="line">                    time: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.id == <span class="hljs-string">''</span> || <span class="hljs-keyword">this</span>.name == <span class="hljs-string">''</span>)&#123;</span><br><span class="line">                    alert(<span class="hljs-string">'请输入内容！'</span>);</span><br><span class="line">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">this</span>.carList.push(car);</span><br><span class="line">                    <span class="hljs-keyword">this</span>.id = <span class="hljs-string">''</span>;</span><br><span class="line">                    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">''</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            search: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">keywords</span>)</span>&#123;</span><br><span class="line">                <span class="hljs-comment">//注意： forEach, some, filter, findIndex 这些都是属于数组的新方法，</span></span><br><span class="line">                <span class="hljs-comment">//都会对数组中的每一项进项遍历，执行相关操作</span></span><br><span class="line">                <span class="hljs-comment">// 第一种遍历方法</span></span><br><span class="line">                <span class="hljs-comment">// var newList = [];</span></span><br><span class="line">                <span class="hljs-comment">// this.carList.forEach(item =&gt; &#123;</span></span><br><span class="line">                <span class="hljs-comment">//     if(item.name.indexOf(keywords) != -1)&#123;</span></span><br><span class="line">                <span class="hljs-comment">//         newList.push(item);</span></span><br><span class="line">                <span class="hljs-comment">//     &#125;</span></span><br><span class="line">                <span class="hljs-comment">// &#125;);</span></span><br><span class="line">                <span class="hljs-comment">// return newList;</span></span><br><span class="line">                <span class="hljs-comment">// 第二种遍历方法</span></span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.carList.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span>(item.name.includes(keywords))&#123;</span><br><span class="line">                        <span class="hljs-keyword">return</span> item;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue实战 | 输入框组件</title>
    <url>/2020/03/04/vue-practice4/</url>
    <content><![CDATA[<p align="left"><span style="color: hotpink">笔记：</span>在index-number.js中Vue组件内的watch里，每个成员的方法自带两个参数，前面是新的值，后面是旧的值，如下图所示</p>
<div align="center">
    <img src="/images/vue-note/watch_note1.png" alt="示例">
</div>
<p align="left"><span style="color: hotpink">收获：</span>组件内的数据是用props里定义的变量来传递，相当于一个中间人。</p>
<p>点击下面<span style="color: red">阅读更多</span>查看代码</p>
<a id="more"></a>
<center>index.html</center>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">input-number</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'value'</span> <span class="hljs-attr">:max</span>=<span class="hljs-string">'10'</span> <span class="hljs-attr">:min</span>=<span class="hljs-string">'0'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input-number</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../../../lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"index-number.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"index.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<center>index.js</center>

<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        value: <span class="hljs-number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<center>index-number.js</center>

<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValueNumber</span>(<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-regexp">/(^-?[0-9]+\.&#123;1&#125;\d+$) | (^-?[1-9][0-9]*$) | (^-?0&#123;1&#125;$)/</span>).test(value + <span class="hljs-string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Vue.component(<span class="hljs-string">'input-number'</span>, &#123;</span><br><span class="line">    template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">        &lt;div class='input-number'&gt;</span></span><br><span class="line"><span class="hljs-string">            &lt;input type='text' :value='currentValue' @change='handleChange'/&gt;</span></span><br><span class="line"><span class="hljs-string">            &lt;button @click='handleDown' :disable='currentValue &lt;= min'&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">            &lt;button @click='handleUp' :disable='currentValue &gt;= min'&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">    `</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        max: &#123;</span><br><span class="line">            type: <span class="hljs-built_in">Number</span>,</span><br><span class="line">            <span class="hljs-keyword">default</span>: <span class="hljs-literal">Infinity</span></span><br><span class="line">        &#125;,</span><br><span class="line">        min: &#123;</span><br><span class="line">            type: <span class="hljs-built_in">Number</span>,</span><br><span class="line">            <span class="hljs-keyword">default</span>: -<span class="hljs-literal">Infinity</span></span><br><span class="line">        &#125;,</span><br><span class="line">        value: &#123;</span><br><span class="line">            type: <span class="hljs-built_in">Number</span>,</span><br><span class="line">            <span class="hljs-keyword">default</span>: <span class="hljs-number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">            currentValue: <span class="hljs-keyword">this</span>.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        currentValue: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>)</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'input'</span>, val);</span><br><span class="line">            <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'on-change'</span>, val);</span><br><span class="line">            <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'old'</span>, oldVal);</span><br><span class="line">        &#125;,</span><br><span class="line">        value: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.updateValue(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        updateValue: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>)</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-keyword">this</span>.max) val = <span class="hljs-keyword">this</span>.max;</span><br><span class="line">            <span class="hljs-keyword">if</span> (val &lt; <span class="hljs-keyword">this</span>.min) val = <span class="hljs-keyword">this</span>.min;</span><br><span class="line">            <span class="hljs-keyword">this</span>.currentValue = val; </span><br><span class="line">        &#125;,</span><br><span class="line">        handleDown: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.currentValue &lt;= <span class="hljs-keyword">this</span>.min) <span class="hljs-keyword">return</span>;</span><br><span class="line">            <span class="hljs-keyword">this</span>.currentValue -= <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        handleUp: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.currentValue &gt;= <span class="hljs-keyword">this</span>.max) <span class="hljs-keyword">return</span>;</span><br><span class="line">            <span class="hljs-keyword">this</span>.currentValue += <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        handleChange: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> val = event.target.value.trim();</span><br><span class="line">            <span class="hljs-keyword">var</span> max = <span class="hljs-keyword">this</span>.max;</span><br><span class="line">            <span class="hljs-keyword">var</span> min = <span class="hljs-keyword">this</span>.min;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span>(isValueNumber(val))&#123;</span><br><span class="line">                val = <span class="hljs-built_in">Number</span>(val);</span><br><span class="line">                <span class="hljs-keyword">this</span>.currentValue = val;</span><br><span class="line"></span><br><span class="line">                <span class="hljs-keyword">if</span>(val &gt; max)&#123;</span><br><span class="line">                    <span class="hljs-keyword">this</span>.currentValue = max;</span><br><span class="line">                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val &lt; min)&#123;</span><br><span class="line">                    <span class="hljs-keyword">this</span>.currentValue = min;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                event.target.value = <span class="hljs-keyword">this</span>.currentValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.updateValue(<span class="hljs-keyword">this</span>.value);</span><br><span class="line">        <span class="hljs-keyword">this</span>.$on(<span class="hljs-string">'old'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>)</span>&#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(val);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue slot的使用</title>
    <url>/2020/02/29/vue-slot/</url>
    <content><![CDATA[<h4 align="left">个人理解</h4>
<p align="left">slot是一个插槽，和vue使用data的数据一样，也和input的placeholder一样，一个占位符，父组件内没有东西的时候，就会显示slot的默认内容，父组件有内容就会覆盖slot的默认内容</p>
<p align="left">可以在组件模板内给每个slot一个name，当使用组件时，就可以通过slot的name来动态更新组件内容。</p>
<a id="more"></a>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.panel</span>&#123;</span></span><br><span class="line"><span class="hljs-css">			<span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#000</span>;</span></span><br><span class="line"><span class="hljs-css">			<span class="hljs-selector-tag">border-radius</span>: <span class="hljs-selector-class">.2em</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.panel</span> &gt; *&#123;</span></span><br><span class="line">			padding: 15px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="hljs-css">			<span class="hljs-selector-tag">border-bottom</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#000</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="hljs-css">			<span class="hljs-selector-tag">border-bottom</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#000</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">panel</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"title"</span>&gt;</span>This is title<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"content"</span>&gt;</span></span><br><span class="line">				Lorem ipsum, dolor sit amet consectetur adipisicing elit. Illum ex blanditiis, delectus ab, placeat deserunt fuga at suscipit numquam pariatur quia perferendis optio ea repudiandae voluptatum, nobis omnis eos tempora?</span><br><span class="line">			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"footer"</span>&gt;</span>This is footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;/<span class="hljs-name">panel</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"panel"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel"</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span></span><br><span class="line">				<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"title"</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content"</span>&gt;</span></span><br><span class="line">				<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"content"</span>&gt;</span>Content<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"footer"</span>&gt;</span></span><br><span class="line">				<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"footer"</span>&gt;</span>Footer<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'panel'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">			template: <span class="hljs-string">'#panel'</span>,</span></span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue mixins的厉害</title>
    <url>/2020/02/28/vue-mixins/</url>
    <content><![CDATA[<h4 align="left">mixins:混合</h4>
<p align="left">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>
<p align="left">一处定义，多处复用</p>
<div align="center">
    <img src="/images/vue_mixins.gif" alt="效果">
</div>
<a id="more"></a>

<hr>
<h4 align="center">使用了mixins</h4>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">popup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">popup</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">toggle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">toggle</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!----&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'popup'</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">mouseenter</span>=<span class="hljs-string">'show'</span> @<span class="hljs-attr">mouseleave</span>=<span class="hljs-string">'hide'</span>&gt;</span>HeiHei<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">'visible'</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"para"</span>&gt;</span>This is hide COntent<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'toggle'</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'isVisible'</span>&gt;</span>Visible<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">'visible'</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempora itaque nesciunt voluptates, facilis corrupti quisquam maxime numquam odio nihil amet dolorum praesentium quibusdam dolor odit qui a, fuga quod soluta?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">	<span class="hljs-comment">//声明一个名为base的对象，用来装会被复用的变量和方法，声明一次，多处使用</span></span></span><br><span class="line"><span class="hljs-javascript">	<span class="hljs-keyword">var</span> base = &#123;</span></span><br><span class="line"><span class="hljs-javascript">		data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">			<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">				visible: <span class="hljs-literal">false</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="hljs-javascript">			show:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">this</span>.visible = <span class="hljs-literal">true</span>;</span></span><br><span class="line">			&#125;,</span><br><span class="line"><span class="hljs-javascript">			hide: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">this</span>.visible = <span class="hljs-literal">false</span>;</span></span><br><span class="line">			&#125;,</span><br><span class="line"><span class="hljs-javascript">			isVisible: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">this</span>.visible = !<span class="hljs-keyword">this</span>.visible;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"><span class="hljs-javascript">	Vue.component(<span class="hljs-string">'popup'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">		template: <span class="hljs-string">'#popup'</span>,</span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-comment">//调用base对象，直接调用base内的变量和方法</span></span></span><br><span class="line">		mixins: [base]</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="hljs-javascript">	Vue.component(<span class="hljs-string">'toggle'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">		template: <span class="hljs-string">'#toggle'</span>,</span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-comment">//调用base对象，直接调用base内的变量和方法</span></span></span><br><span class="line">		mixins: [base]</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="hljs-javascript">	<span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">		el: <span class="hljs-string">'#app'</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 align="center">没有使用mixins</h4>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'popup'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">			template: <span class="hljs-string">'#popup'</span>,</span></span><br><span class="line"><span class="hljs-javascript">			data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">					visible: <span class="hljs-literal">false</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				show:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.visible = <span class="hljs-literal">true</span>;</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="hljs-javascript">				hide: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.visible = <span class="hljs-literal">false</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'toggle'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">			template: <span class="hljs-string">'#toggle'</span>,</span></span><br><span class="line"><span class="hljs-javascript">			data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">					visible: <span class="hljs-literal">false</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				isVisible: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.visible = !<span class="hljs-keyword">this</span>.visible;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span></span></span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件 | 子组件索引</title>
    <url>/2020/02/28/vue-com-child/</url>
    <content><![CDATA[<h4 style="color: #999;" align="left">Vue提供的子组件索引方法</h4>
<p align="left">使用特殊的属性ref来为子组件指定一个索引名称</p>
<p align="left">在父组件模板中，子组件标签上使用了ref指定了一个名称ComA，并在父组件内通过this.$refs来访问ComA这个子组件</p>
<div align="center">
    <img src="/images/vue_com_child.gif" alt="Demo">
</div>
<a id="more"></a>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleRef"</span>&gt;</span>通过ref获取子组件实例<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">my-item</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"comA"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-item</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'my-item'</span>, &#123;</span></span><br><span class="line"><span class="hljs-xml">			template: "<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>子组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>",</span></span><br><span class="line"><span class="hljs-javascript">			data:  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">					message: <span class="hljs-string">'子组件内容'</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				handleRef: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">var</span> msg = <span class="hljs-keyword">this</span>.$refs.comA.message;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-built_in">console</span>.log(msg);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件通信 | 练习</title>
    <url>/2020/02/27/vue-practice3/</url>
    <content><![CDATA[<p align="left">
    这个练习目的是比较使用语法糖和不使用语法糖的效果，发现使用v-model绑定元素之后，通过组件去改变就容易很多，代码量可以少一点
</p>
<a id="more"></a>
<div align="center">
    <img src="/images/vue-practice3.gif" alt="效果演示" align="center">
</div>

<hr>
<h4 align="center">未使用语法糖</h4>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>total:&#123;&#123; total &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">		<span class="hljs-comment">&lt;!--使用v-on(这里使用了语法糖 @ )添加了两个事件监听器--&gt;</span></span><br><span class="line">		<span class="hljs-comment">&lt;!--两个事件会触发handleGetTotal事件--&gt;</span>&gt;</span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">my-item</span> @<span class="hljs-attr">increase</span>=<span class="hljs-string">"handleGetTotal"</span> @<span class="hljs-attr">reduce</span>=<span class="hljs-string">"handleGetTotal"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-item</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>	</span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'my-item'</span>, &#123;</span></span><br><span class="line">			template: `</span><br><span class="line"><span class="hljs-xml">				<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">					<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"increase()"</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">					<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"reduce()"</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">				<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">			`,</span><br><span class="line"><span class="hljs-javascript">			data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line">					counter: 0</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-comment">//点击+1按钮，触发此事件，counter加1，随后将更新的counter通过监听的increase监听器发送出去</span></span></span><br><span class="line"><span class="hljs-javascript">				increase: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.counter++;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'increase'</span>, <span class="hljs-keyword">this</span>.counter);</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-comment">//点击-1按钮，触发此事件，counter减1，随后将更新的counter通过监听的increase监听器发送出去</span></span></span><br><span class="line"><span class="hljs-javascript">				reduce: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.counter--;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'reduce'</span>, <span class="hljs-keyword">this</span>.counter);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">			data: &#123;</span><br><span class="line">				total: 0</span><br><span class="line">			&#125;,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-comment">//这个函数有一个参数，参数是组件按钮通过$emit()发出传过来的数据</span></span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-comment">//得到数据后，再把数据绑定到total，这样就是动态的</span></span></span><br><span class="line"><span class="hljs-javascript">				handleGetTotal: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.total = data;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 align="center">使用了语法糖</h4>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>总数： <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red; font-size: 30px;"</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>	</span><br><span class="line">		<span class="hljs-comment">&lt;!-- 使用了v-model绑定了total --&gt;</span></span><br><span class="line">                <span class="hljs-comment">&lt;!--可以使用语法糖--&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">my-item</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"total"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-item</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'my-item'</span>, &#123;</span></span><br><span class="line">			template: `</span><br><span class="line"><span class="hljs-xml">				<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">					<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'increase()'</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">					<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'reduce()'</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">				<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">			`,</span><br><span class="line"><span class="hljs-javascript">			data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line">					counter: 0</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				increase: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.counter++;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-comment">// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据</span></span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'input'</span>, <span class="hljs-keyword">this</span>.counter);</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="hljs-javascript">				reduce: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.counter--;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-comment">// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据</span></span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'input'</span>, <span class="hljs-keyword">this</span>.counter);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">			data: &#123;</span><br><span class="line">				total: 0</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10/Office系列软件激活教程</title>
    <url>/2020/02/22/tips-win-active/</url>
    <content><![CDATA[<p align="left">这个教程仅在Win10和Office16以后的版本做过测试并通过，其它Windows系统和其它Office软件版本未作测试，可以自行激活。</p>
<p align="left">点击下方“<span style="color: red;font-weight: bolder">阅读更多</span>”进入教程</p>
<a id="more"></a>

<h3 align="center" style="font-weight: bolder">激活前提</h3>

<ul>
<li>退出Windows自带安全软件或者360等安全软件，此激活程序请放心使用</li>
<li>下载KMS程序压缩包，点击下方链接下载KMS</li>
<li>下载完成后解压，得到一个名为KMS文件夹</li>
<li>进入文件夹，点击KMSpico_setup.exe进行安装</li>
<li><span style="color: red">下载链接</span>：<a href="https://pan.baidu.com/s/1hsnChXWHXtkC2GEZzqgH4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1hsnChXWHXtkC2GEZzqgH4w</a> 提取码: yavm</li>
</ul>
<hr>
<h4 align="center" style="font-weight: bolder">开始</h4>

<div align="center">
    <img src="/images/kms/kms1.png" alt="点击这个安装KMS">
</div>
<div align="center">
    <img src="/images/kms/kms2.png" alt="点击继续">
</div>
<div align="center">
    <img src="/images/kms/kms3.png" alt="点击我同意，再点击继续">
</div>
<div align="center">
    <img src="/images/kms/kms4.png" alt="等待安装完成">
</div>
<div align="center">
    <img src="/images/kms/kms5.png" alt="按Windows键或者点击左下角Windows图标打开开始菜单，找到这个文件夹，可以按字母K查找">
</div>
<div align="center">
    <img src="/images/kms/kms6.png" alt="找到这个，右键单击">
</div>
<div align="center">
    <img src="/images/kms/kms7.png" alt="选择更多，再选择以管理员身份运行">
</div>
<p align="center" style="font-weight: bolder; color: red">执行上一步之后，不会显示软件界面，后台自动激活，听到Program Complete表示激活完成</p>
<div align="center">
    <img src="/images/kms/kms8.png" alt="桌面右键此电脑再点击属性，显示Windows已激活">
</div>
<p align="center" style="font-weight: bolder; color: red">激活完成</p>]]></content>
      <categories>
        <category>电脑相关</category>
      </categories>
      <tags>
        <tag>激活</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件通信 | 平行组件的通信</title>
    <url>/2020/02/22/vue-practice/</url>
    <content><![CDATA[<center>一个兄弟组件之间的通信</center>
<a id="more"></a>

<hr>
<div align="center">
    <img src="/images/vue-component1.gif" alt="效果图">
</div>

<hr>
<div align="center">
    <img src="/images/vue-component2.png" alt="元素结构图">
</div>

<hr>
<blockquote>
<p>代码中有两个平行组件ming,huahua，ming组件的内容可以传到huahua组件，huahua可以获取ming传输的内容<br>ming组件内通过给input元素绑定监听事件keyup来获取用户状态，当用户在input里输入内容，就会触发$emit调用on_change()函数，发送this.i_said的数据，再在huahua的组件中通过$on来监听$emit传出的数据，并使用回调函数把获取到的data赋值给huahua_said，就完成了平行组件之间的通信<br>关键点： 在JavaScript里第一行声明了一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；</p>
</blockquote>
<hr>
<h3 align="center">下面为代码</h3>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">media</span>=<span class="hljs-string">"screen"</span>&gt;</span></span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-id">#app</span>&#123;</span></span><br><span class="line">			width: 230px;</span><br><span class="line">			height: 65px;</span><br><span class="line"><span class="hljs-css">			<span class="hljs-selector-tag">box-shadow</span>: 0 0 30<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">rgba</span>(0, 0, 0, 0<span class="hljs-selector-class">.1</span>);</span></span><br><span class="line">			border-radius: 10px;</span><br><span class="line">			font-family: 'XHei';</span><br><span class="line">			padding: 20px;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">ming</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-bottom: 20px	"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ming</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">huahua</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">huahua</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-comment">//这里的Event很关键，声明一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；</span></span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> Event = <span class="hljs-keyword">new</span> Vue();</span></span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'ming'</span>,&#123;</span></span><br><span class="line">			template: `</span><br><span class="line"><span class="hljs-xml">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">				我说：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup</span>=<span class="hljs-string">'on_change()'</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'i_said'</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> /&gt;</span></span></span><br><span class="line"><span class="hljs-xml">			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">			`,</span><br><span class="line"><span class="hljs-javascript">			data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">					i_said: <span class="hljs-string">''</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-comment">//当用户在input中输入内容，就会触发i_said_something事件，并将i_said的数据发送出去</span></span></span><br><span class="line"><span class="hljs-javascript">				on_change: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					Event.$emit(<span class="hljs-string">'i_said_something'</span>, <span class="hljs-keyword">this</span>.i_said)</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'huahua'</span>, &#123;</span></span><br><span class="line">			template: `</span><br><span class="line"><span class="hljs-xml">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">				花花说： &#123;&#123; huahua_said &#125;&#125;</span><br><span class="line"><span class="hljs-xml">			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">			`,</span><br><span class="line"><span class="hljs-javascript">			data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">					huahua_said: <span class="hljs-string">''</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line"><span class="hljs-javascript">			<span class="hljs-comment">//在生命周期mounted钩子函数里监听了来自Event的时间i_said_something</span></span></span><br><span class="line"><span class="hljs-javascript">			mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span>;</span></span><br><span class="line"><span class="hljs-javascript">				Event.$on(<span class="hljs-string">'i_said_something'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="line">					_this.huahua_said = data;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span></span></span><br><span class="line">		&#125;);</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 自己的小练习</title>
    <url>/2020/02/21/vue-practice1/</url>
    <content><![CDATA[<center>结合v-bind指令做的一个相册组件</center>

<p><img src="/images/vue-practice.gif" alt="左右键可以下一张上一张图片"></p>
<a id="more"></a>
<center>代码如下</center>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.img</span>&#123;</span></span><br><span class="line">			width: 512px;</span><br><span class="line">			height: 360px;</span><br><span class="line">			border-radius: 5px;</span><br><span class="line">			overflow: hidden;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.img</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">		&#125;</span><br><span class="line">		*&#123;</span><br><span class="line">			margin: 0;</span><br><span class="line">			padding: 0;</span><br><span class="line">			text-align: center;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.wrap</span>&#123;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.photo_show</span>&#123;</span></span><br><span class="line">			display: block;</span><br><span class="line">			width: 700px;</span><br><span class="line">			height: 360px;</span><br><span class="line">			padding: 19px;</span><br><span class="line"><span class="hljs-css">			<span class="hljs-selector-tag">box-shadow</span>: 0 0 30<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">rgba</span>(0, 0, 0, <span class="hljs-selector-class">.1</span>);</span></span><br><span class="line">			text-align: center;</span><br><span class="line">			border-radius: 20px;</span><br><span class="line">			margin: 150px auto;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.btn</span>&#123;</span></span><br><span class="line">			position: relative;</span><br><span class="line">			transform: translateY(-140px);</span><br><span class="line"><span class="hljs-css">			<span class="hljs-selector-tag">transition</span>: <span class="hljs-selector-class">.3s</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="hljs-css">		<span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">			cursor: pointer;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"wrap"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"photo_show"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">img</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"start_last()"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../images/last.png"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-last"</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"img_link"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"img img1"</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">img</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"start_next()"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../images/next.png"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-next"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> link_index = <span class="hljs-number">1</span>;</span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">			data: &#123;</span><br><span class="line"><span class="hljs-javascript">				img_link: <span class="hljs-string">'../images/'</span> + link_index + <span class="hljs-string">'.png'</span></span></span><br><span class="line">			&#125;,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				start_next: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">if</span>(link_index &lt; <span class="hljs-number">6</span>)&#123;</span></span><br><span class="line">						link_index++</span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-keyword">this</span>.img_link = <span class="hljs-string">'../images/'</span> + link_index + <span class="hljs-string">'.png'</span>;</span></span><br><span class="line"><span class="hljs-javascript">					&#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-keyword">this</span>.img_link = <span class="hljs-string">'../images/1.png'</span>;</span></span><br><span class="line">						link_index = 1;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="hljs-javascript">				start_last: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">if</span>(link_index &gt; <span class="hljs-number">1</span>)&#123;</span></span><br><span class="line">						link_index--;</span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-keyword">this</span>.img_link = <span class="hljs-string">'../images/'</span> + link_index + <span class="hljs-string">'.png'</span>;</span></span><br><span class="line"><span class="hljs-javascript">					&#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-keyword">this</span>.img_link = <span class="hljs-string">'../images/6.png'</span>;</span></span><br><span class="line">						link_index = 6;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line"><span class="hljs-javascript">			mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				setInterval(<span class="hljs-keyword">this</span>.start_next(), <span class="hljs-number">1000</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue filter</title>
    <url>/2020/02/18/vue-filter/</url>
    <content><![CDATA[<center>使用过滤器过滤日期</center>
<a id="more"></a>

<div align="center">
    <img src="/images/demo_filter.gif" alt="效果演示">
</div>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span></span></span><br><span class="line"><span class="hljs-tag">          <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">		<span class="hljs-comment">&lt;!--默认日期，不会刷新--&gt;</span></span><br><span class="line">		默认日期： &#123;&#123; default_date &#125;&#125;</span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="line">		<span class="hljs-comment">&lt;!--使用过滤器过滤日期--&gt;</span></span><br><span class="line">		过滤后日期： &#123;&#123; date | fromDate &#125;&#125;</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-comment">//把小于10的数变成0+这个数，例01，02</span></span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> pddDate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">			<span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + value : value; </span></span><br><span class="line">		&#125;;</span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">			data: &#123;</span><br><span class="line"><span class="hljs-javascript">				date: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),</span></span><br><span class="line"><span class="hljs-javascript">				default_date: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span></span><br><span class="line">			&#125;,</span><br><span class="line"><span class="hljs-javascript">			<span class="hljs-comment">// 这是一个自定义过滤器，把日期格式化一下</span></span></span><br><span class="line">			filters:&#123;</span><br><span class="line"><span class="hljs-javascript">				fromDate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">var</span> year = pddDate(date.getFullYear());</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">var</span> month = pddDate(date.getMonth() + <span class="hljs-number">1</span>);</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">var</span> day = pddDate(date.getDay());</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">var</span> hours = pddDate(date.getHours());</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">var</span> minutes = pddDate(date.getMinutes());</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">var</span> seconds = pddDate(date.getSeconds());</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">return</span> year + <span class="hljs-string">'-'</span> + month + <span class="hljs-string">'-'</span> + day + <span class="hljs-string">' '</span> + hours + <span class="hljs-string">':'</span> + minutes + <span class="hljs-string">':'</span> + seconds; </span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line"><span class="hljs-javascript">			mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-comment">//声明一个变量指向this，防止直接用this导致指向不明</span></span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span>;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-comment">//设置一个定时器，每秒刷新一次</span></span></span><br><span class="line"><span class="hljs-javascript">				setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					_this.date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;</span></span><br><span class="line">				&#125;,1000)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件 | 父子组件通信</title>
    <url>/2020/02/18/vue-component/</url>
    <content><![CDATA[<center>组件通信-父子组件的通信</center>
<a id="more"></a>


<blockquote>
<p>文中涉及的$emit()解释：<br>用法： $emit( eventName, […args] )<br>eventName:事件名，会绑定一个方法。当组件触发事件后，将调用这个方法。<br>…args: 附加参数，会被抛出，由上述绑定的方法接收使用。</p>
</blockquote>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">balance</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">balance</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-comment">// 父组件,包含了子组件show</span></span></span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'balance'</span>, &#123;</span></span><br><span class="line">			template:` </span><br><span class="line"><span class="hljs-xml">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">			    <span class="hljs-comment">//@show-balance是事件名，被下面$emit调用，执行show_balance()方法</span></span></span><br><span class="line"><span class="hljs-xml">				<span class="hljs-tag">&lt;<span class="hljs-name">show</span> @<span class="hljs-attr">show-balance</span>=<span class="hljs-string">"show_balance()"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">show</span>&gt;</span> </span></span><br><span class="line"><span class="hljs-xml">				<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"show"</span>&gt;</span>余额： ￥ 33<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">			`,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				show_balance: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.show = <span class="hljs-literal">true</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line"><span class="hljs-javascript">			data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">				<span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-comment">//show变量，用于判断是否显示，默认为false，不显示</span></span></span><br><span class="line"><span class="hljs-javascript">					show: <span class="hljs-literal">false</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"><span class="hljs-xml">		<span class="hljs-comment">&lt;!--子组件--&gt;</span></span></span><br><span class="line"><span class="hljs-javascript">		Vue.component(<span class="hljs-string">'show'</span>, &#123;</span></span><br><span class="line"><span class="hljs-javascript">			<span class="hljs-comment">// 给按钮添加点击监听事件</span></span></span><br><span class="line">			template: `</span><br><span class="line"><span class="hljs-xml">				<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"on_click()"</span>&gt;</span>显示余额<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line">			`,</span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="hljs-javascript">				on_click: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-comment">//绑定了show-balance方法</span></span></span><br><span class="line"><span class="hljs-javascript">					<span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'show-balance'</span>) </span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"><span class="hljs-javascript">		<span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">			el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-笔记</title>
    <url>/2020/02/11/vue-notebook/</url>
    <content><![CDATA[<center>在Vue学习中的笔记</center>
<a id="more"></a>

<p>笔记1：</p>
<figure class="highlight java hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span>; <span class="hljs-comment">//这句话可以用于防止直接用this导致指向不明&gt;</span></span><br></pre></td></tr></table></figure>

<h5 align="left">v-cloak解决闪动问题</h5>
<p>通过给涉及到的元素加上一个v-cloak来解决</p>
<figure class="highlight css hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-selector-attr">[v-cloak]</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">v-cloak</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">my-com</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">'props'</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; props.msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">my-com</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-基础 购物车小组件</title>
    <url>/2020/02/10/vue-shop/</url>
    <content><![CDATA[<center>一个基于Vue基础指令的简单的购物车</center>
<a id="more"></a>

<p><strong>Demo</strong></p>
<p><img src="/images/demo_shop.gif" alt></p>
<center>index.html</center>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Shop<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">v-cloak</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"list.length"</span>&gt;</span></span><br><span class="line">				<span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">					<span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">						<span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品单价<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>购买数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">						<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">					<span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">					<span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">						<span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in list"</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">								<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'fun'</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleReduce(index)"</span><span class="hljs-attr">:disabled</span>=<span class="hljs-string">"item.count === 1"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">								&#123;&#123; item.count &#125;&#125;</span><br><span class="line">								<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'fun'</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleAdd(index)"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">								<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleRemove(index)"</span>&gt;</span>移除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">							<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">						<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">					<span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">				<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">				<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>总价：￥ &#123;&#123; totalPrice &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>购物车为空<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../lib/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"index.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<center>index.js</center>
<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">	data: &#123;</span><br><span class="line">		list: [</span><br><span class="line">			&#123;</span><br><span class="line">				id: <span class="hljs-number">1</span>,</span><br><span class="line">				name: <span class="hljs-string">'iPhone 7'</span>,</span><br><span class="line">				price: <span class="hljs-number">6188</span>,</span><br><span class="line">				count: <span class="hljs-number">1</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				id: <span class="hljs-number">2</span>,</span><br><span class="line">				name: <span class="hljs-string">'iPad Pro'</span>,</span><br><span class="line">				price: <span class="hljs-number">2888</span>,</span><br><span class="line">				count: <span class="hljs-number">1</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				id: <span class="hljs-number">3</span>,</span><br><span class="line">				name: <span class="hljs-string">'MacBook Pro'</span>,</span><br><span class="line">				price: <span class="hljs-number">21488</span>,</span><br><span class="line">				count: <span class="hljs-number">1</span></span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		text: <span class="hljs-string">'ss'</span></span><br><span class="line">	&#125;,</span><br><span class="line">	computed: &#123;</span><br><span class="line">		totalPrice: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">			<span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>;</span><br><span class="line">			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.list.length; i++)&#123;</span><br><span class="line">				<span class="hljs-keyword">var</span> item = <span class="hljs-keyword">this</span>.list[i];</span><br><span class="line">				total += item.price * item.count;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="hljs-keyword">return</span> total.toString().replace(<span class="hljs-regexp">/\B(?=(\d&#123;3&#125;)+$)/g</span>, <span class="hljs-string">','</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods: &#123;</span><br><span class="line">		handleReduce: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="line">			<span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.list[index].count === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">			<span class="hljs-keyword">this</span>.list[index].count--;</span><br><span class="line">		&#125;,</span><br><span class="line">		handleAdd: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="line">			<span class="hljs-keyword">this</span>.list[index].count++;</span><br><span class="line">		&#125;,</span><br><span class="line">		handleRemove: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="line">			<span class="hljs-keyword">this</span>.list.splice(index, <span class="hljs-number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<center>style.css</center>
<figure class="highlight css hljs"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">	<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="line">	<span class="hljs-attribute">font-family</span>: <span class="hljs-string">'XHei'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-id">#app</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">	<span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">	<span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">	<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">	<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">30px</span> <span class="hljs-built_in">rgba</span>(0,0,0,.1);</span><br><span class="line">	<span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">table</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">	<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="line">	<span class="hljs-attribute">border</span>: <span class="hljs-number">#0000FF</span> solid <span class="hljs-number">1px</span>;</span><br><span class="line">	<span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="line">	<span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">th</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#0000FF</span>;</span><br><span class="line">	<span class="hljs-attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">th</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#c4e4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">tbody</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">td</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">border</span>:solid <span class="hljs-number">#3190E8</span> <span class="hljs-number">1px</span>;</span><br><span class="line">	<span class="hljs-attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#F5F5F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.fun</span>&#123;</span><br><span class="line">	<span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>拉勾网职位爬取</title>
    <url>/2020/02/10/python-lagou/</url>
    <content><![CDATA[<center>一个爬取拉勾网职位信息简单程序，涉及到异步加载，使用json分析数据并保存到MongoDB数据库</center>

<a id="more"></a>

<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"><span class="hljs-keyword">import</span> json</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"><span class="hljs-keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(<span class="hljs-string">'127.0.0.1'</span>, <span class="hljs-number">27017</span>)</span><br><span class="line">mydb = client[<span class="hljs-string">'jobs'</span>]</span><br><span class="line">lagou = mydb[<span class="hljs-string">'lagou'</span>]</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line">    <span class="hljs-string">'Accept-Encoding'</span>: <span class="hljs-string">'gzip, deflate, br'</span>,</span><br><span class="line">    <span class="hljs-string">'Accept-Language'</span>: <span class="hljs-string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">    <span class="hljs-string">'Connection'</span>: <span class="hljs-string">'keep-alive'</span>,</span><br><span class="line">    <span class="hljs-string">'Content-Length'</span>: <span class="hljs-string">'37'</span>,</span><br><span class="line">    <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class="line">    <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'_ga=GA1.2.1069426576.1578732618;'</span></span><br><span class="line">              <span class="hljs-string">' index_location_city=%E5%85%A8%E5%9B%BD;'</span></span><br><span class="line">              <span class="hljs-string">' user_trace_token=20200111165020-251b21ca-0efa-4e3a-b959-93855c309d4d;'</span></span><br><span class="line">              <span class="hljs-string">' lagou_utm_source=B;'</span></span><br><span class="line">              <span class="hljs-string">' JSESSIONID=ABAAAECABBJAAGI5F960B86A5C58E135C92D5813AEC82AC;'</span></span><br><span class="line">              <span class="hljs-string">' WEBTJ-ID=20200202115956-170040e12e86-02f47fddf1f558-b383f66-2073600-170040e12e96f0;'</span></span><br><span class="line">              <span class="hljs-string">' X_MIDDLE_TOKEN=dbdf524e8683f15975fa5fde4d8f2f39;'</span></span><br><span class="line">              <span class="hljs-string">' X_HTTP_TOKEN=669a21470347f2436986360851ac25caf63ec40c85;'</span></span><br><span class="line">              <span class="hljs-string">' _gat=1;'</span></span><br><span class="line">              <span class="hljs-string">' SEARCH_ID=f04d4617085a4104bf037670fd36f76c'</span>,</span><br><span class="line">    <span class="hljs-string">'Host'</span>: <span class="hljs-string">'www.lagou.com'</span>,</span><br><span class="line">    <span class="hljs-string">'Origin'</span>: <span class="hljs-string">'https://www.lagou.com'</span>,</span><br><span class="line">    <span class="hljs-string">'Referer'</span>: <span class="hljs-string">'https://www.lagou.com/jobs/list_java/'</span>,</span><br><span class="line">    <span class="hljs-string">'Sec-Fetch-Mode'</span>: <span class="hljs-string">'cors'</span>,</span><br><span class="line">    <span class="hljs-string">'Sec-Fetch-Site'</span>: <span class="hljs-string">'same-origin'</span>,</span><br><span class="line">    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'</span> \</span><br><span class="line">                  <span class="hljs-string">' Chrome/79.0.3945.130 Safari/537.36'</span>,</span><br><span class="line">    <span class="hljs-string">'X-Anit-Forge-Code'</span>: <span class="hljs-string">'0'</span>,</span><br><span class="line">    <span class="hljs-string">'X-Anit-Forge-Token'</span>: <span class="hljs-string">'None'</span>,</span><br><span class="line">    <span class="hljs-string">'X-Requested-With'</span>: <span class="hljs-string">'XMLHttpRequest'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_page</span><span class="hljs-params">(url, params)</span>:</span></span><br><span class="line">    html = requests.post(url, data=params, headers=headers)</span><br><span class="line">    print(html.text)</span><br><span class="line">    json_data = json.loads(html.text)</span><br><span class="line">    total_count = json_data[<span class="hljs-string">'content'</span>][<span class="hljs-string">'positionResult'</span>][<span class="hljs-string">'totalCount'</span>]</span><br><span class="line">    page_number = int(total_count/<span class="hljs-number">15</span>) <span class="hljs-keyword">if</span> int(total_count/<span class="hljs-number">15</span>) &lt; <span class="hljs-number">30</span> <span class="hljs-keyword">else</span> <span class="hljs-number">30</span></span><br><span class="line">    get_info(url, page_number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_info</span><span class="hljs-params">(url, page)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">for</span> pn <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, page+<span class="hljs-number">1</span>):</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="hljs-string">'first'</span>: <span class="hljs-string">'true'</span>,</span><br><span class="line">            <span class="hljs-string">'pn'</span>: str(pn),</span><br><span class="line">            <span class="hljs-string">'kd'</span>: <span class="hljs-string">'游戏'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">try</span>:</span><br><span class="line">            html = requests.post(url, data=params, headers=headers)</span><br><span class="line">            json_data = json.loads(html.text)</span><br><span class="line">            results = json_data[<span class="hljs-string">'content'</span>][<span class="hljs-string">'positionResult'</span>][<span class="hljs-string">'result'</span>]</span><br><span class="line">            <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:</span><br><span class="line">                infos = &#123;</span><br><span class="line">                    <span class="hljs-string">'businessZones'</span>: result[<span class="hljs-string">'businessZones'</span>],</span><br><span class="line">                    <span class="hljs-string">'city'</span>: result[<span class="hljs-string">'city'</span>],</span><br><span class="line">                    <span class="hljs-string">'district'</span>: result[<span class="hljs-string">'district'</span>],</span><br><span class="line">                    <span class="hljs-string">'companyFullName'</span>: result[<span class="hljs-string">'companyFullName'</span>],</span><br><span class="line">                    <span class="hljs-string">'companyShortName'</span>: result[<span class="hljs-string">'companyShortName'</span>],</span><br><span class="line">                    <span class="hljs-string">'companySize'</span>: result[<span class="hljs-string">'companySize'</span>],</span><br><span class="line">                    <span class="hljs-string">'industryField'</span>: result[<span class="hljs-string">'industryField'</span>],</span><br><span class="line">                    <span class="hljs-string">'financeStage'</span>: result[<span class="hljs-string">'financeStage'</span>],</span><br><span class="line">                    <span class="hljs-string">'firstType'</span>: result[<span class="hljs-string">'firstType'</span>],</span><br><span class="line">                    <span class="hljs-string">'secondType'</span>: result[<span class="hljs-string">'secondType'</span>],</span><br><span class="line">                    <span class="hljs-string">'thirdType'</span>: result[<span class="hljs-string">'thirdType'</span>],</span><br><span class="line">                    <span class="hljs-string">'companyLabelList'</span>: result[<span class="hljs-string">'companyLabelList'</span>],</span><br><span class="line">                    <span class="hljs-string">'salary'</span>: result[<span class="hljs-string">'salary'</span>],</span><br><span class="line">                    <span class="hljs-string">'workYear'</span>: result[<span class="hljs-string">'workYear'</span>],</span><br><span class="line">                    <span class="hljs-string">'education'</span>: result[<span class="hljs-string">'education'</span>],</span><br><span class="line">                    <span class="hljs-string">'positionName'</span>: result[<span class="hljs-string">'positionName'</span>],</span><br><span class="line">                &#125;</span><br><span class="line">                lagou.insert_one(infos)</span><br><span class="line">                time.sleep(<span class="hljs-number">2</span>)</span><br><span class="line">        <span class="hljs-keyword">except</span> KeyError:</span><br><span class="line">            print(<span class="hljs-string">"关键词错误"</span>)</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    url = <span class="hljs-string">'https://www.lagou.com/jobs/positionAjax.json'</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="hljs-string">'first'</span>: <span class="hljs-string">'true'</span>,</span><br><span class="line">        <span class="hljs-string">'pn'</span>: <span class="hljs-string">'1'</span>,</span><br><span class="line">        <span class="hljs-string">'kd'</span>: <span class="hljs-string">'java'</span></span><br><span class="line">    &#125;</span><br><span class="line">    get_page(url, params)</span><br><span class="line">    time.sleep(<span class="hljs-number">0.5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python,爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>(Java)猜一个随机数字</title>
    <url>/2020/01/11/java-GUI-GuessRandomNumber/</url>
    <content><![CDATA[<center></center>
<a id="more"></a>

<center>GuessRandomNuber.java</center>    

<figure class="highlight java hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuessRandomNumber</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;</span><br><span class="line">	<span class="hljs-keyword">private</span> ButtonPanel panel;</span><br><span class="line">	<span class="hljs-keyword">private</span> JTextField input;</span><br><span class="line">	<span class="hljs-keyword">private</span> JLabel output;</span><br><span class="line">	<span class="hljs-keyword">private</span> Random random;</span><br><span class="line">	<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> randomInt;</span><br><span class="line">	<span class="hljs-comment">//设置一个随机数</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createRandomInt</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		random = <span class="hljs-keyword">new</span> Random();</span><br><span class="line">		randomInt = random.nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">1</span>;</span><br><span class="line">		System.out.println(<span class="hljs-string">"随机数是："</span> + randomInt);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">/*初始化方法*/</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		<span class="hljs-comment">//设置窗体属性</span></span><br><span class="line">		setSize(<span class="hljs-number">600</span>,<span class="hljs-number">337</span>);</span><br><span class="line">		setTitle(<span class="hljs-string">"窗体"</span>);</span><br><span class="line">		<span class="hljs-comment">//初始化组件</span></span><br><span class="line">		input = <span class="hljs-keyword">new</span> JTextField();</span><br><span class="line">		output = <span class="hljs-keyword">new</span> JLabel(<span class="hljs-string">"请猜个数字"</span>); </span><br><span class="line">		panel = <span class="hljs-keyword">new</span> ButtonPanel();</span><br><span class="line">		<span class="hljs-comment">//获取面板</span></span><br><span class="line">		Container con = <span class="hljs-keyword">this</span>.getContentPane();</span><br><span class="line">		<span class="hljs-comment">//面板设置布局</span></span><br><span class="line">		con.setLayout(<span class="hljs-keyword">new</span> BorderLayout());</span><br><span class="line">		<span class="hljs-comment">//panel.setLayout(new GridLayout(1,3));</span></span><br><span class="line">		</span><br><span class="line">		<span class="hljs-comment">//将组件添加到面板</span></span><br><span class="line">		con.add(input,BorderLayout.NORTH);</span><br><span class="line">		con.add(output,BorderLayout.CENTER);</span><br><span class="line">		con.add(panel,BorderLayout.SOUTH);</span><br><span class="line">		<span class="hljs-comment">//设置组件属性</span></span><br><span class="line">		output.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">"XHei"</span>,Font.BOLD,<span class="hljs-number">20</span>));</span><br><span class="line">		output.setForeground(Color.RED);</span><br><span class="line">		</span><br><span class="line">		setVisible(<span class="hljs-keyword">true</span>);</span><br><span class="line">		<span class="hljs-comment">//设置默认关闭动作</span></span><br><span class="line">		setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">		</span><br><span class="line">		<span class="hljs-comment">//生成一个随机数</span></span><br><span class="line">		createRandomInt();</span><br><span class="line">		</span><br><span class="line">		panel.getGuess().addActionListener(<span class="hljs-keyword">new</span> ActionListener() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="hljs-meta">@Override</span></span><br><span class="line">			<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">				<span class="hljs-comment">// TODO Auto-generated method stub</span></span><br><span class="line">				output.setText(<span class="hljs-string">"Guess..."</span>);</span><br><span class="line">				String value = input.getText();</span><br><span class="line">				<span class="hljs-keyword">int</span> guessNumer = -<span class="hljs-number">1</span>;</span><br><span class="line">				<span class="hljs-keyword">try</span> &#123;</span><br><span class="line">					guessNumer = Integer.parseInt(value);</span><br><span class="line">				&#125; <span class="hljs-keyword">catch</span> (NumberFormatException e1) &#123;</span><br><span class="line">					<span class="hljs-comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e1.printStackTrace();</span><br><span class="line">					output.setText(<span class="hljs-string">"您输入的不是数字，请重新输入"</span>);</span><br><span class="line">					<span class="hljs-keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="hljs-keyword">if</span>(guessNumer &lt; <span class="hljs-number">0</span> || guessNumer &gt; <span class="hljs-number">1000</span>) &#123;</span><br><span class="line">					output.setText(<span class="hljs-string">"猜的数字要在1~1000，请重新输入"</span>);</span><br><span class="line">					<span class="hljs-keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="hljs-keyword">if</span>(guessNumer &gt; randomInt) &#123;</span><br><span class="line">					output.setText(<span class="hljs-string">"猜大了，往小了猜"</span>);</span><br><span class="line">					input.setText(<span class="hljs-string">""</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( guessNumer &lt; randomInt) &#123;</span><br><span class="line">					output.setText(<span class="hljs-string">"猜小了，往大了猜"</span>);</span><br><span class="line">					input.setText(<span class="hljs-string">""</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="hljs-keyword">else</span> &#123;</span><br><span class="line">					output.setText(<span class="hljs-string">"恭喜你，猜对了"</span>);</span><br><span class="line">					input.setText(<span class="hljs-string">""</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		panel.getReset().addActionListener(<span class="hljs-keyword">new</span> ActionListener() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="hljs-meta">@Override</span></span><br><span class="line">			<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">				<span class="hljs-comment">// TODO Auto-generated method stub</span></span><br><span class="line">				createRandomInt();</span><br><span class="line">				System.out.println(<span class="hljs-string">"随机数是："</span> + randomInt);</span><br><span class="line">				output.setText(<span class="hljs-string">"请猜一个数字"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		panel.getExit().addActionListener(<span class="hljs-keyword">new</span> ActionListener() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="hljs-meta">@Override</span></span><br><span class="line">			<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">				<span class="hljs-comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.exit(<span class="hljs-number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-comment">/*构造方法*/</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GuessRandomNumber</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="hljs-keyword">new</span> GuessRandomNumber();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center>ButtonPanel.java</center>

<figure class="highlight java hljs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ButtonPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JPanel</span></span>&#123;</span><br><span class="line">	<span class="hljs-keyword">private</span> JButton guess,reset,exit;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> JButton <span class="hljs-title">getGuess</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		<span class="hljs-keyword">return</span> guess;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGuess</span><span class="hljs-params">(JButton guess)</span> </span>&#123;</span><br><span class="line">		<span class="hljs-keyword">this</span>.guess = guess;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> JButton <span class="hljs-title">getReset</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		<span class="hljs-keyword">return</span> reset;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setReset</span><span class="hljs-params">(JButton reset)</span> </span>&#123;</span><br><span class="line">		<span class="hljs-keyword">this</span>.reset = reset;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> JButton <span class="hljs-title">getExit</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		<span class="hljs-keyword">return</span> exit;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setExit</span><span class="hljs-params">(JButton exit)</span> </span>&#123;</span><br><span class="line">		<span class="hljs-keyword">this</span>.exit = exit;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		guess = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">"猜"</span>);</span><br><span class="line">		reset = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">"重置"</span>);</span><br><span class="line">		exit = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">"退出"</span>);</span><br><span class="line">		setLayout(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));</span><br><span class="line">		add(guess);</span><br><span class="line">		add(reset);</span><br><span class="line">		add(exit);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ButtonPanel</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个爬虫项目</title>
    <url>/2019/11/28/python-scrapy/</url>
    <content><![CDATA[<center>第一个爬虫项目：爬取前程无忧重庆地区工作</center>
<a id="more"></a>
<center>LoginUI.py</center>

<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> *</span><br><span class="line"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk</span><br><span class="line"><span class="hljs-keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="hljs-keyword">from</span> SearchItemUI <span class="hljs-keyword">import</span> *</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(<span class="hljs-string">'368x600'</span>)</span><br><span class="line">win.title(<span class="hljs-string">'Login UI'</span>)</span><br><span class="line"></span><br><span class="line">bg_photo = tk.PhotoImage(file=<span class="hljs-string">'img/login_bg.png'</span>)</span><br><span class="line">bg_label = tk.Label(</span><br><span class="line">    win,</span><br><span class="line">    image=bg_photo,</span><br><span class="line">    compound=tk.CENTER</span><br><span class="line">).pack()</span><br><span class="line">labelimg = PhotoImage(file=<span class="hljs-string">'img/smile.png'</span>)</span><br><span class="line">img_label = Label(win, image=labelimg).place(x=<span class="hljs-number">120</span>, y=<span class="hljs-number">60</span>)</span><br><span class="line">text_username = Label(win, bg=<span class="hljs-string">'#68ABFF'</span>, fg=<span class="hljs-string">'#fff'</span>, text=<span class="hljs-string">'账号:'</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'16'</span>)).place(x=<span class="hljs-number">60</span>, y=<span class="hljs-number">240</span>)</span><br><span class="line">text_password = Label(win, bg=<span class="hljs-string">'#94C3FF'</span>, fg=<span class="hljs-string">'#fff'</span>, text=<span class="hljs-string">'密码:'</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'16'</span>)).place(x=<span class="hljs-number">60</span>, y=<span class="hljs-number">280</span>)</span><br><span class="line">username = StringVar()</span><br><span class="line">password = StringVar()</span><br><span class="line">input_username = Entry(win, textvariable=username, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'16'</span>), width=<span class="hljs-number">14</span>).place(x=<span class="hljs-number">120</span>, y=<span class="hljs-number">240</span>)</span><br><span class="line">inout_password = Entry(win, textvariable=password, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'16'</span>), show=<span class="hljs-string">'*'</span>, width=<span class="hljs-number">14</span>).place(x=<span class="hljs-number">120</span>, y=<span class="hljs-number">280</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_login</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    username_get = username.get()</span><br><span class="line">    password_get = password.get()</span><br><span class="line">    <span class="hljs-keyword">if</span> username_get == <span class="hljs-string">'user'</span> <span class="hljs-keyword">and</span> password_get == <span class="hljs-string">'123456'</span>:</span><br><span class="line">        win.destroy()</span><br><span class="line">        start_search()</span><br><span class="line">    <span class="hljs-keyword">elif</span> username_get == <span class="hljs-string">''</span> <span class="hljs-keyword">or</span> password_get == <span class="hljs-string">''</span>:</span><br><span class="line">        tk.messagebox.showwarning(title=<span class="hljs-string">'警告'</span>, message=<span class="hljs-string">'请输入用户名或者密码!'</span>)</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        tk.messagebox.showwarning(title=<span class="hljs-string">'警告'</span>, message=<span class="hljs-string">'用户名或者密码错误!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn_login = Button(win, command=check_login, text=<span class="hljs-string">'登录'</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'16'</span>), bg=<span class="hljs-string">"#68ABFF"</span>, fg=<span class="hljs-string">"#FFF"</span>).place(x=<span class="hljs-number">140</span>, y=<span class="hljs-number">340</span>)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure>

<center>SearchItemUI.py</center>

<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> *</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"><span class="hljs-keyword">import</span> webbrowser</span><br><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"><span class="hljs-keyword">import</span> tkinter.ttk <span class="hljs-keyword">as</span> ttk</span><br><span class="line"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_search</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    win = Tk()</span><br><span class="line">    win.title(<span class="hljs-string">"51Job招聘"</span>)</span><br><span class="line">    win.geometry(<span class="hljs-string">'690x760'</span>)</span><br><span class="line">    job_categorie = StringVar()</span><br><span class="line">    keyword = StringVar()</span><br><span class="line">    page_num = IntVar()</span><br><span class="line">    v = IntVar()</span><br><span class="line">    com_type_value = StringVar()</span><br><span class="line"></span><br><span class="line">    top = Toplevel(win)</span><br><span class="line">    top.title(<span class="hljs-string">"详细信息"</span>)</span><br><span class="line">    top.geometry(<span class="hljs-string">'930x724'</span>)</span><br><span class="line"></span><br><span class="line">    title = [<span class="hljs-string">'l1'</span>, <span class="hljs-string">'l2'</span>, <span class="hljs-string">'l3'</span>, <span class="hljs-string">'l4'</span>]</span><br><span class="line">    tree = ttk.Treeview(top, column=title, show=<span class="hljs-string">'headings'</span>, height=<span class="hljs-number">20</span>, selectmode=<span class="hljs-string">'browse'</span>)</span><br><span class="line">    tree.column(<span class="hljs-string">'l1'</span>, anchor=<span class="hljs-string">'center'</span>, width=<span class="hljs-number">300</span>)</span><br><span class="line">    tree.column(<span class="hljs-string">'l2'</span>, anchor=<span class="hljs-string">'center'</span>, width=<span class="hljs-number">300</span>)</span><br><span class="line">    tree.column(<span class="hljs-string">'l3'</span>, anchor=<span class="hljs-string">'center'</span>, width=<span class="hljs-number">145</span>)</span><br><span class="line">    tree.column(<span class="hljs-string">'l4'</span>, anchor=<span class="hljs-string">'center'</span>, width=<span class="hljs-number">145</span>)</span><br><span class="line">    tree.heading(<span class="hljs-string">'l1'</span>, text=<span class="hljs-string">'职位'</span>)</span><br><span class="line">    tree.heading(<span class="hljs-string">'l2'</span>, text=<span class="hljs-string">'公司名称'</span>)</span><br><span class="line">    tree.heading(<span class="hljs-string">'l3'</span>, text=<span class="hljs-string">'工作地点'</span>)</span><br><span class="line">    tree.heading(<span class="hljs-string">'l4'</span>, text=<span class="hljs-string">'薪资待遇'</span>)</span><br><span class="line">    tree.place(x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>, width=<span class="hljs-number">903</span>, height=<span class="hljs-number">725</span>)</span><br><span class="line">    vbar = ttk.Scrollbar(top, orient=<span class="hljs-string">"vertical"</span>, command=tree.yview)</span><br><span class="line">    tree.configure(yscrollcommand=vbar.set)</span><br><span class="line">    vbar.place(x=<span class="hljs-number">904</span>, y=<span class="hljs-number">5</span>, height=<span class="hljs-number">720</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search_job</span><span class="hljs-params">()</span>:</span></span><br><span class="line">        input_keyword = keyword.get()</span><br><span class="line">        input_page_num = page_num.get()</span><br><span class="line">        select_com_type_value = com_type_value.get()</span><br><span class="line">        the_url = <span class="hljs-string">"https://search.51job.com/list/060000,000000,0000,00,9,99,%s,2,%d.html"</span> % (input_keyword,</span><br><span class="line">                                                                                             input_page_num)</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="hljs-string">'Chrome/78.0.3904.108 Safari/537.36'</span>&#125;</span><br><span class="line">        response = requests.get(the_url, headers=headers)</span><br><span class="line">        response.encoding = <span class="hljs-string">'gbk'</span></span><br><span class="line">        html = response.text</span><br><span class="line">        soup = BeautifulSoup(html, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">        all_div_e1 = soup.select(<span class="hljs-string">'div[class="el"]'</span>)</span><br><span class="line">        span_t1 = soup.find_all(<span class="hljs-string">'span'</span>, &#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'t1'</span>&#125;)</span><br><span class="line">        all_div_jobpositions = soup.find_all(<span class="hljs-string">'p'</span>, &#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'t1'</span>&#125;)</span><br><span class="line">        all_companys = soup.find_all(<span class="hljs-string">'span'</span>, &#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'t2'</span>&#125;)</span><br><span class="line">        all_address = soup.find_all(<span class="hljs-string">'span'</span>, &#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'t3'</span>&#125;)</span><br><span class="line">        all_salary = soup.find_all(<span class="hljs-string">'span'</span>, &#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'t4'</span>&#125;)</span><br><span class="line">        job_list = []</span><br><span class="line">        companys_list = []</span><br><span class="line">        address_list = []</span><br><span class="line">        salary_list = []</span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> all_div_jobpositions:</span><br><span class="line">            all_titles = item.find_all(<span class="hljs-string">'a'</span>)</span><br><span class="line">            job_list.append(all_titles[<span class="hljs-number">0</span>].get_text().strip(<span class="hljs-string">'\r'</span>).strip(<span class="hljs-string">'\n'</span>).strip(<span class="hljs-string">' '</span>).strip(<span class="hljs-string">'.'</span>))</span><br><span class="line">        <span class="hljs-keyword">for</span> get_item <span class="hljs-keyword">in</span> all_companys:</span><br><span class="line">            get_a = get_item.find_all(<span class="hljs-string">'a'</span>)</span><br><span class="line">            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> get_a:</span><br><span class="line">                com_name = i.get_text().strip(<span class="hljs-string">'.'</span>)</span><br><span class="line">                companys_list.append(com_name)</span><br><span class="line">        <span class="hljs-keyword">for</span> add <span class="hljs-keyword">in</span> all_address:</span><br><span class="line">            the_list = []</span><br><span class="line">            add_value = add.get_text()</span><br><span class="line">            the_list.append(add_value)</span><br><span class="line">            address_list = address_list + the_list</span><br><span class="line">        <span class="hljs-keyword">for</span> salary <span class="hljs-keyword">in</span> all_salary:</span><br><span class="line">            the_list = []</span><br><span class="line">            salary_value = salary.get_text()</span><br><span class="line">            <span class="hljs-keyword">if</span> salary_value == <span class="hljs-string">""</span>:</span><br><span class="line">                salary_value = <span class="hljs-string">"未知或面谈"</span></span><br><span class="line">            the_list.append(salary_value)</span><br><span class="line">            salary_list = salary_list + the_list</span><br><span class="line">        address_list.pop(<span class="hljs-number">0</span>)</span><br><span class="line">        salary_list.pop(<span class="hljs-number">0</span>)</span><br><span class="line">        zipped = zip(job_list, companys_list, address_list, salary_list)</span><br><span class="line">        <span class="hljs-keyword">for</span> zip_item <span class="hljs-keyword">in</span> zipped:</span><br><span class="line">            tree.insert(<span class="hljs-string">""</span>, <span class="hljs-number">1</span>, value=zip_item)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clear_data</span><span class="hljs-params">()</span>:</span></span><br><span class="line">        items = tree.get_children()</span><br><span class="line">        <span class="hljs-keyword">for</span> each_item <span class="hljs-keyword">in</span> items:</span><br><span class="line">            tree.delete(each_item)</span><br><span class="line"></span><br><span class="line">    wrap_framl = LabelFrame(win, text=<span class="hljs-string">"搜索"</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'14'</span>), width=<span class="hljs-number">650</span>, height=<span class="hljs-number">80</span>) \</span><br><span class="line">        .place(x=<span class="hljs-number">20</span>, y=<span class="hljs-number">30</span>)</span><br><span class="line">    label_notice = Label(wrap_framl, text=<span class="hljs-string">'职位关键词:'</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'13'</span>)) \</span><br><span class="line">        .place(x=<span class="hljs-number">35</span>, y=<span class="hljs-number">60</span>)</span><br><span class="line">    keyword_entry = Entry(wrap_framl, textvariable=keyword, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'13'</span>)) \</span><br><span class="line">        .place(x=<span class="hljs-number">150</span>, y=<span class="hljs-number">60</span>)</span><br><span class="line">    label_page_num = Label(wrap_framl, text=<span class="hljs-string">"页数:"</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'13'</span>)) \</span><br><span class="line">        .place(x=<span class="hljs-number">370</span>, y=<span class="hljs-number">60</span>)</span><br><span class="line">    page_num_chosen = ttk.Combobox(wrap_framl, width=<span class="hljs-number">10</span>, textvariable=page_num)</span><br><span class="line">    page_num_chosen[<span class="hljs-string">'values'</span>] = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)</span><br><span class="line">    page_num_chosen.current(<span class="hljs-number">0</span>)</span><br><span class="line">    page_num_chosen.place(x=<span class="hljs-number">425</span>, y=<span class="hljs-number">60</span>)</span><br><span class="line">    search_btn = Button(wrap_framl, text=<span class="hljs-string">'搜索'</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'13'</span>), bg=<span class="hljs-string">'red'</span>, fg=<span class="hljs-string">'white'</span>,</span><br><span class="line">                        command=search_job) \</span><br><span class="line">        .place(x=<span class="hljs-number">540</span>, y=<span class="hljs-number">55</span>)</span><br><span class="line">    clear_data_btn = Button(wrap_framl, text=<span class="hljs-string">'清除'</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'13'</span>), bg=<span class="hljs-string">'red'</span>, fg=<span class="hljs-string">'white'</span>, command=clear_data) \</span><br><span class="line">        .place(x=<span class="hljs-number">600</span>, y=<span class="hljs-number">55</span>)</span><br><span class="line">    other_keyword_label = Label(win, text=<span class="hljs-string">"其他关键词"</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'14'</span>), bg=<span class="hljs-string">'red'</span>, fg=<span class="hljs-string">'white'</span>)\</span><br><span class="line">        .place(x=<span class="hljs-number">290</span>, y=<span class="hljs-number">130</span>)</span><br><span class="line">    wrap_fram2 = LabelFrame(win, text=<span class="hljs-string">"公司性质"</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">570</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'14'</span>)) \</span><br><span class="line">        .place(x=<span class="hljs-number">20</span>, y=<span class="hljs-number">170</span>)</span><br><span class="line">    company_type = [(<span class="hljs-string">'所有'</span>, <span class="hljs-string">'99'</span>), (<span class="hljs-string">'国企'</span>, <span class="hljs-string">'04'</span>), (<span class="hljs-string">'外资(欧美)'</span>, <span class="hljs-string">'01'</span>), (<span class="hljs-string">'外资(非欧美)'</span>, <span class="hljs-string">'02'</span>), (<span class="hljs-string">'上市公司'</span>, <span class="hljs-string">'10'</span>),</span><br><span class="line">                        (<span class="hljs-string">'合资'</span>, <span class="hljs-string">'03'</span>), (<span class="hljs-string">'民营'</span>, <span class="hljs-string">'05'</span>), (<span class="hljs-string">'外企代表处'</span>, <span class="hljs-string">'06'</span>), (<span class="hljs-string">'政府机关'</span>, <span class="hljs-string">'07'</span>), (<span class="hljs-string">'事业单位'</span>, <span class="hljs-string">'08'</span>)]</span><br><span class="line"></span><br><span class="line">    i = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> com_type, com_type_num <span class="hljs-keyword">in</span> company_type:</span><br><span class="line">        Radiobutton(wrap_fram2, text=com_type, value=com_type_num, variable=v, font=(<span class="hljs-string">'XHei'</span>, <span class="hljs-string">'13'</span>))\</span><br><span class="line">            .place(x=<span class="hljs-number">30</span>, y=<span class="hljs-number">220</span>+i)</span><br><span class="line">        i += <span class="hljs-number">50</span></span><br><span class="line">    wrap_fram3 = LabelFrame(win, text=<span class="hljs-string">"工资范围"</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">570</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'14'</span>)) \</span><br><span class="line">        .place(x=<span class="hljs-number">245</span>, y=<span class="hljs-number">170</span>)</span><br><span class="line">    wrap_fram4 = LabelFrame(win, text=<span class="hljs-string">"学历要求"</span>, width=<span class="hljs-number">200</span>, height=<span class="hljs-number">570</span>, font=(<span class="hljs-string">'Xhei'</span>, <span class="hljs-string">'14'</span>)) \</span><br><span class="line">        .place(x=<span class="hljs-number">470</span>, y=<span class="hljs-number">170</span>)</span><br><span class="line">    win.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_search()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python,爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>关于CSS3的一些属性</title>
    <url>/2019/11/17/CSSvalue/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>1.auto,vw,vh</strong></p>
<figure class="highlight hljs"><table><tr><td class="code"><pre><span class="line">width:auto; //子元素会撑开至父元素的宽度，但会减去自身Margin和Padding的大小，不会溢出。</span><br><span class="line">width：100%; //子元素会撑开父元素至的宽度，但如果自身还有Margin或者Padding，则宽度是父元素的宽度加上Margin和Padding的宽度，会溢出。</span><br><span class="line">width:50vw; //这里的vw表示视窗宽度的百分比，1vw就是50%的宽度。</span><br><span class="line">height:50vh; //这里的vh视窗高度的百分比，50vh就是视窗高度的50%。</span><br></pre></td></tr></table></figure>

<p><strong>2.css3的新属性：vw、vh、vmin、vmax</strong></p>
<figure class="highlight css hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-selector-tag">vw</span>：视窗宽度的百分比（1<span class="hljs-selector-tag">vw</span> 代表视窗的宽度为 1%）</span><br><span class="line"><span class="hljs-selector-tag">vh</span>：视窗高度的百分比</span><br><span class="line"><span class="hljs-selector-tag">vmin</span>：当前 <span class="hljs-selector-tag">vw</span> 和 <span class="hljs-selector-tag">vh</span> 中较小的一个值</span><br><span class="line"><span class="hljs-selector-tag">vmax</span>：当前 <span class="hljs-selector-tag">vw</span> 和 <span class="hljs-selector-tag">vh</span> 中较大的一个值</span><br></pre></td></tr></table></figure>

<p><strong>3.vw、vh 与 % 百分比的区别</strong></p>
<ul>
<li>% 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。</li>
<li>vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的，所以这是挺不错的优势。</li>
</ul>
]]></content>
      <categories>
        <category>web学习</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js入门</title>
    <url>/2019/11/05/Vue-js-Learn/</url>
    <content><![CDATA[<center>Vue基础的指令</center>
<a id="more"></a>
**<center>v-for</center>**
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"player"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"player in nba"</span>&gt;</span>&#123;&#123; player.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> player = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="hljs-string">'#player'</span>,</span><br><span class="line">	data: &#123;</span><br><span class="line">		nba: [</span><br><span class="line">			&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Dwyane Wade'</span> &#125;,</span><br><span class="line">			&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Lebron  James'</span> &#125;,</span><br><span class="line">			&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Anthony Davis'</span> &#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong><center>v-on 和 v-if</center></strong> </p>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"showBtn"</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"handleClick"</span>&gt;</span>Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">	data:&#123;</span><br><span class="line">		showBtn: <span class="hljs-literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;   </span><br><span class="line">		handleClick: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">			<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Clicked!'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong><center>v-model 双向数据绑定</center></strong></p>
<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入您的名字"</span>&gt;</span></span><br><span class="line">	<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好, &#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">	<span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">	el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">	data: &#123;</span><br><span class="line"><span class="hljs-javascript">		name: <span class="hljs-string">''</span></span></span><br><span class="line">	&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<center>vue实现文字滚动显示效果</center>

<figure class="highlight html hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">			<span class="hljs-comment">&lt;!--v-on可以缩写例如：v-on:click  |  缩写为: @click  --&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"MoveIt"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"move()"</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"SlowIt"</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"stop()"</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UseThis"</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"usethis()"</span>&gt;</span></span><br><span class="line">			<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">		<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">			<span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="hljs-javascript">				el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="hljs-javascript">					text: <span class="hljs-string">'I will success!'</span>,</span></span><br><span class="line"><span class="hljs-javascript">					intervalId: <span class="hljs-literal">null</span> <span class="hljs-comment">//在data上定义一个定时器的ID,方便methods中访问并改变值</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				methods: &#123;</span><br><span class="line">					move()&#123;</span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span></span></span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-comment">//防止this指向不明</span></span></span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.intervalId != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;</span></span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-keyword">this</span>.intervalId = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-comment">//在vue实例中,要获取data上的数据,或者想要调用methods里面的方法,需要用到this来调用</span></span></span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-keyword">var</span> start = _this.text.substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>); </span></span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-comment">//获取到text的头一个字符</span></span></span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-keyword">var</span> end = _this.text.substring(<span class="hljs-number">1</span>); </span></span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-comment">//获取到text的最后一个字符</span></span></span><br><span class="line">							_this.text = end + start;</span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-comment">//重新拼接得到新的字符串,赋值给this.text</span></span></span><br><span class="line">							</span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-comment">//注意: 这个app的vue实例会自动监听自己身上data中所有数据的改变,</span></span></span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-comment">//只要数据一发生改变,就会自动把最新的数据从data中同步到页面中去,</span></span></span><br><span class="line"><span class="hljs-javascript">							<span class="hljs-comment">//[好处：只需要关心数据，不需要考虑如何重新渲染DOM页面]</span></span></span><br><span class="line">						&#125;,100)</span><br><span class="line">					&#125;,</span><br><span class="line">					stop()&#123;</span><br><span class="line"><span class="hljs-javascript">						clearInterval(<span class="hljs-keyword">this</span>.intervalId);</span></span><br><span class="line"><span class="hljs-javascript">						<span class="hljs-keyword">this</span>.intervalId = <span class="hljs-literal">null</span>;</span></span><br><span class="line">					&#125;,</span><br><span class="line"><span class="hljs-javascript">					usethis: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">						alert(<span class="hljs-keyword">this</span>.text); <span class="hljs-comment">//这里的text是data中的text的值</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA-抽象</title>
    <url>/2019/10/26/java-AbstractDemo/</url>
    <content><![CDATA[<center>JAVA中的抽象，作业实例</center>
<a id="more"></a>

<figure class="highlight java hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-comment">//定义了一个抽象基类（父类）</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-keyword">protected</span> String shapeName;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//抽象方法</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//抽象方法</span></span><br><span class="line">	</span><br><span class="line">	Shape(String shapeName) &#123;</span><br><span class="line">		<span class="hljs-keyword">this</span>.shapeName = shapeName;</span><br><span class="line">		System.out.println(<span class="hljs-string">"形状是："</span>+shapeName);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;</span><br><span class="line">		Shape rectangle,circle;</span><br><span class="line">		rectangle = <span class="hljs-keyword">new</span> Rectangle(<span class="hljs-string">"矩形"</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>);</span><br><span class="line">		rectangle.getArea();</span><br><span class="line">		rectangle.getLength();</span><br><span class="line">		circle = <span class="hljs-keyword">new</span> Circle(<span class="hljs-string">"圆"</span>, <span class="hljs-number">5.0</span>);</span><br><span class="line">		circle.getArea();</span><br><span class="line">		circle.getLength();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//继承自Shape类，必须实现父类的抽象方法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;</span><br><span class="line">	Double area,length,width,height;</span><br><span class="line">	Rectangle(String shapeName,<span class="hljs-keyword">double</span> width,<span class="hljs-keyword">double</span> height) &#123;</span><br><span class="line">		<span class="hljs-keyword">super</span>(shapeName); </span><br><span class="line">		<span class="hljs-keyword">this</span>.width = width;</span><br><span class="line">		<span class="hljs-keyword">this</span>.height = height;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">//实现父类中的getArea方法</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		area = width * height;</span><br><span class="line">		System.out.println(<span class="hljs-string">"面积是："</span> + area);</span><br><span class="line">		<span class="hljs-keyword">return</span> area;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">//实现父类中的getLength方法</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		length = <span class="hljs-number">2</span> * (width + height);</span><br><span class="line">		System.out.println(<span class="hljs-string">"周长是："</span> + length);</span><br><span class="line">		<span class="hljs-keyword">return</span> length;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//继承自Shape类，必须实现父类的抽象方法</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;</span><br><span class="line">	Double area,length,radius;</span><br><span class="line">	<span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;</span><br><span class="line">	Circle(String shapeName,<span class="hljs-keyword">double</span> radius) &#123;</span><br><span class="line">		<span class="hljs-keyword">super</span>(shapeName);</span><br><span class="line">		<span class="hljs-keyword">this</span>.radius = radius;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">//实现父类中的getArea方法</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		area = PI * (radius * radius);</span><br><span class="line">		System.out.println(<span class="hljs-string">"面积是："</span> + area);</span><br><span class="line">		<span class="hljs-keyword">return</span> area;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">//实现父类中的getLength方法</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		length = (<span class="hljs-number">2</span> * radius) * PI;</span><br><span class="line">		System.out.println(<span class="hljs-string">"周长是："</span> + length);</span><br><span class="line">		<span class="hljs-keyword">return</span> length;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java作业</title>
    <url>/2019/10/15/java-homework/</url>
    <content><![CDATA[<center>BMI计算器</center>
<a id="more"></a>

<hr>
<figure class="highlight java hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.omg.CORBA.PRIVATE_MEMBER;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetBMI</span></span>&#123;</span><br><span class="line">	<span class="hljs-keyword">double</span> weight,height,final_BMI;</span><br><span class="line">	<span class="hljs-keyword">boolean</span> right = <span class="hljs-keyword">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">//计算BMI的值	</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">GetBMI</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">		final_BMI = weight/(height*height);</span><br><span class="line">		<span class="hljs-keyword">return</span> final_BMI;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">//获取身高体重数据，并对输入的数据进行可行性验证</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		<span class="hljs-keyword">boolean</span> a = <span class="hljs-keyword">true</span>;</span><br><span class="line">		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="hljs-keyword">while</span>(a) &#123;</span><br><span class="line">			System.out.println(<span class="hljs-string">"请输入你的体重:"</span>);</span><br><span class="line">			<span class="hljs-keyword">if</span>(input.hasNextDouble()) &#123;</span><br><span class="line">				weight = input.nextDouble();</span><br><span class="line">				System.out.println(<span class="hljs-string">"请输入你的身高:"</span>);</span><br><span class="line">				height = input.nextDouble();</span><br><span class="line">				<span class="hljs-keyword">break</span>;</span><br><span class="line">			&#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="hljs-string">"数据输入错误，请重新来！"</span>);</span><br><span class="line">				<span class="hljs-keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">//获取BMI所在的范围，打印出提醒语句</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compare</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		GetBMI();</span><br><span class="line">		<span class="hljs-keyword">if</span> (final_BMI &gt;= <span class="hljs-number">40</span>) &#123;</span><br><span class="line">			System.out.println(<span class="hljs-string">"You can go die!!!!"</span>);</span><br><span class="line">		&#125;<span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(final_BMI &gt;= <span class="hljs-number">35</span> &amp;&amp; final_BMI &lt; <span class="hljs-number">40</span>) &#123;</span><br><span class="line">			System.out.println(<span class="hljs-string">"你严重肥胖！"</span>);</span><br><span class="line">		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (final_BMI &gt;= <span class="hljs-number">30</span> &amp;&amp; final_BMI &lt; <span class="hljs-number">35</span>) &#123;</span><br><span class="line">			System.out.println(<span class="hljs-string">"你属于肥胖！"</span>);</span><br><span class="line">		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (final_BMI &gt;= <span class="hljs-number">25</span> &amp;&amp; final_BMI &lt; <span class="hljs-number">30</span>) &#123;</span><br><span class="line">			System.out.println(<span class="hljs-string">"你属于偏胖！"</span>);</span><br><span class="line">		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (final_BMI &gt;= <span class="hljs-number">18</span> &amp;&amp; final_BMI &lt; <span class="hljs-number">25</span> ) &#123;</span><br><span class="line">			System.out.println(<span class="hljs-string">"你的BMI正常！"</span>);</span><br><span class="line">		&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="hljs-string">"你太瘦了！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="hljs-comment">//获得计算结果并输出</span></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">		DecimalFormat dFormat = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">"0.00"</span>);</span><br><span class="line">		<span class="hljs-keyword">this</span>.GetBMI();</span><br><span class="line">		System.out.println(<span class="hljs-string">"Your BMI is :"</span>+dFormat.format(final_BMI));</span><br><span class="line">		compare();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BMICauculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="hljs-comment">// TODO Auto-generated method stub</span></span><br><span class="line">			GetBMI bmi = <span class="hljs-keyword">new</span> GetBMI();</span><br><span class="line">			bmi.getData();</span><br><span class="line">			bmi.show();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python作业</title>
    <url>/2019/10/10/Python/</url>
    <content><![CDATA[<center>Python作业，熟悉Python语法基础</center>

<a id="more"></a>

<blockquote>
<p>题目背景介绍：你准备去海南旅游，现在要订购机票。机票的价格受旺季、淡季影响，而且头等舱和经济舱的价格也不同。假设机票原价是5000元，4~10月为旺季，旺季头等舱打9折，经济舱6折；其他月份为淡季，淡季头等舱5折，经济舱4折，编写程序，根据出行的月份和选择的舱位输出实际机票的价格。</p>
</blockquote>
<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line">final_price = <span class="hljs-number">0</span></span><br><span class="line">price = <span class="hljs-number">5000</span></span><br><span class="line">print(<span class="hljs-string">'请输入你想出行的月份(1~12)：'</span>)</span><br><span class="line">month = eval(input())</span><br><span class="line">print(<span class="hljs-string">'请输入你想购买的舱位，头等舱输入1，二等舱输入2'</span>)</span><br><span class="line">level = eval(input())</span><br><span class="line"><span class="hljs-keyword">if</span> month &gt;= <span class="hljs-number">4</span> <span class="hljs-keyword">and</span> month &lt;= <span class="hljs-number">10</span>:</span><br><span class="line">    <span class="hljs-keyword">if</span> level == <span class="hljs-number">1</span>:</span><br><span class="line">        final_price = price * <span class="hljs-number">0.9</span></span><br><span class="line">        print(<span class="hljs-string">'您的机票价格为：'</span> + str(final_price))</span><br><span class="line">    <span class="hljs-keyword">elif</span> level == <span class="hljs-number">2</span>:</span><br><span class="line">        final_price = price * <span class="hljs-number">0.6</span></span><br><span class="line">        print(<span class="hljs-string">'您的机票价格为：'</span> + str(final_price))</span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line">    <span class="hljs-keyword">if</span> level == <span class="hljs-number">1</span>:</span><br><span class="line">        final_price = price * <span class="hljs-number">0.5</span></span><br><span class="line">        print(<span class="hljs-string">'您的机票价格为：'</span> + str(final_price))</span><br><span class="line">    <span class="hljs-keyword">elif</span> level == <span class="hljs-number">2</span>:</span><br><span class="line">        final_price = price * <span class="hljs-number">0.4</span></span><br><span class="line">        print(<span class="hljs-string">'您的机票价格为：'</span> + str(final_price))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>题目：输入一批数字，输出其中的最大值和最小值，输入数字0结束.</p>
</blockquote>
<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line">a = <span class="hljs-number">0</span></span><br><span class="line">list = []</span><br><span class="line"><span class="hljs-keyword">while</span> a == <span class="hljs-number">0</span>:</span><br><span class="line">    print(<span class="hljs-string">'请输入一个数:'</span>)</span><br><span class="line">    number = eval(input())</span><br><span class="line">    list.append(number)</span><br><span class="line">    <span class="hljs-keyword">if</span> number == <span class="hljs-number">0</span>:</span><br><span class="line">        a != <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">break</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">continue</span></span><br><span class="line">list.sort(reverse=<span class="hljs-literal">True</span>)</span><br><span class="line">print(<span class="hljs-string">'最大值为:'</span> + str(list[<span class="hljs-number">0</span>]))</span><br><span class="line">list.sort()</span><br><span class="line">print(<span class="hljs-string">'最小值为：'</span> + str(list[<span class="hljs-number">1</span>]))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>题目：创建一个列表，将员工月薪数据保存到其中，并对列表进行如下操作：<br>1.添加一名月薪6000的员工至列表末尾<br>2.插入一名月薪7500的员工到列表中索引为2的位置<br>3.移除列表中最后一个数据，并显示移除的值<br>4.将列表中的第二个数据的值增加100<br>5.删除列表中第5个数据<br>6.按顺序遍历输出员工的月薪<br>7.将所有月薪小于5000的员工月薪，修改为5000，并输出其索引值</p>
</blockquote>
<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line">month_salary = [&#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'a1'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'王保华'</span>,<span class="hljs-string">'salary'</span>:<span class="hljs-number">10000</span>&#125;,</span><br><span class="line">                &#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'a2'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'李维新'</span>,<span class="hljs-string">'salary'</span>:<span class="hljs-number">5200</span>&#125;,</span><br><span class="line">                &#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'a3'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'张强'</span>,<span class="hljs-string">'salary'</span>:<span class="hljs-number">4700</span>&#125;,</span><br><span class="line">                &#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'a4'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'张明'</span>,<span class="hljs-string">'salary'</span>:<span class="hljs-number">3860</span>&#125;,</span><br><span class="line">                &#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'a5'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'陈鑫'</span>,<span class="hljs-string">'salary'</span>:<span class="hljs-number">1200</span>&#125;,</span><br><span class="line">                &#123;<span class="hljs-string">'id'</span>:<span class="hljs-string">'a6'</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'李牧'</span>,<span class="hljs-string">'salary'</span>:<span class="hljs-number">8500</span>&#125;]</span><br><span class="line"></span><br><span class="line">month_salary.append(&#123;<span class="hljs-string">'salary'</span>:<span class="hljs-number">6000</span>&#125;)</span><br><span class="line">month_salary.insert(<span class="hljs-number">2</span>,&#123;<span class="hljs-string">'salary'</span>:<span class="hljs-number">7500</span>&#125;)</span><br><span class="line">month_salary[<span class="hljs-number">1</span>][<span class="hljs-string">'salary'</span>] += <span class="hljs-number">100</span></span><br><span class="line">month_salary.pop(<span class="hljs-number">4</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range (len(month_salary)):</span><br><span class="line">    <span class="hljs-keyword">if</span> month_salary[i][<span class="hljs-string">'salary'</span>] &lt; <span class="hljs-number">5000</span>:</span><br><span class="line">        month_salary[i][<span class="hljs-string">'salary'</span>] = <span class="hljs-number">5000</span></span><br><span class="line">        index = i</span><br><span class="line">        print(<span class="hljs-string">'月薪低于5000的索引为：'</span> + str(index))</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        month_salary[i][<span class="hljs-string">'salary'</span>] = month_salary[i][<span class="hljs-string">'salary'</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range (len(month_salary)):</span><br><span class="line">    print(month_salary[i])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建一个字典，将员工工号、姓名、月薪数据保存到字典中，并按要求做如下操作:<br>1.打印所有员工信息<br>2.从字典中获取员工工号为“a4”的员工信息，并打印<br>3.判断是否有工号为“a9”的员工，如果存在，输出该员工信息；否则输出“员工不存在”<br>4.遍历字典中所有员工信息，并输出<br>5.添加一名员工数据：工号a7，姓名李梅，月薪9000<br>6.将工号为a4的员工的月薪修改为4900<br>7.删除列表中工号为a4的员工数据 </p>
</blockquote>
<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line">month_salary = &#123;<span class="hljs-string">'a1'</span>:[<span class="hljs-string">'王保华'</span>,<span class="hljs-number">10000</span>],</span><br><span class="line">          <span class="hljs-string">'a2'</span>:[<span class="hljs-string">'李维新'</span>,<span class="hljs-number">10000</span>],</span><br><span class="line">          <span class="hljs-string">'a3'</span>:[<span class="hljs-string">'张强'</span>,<span class="hljs-number">10000</span>],</span><br><span class="line">          <span class="hljs-string">'a4'</span>:[<span class="hljs-string">'张明'</span>,<span class="hljs-number">10000</span>],</span><br><span class="line">          <span class="hljs-string">'a5'</span>:[<span class="hljs-string">'陈鑫'</span>,<span class="hljs-number">10000</span>],</span><br><span class="line">          <span class="hljs-string">'a6'</span>:[<span class="hljs-string">'李牧'</span>,<span class="hljs-number">10000</span>]&#125;</span><br><span class="line">i = <span class="hljs-string">'a9'</span></span><br><span class="line">print(month_salary)</span><br><span class="line">print(month_salary[<span class="hljs-string">'a4'</span>])</span><br><span class="line"><span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> month_salary:</span><br><span class="line">    employee = month_salary[i]</span><br><span class="line">    print(<span class="hljs-string">'工号为%s的员工信息：'</span>%i)</span><br><span class="line">    print(employee)</span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line">    print(<span class="hljs-string">'员工不存在'</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> month_salary:</span><br><span class="line">    print(month_salary[<span class="hljs-string">'%s'</span>%number])</span><br><span class="line">month_salary[<span class="hljs-string">'a7'</span>] = [<span class="hljs-string">'李梅'</span>,<span class="hljs-number">9000</span>]</span><br><span class="line">month_salary[<span class="hljs-string">'a4'</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">4900</span></span><br><span class="line">print(month_salary[<span class="hljs-string">'a4'</span>][<span class="hljs-number">1</span>])</span><br><span class="line">print(month_salary)</span><br><span class="line"><span class="hljs-keyword">del</span> month_salary[<span class="hljs-string">'a4'</span>]</span><br><span class="line">print(month_salary)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>统计诗经《桃夭》中出现的汉字和标点的次数。<br>1.使用字符串保存《桃夭》<br>2.遍历诗歌中所有的汉字和标点<br>3.遍历过程中统计用到了哪些汉字和标点<br>4.统计汉字和标点个数使用字典结构<br>5.判断字符是否在字典中，如果在，则将该键对应的值加1，如果不在则新创建该键，并赋值1<br>6.使用for循环遍历输出汉字、标点的使用个数 </p>
</blockquote>
<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line">poem = <span class="hljs-string">"""桃之夭夭，灼灼其华。之子于归，宜其室家。桃之夭夭，有蕡其实。之子于归，宜其家室。桃之夭夭，其叶蓁蓁。之子于归，宜其家人。"""</span></span><br><span class="line">character_counts = &#123;&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> character <span class="hljs-keyword">in</span> poem:</span><br><span class="line">    <span class="hljs-keyword">if</span> character <span class="hljs-keyword">in</span> character_counts:</span><br><span class="line">        character_counts[character] += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        character_counts[character] = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> character_counts:</span><br><span class="line">    print(<span class="hljs-string">"%s出现了 %d次"</span>%(key,character_counts[key]))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义函数接收年份和月份，返回对应的月份有多少天：闰年二月为29天，否则为28天（闰年就是二月有29天的年份，能被4整除但不能被100整除的是闰年，能被400整除的也是闰年）。4,6,9,11月为30天,其余月为31天</p>
</blockquote>
<figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getYear</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    print(<span class="hljs-string">'请输入一个年份：'</span>)</span><br><span class="line">    year = eval(input())</span><br><span class="line">    print(<span class="hljs-string">'请输入月份：'</span>)</span><br><span class="line">    month = eval(input())</span><br><span class="line">    <span class="hljs-keyword">if</span>(year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> month == <span class="hljs-number">2</span>:</span><br><span class="line">            print(<span class="hljs-string">'%d年%d月有29天'</span>%(year,month))</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            print(<span class="hljs-string">'%d年%d月有29天'</span> % (year, month))</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">if</span> month == <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> month == <span class="hljs-number">6</span> <span class="hljs-keyword">or</span> month == <span class="hljs-number">9</span> <span class="hljs-keyword">or</span> month == <span class="hljs-number">11</span>:</span><br><span class="line">            print(<span class="hljs-string">'%d年%d月有30天'</span>%(year,month))</span><br><span class="line">        <span class="hljs-keyword">elif</span> month == <span class="hljs-number">2</span>:</span><br><span class="line">            print(<span class="hljs-string">'%d年%d月有28天'</span> % (year, month))</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            print(<span class="hljs-string">'%d年%d月有31天'</span> % (year, month))</span><br><span class="line">getYear()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Cmd Markdown</title>
    <url>/2018/06/23/markdown%20eidtor/</url>
    <content><![CDATA[<center>这是一篇关于个人博客最普遍使用的编辑语言MarkDown的介绍以及简单的理解</center>

<a id="more"></a>
<hr>
<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul>
<li><input disabled type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input disabled type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input checked disabled type="checkbox"> 新增 Todo 列表功能</li>
<li><input checked disabled type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked disabled type="checkbox"> 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-meta">@requires_authorization</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeClass</span>:</span></span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    <span class="hljs-comment"># A comment</span></span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">'hello world'</span></span><br></pre></td></tr></table></figure>

<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>

<h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="noopener">甘特图</a></h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>

<h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="noopener">@ghosert</a><br>2016 年 07月 07日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
      <categories>
        <category>个人Blog</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
</search>
