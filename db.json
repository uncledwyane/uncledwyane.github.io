{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/vue-note/watch_note1.png","path":"images/vue-note/watch_note1.png","modified":0,"renderable":0},{"_id":"source/images/vue_router/vue_router1-1.gif","path":"images/vue_router/vue_router1-1.gif","modified":0,"renderable":0},{"_id":"source/images/vue_router/vue_router1.gif","path":"images/vue_router/vue_router1.gif","modified":0,"renderable":0},{"_id":"source/images/vue-practice3.gif","path":"images/vue-practice3.gif","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"00d71c8c0da5eee9cb4c1de700cb758baa8e24d5","modified":1598516537349},{"_id":"source/_posts/CSSvalue.md","hash":"041a069c6bf0d5016296e7931d78521fac501689","modified":1598516537350},{"_id":"source/_posts/ES6-learn.md","hash":"629282b209eca8f9bc9de593b38aa69c7f0ce9ce","modified":1598516537350},{"_id":"source/_posts/Python.md","hash":"799d9e0f4d0ec08474e125aa1ed6963d728bcaed","modified":1598516537351},{"_id":"source/_posts/StructOfData-DLinkList-TwoDirection.md","hash":"fd1f33327ee59f067bd273f8bebb2faf43f36c60","modified":1598516537352},{"_id":"source/_posts/StructOfData-DLinkListRound.md","hash":"9d8465d4bc49cd54c2e2bc29347490eadae7c181","modified":1598516537352},{"_id":"source/_posts/StructOfData-LinkList-Operation.md","hash":"d24a1c00c618ef3225f5a3ebdb3ef4aeaef63ae3","modified":1598516537353},{"_id":"source/_posts/StructOfData-SequenList-Operation.md","hash":"82c95c4a8ac31b91e3b50a185486bf207e0d6b5e","modified":1598516537353},{"_id":"source/_posts/Vue-js-Learn.md","hash":"0350586bd363aebd5743f2fa40f5773f1ed5f2d2","modified":1598516537354},{"_id":"source/_posts/babel-config.md","hash":"0a48fdac0f82aa034dd2199c31b3205a3ad50f75","modified":1598516537354},{"_id":"source/_posts/cross-origin.md","hash":"3f492d247af08f465fad2e302087490ce37b7295","modified":1598516537355},{"_id":"source/_posts/git-res-tutorial.md","hash":"6b0a2fc69f083909010c992bbc8d0713c9747f05","modified":1598516537355},{"_id":"source/_posts/git-with-reponsitory.md","hash":"7b6dfd458faea8c627946455063504271c5adff4","modified":1598516537355},{"_id":"source/_posts/hexo.lnk","hash":"7e3ae38eb8bd66a11979f08fb2bb7a698fee49d3","modified":1598516537356},{"_id":"source/_posts/howtouninstall.md","hash":"ef29a57a7dfb5000711acd76f4629c02803a4dbd","modified":1598516537356},{"_id":"source/_posts/java-AbstractDemo.md","hash":"f8394d7be74128ab26093b3aa08a5306e094b056","modified":1598516537357},{"_id":"source/_posts/java-GUI-GuessRandomNumber.md","hash":"ba09b6feb98b6c933e0f18e07a8ff354c5880eff","modified":1598516537357},{"_id":"source/_posts/java-homework.md","hash":"dbe5049f373698b3c2c618c1f06f1fa31d8f6360","modified":1598516537358},{"_id":"source/_posts/my-project-note.md","hash":"7509c39837f6350e696af16733c3187869015545","modified":1598516537358},{"_id":"source/_posts/myfirstpractice.md","hash":"8aa197cfb678ec7a286ab581f56900d85ad3a14f","modified":1598516537359},{"_id":"source/_posts/node-express-start.md","hash":"a0a8b59a57d384187b5f8bdad27369b84c6f75e7","modified":1598516537359},{"_id":"source/_posts/node-first_demo.md","hash":"9c816455ea89c5b127f9f8f70dbcff78d52e909c","modified":1598516537360},{"_id":"source/_posts/node-note.md","hash":"5463f6e88c8d4ffad24f4f0843eaac4b10f68fb0","modified":1598516537361},{"_id":"source/_posts/node-start.md","hash":"801104a4b4fe47cd3e09ddf89c640890f1ee5656","modified":1598516537361},{"_id":"source/_posts/node-studentOS-file.md","hash":"34684dc98d475b0d1f18cbcd390d4b1fcef03270","modified":1598516537362},{"_id":"source/_posts/node-studentOS-mongo.md","hash":"5ef40c8d6317a9bbb91e687c93bef55beb2d7141","modified":1598516537362},{"_id":"source/_posts/note-callback.md","hash":"eb8645689c2383e80516a1f4e0e9c68513ec5fdc","modified":1598516537363},{"_id":"source/_posts/pc-svp4pro.md","hash":"9988211cf5f171473e805ed2a12885836eb1a143","modified":1598516537363},{"_id":"source/_posts/python-lagou.md","hash":"a39642a342c6c520060038c0aaf4eb5bad8a6151","modified":1598516537364},{"_id":"source/_posts/python-scrapy.md","hash":"9b59e32bef50314f9eff1c6e978d1d304c176245","modified":1598516537365},{"_id":"source/_posts/solution-404.md","hash":"6c79dee21390784924637f98afbddb110b672563","modified":1598516537365},{"_id":"source/_posts/tips-win-active.md","hash":"88cbe24b8a8839354b29b0ffbf1047a6a1cb2608","modified":1598516537366},{"_id":"source/_posts/vue-com-child.md","hash":"10695f3982e68236360f81342e3e7c74a618f62c","modified":1598516537366},{"_id":"source/_posts/vue-component-note2.md","hash":"90d73831bd6b67068f872aa679b0e97c5914c005","modified":1598516537366},{"_id":"source/_posts/vue-component.md","hash":"488be9b7f2c094e1afba5335ac2dd5730addcb83","modified":1598516537367},{"_id":"source/_posts/vue-deep-scoped.md","hash":"58f0b2016b6b5d43f675dd09435c7dfa8f9d4c97","modified":1598516537367},{"_id":"source/_posts/vue-directive.md","hash":"db050cd8c556a8dacba89e1ec187013d0ecef07d","modified":1598516537368},{"_id":"source/_posts/vue-filter.md","hash":"3397876b6d938ba60db5455bbe5d44a35afdfbd1","modified":1598516537368},{"_id":"source/_posts/vue-mixins.md","hash":"d97cf1c5f36b5b2761e0732654eed5e9a2ea2eb7","modified":1598516537370},{"_id":"source/_posts/vue-notebook.md","hash":"b9c7e6373242f3c8cae19b890ed7a58da8ba6a6b","modified":1598516537370},{"_id":"source/_posts/vue-practice.md","hash":"6e5daf34dc9da577b10be4671d6a6efcf176ec96","modified":1598516537371},{"_id":"source/_posts/vue-practice1.md","hash":"4e4e6dffefa8de5bf8586e47912a2abb4e7a8527","modified":1598516537371},{"_id":"source/_posts/vue-practice3.md","hash":"27720f5f3c8b0804430828219d4ae236f1be40d9","modified":1598516537372},{"_id":"source/_posts/vue-practice4.md","hash":"07d7474cc2a9012d93483fa8619f564455e1e336","modified":1598516537372},{"_id":"source/_posts/vue-practice5.md","hash":"f3e6968987ddfa719cc96a01b29ed112a1e6a089","modified":1598516537373},{"_id":"source/_posts/vue-router1.md","hash":"10b191d51be4f70e283f34083d3a196a24587ae0","modified":1598516537373},{"_id":"source/_posts/vue-shop.md","hash":"f0bd573d0aa5f762face78ffd655ffdc0afba734","modified":1598516537374},{"_id":"source/_posts/vue-slot.md","hash":"79b5a70e245e070bb0489abd784585dbee5bb231","modified":1598516537375},{"_id":"source/_posts/vue-twoWayToUpdateDate.md","hash":"3f819e0ede003943160f60f9407637e444b37222","modified":1598516537375},{"_id":"source/_posts/webpack-create.md","hash":"ec0f39bd0d2a38c560acab849258eaaecb6fba7b","modified":1598516537375},{"_id":"source/_posts/webpack-dev-server_create.md","hash":"12c80f799c67fe447fb8861d7c538280717d4ba9","modified":1598516537376},{"_id":"source/_posts/webpack-loaders.md","hash":"a8bd862e4c4ca32dcc03614adbcce9dd43c348af","modified":1598516537376},{"_id":"source/about/index.md","hash":"ced690f2c430674d864e12d4680cb08a504cf801","modified":1598516537378},{"_id":"source/archives/index.md","hash":"4002e6a68d058f5ea2c27ee807c20b9f6319e3b0","modified":1598516537379},{"_id":"source/categories/index.md","hash":"52317863e1e636741c37be6415860a545ab80ff8","modified":1598516537380},{"_id":"source/schedule/index.md","hash":"e99ce8010abcde6a4cca412d4d784738d01f59dc","modified":1598516537391},{"_id":"source/tags/index.md","hash":"19327821657904a53d274802e127472d745ca809","modified":1598516537392},{"_id":"source/_posts/vue-heima-1.md","hash":"05ae4c3be51e2e42c3bd102a3f3dc6f2b3a45e77","modified":1598516537369},{"_id":"source/_posts/webpack-multi-config.md","hash":"49b334a34b80c536be8118006185c74c1ef18196","modified":1598516537377},{"_id":"source/images/vue-note/watch_note1.png","hash":"8b8fa4820eced27fc6d9edb729854eb7de32aa0f","modified":1598516537383},{"_id":"source/images/vue_router/vue_router1-1.gif","hash":"cca1bd54ad3f9eb752487a9376398d73b0ab069b","modified":1598516537388},{"_id":"source/images/vue_router/vue_router1.gif","hash":"7d2b5b8d8a226ce1899f2834dd968455130a8f2a","modified":1598516537390},{"_id":"source/images/vue-practice3.gif","hash":"6fc13519980b4759990fd9cdf5e5bf64c208d4cc","modified":1598516537387}],"Category":[{"name":"web学习","_id":"ckecjkrfh0004r0u2hptv9pbi"},{"name":"JavaScript","_id":"ckecjkrfl0009r0u26t7ibbam"},{"name":"数据结构","_id":"ckecjkrfn000fr0u28lovgtcg"},{"name":"编程","_id":"ckecjkrfr000qr0u22n7q0bue"},{"name":"Vue.js","_id":"ckecjkrfx0019r0u2h9yse4aq"},{"name":"webpack","_id":"ckecjkrfz001ir0u2enqs2627"},{"name":"Github","_id":"ckecjkrg2001pr0u24r1z15ux"},{"name":"git","_id":"ckecjkrg50020r0u23cyjghbt"},{"name":"电脑相关","_id":"ckecjkrg70027r0u24h5z0ivz"},{"name":"笔记","_id":"ckecjkrgb002er0u29rg35eao"},{"name":"node","_id":"ckecjkrgf002tr0u2hzdx8gr9"},{"name":"Python","_id":"ckecjkrgw004dr0u22drb1pmm"}],"Data":[],"Page":[{"title":"about","date":"2019-10-14T05:54:46.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-10-14 13:54:46\n---\n","updated":"2020-08-27T08:22:17.378Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckecjkrff0001r0u2a2blhj6a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"archives","date":"2019-10-14T05:54:08.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-10-14 13:54:08\n---\n","updated":"2020-08-27T08:22:17.379Z","path":"archives/index.html","comments":1,"layout":"page","_id":"ckecjkrfg0003r0u28j3t7bjz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-10-14T05:53:24.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-10-14 13:53:24\n---\n","updated":"2020-08-27T08:22:17.380Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckecjkrh4005rr0u25e0h3shw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2019-10-14T05:54:14.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2019-10-14 13:54:14\n---\n","updated":"2020-08-27T08:22:17.391Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ckecjkrh4005sr0u288eafdq9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-10-14T05:53:10.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-10-14 13:53:10\n---\n","updated":"2020-08-27T08:22:17.392Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckecjkrh5005tr0u25slff5t5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"关于CSS3的一些属性","date":"2019-11-16T16:00:00.000Z","_content":"\n<!--more-->\n\n**1.auto,vw,vh**\n```css\nwidth:auto; //子元素会撑开至父元素的宽度，但会减去自身Margin和Padding的大小，不会溢出。\nwidth：100%; //子元素会撑开父元素至的宽度，但如果自身还有Margin或者Padding，则宽度是父元素的宽度加上Margin和Padding的宽度，会溢出。\nwidth:50vw; //这里的vw表示视窗宽度的百分比，1vw就是50%的宽度。\nheight:50vh; //这里的vh视窗高度的百分比，50vh就是视窗高度的50%。\n```\n**2.css3的新属性：vw、vh、vmin、vmax**\n```css\nvw：视窗宽度的百分比（1vw 代表视窗的宽度为 1%）\nvh：视窗高度的百分比\nvmin：当前 vw 和 vh 中较小的一个值\nvmax：当前 vw 和 vh 中较大的一个值\n```\n**3.vw、vh 与 % 百分比的区别**\n\n - % 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。\n - vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的，所以这是挺不错的优势。","source":"_posts/CSSvalue.md","raw":"---\ntitle: 关于CSS3的一些属性\ndate: 2019-11-17\ntags: CSS\ncategories: web学习\n---\n\n<!--more-->\n\n**1.auto,vw,vh**\n```css\nwidth:auto; //子元素会撑开至父元素的宽度，但会减去自身Margin和Padding的大小，不会溢出。\nwidth：100%; //子元素会撑开父元素至的宽度，但如果自身还有Margin或者Padding，则宽度是父元素的宽度加上Margin和Padding的宽度，会溢出。\nwidth:50vw; //这里的vw表示视窗宽度的百分比，1vw就是50%的宽度。\nheight:50vh; //这里的vh视窗高度的百分比，50vh就是视窗高度的50%。\n```\n**2.css3的新属性：vw、vh、vmin、vmax**\n```css\nvw：视窗宽度的百分比（1vw 代表视窗的宽度为 1%）\nvh：视窗高度的百分比\nvmin：当前 vw 和 vh 中较小的一个值\nvmax：当前 vw 和 vh 中较大的一个值\n```\n**3.vw、vh 与 % 百分比的区别**\n\n - % 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。\n - vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的，所以这是挺不错的优势。","slug":"CSSvalue","published":1,"updated":"2020-08-27T08:22:17.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrf90000r0u26xohg7ou","content":"<a id=\"more\"></a>\n\n<p><strong>1.auto,vw,vh</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width:auto; //子元素会撑开至父元素的宽度，但会减去自身Margin和Padding的大小，不会溢出。</span><br><span class=\"line\">width：100%; //子元素会撑开父元素至的宽度，但如果自身还有Margin或者Padding，则宽度是父元素的宽度加上Margin和Padding的宽度，会溢出。</span><br><span class=\"line\">width:50vw; //这里的vw表示视窗宽度的百分比，1vw就是50%的宽度。</span><br><span class=\"line\">height:50vh; //这里的vh视窗高度的百分比，50vh就是视窗高度的50%。</span><br></pre></td></tr></table></figure>\n<p><strong>2.css3的新属性：vw、vh、vmin、vmax</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">vw</span>：视窗宽度的百分比（1<span class=\"selector-tag\">vw</span> 代表视窗的宽度为 1%）</span><br><span class=\"line\"><span class=\"selector-tag\">vh</span>：视窗高度的百分比</span><br><span class=\"line\"><span class=\"selector-tag\">vmin</span>：当前 <span class=\"selector-tag\">vw</span> 和 <span class=\"selector-tag\">vh</span> 中较小的一个值</span><br><span class=\"line\"><span class=\"selector-tag\">vmax</span>：当前 <span class=\"selector-tag\">vw</span> 和 <span class=\"selector-tag\">vh</span> 中较大的一个值</span><br></pre></td></tr></table></figure>\n<p><strong>3.vw、vh 与 % 百分比的区别</strong></p>\n<ul>\n<li>% 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。</li>\n<li>vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的，所以这是挺不错的优势。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1.auto,vw,vh</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width:auto; //子元素会撑开至父元素的宽度，但会减去自身Margin和Padding的大小，不会溢出。</span><br><span class=\"line\">width：100%; //子元素会撑开父元素至的宽度，但如果自身还有Margin或者Padding，则宽度是父元素的宽度加上Margin和Padding的宽度，会溢出。</span><br><span class=\"line\">width:50vw; //这里的vw表示视窗宽度的百分比，1vw就是50%的宽度。</span><br><span class=\"line\">height:50vh; //这里的vh视窗高度的百分比，50vh就是视窗高度的50%。</span><br></pre></td></tr></table></figure>\n<p><strong>2.css3的新属性：vw、vh、vmin、vmax</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">vw</span>：视窗宽度的百分比（1<span class=\"selector-tag\">vw</span> 代表视窗的宽度为 1%）</span><br><span class=\"line\"><span class=\"selector-tag\">vh</span>：视窗高度的百分比</span><br><span class=\"line\"><span class=\"selector-tag\">vmin</span>：当前 <span class=\"selector-tag\">vw</span> 和 <span class=\"selector-tag\">vh</span> 中较小的一个值</span><br><span class=\"line\"><span class=\"selector-tag\">vmax</span>：当前 <span class=\"selector-tag\">vw</span> 和 <span class=\"selector-tag\">vh</span> 中较大的一个值</span><br></pre></td></tr></table></figure>\n<p><strong>3.vw、vh 与 % 百分比的区别</strong></p>\n<ul>\n<li>% 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。</li>\n<li>vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的，所以这是挺不错的优势。</li>\n</ul>"},{"title":"ES6学习","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/es6.png","date":"2020-04-28T05:48:40.000Z","toc":true,"_content":"\n<div class='post-summary'>\n    <p>\n       \t从表老师<a href='https://biaoyansu.com'>@表严肃</a>那里看了ES6精讲，做个学习笔记！\n    </p>\n</div>\n\n\n\n\n<!--more-->\n\n### let\n\n#### 语法\n\n```javascript\nlet a = 1; // 定义一个变量并赋值为1\n```\n\n因为和`var`类似但又有不同，用例子来比较：\n\n```javascript\n// 第一个例子\nif(true){\n    var a = 1;\n    let b = 2;\n}\nconsole.log('a:' + a);\nconsole.log('b:' + b);\n// 这里a能够输出1，但是b会报错，显示未定义\n\n// 第二个例子\nif(true){\n    let b = 2;\n    console.log('b:' + b); // 这个b能够正常输出\n}\nconsole.log('b:' + b); // 不能正常输出，显示未定义\n\n// 第三个例子\nfor(var i = 0; i < 5; i++){ // 使用 var 定义\n    console.log(i); \n} // 这里会输出 0 1 2 3 4\nconsole.log(i); // 到这里会输出 0 1 2 3 4 5\n\nfor(let i = 0; i < 5; i++){ // 使用 let 定义\n    console.log(i); \n} // 这里会输出 0 1 2 3 4\nconsole.log(i); // 到这里会报错,显示这个i未定义\n```\n\n<div class='notification is-info'>\n    与var相比较而言，let定义的变量更安全，更严谨，只在自己的作用域下能访问。\n</div>\n\n### const\n\n#### 语法\n\n```javascript\nconst LOVE_YOU = true; // 声明一个常量，不能被更改\n-------------------------------------------\n// 例：如果声明的是一个对象，则可以更改对象里面的属性\nvar user = {\n    name: 'James',\n    age: 35\n};\nconst PLAYER = user;\nconsole.log('age:' + user.age); //  输出age：35\nuser.age = 40;\nconsole.log('age:' + user.age); // 输出age：40\n```\n\n<div class='notification is-danger'>\n    <p>\n        const 是 constant 的缩写，常量的意思，不能更改的量。\n    </p>\n    <p>\n        在用const声明一个常量时，必须同时给它赋值。\n    </p>\n    <p>\n        不能直接修改const的值，如果const被赋值为一个对象，则可以修改对象里面的属性；\n       \t在用对象给const赋值之后，就不能用另一个对象来覆盖const已经被赋予的对象，即不能修改。\n    </p>\n</div>\n\n### 变量的解构赋值（数组）\n\n#### 赋值\n\n在es6之前如果要赋值几个值，写法为：\n\n```javascript\nvar a = 1;\nvar b = 2;\nvar c = 3;\n// 或者\nvar a = 1, b = 2, c = 3;\n```\n\n在es6中，可以写为：\n\n```javascript\nvar [a, b, c] = [1, 2, 3];\n```\n\n其他：\n\n```javascript\nvar [a, , c] = [1, 2, 3];\nconsole.log(a);\nconsole.log(c);\nconsole.log(b);\n// 这里输出b会报错，神奇的是，虽然b没有定义，但是a和c可以正常输出。这就是另一个特点：跨越传值\n//-------------------------\nvar [a, ...c] = [1, 2, 3];\nconsole.log(a); // 输出 1\nconsole.log(c); // 输出 [2, 3]\n//-------------------------\nvar [a, b, c='default', d='default'] = [1, 2, 3];\nconsole.log(a); // 输出 1\nconsole.log(b); // 输出 2\nconsole.log(c); // 输出 3\nconsole.log(d); // 输出 default\n```\n\n#### 数组的内容赋值给变量\n\n##### 在es6之前想要把数组的内容赋值给变量，则需要：\n\n```javascript\nvar arr = [1, 2, 3];\nvar a = arr[0];\nvar b = arr[1];\nvar c = arr[2];\nif(arr[3])\n    var d = arr[3];\nelse\n    var d = 'default';\n```\n\n##### 用es6只需要：\n\n```javascript\nvar arr = [1, 2, 3];\nvar [a, b, c, d='default'] = arr;\n```\n\n#### 在es6中给变量用数组内容赋值\n\n例如下面代码所示，如果右边没有对应的内容，则就是没有，不会赋值为undefined。\n\n```javascript\nlet [a, b, c] = [1, 2]; // 这里右边的数组里没有对应c的值，则c为null，不会把c定义为undefined,更严谨\n```\n\n<div class='notification is-warning'>\n    <p>\n        用数组赋值时，索引很重要，要一一对应。\n    </p>\n</div>\n\n\n\n### 变量的解构赋值（对象）\n\n#### 使用对象赋值：\n\n```javascript\nvar obj = {\n    a: 1,\n    b: 2\n}\nlet {a, b} = obj; // 这样就把obj里面的a, b分别赋值给了外面的a，b，a为1，b为2，一一对应。\nlet {c, b} = obj; // 这样c会是undefined，b为2，obj中没有c的属性\n\n```\n\n#### 赋值之后改为其他名称\n\n如果想把赋值之后的变量改为其他名称，使用如下方法：\n\n```javascript\nlet {a:A, b} = obj; // 这样A=1，b=2\n```\n\n#### 更复杂的解构（很少，较复杂，可做了解）：\n\n```javascript\nvar obj = {\n    arr: [\n        'Yo.',\n        {\n            a: 1\n        }\n    ]\n}\nlet {arr:[say, {a}]} = obj;\n```\n\n#### 指定默认值：\n\n```javascript\nlet {a:A=1, b=2} = {a:10};\n```\n\n#### 在实际中的使用：例如请求api的数据：\n\n```javascript\n// 自定义一个服务器返回的数据\nvar res = {\n    status: 200,\n    id: 'user',\n    data: [{name: 'wade', age: 33}, {name: 'james', age: 35}]\n}\n// es6之前的解析数据的方式\nvar status = res.status;\nvar data = res.data;\n\n// es6\nlet {status, data} = res;\n```\n\n解构含有方法的对象，用JavaScript里的Math这个数学对象来举例，Math里面有很多方法，这里用其中的乘方pow方法来举例：\n\n```javascript\nlet {pow} = Math;\nconsole.log('pow(2, 3):' + pow(2, 3)); // 输出：pow(2, 3): 8, 直接使用，非常强大\n```\n\n### 变量的解构赋值（其他）\n\n#### 直接得出字符串长度：\n\n```javascript\nlet {length} = 'Hello World';\nconsole.log('length:' + length);\n```\n\n#### 解构字符串为数组：\n\n```javascript\nlet [a, b, c] = 'Ha.'; // a = H, b = a, c = .\n```\n\n### 新增字符串方法\n\n#### 检测字符串中是否包含另一个字符串：\n\n```javascript\n// es6之前\nconsole.log('Hello World'.indexOf('H') !== -1);// 说明不存在\n\n// es6\nconsole.log('Hello World'.includes('H')); // 返回true\n```\n\n#### 检测字符串中是否由一个字符串开头：\n\n```javascript\nconsole.log('Hello'.startsWith('H')); // 返回true\n```\n\n#### 检测字符串中是否由一个字符串结束：\n\n```javascript\nconsole.log('Hello'.endsWith('H')); // 返回true\n```\n\n#### 重复字符串：\n\n```javascript\nconsole.log('Hello'.repeat(3)); // 重复Hello这个字符串三次\n```\n\n### 模板字符串\n\n#### 模板语法\n\n```javascript\nlet title = 'Hello World'\nlet tpl = `\n\t<div>\n\t\t<span>${title}</span>\n\t</div>\t\n`;\n// 模板中还可以嵌套模板或者再嵌套引用,例：\nlet tpl2 = `\n\t<div>\n        <span>${title + `\n            <span>${123}</span>\n        `}</span>\n\t</div>\t\n`;\n```\n\n### Symbol类型（暂时不予深入）\n\n#### JavaScript数据类型\n\n+ Symbol\n+ undefined\n+ null\n+ Boolean\n+ String\n+ Number\n+ Object\n\n#### Symbol\n\n```javascript\nlet a = Symbol('对这个Symbol的解释')\n```\n\n\n\n### Proxy(代理)\n\n#### 语法\n\n```javascript\nvar 名称 = new Proxy(源对象, 配置项)\n```\n\n举例：\n\n```javascript\nvar user = new Proxy({}, {\n    get: function(obj, prop){\n        if(prop == 'full_name')\n            return obj.fname + ' ' + obj.lname;\n    },\n    set: function(obj, prop){\n        \n    }\n});\nuser.fname = 'Dwyane';\nuser.lname = 'Wade';\n\nconsole.log(user.full_name);\n```\n\n\n\n### Set\n\n#### 定义\n\n```javascript\nvar s = new Set([1, 2, 3, 4]);\n```\n\n#### 特点\n\n<div class='notification is-success'>\n    Set中的值唯一，如果有多个重复值，只取一个。\n</div>\n\n#### 方法\n\n+ add  // 添加元素\n+ detete  // 删除元素\n+ has  // 是否有某个元素，返回Boolean型\n+ clear  // 清空Set中所有内容\n\n#### 其他\n\n##### size\n\n和数组的length类似，大小\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","source":"_posts/ES6-learn.md","raw":"---\ntitle: ES6学习\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/es6.png\ndate: 2020-04-28 13:48:40\ntags: ES6\ntoc: true\ncategories: JavaScript\n---\n\n<div class='post-summary'>\n    <p>\n       \t从表老师<a href='https://biaoyansu.com'>@表严肃</a>那里看了ES6精讲，做个学习笔记！\n    </p>\n</div>\n\n\n\n\n<!--more-->\n\n### let\n\n#### 语法\n\n```javascript\nlet a = 1; // 定义一个变量并赋值为1\n```\n\n因为和`var`类似但又有不同，用例子来比较：\n\n```javascript\n// 第一个例子\nif(true){\n    var a = 1;\n    let b = 2;\n}\nconsole.log('a:' + a);\nconsole.log('b:' + b);\n// 这里a能够输出1，但是b会报错，显示未定义\n\n// 第二个例子\nif(true){\n    let b = 2;\n    console.log('b:' + b); // 这个b能够正常输出\n}\nconsole.log('b:' + b); // 不能正常输出，显示未定义\n\n// 第三个例子\nfor(var i = 0; i < 5; i++){ // 使用 var 定义\n    console.log(i); \n} // 这里会输出 0 1 2 3 4\nconsole.log(i); // 到这里会输出 0 1 2 3 4 5\n\nfor(let i = 0; i < 5; i++){ // 使用 let 定义\n    console.log(i); \n} // 这里会输出 0 1 2 3 4\nconsole.log(i); // 到这里会报错,显示这个i未定义\n```\n\n<div class='notification is-info'>\n    与var相比较而言，let定义的变量更安全，更严谨，只在自己的作用域下能访问。\n</div>\n\n### const\n\n#### 语法\n\n```javascript\nconst LOVE_YOU = true; // 声明一个常量，不能被更改\n-------------------------------------------\n// 例：如果声明的是一个对象，则可以更改对象里面的属性\nvar user = {\n    name: 'James',\n    age: 35\n};\nconst PLAYER = user;\nconsole.log('age:' + user.age); //  输出age：35\nuser.age = 40;\nconsole.log('age:' + user.age); // 输出age：40\n```\n\n<div class='notification is-danger'>\n    <p>\n        const 是 constant 的缩写，常量的意思，不能更改的量。\n    </p>\n    <p>\n        在用const声明一个常量时，必须同时给它赋值。\n    </p>\n    <p>\n        不能直接修改const的值，如果const被赋值为一个对象，则可以修改对象里面的属性；\n       \t在用对象给const赋值之后，就不能用另一个对象来覆盖const已经被赋予的对象，即不能修改。\n    </p>\n</div>\n\n### 变量的解构赋值（数组）\n\n#### 赋值\n\n在es6之前如果要赋值几个值，写法为：\n\n```javascript\nvar a = 1;\nvar b = 2;\nvar c = 3;\n// 或者\nvar a = 1, b = 2, c = 3;\n```\n\n在es6中，可以写为：\n\n```javascript\nvar [a, b, c] = [1, 2, 3];\n```\n\n其他：\n\n```javascript\nvar [a, , c] = [1, 2, 3];\nconsole.log(a);\nconsole.log(c);\nconsole.log(b);\n// 这里输出b会报错，神奇的是，虽然b没有定义，但是a和c可以正常输出。这就是另一个特点：跨越传值\n//-------------------------\nvar [a, ...c] = [1, 2, 3];\nconsole.log(a); // 输出 1\nconsole.log(c); // 输出 [2, 3]\n//-------------------------\nvar [a, b, c='default', d='default'] = [1, 2, 3];\nconsole.log(a); // 输出 1\nconsole.log(b); // 输出 2\nconsole.log(c); // 输出 3\nconsole.log(d); // 输出 default\n```\n\n#### 数组的内容赋值给变量\n\n##### 在es6之前想要把数组的内容赋值给变量，则需要：\n\n```javascript\nvar arr = [1, 2, 3];\nvar a = arr[0];\nvar b = arr[1];\nvar c = arr[2];\nif(arr[3])\n    var d = arr[3];\nelse\n    var d = 'default';\n```\n\n##### 用es6只需要：\n\n```javascript\nvar arr = [1, 2, 3];\nvar [a, b, c, d='default'] = arr;\n```\n\n#### 在es6中给变量用数组内容赋值\n\n例如下面代码所示，如果右边没有对应的内容，则就是没有，不会赋值为undefined。\n\n```javascript\nlet [a, b, c] = [1, 2]; // 这里右边的数组里没有对应c的值，则c为null，不会把c定义为undefined,更严谨\n```\n\n<div class='notification is-warning'>\n    <p>\n        用数组赋值时，索引很重要，要一一对应。\n    </p>\n</div>\n\n\n\n### 变量的解构赋值（对象）\n\n#### 使用对象赋值：\n\n```javascript\nvar obj = {\n    a: 1,\n    b: 2\n}\nlet {a, b} = obj; // 这样就把obj里面的a, b分别赋值给了外面的a，b，a为1，b为2，一一对应。\nlet {c, b} = obj; // 这样c会是undefined，b为2，obj中没有c的属性\n\n```\n\n#### 赋值之后改为其他名称\n\n如果想把赋值之后的变量改为其他名称，使用如下方法：\n\n```javascript\nlet {a:A, b} = obj; // 这样A=1，b=2\n```\n\n#### 更复杂的解构（很少，较复杂，可做了解）：\n\n```javascript\nvar obj = {\n    arr: [\n        'Yo.',\n        {\n            a: 1\n        }\n    ]\n}\nlet {arr:[say, {a}]} = obj;\n```\n\n#### 指定默认值：\n\n```javascript\nlet {a:A=1, b=2} = {a:10};\n```\n\n#### 在实际中的使用：例如请求api的数据：\n\n```javascript\n// 自定义一个服务器返回的数据\nvar res = {\n    status: 200,\n    id: 'user',\n    data: [{name: 'wade', age: 33}, {name: 'james', age: 35}]\n}\n// es6之前的解析数据的方式\nvar status = res.status;\nvar data = res.data;\n\n// es6\nlet {status, data} = res;\n```\n\n解构含有方法的对象，用JavaScript里的Math这个数学对象来举例，Math里面有很多方法，这里用其中的乘方pow方法来举例：\n\n```javascript\nlet {pow} = Math;\nconsole.log('pow(2, 3):' + pow(2, 3)); // 输出：pow(2, 3): 8, 直接使用，非常强大\n```\n\n### 变量的解构赋值（其他）\n\n#### 直接得出字符串长度：\n\n```javascript\nlet {length} = 'Hello World';\nconsole.log('length:' + length);\n```\n\n#### 解构字符串为数组：\n\n```javascript\nlet [a, b, c] = 'Ha.'; // a = H, b = a, c = .\n```\n\n### 新增字符串方法\n\n#### 检测字符串中是否包含另一个字符串：\n\n```javascript\n// es6之前\nconsole.log('Hello World'.indexOf('H') !== -1);// 说明不存在\n\n// es6\nconsole.log('Hello World'.includes('H')); // 返回true\n```\n\n#### 检测字符串中是否由一个字符串开头：\n\n```javascript\nconsole.log('Hello'.startsWith('H')); // 返回true\n```\n\n#### 检测字符串中是否由一个字符串结束：\n\n```javascript\nconsole.log('Hello'.endsWith('H')); // 返回true\n```\n\n#### 重复字符串：\n\n```javascript\nconsole.log('Hello'.repeat(3)); // 重复Hello这个字符串三次\n```\n\n### 模板字符串\n\n#### 模板语法\n\n```javascript\nlet title = 'Hello World'\nlet tpl = `\n\t<div>\n\t\t<span>${title}</span>\n\t</div>\t\n`;\n// 模板中还可以嵌套模板或者再嵌套引用,例：\nlet tpl2 = `\n\t<div>\n        <span>${title + `\n            <span>${123}</span>\n        `}</span>\n\t</div>\t\n`;\n```\n\n### Symbol类型（暂时不予深入）\n\n#### JavaScript数据类型\n\n+ Symbol\n+ undefined\n+ null\n+ Boolean\n+ String\n+ Number\n+ Object\n\n#### Symbol\n\n```javascript\nlet a = Symbol('对这个Symbol的解释')\n```\n\n\n\n### Proxy(代理)\n\n#### 语法\n\n```javascript\nvar 名称 = new Proxy(源对象, 配置项)\n```\n\n举例：\n\n```javascript\nvar user = new Proxy({}, {\n    get: function(obj, prop){\n        if(prop == 'full_name')\n            return obj.fname + ' ' + obj.lname;\n    },\n    set: function(obj, prop){\n        \n    }\n});\nuser.fname = 'Dwyane';\nuser.lname = 'Wade';\n\nconsole.log(user.full_name);\n```\n\n\n\n### Set\n\n#### 定义\n\n```javascript\nvar s = new Set([1, 2, 3, 4]);\n```\n\n#### 特点\n\n<div class='notification is-success'>\n    Set中的值唯一，如果有多个重复值，只取一个。\n</div>\n\n#### 方法\n\n+ add  // 添加元素\n+ detete  // 删除元素\n+ has  // 是否有某个元素，返回Boolean型\n+ clear  // 清空Set中所有内容\n\n#### 其他\n\n##### size\n\n和数组的length类似，大小\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","slug":"ES6-learn","published":1,"updated":"2020-08-27T08:22:17.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrff0002r0u20ttl5elm","content":"<div class='post-summary'>\n    <p>\n           从表老师<a href='https://biaoyansu.com' target=\"_blank\" rel=\"noopener\">@表严肃</a>那里看了ES6精讲，做个学习笔记！\n    </p>\n</div>\n\n\n\n\n<a id=\"more\"></a>\n\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// 定义一个变量并赋值为1</span></span><br></pre></td></tr></table></figure>\n\n<p>因为和<code>var</code>类似但又有不同，用例子来比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个例子</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span> + a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b);</span><br><span class=\"line\"><span class=\"comment\">// 这里a能够输出1，但是b会报错，显示未定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二个例子</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b); <span class=\"comment\">// 这个b能够正常输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b); <span class=\"comment\">// 不能正常输出，显示未定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三个例子</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123; <span class=\"comment\">// 使用 var 定义</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); </span><br><span class=\"line\">&#125; <span class=\"comment\">// 这里会输出 0 1 2 3 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 到这里会输出 0 1 2 3 4 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123; <span class=\"comment\">// 使用 let 定义</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); </span><br><span class=\"line\">&#125; <span class=\"comment\">// 这里会输出 0 1 2 3 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 到这里会报错,显示这个i未定义</span></span><br></pre></td></tr></table></figure>\n\n<div class='notification is-info'>\n    与var相比较而言，let定义的变量更安全，更严谨，只在自己的作用域下能访问。\n</div>\n\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><h4 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> LOVE_YOU = <span class=\"literal\">true</span>; <span class=\"comment\">// 声明一个常量，不能被更改</span></span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">// 例：如果声明的是一个对象，则可以更改对象里面的属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'James'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">35</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> PLAYER = user;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'age:'</span> + user.age); <span class=\"comment\">//  输出age：35</span></span><br><span class=\"line\">user.age = <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'age:'</span> + user.age); <span class=\"comment\">// 输出age：40</span></span><br></pre></td></tr></table></figure>\n\n<div class='notification is-danger'>\n    <p>\n        const 是 constant 的缩写，常量的意思，不能更改的量。\n    </p>\n    <p>\n        在用const声明一个常量时，必须同时给它赋值。\n    </p>\n    <p>\n        不能直接修改const的值，如果const被赋值为一个对象，则可以修改对象里面的属性；\n           在用对象给const赋值之后，就不能用另一个对象来覆盖const已经被赋予的对象，即不能修改。\n    </p>\n</div>\n\n<h3 id=\"变量的解构赋值（数组）\"><a href=\"#变量的解构赋值（数组）\" class=\"headerlink\" title=\"变量的解构赋值（数组）\"></a>变量的解构赋值（数组）</h3><h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><p>在es6之前如果要赋值几个值，写法为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在es6中，可以写为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>其他：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [a, , c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// 这里输出b会报错，神奇的是，虽然b没有定义，但是a和c可以正常输出。这就是另一个特点：跨越传值</span></span><br><span class=\"line\"><span class=\"comment\">//-------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, ...c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 输出 [2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">//-------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c=<span class=\"string\">'default'</span>, d=<span class=\"string\">'default'</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 输出 default</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组的内容赋值给变量\"><a href=\"#数组的内容赋值给变量\" class=\"headerlink\" title=\"数组的内容赋值给变量\"></a>数组的内容赋值给变量</h4><h5 id=\"在es6之前想要把数组的内容赋值给变量，则需要：\"><a href=\"#在es6之前想要把数组的内容赋值给变量，则需要：\" class=\"headerlink\" title=\"在es6之前想要把数组的内容赋值给变量，则需要：\"></a>在es6之前想要把数组的内容赋值给变量，则需要：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = arr[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(arr[<span class=\"number\">3</span>])</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = arr[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"string\">'default'</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"用es6只需要：\"><a href=\"#用es6只需要：\" class=\"headerlink\" title=\"用es6只需要：\"></a>用es6只需要：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c, d=<span class=\"string\">'default'</span>] = arr;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在es6中给变量用数组内容赋值\"><a href=\"#在es6中给变量用数组内容赋值\" class=\"headerlink\" title=\"在es6中给变量用数组内容赋值\"></a>在es6中给变量用数组内容赋值</h4><p>例如下面代码所示，如果右边没有对应的内容，则就是没有，不会赋值为undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// 这里右边的数组里没有对应c的值，则c为null，不会把c定义为undefined,更严谨</span></span><br></pre></td></tr></table></figure>\n\n<div class='notification is-warning'>\n    <p>\n        用数组赋值时，索引很重要，要一一对应。\n    </p>\n</div>\n\n\n\n<h3 id=\"变量的解构赋值（对象）\"><a href=\"#变量的解构赋值（对象）\" class=\"headerlink\" title=\"变量的解构赋值（对象）\"></a>变量的解构赋值（对象）</h3><h4 id=\"使用对象赋值：\"><a href=\"#使用对象赋值：\" class=\"headerlink\" title=\"使用对象赋值：\"></a>使用对象赋值：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a, b&#125; = obj; <span class=\"comment\">// 这样就把obj里面的a, b分别赋值给了外面的a，b，a为1，b为2，一一对应。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;c, b&#125; = obj; <span class=\"comment\">// 这样c会是undefined，b为2，obj中没有c的属性</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"赋值之后改为其他名称\"><a href=\"#赋值之后改为其他名称\" class=\"headerlink\" title=\"赋值之后改为其他名称\"></a>赋值之后改为其他名称</h4><p>如果想把赋值之后的变量改为其他名称，使用如下方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">a</span>:A, b&#125; = obj; <span class=\"comment\">// 这样A=1，b=2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更复杂的解构（很少，较复杂，可做了解）：\"><a href=\"#更复杂的解构（很少，较复杂，可做了解）：\" class=\"headerlink\" title=\"更复杂的解构（很少，较复杂，可做了解）：\"></a>更复杂的解构（很少，较复杂，可做了解）：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    arr: [</span><br><span class=\"line\">        <span class=\"string\">'Yo.'</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">arr</span>:[say, &#123;a&#125;]&#125; = obj;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"指定默认值：\"><a href=\"#指定默认值：\" class=\"headerlink\" title=\"指定默认值：\"></a>指定默认值：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">a</span>:A=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>&#125; = &#123;<span class=\"attr\">a</span>:<span class=\"number\">10</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在实际中的使用：例如请求api的数据：\"><a href=\"#在实际中的使用：例如请求api的数据：\" class=\"headerlink\" title=\"在实际中的使用：例如请求api的数据：\"></a>在实际中的使用：例如请求api的数据：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义一个服务器返回的数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = &#123;</span><br><span class=\"line\">    status: <span class=\"number\">200</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">    data: [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'wade'</span>, <span class=\"attr\">age</span>: <span class=\"number\">33</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'james'</span>, <span class=\"attr\">age</span>: <span class=\"number\">35</span>&#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6之前的解析数据的方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> status = res.status;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = res.data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;status, data&#125; = res;</span><br></pre></td></tr></table></figure>\n\n<p>解构含有方法的对象，用JavaScript里的Math这个数学对象来举例，Math里面有很多方法，这里用其中的乘方pow方法来举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;pow&#125; = <span class=\"built_in\">Math</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'pow(2, 3):'</span> + pow(<span class=\"number\">2</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 输出：pow(2, 3): 8, 直接使用，非常强大</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量的解构赋值（其他）\"><a href=\"#变量的解构赋值（其他）\" class=\"headerlink\" title=\"变量的解构赋值（其他）\"></a>变量的解构赋值（其他）</h3><h4 id=\"直接得出字符串长度：\"><a href=\"#直接得出字符串长度：\" class=\"headerlink\" title=\"直接得出字符串长度：\"></a>直接得出字符串长度：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;length&#125; = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'length:'</span> + length);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解构字符串为数组：\"><a href=\"#解构字符串为数组：\" class=\"headerlink\" title=\"解构字符串为数组：\"></a>解构字符串为数组：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = <span class=\"string\">'Ha.'</span>; <span class=\"comment\">// a = H, b = a, c = .</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增字符串方法\"><a href=\"#新增字符串方法\" class=\"headerlink\" title=\"新增字符串方法\"></a>新增字符串方法</h3><h4 id=\"检测字符串中是否包含另一个字符串：\"><a href=\"#检测字符串中是否包含另一个字符串：\" class=\"headerlink\" title=\"检测字符串中是否包含另一个字符串：\"></a>检测字符串中是否包含另一个字符串：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es6之前</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>.indexOf(<span class=\"string\">'H'</span>) !== <span class=\"number\">-1</span>);<span class=\"comment\">// 说明不存在</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>.includes(<span class=\"string\">'H'</span>)); <span class=\"comment\">// 返回true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测字符串中是否由一个字符串开头：\"><a href=\"#检测字符串中是否由一个字符串开头：\" class=\"headerlink\" title=\"检测字符串中是否由一个字符串开头：\"></a>检测字符串中是否由一个字符串开头：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>.startsWith(<span class=\"string\">'H'</span>)); <span class=\"comment\">// 返回true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测字符串中是否由一个字符串结束：\"><a href=\"#检测字符串中是否由一个字符串结束：\" class=\"headerlink\" title=\"检测字符串中是否由一个字符串结束：\"></a>检测字符串中是否由一个字符串结束：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>.endsWith(<span class=\"string\">'H'</span>)); <span class=\"comment\">// 返回true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重复字符串：\"><a href=\"#重复字符串：\" class=\"headerlink\" title=\"重复字符串：\"></a>重复字符串：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>.repeat(<span class=\"number\">3</span>)); <span class=\"comment\">// 重复Hello这个字符串三次</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h3><h4 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> title = <span class=\"string\">'Hello World'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tpl = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;span&gt;<span class=\"subst\">$&#123;title&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/div&gt;\t</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 模板中还可以嵌套模板或者再嵌套引用,例：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tpl2 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span&gt;<span class=\"subst\">$&#123;title + <span class=\"string\">`</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">            &lt;span&gt;<span class=\"subst\">$&#123;<span class=\"number\">123</span>&#125;</span>&lt;/span&gt;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">        `</span>&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/div&gt;\t</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Symbol类型（暂时不予深入）\"><a href=\"#Symbol类型（暂时不予深入）\" class=\"headerlink\" title=\"Symbol类型（暂时不予深入）\"></a>Symbol类型（暂时不予深入）</h3><h4 id=\"JavaScript数据类型\"><a href=\"#JavaScript数据类型\" class=\"headerlink\" title=\"JavaScript数据类型\"></a>JavaScript数据类型</h4><ul>\n<li>Symbol</li>\n<li>undefined</li>\n<li>null</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Object</li>\n</ul>\n<h4 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'对这个Symbol的解释'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Proxy-代理\"><a href=\"#Proxy-代理\" class=\"headerlink\" title=\"Proxy(代理)\"></a>Proxy(代理)</h3><h4 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 名称 = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(源对象, 配置项)</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function(obj, prop)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prop == <span class=\"string\">'full_name'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj.fname + <span class=\"string\">' '</span> + obj.lname;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(obj, prop)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">user.fname = <span class=\"string\">'Dwyane'</span>;</span><br><span class=\"line\">user.lname = <span class=\"string\">'Wade'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.full_name);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><div class='notification is-success'>\n    Set中的值唯一，如果有多个重复值，只取一个。\n</div>\n\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><ul>\n<li>add  // 添加元素</li>\n<li>detete  // 删除元素</li>\n<li>has  // 是否有某个元素，返回Boolean型</li>\n<li>clear  // 清空Set中所有内容</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><h5 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h5><p>和数组的length类似，大小</p>\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","site":{"data":{}},"excerpt":"<div class='post-summary'>\n    <p>\n           从表老师<a href='https://biaoyansu.com' target=\"_blank\" rel=\"noopener\">@表严肃</a>那里看了ES6精讲，做个学习笔记！\n    </p>\n</div>","more":"<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// 定义一个变量并赋值为1</span></span><br></pre></td></tr></table></figure>\n\n<p>因为和<code>var</code>类似但又有不同，用例子来比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个例子</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a:'</span> + a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b);</span><br><span class=\"line\"><span class=\"comment\">// 这里a能够输出1，但是b会报错，显示未定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二个例子</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b); <span class=\"comment\">// 这个b能够正常输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b:'</span> + b); <span class=\"comment\">// 不能正常输出，显示未定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三个例子</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123; <span class=\"comment\">// 使用 var 定义</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); </span><br><span class=\"line\">&#125; <span class=\"comment\">// 这里会输出 0 1 2 3 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 到这里会输出 0 1 2 3 4 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123; <span class=\"comment\">// 使用 let 定义</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); </span><br><span class=\"line\">&#125; <span class=\"comment\">// 这里会输出 0 1 2 3 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 到这里会报错,显示这个i未定义</span></span><br></pre></td></tr></table></figure>\n\n<div class='notification is-info'>\n    与var相比较而言，let定义的变量更安全，更严谨，只在自己的作用域下能访问。\n</div>\n\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><h4 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> LOVE_YOU = <span class=\"literal\">true</span>; <span class=\"comment\">// 声明一个常量，不能被更改</span></span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">// 例：如果声明的是一个对象，则可以更改对象里面的属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'James'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">35</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> PLAYER = user;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'age:'</span> + user.age); <span class=\"comment\">//  输出age：35</span></span><br><span class=\"line\">user.age = <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'age:'</span> + user.age); <span class=\"comment\">// 输出age：40</span></span><br></pre></td></tr></table></figure>\n\n<div class='notification is-danger'>\n    <p>\n        const 是 constant 的缩写，常量的意思，不能更改的量。\n    </p>\n    <p>\n        在用const声明一个常量时，必须同时给它赋值。\n    </p>\n    <p>\n        不能直接修改const的值，如果const被赋值为一个对象，则可以修改对象里面的属性；\n           在用对象给const赋值之后，就不能用另一个对象来覆盖const已经被赋予的对象，即不能修改。\n    </p>\n</div>\n\n<h3 id=\"变量的解构赋值（数组）\"><a href=\"#变量的解构赋值（数组）\" class=\"headerlink\" title=\"变量的解构赋值（数组）\"></a>变量的解构赋值（数组）</h3><h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><p>在es6之前如果要赋值几个值，写法为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在es6中，可以写为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>其他：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [a, , c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// 这里输出b会报错，神奇的是，虽然b没有定义，但是a和c可以正常输出。这就是另一个特点：跨越传值</span></span><br><span class=\"line\"><span class=\"comment\">//-------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, ...c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 输出 [2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">//-------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c=<span class=\"string\">'default'</span>, d=<span class=\"string\">'default'</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 输出 default</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组的内容赋值给变量\"><a href=\"#数组的内容赋值给变量\" class=\"headerlink\" title=\"数组的内容赋值给变量\"></a>数组的内容赋值给变量</h4><h5 id=\"在es6之前想要把数组的内容赋值给变量，则需要：\"><a href=\"#在es6之前想要把数组的内容赋值给变量，则需要：\" class=\"headerlink\" title=\"在es6之前想要把数组的内容赋值给变量，则需要：\"></a>在es6之前想要把数组的内容赋值给变量，则需要：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = arr[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(arr[<span class=\"number\">3</span>])</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = arr[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"string\">'default'</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"用es6只需要：\"><a href=\"#用es6只需要：\" class=\"headerlink\" title=\"用es6只需要：\"></a>用es6只需要：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c, d=<span class=\"string\">'default'</span>] = arr;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在es6中给变量用数组内容赋值\"><a href=\"#在es6中给变量用数组内容赋值\" class=\"headerlink\" title=\"在es6中给变量用数组内容赋值\"></a>在es6中给变量用数组内容赋值</h4><p>例如下面代码所示，如果右边没有对应的内容，则就是没有，不会赋值为undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// 这里右边的数组里没有对应c的值，则c为null，不会把c定义为undefined,更严谨</span></span><br></pre></td></tr></table></figure>\n\n<div class='notification is-warning'>\n    <p>\n        用数组赋值时，索引很重要，要一一对应。\n    </p>\n</div>\n\n\n\n<h3 id=\"变量的解构赋值（对象）\"><a href=\"#变量的解构赋值（对象）\" class=\"headerlink\" title=\"变量的解构赋值（对象）\"></a>变量的解构赋值（对象）</h3><h4 id=\"使用对象赋值：\"><a href=\"#使用对象赋值：\" class=\"headerlink\" title=\"使用对象赋值：\"></a>使用对象赋值：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a, b&#125; = obj; <span class=\"comment\">// 这样就把obj里面的a, b分别赋值给了外面的a，b，a为1，b为2，一一对应。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;c, b&#125; = obj; <span class=\"comment\">// 这样c会是undefined，b为2，obj中没有c的属性</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"赋值之后改为其他名称\"><a href=\"#赋值之后改为其他名称\" class=\"headerlink\" title=\"赋值之后改为其他名称\"></a>赋值之后改为其他名称</h4><p>如果想把赋值之后的变量改为其他名称，使用如下方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">a</span>:A, b&#125; = obj; <span class=\"comment\">// 这样A=1，b=2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更复杂的解构（很少，较复杂，可做了解）：\"><a href=\"#更复杂的解构（很少，较复杂，可做了解）：\" class=\"headerlink\" title=\"更复杂的解构（很少，较复杂，可做了解）：\"></a>更复杂的解构（很少，较复杂，可做了解）：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    arr: [</span><br><span class=\"line\">        <span class=\"string\">'Yo.'</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">arr</span>:[say, &#123;a&#125;]&#125; = obj;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"指定默认值：\"><a href=\"#指定默认值：\" class=\"headerlink\" title=\"指定默认值：\"></a>指定默认值：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">a</span>:A=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>&#125; = &#123;<span class=\"attr\">a</span>:<span class=\"number\">10</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在实际中的使用：例如请求api的数据：\"><a href=\"#在实际中的使用：例如请求api的数据：\" class=\"headerlink\" title=\"在实际中的使用：例如请求api的数据：\"></a>在实际中的使用：例如请求api的数据：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义一个服务器返回的数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = &#123;</span><br><span class=\"line\">    status: <span class=\"number\">200</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">    data: [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'wade'</span>, <span class=\"attr\">age</span>: <span class=\"number\">33</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'james'</span>, <span class=\"attr\">age</span>: <span class=\"number\">35</span>&#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6之前的解析数据的方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> status = res.status;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = res.data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;status, data&#125; = res;</span><br></pre></td></tr></table></figure>\n\n<p>解构含有方法的对象，用JavaScript里的Math这个数学对象来举例，Math里面有很多方法，这里用其中的乘方pow方法来举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;pow&#125; = <span class=\"built_in\">Math</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'pow(2, 3):'</span> + pow(<span class=\"number\">2</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 输出：pow(2, 3): 8, 直接使用，非常强大</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量的解构赋值（其他）\"><a href=\"#变量的解构赋值（其他）\" class=\"headerlink\" title=\"变量的解构赋值（其他）\"></a>变量的解构赋值（其他）</h3><h4 id=\"直接得出字符串长度：\"><a href=\"#直接得出字符串长度：\" class=\"headerlink\" title=\"直接得出字符串长度：\"></a>直接得出字符串长度：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;length&#125; = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'length:'</span> + length);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解构字符串为数组：\"><a href=\"#解构字符串为数组：\" class=\"headerlink\" title=\"解构字符串为数组：\"></a>解构字符串为数组：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = <span class=\"string\">'Ha.'</span>; <span class=\"comment\">// a = H, b = a, c = .</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增字符串方法\"><a href=\"#新增字符串方法\" class=\"headerlink\" title=\"新增字符串方法\"></a>新增字符串方法</h3><h4 id=\"检测字符串中是否包含另一个字符串：\"><a href=\"#检测字符串中是否包含另一个字符串：\" class=\"headerlink\" title=\"检测字符串中是否包含另一个字符串：\"></a>检测字符串中是否包含另一个字符串：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es6之前</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>.indexOf(<span class=\"string\">'H'</span>) !== <span class=\"number\">-1</span>);<span class=\"comment\">// 说明不存在</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>.includes(<span class=\"string\">'H'</span>)); <span class=\"comment\">// 返回true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测字符串中是否由一个字符串开头：\"><a href=\"#检测字符串中是否由一个字符串开头：\" class=\"headerlink\" title=\"检测字符串中是否由一个字符串开头：\"></a>检测字符串中是否由一个字符串开头：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>.startsWith(<span class=\"string\">'H'</span>)); <span class=\"comment\">// 返回true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测字符串中是否由一个字符串结束：\"><a href=\"#检测字符串中是否由一个字符串结束：\" class=\"headerlink\" title=\"检测字符串中是否由一个字符串结束：\"></a>检测字符串中是否由一个字符串结束：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>.endsWith(<span class=\"string\">'H'</span>)); <span class=\"comment\">// 返回true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重复字符串：\"><a href=\"#重复字符串：\" class=\"headerlink\" title=\"重复字符串：\"></a>重复字符串：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>.repeat(<span class=\"number\">3</span>)); <span class=\"comment\">// 重复Hello这个字符串三次</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h3><h4 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> title = <span class=\"string\">'Hello World'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tpl = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;span&gt;<span class=\"subst\">$&#123;title&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/div&gt;\t</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 模板中还可以嵌套模板或者再嵌套引用,例：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tpl2 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span&gt;<span class=\"subst\">$&#123;title + <span class=\"string\">`</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">            &lt;span&gt;<span class=\"subst\">$&#123;<span class=\"number\">123</span>&#125;</span>&lt;/span&gt;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">        `</span>&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/div&gt;\t</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Symbol类型（暂时不予深入）\"><a href=\"#Symbol类型（暂时不予深入）\" class=\"headerlink\" title=\"Symbol类型（暂时不予深入）\"></a>Symbol类型（暂时不予深入）</h3><h4 id=\"JavaScript数据类型\"><a href=\"#JavaScript数据类型\" class=\"headerlink\" title=\"JavaScript数据类型\"></a>JavaScript数据类型</h4><ul>\n<li>Symbol</li>\n<li>undefined</li>\n<li>null</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Object</li>\n</ul>\n<h4 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'对这个Symbol的解释'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Proxy-代理\"><a href=\"#Proxy-代理\" class=\"headerlink\" title=\"Proxy(代理)\"></a>Proxy(代理)</h3><h4 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 名称 = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(源对象, 配置项)</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function(obj, prop)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prop == <span class=\"string\">'full_name'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj.fname + <span class=\"string\">' '</span> + obj.lname;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(obj, prop)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">user.fname = <span class=\"string\">'Dwyane'</span>;</span><br><span class=\"line\">user.lname = <span class=\"string\">'Wade'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.full_name);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><div class='notification is-success'>\n    Set中的值唯一，如果有多个重复值，只取一个。\n</div>\n\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><ul>\n<li>add  // 添加元素</li>\n<li>detete  // 删除元素</li>\n<li>has  // 是否有某个元素，返回Boolean型</li>\n<li>clear  // 清空Set中所有内容</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><h5 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h5><p>和数组的length类似，大小</p>\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>"},{"title":"数据结构 双向循环链表","date":"2020-05-30T10:34:00.000Z","_content":"\n<div>\n    双向链表，两个指针，一个指向直接前驱，一个指向直接后继。\n</div>\n\n\n\n<!--more-->\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/双向循环链表2.jpg)\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/双向循环链表1.jpg)\n\n```c\n#include<stdio.h>\n\n/*定义*/\ntypedef int elemtype; // 结点的数据类型，设为整形\ntypedef struct dnode { // 定义双向链表结点类型\n\telemtype data; // 结点的数据域\n\tstruct node *next, *prior; // 结点的指针域，前驱为prior，后继为next\n}DLinkList;// 双向链表类型名为DLinkList\n\n/*带头节点的双向链表的前插运算*/\nvoid DinsertBefore(DLinkList *p, DLinkList *s) {\n\ts->prior = p->prior; // 修改新结点的前驱指针\n\ts->next = p; // 修改新结点的后继指针\n\tp->prior->next = s; // 修改p的前驱节点的后继指针\n\tp->prior = s;// 修改p的前驱指针\n}\n\n/*带头结点的双向链表的删除操作*/\nvoid DDeleteNode(DLinkList *p) {\n\tp->prior->next = p->next;// 修改结点p的前驱结点的后继指针\n\tp->next->prior = p->prior;// 修改结点p的后继结点的前驱指针\n\tfree(p); // 释放p的内存空间\n}\n```\n\n","source":"_posts/StructOfData-DLinkList-TwoDirection.md","raw":"---\ntitle: 数据结构 双向循环链表\ndate: 2020-05-30 18:34:00\ntags: 数据结构\ncategories: 数据结构\n---\n\n<div>\n    双向链表，两个指针，一个指向直接前驱，一个指向直接后继。\n</div>\n\n\n\n<!--more-->\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/双向循环链表2.jpg)\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/双向循环链表1.jpg)\n\n```c\n#include<stdio.h>\n\n/*定义*/\ntypedef int elemtype; // 结点的数据类型，设为整形\ntypedef struct dnode { // 定义双向链表结点类型\n\telemtype data; // 结点的数据域\n\tstruct node *next, *prior; // 结点的指针域，前驱为prior，后继为next\n}DLinkList;// 双向链表类型名为DLinkList\n\n/*带头节点的双向链表的前插运算*/\nvoid DinsertBefore(DLinkList *p, DLinkList *s) {\n\ts->prior = p->prior; // 修改新结点的前驱指针\n\ts->next = p; // 修改新结点的后继指针\n\tp->prior->next = s; // 修改p的前驱节点的后继指针\n\tp->prior = s;// 修改p的前驱指针\n}\n\n/*带头结点的双向链表的删除操作*/\nvoid DDeleteNode(DLinkList *p) {\n\tp->prior->next = p->next;// 修改结点p的前驱结点的后继指针\n\tp->next->prior = p->prior;// 修改结点p的后继结点的前驱指针\n\tfree(p); // 释放p的内存空间\n}\n```\n\n","slug":"StructOfData-DLinkList-TwoDirection","published":1,"updated":"2020-08-27T08:22:17.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfi0006r0u207ij73zv","content":"<div>\n    双向链表，两个指针，一个指向直接前驱，一个指向直接后继。\n</div>\n\n\n\n<a id=\"more\"></a>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A82.jpg\" alt=\"\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A81.jpg\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*定义*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemtype; <span class=\"comment\">// 结点的数据类型，设为整形</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dnode</span> &#123;</span> <span class=\"comment\">// 定义双向链表结点类型</span></span><br><span class=\"line\">\telemtype data; <span class=\"comment\">// 结点的数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>, *<span class=\"title\">prior</span>;</span> <span class=\"comment\">// 结点的指针域，前驱为prior，后继为next</span></span><br><span class=\"line\">&#125;DLinkList;<span class=\"comment\">// 双向链表类型名为DLinkList</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*带头节点的双向链表的前插运算*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DinsertBefore</span><span class=\"params\">(DLinkList *p, DLinkList *s)</span> </span>&#123;</span><br><span class=\"line\">\ts-&gt;prior = p-&gt;prior; <span class=\"comment\">// 修改新结点的前驱指针</span></span><br><span class=\"line\">\ts-&gt;next = p; <span class=\"comment\">// 修改新结点的后继指针</span></span><br><span class=\"line\">\tp-&gt;prior-&gt;next = s; <span class=\"comment\">// 修改p的前驱节点的后继指针</span></span><br><span class=\"line\">\tp-&gt;prior = s;<span class=\"comment\">// 修改p的前驱指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*带头结点的双向链表的删除操作*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DDeleteNode</span><span class=\"params\">(DLinkList *p)</span> </span>&#123;</span><br><span class=\"line\">\tp-&gt;prior-&gt;next = p-&gt;next;<span class=\"comment\">// 修改结点p的前驱结点的后继指针</span></span><br><span class=\"line\">\tp-&gt;next-&gt;prior = p-&gt;prior;<span class=\"comment\">// 修改结点p的后继结点的前驱指针</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p); <span class=\"comment\">// 释放p的内存空间</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<div>\n    双向链表，两个指针，一个指向直接前驱，一个指向直接后继。\n</div>","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A82.jpg\" alt=\"\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A81.jpg\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*定义*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemtype; <span class=\"comment\">// 结点的数据类型，设为整形</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dnode</span> &#123;</span> <span class=\"comment\">// 定义双向链表结点类型</span></span><br><span class=\"line\">\telemtype data; <span class=\"comment\">// 结点的数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>, *<span class=\"title\">prior</span>;</span> <span class=\"comment\">// 结点的指针域，前驱为prior，后继为next</span></span><br><span class=\"line\">&#125;DLinkList;<span class=\"comment\">// 双向链表类型名为DLinkList</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*带头节点的双向链表的前插运算*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DinsertBefore</span><span class=\"params\">(DLinkList *p, DLinkList *s)</span> </span>&#123;</span><br><span class=\"line\">\ts-&gt;prior = p-&gt;prior; <span class=\"comment\">// 修改新结点的前驱指针</span></span><br><span class=\"line\">\ts-&gt;next = p; <span class=\"comment\">// 修改新结点的后继指针</span></span><br><span class=\"line\">\tp-&gt;prior-&gt;next = s; <span class=\"comment\">// 修改p的前驱节点的后继指针</span></span><br><span class=\"line\">\tp-&gt;prior = s;<span class=\"comment\">// 修改p的前驱指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*带头结点的双向链表的删除操作*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DDeleteNode</span><span class=\"params\">(DLinkList *p)</span> </span>&#123;</span><br><span class=\"line\">\tp-&gt;prior-&gt;next = p-&gt;next;<span class=\"comment\">// 修改结点p的前驱结点的后继指针</span></span><br><span class=\"line\">\tp-&gt;next-&gt;prior = p-&gt;prior;<span class=\"comment\">// 修改结点p的后继结点的前驱指针</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p); <span class=\"comment\">// 释放p的内存空间</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据结构 循环链表","date":"2020-05-30T10:33:35.000Z","_content":"\n<div>\n    首尾相连，一般的，链表最后一个结点的指针域是空指针，如果将其指向头结点，则使得头尾相连构成循环链表。\n</div>\n\n<!--more-->\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/循环链表.jpg)\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/循环链表2.jpg)\n\n<!--more-->\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\ntypedef int elemtype;\ntypedef struct node {\n\telemtype data;\n\tstruct node *next;\n}LinkList;\n\n /*合并两个单链表为一个循环链表*/\n\nLinkList *Connect(LinkList *ra, LinkList *rb) {\n\tLinkList *p;\n\tp = ra->next; // 保存ra的头结点\n\tra->next = rb->next->next; // 将rb 链接在ra 之后\n\tfree(rb->next); // 释放 rb 的头结点\n\trb->next = p; // 修改rb 指针\n\treturn rb;\n}\n\n// 其余操作和单链表一致\n```\n\n","source":"_posts/StructOfData-DLinkListRound.md","raw":"---\ntitle: 数据结构 循环链表\ndate: 2020-05-30 18:33:35\ntags: 数据结构\ncategories: 数据结构\n---\n\n<div>\n    首尾相连，一般的，链表最后一个结点的指针域是空指针，如果将其指向头结点，则使得头尾相连构成循环链表。\n</div>\n\n<!--more-->\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/循环链表.jpg)\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/循环链表2.jpg)\n\n<!--more-->\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\ntypedef int elemtype;\ntypedef struct node {\n\telemtype data;\n\tstruct node *next;\n}LinkList;\n\n /*合并两个单链表为一个循环链表*/\n\nLinkList *Connect(LinkList *ra, LinkList *rb) {\n\tLinkList *p;\n\tp = ra->next; // 保存ra的头结点\n\tra->next = rb->next->next; // 将rb 链接在ra 之后\n\tfree(rb->next); // 释放 rb 的头结点\n\trb->next = p; // 修改rb 指针\n\treturn rb;\n}\n\n// 其余操作和单链表一致\n```\n\n","slug":"StructOfData-DLinkListRound","published":1,"updated":"2020-08-27T08:22:17.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfj0007r0u2fyq3d4vb","content":"<div>\n    首尾相连，一般的，链表最后一个结点的指针域是空指针，如果将其指向头结点，则使得头尾相连构成循环链表。\n</div>\n\n<a id=\"more\"></a>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.jpg\" alt=\"\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A82.jpg\" alt=\"\"></p>\n<!--more-->\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemtype;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\telemtype data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/*合并两个单链表为一个循环链表*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">Connect</span><span class=\"params\">(LinkList *ra, LinkList *rb)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p;</span><br><span class=\"line\">\tp = ra-&gt;next; <span class=\"comment\">// 保存ra的头结点</span></span><br><span class=\"line\">\tra-&gt;next = rb-&gt;next-&gt;next; <span class=\"comment\">// 将rb 链接在ra 之后</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(rb-&gt;next); <span class=\"comment\">// 释放 rb 的头结点</span></span><br><span class=\"line\">\trb-&gt;next = p; <span class=\"comment\">// 修改rb 指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其余操作和单链表一致</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<div>\n    首尾相连，一般的，链表最后一个结点的指针域是空指针，如果将其指向头结点，则使得头尾相连构成循环链表。\n</div>","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.jpg\" alt=\"\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A82.jpg\" alt=\"\"></p>\n<!--more-->\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemtype;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\telemtype data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/*合并两个单链表为一个循环链表*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">Connect</span><span class=\"params\">(LinkList *ra, LinkList *rb)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p;</span><br><span class=\"line\">\tp = ra-&gt;next; <span class=\"comment\">// 保存ra的头结点</span></span><br><span class=\"line\">\tra-&gt;next = rb-&gt;next-&gt;next; <span class=\"comment\">// 将rb 链接在ra 之后</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(rb-&gt;next); <span class=\"comment\">// 释放 rb 的头结点</span></span><br><span class=\"line\">\trb-&gt;next = p; <span class=\"comment\">// 修改rb 指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其余操作和单链表一致</span></span><br></pre></td></tr></table></figure>"},{"title":"Python作业","date":"2019-10-09T16:00:00.000Z","_content":"<center>Python作业，熟悉Python语法基础</center>\n\n<!--more-->\n\n>题目背景介绍：你准备去海南旅游，现在要订购机票。机票的价格受旺季、淡季影响，而且头等舱和经济舱的价格也不同。假设机票原价是5000元，4~10月为旺季，旺季头等舱打9折，经济舱6折；其他月份为淡季，淡季头等舱5折，经济舱4折，编写程序，根据出行的月份和选择的舱位输出实际机票的价格。\n\n```python\nfinal_price = 0\nprice = 5000\nprint('请输入你想出行的月份(1~12)：')\nmonth = eval(input())\nprint('请输入你想购买的舱位，头等舱输入1，二等舱输入2')\nlevel = eval(input())\nif month >= 4 and month <= 10:\n    if level == 1:\n        final_price = price * 0.9\n        print('您的机票价格为：' + str(final_price))\n    elif level == 2:\n        final_price = price * 0.6\n        print('您的机票价格为：' + str(final_price))\nelse:\n    if level == 1:\n        final_price = price * 0.5\n        print('您的机票价格为：' + str(final_price))\n    elif level == 2:\n        final_price = price * 0.4\n        print('您的机票价格为：' + str(final_price))\n```\n\n>题目：输入一批数字，输出其中的最大值和最小值，输入数字0结束.\n```python\na = 0\nlist = []\nwhile a == 0:\n    print('请输入一个数:')\n    number = eval(input())\n    list.append(number)\n    if number == 0:\n        a != 0\n        break\n    else:\n        continue\nlist.sort(reverse=True)\nprint('最大值为:' + str(list[0]))\nlist.sort()\nprint('最小值为：' + str(list[1]))\n```\n>题目：创建一个列表，将员工月薪数据保存到其中，并对列表进行如下操作：\n1.添加一名月薪6000的员工至列表末尾\n2.插入一名月薪7500的员工到列表中索引为2的位置 \n3.移除列表中最后一个数据，并显示移除的值 \n4.将列表中的第二个数据的值增加100\n5.删除列表中第5个数据 \n6.按顺序遍历输出员工的月薪\n7.将所有月薪小于5000的员工月薪，修改为5000，并输出其索引值\n```python\nmonth_salary = [{'id':'a1','name':'王保华','salary':10000},\n                {'id':'a2','name':'李维新','salary':5200},\n                {'id':'a3','name':'张强','salary':4700},\n                {'id':'a4','name':'张明','salary':3860},\n                {'id':'a5','name':'陈鑫','salary':1200},\n                {'id':'a6','name':'李牧','salary':8500}]\n\nmonth_salary.append({'salary':6000})\nmonth_salary.insert(2,{'salary':7500})\nmonth_salary[1]['salary'] += 100\nmonth_salary.pop(4)\nfor i in range (len(month_salary)):\n    if month_salary[i]['salary'] < 5000:\n        month_salary[i]['salary'] = 5000\n        index = i\n        print('月薪低于5000的索引为：' + str(index))\n    else:\n        month_salary[i]['salary'] = month_salary[i]['salary']\nfor i in range (len(month_salary)):\n    print(month_salary[i])\n```\n>创建一个字典，将员工工号、姓名、月薪数据保存到字典中，并按要求做如下操作:\n1.打印所有员工信息\n2.从字典中获取员工工号为“a4”的员工信息，并打印\n3.判断是否有工号为“a9”的员工，如果存在，输出该员工信息；否则输出“员工不存在”\n4.遍历字典中所有员工信息，并输出\n5.添加一名员工数据：工号a7，姓名李梅，月薪9000\n6.将工号为a4的员工的月薪修改为4900\n7.删除列表中工号为a4的员工数据 \n```python\nmonth_salary = {'a1':['王保华',10000],\n          'a2':['李维新',10000],\n          'a3':['张强',10000],\n          'a4':['张明',10000],\n          'a5':['陈鑫',10000],\n          'a6':['李牧',10000]}\ni = 'a9'\nprint(month_salary)\nprint(month_salary['a4'])\nif i in month_salary:\n    employee = month_salary[i]\n    print('工号为%s的员工信息：'%i)\n    print(employee)\nelse:\n    print('员工不存在')\nfor number in month_salary:\n    print(month_salary['%s'%number])\nmonth_salary['a7'] = ['李梅',9000]\nmonth_salary['a4'][1] = 4900\nprint(month_salary['a4'][1])\nprint(month_salary)\ndel month_salary['a4']\nprint(month_salary)\n```\n>统计诗经《桃夭》中出现的汉字和标点的次数。\n1.使用字符串保存《桃夭》\n2.遍历诗歌中所有的汉字和标点 \n3.遍历过程中统计用到了哪些汉字和标点 \n4.统计汉字和标点个数使用字典结构 \n5.判断字符是否在字典中，如果在，则将该键对应的值加1，如果不在则新创建该键，并赋值1\n6.使用for循环遍历输出汉字、标点的使用个数 \n```python\npoem = \"\"\"桃之夭夭，灼灼其华。之子于归，宜其室家。桃之夭夭，有蕡其实。之子于归，宜其家室。桃之夭夭，其叶蓁蓁。之子于归，宜其家人。\"\"\"\ncharacter_counts = {}\nfor character in poem:\n    if character in character_counts:\n        character_counts[character] += 1\n    else:\n        character_counts[character] = 1\nfor key in character_counts:\n    print(\"%s出现了 %d次\"%(key,character_counts[key]))\n```\n>定义函数接收年份和月份，返回对应的月份有多少天：闰年二月为29天，否则为28天（闰年就是二月有29天的年份，能被4整除但不能被100整除的是闰年，能被400整除的也是闰年）。4,6,9,11月为30天,其余月为31天\n```python\ndef getYear():\n    print('请输入一个年份：')\n    year = eval(input())\n    print('请输入月份：')\n    month = eval(input())\n    if(year % 4 == 0 and year % 100 != 0 or year % 400 == 0):\n        if month == 2:\n            print('%d年%d月有29天'%(year,month))\n        else:\n            print('%d年%d月有29天' % (year, month))\n    else:\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            print('%d年%d月有30天'%(year,month))\n        elif month == 2:\n            print('%d年%d月有28天' % (year, month))\n        else:\n            print('%d年%d月有31天' % (year, month))\ngetYear()\n```","source":"_posts/Python.md","raw":"---\ntitle: Python作业\ndate: 2019-10-10\ntags: Python\ncategories: 编程\n---\n<center>Python作业，熟悉Python语法基础</center>\n\n<!--more-->\n\n>题目背景介绍：你准备去海南旅游，现在要订购机票。机票的价格受旺季、淡季影响，而且头等舱和经济舱的价格也不同。假设机票原价是5000元，4~10月为旺季，旺季头等舱打9折，经济舱6折；其他月份为淡季，淡季头等舱5折，经济舱4折，编写程序，根据出行的月份和选择的舱位输出实际机票的价格。\n\n```python\nfinal_price = 0\nprice = 5000\nprint('请输入你想出行的月份(1~12)：')\nmonth = eval(input())\nprint('请输入你想购买的舱位，头等舱输入1，二等舱输入2')\nlevel = eval(input())\nif month >= 4 and month <= 10:\n    if level == 1:\n        final_price = price * 0.9\n        print('您的机票价格为：' + str(final_price))\n    elif level == 2:\n        final_price = price * 0.6\n        print('您的机票价格为：' + str(final_price))\nelse:\n    if level == 1:\n        final_price = price * 0.5\n        print('您的机票价格为：' + str(final_price))\n    elif level == 2:\n        final_price = price * 0.4\n        print('您的机票价格为：' + str(final_price))\n```\n\n>题目：输入一批数字，输出其中的最大值和最小值，输入数字0结束.\n```python\na = 0\nlist = []\nwhile a == 0:\n    print('请输入一个数:')\n    number = eval(input())\n    list.append(number)\n    if number == 0:\n        a != 0\n        break\n    else:\n        continue\nlist.sort(reverse=True)\nprint('最大值为:' + str(list[0]))\nlist.sort()\nprint('最小值为：' + str(list[1]))\n```\n>题目：创建一个列表，将员工月薪数据保存到其中，并对列表进行如下操作：\n1.添加一名月薪6000的员工至列表末尾\n2.插入一名月薪7500的员工到列表中索引为2的位置 \n3.移除列表中最后一个数据，并显示移除的值 \n4.将列表中的第二个数据的值增加100\n5.删除列表中第5个数据 \n6.按顺序遍历输出员工的月薪\n7.将所有月薪小于5000的员工月薪，修改为5000，并输出其索引值\n```python\nmonth_salary = [{'id':'a1','name':'王保华','salary':10000},\n                {'id':'a2','name':'李维新','salary':5200},\n                {'id':'a3','name':'张强','salary':4700},\n                {'id':'a4','name':'张明','salary':3860},\n                {'id':'a5','name':'陈鑫','salary':1200},\n                {'id':'a6','name':'李牧','salary':8500}]\n\nmonth_salary.append({'salary':6000})\nmonth_salary.insert(2,{'salary':7500})\nmonth_salary[1]['salary'] += 100\nmonth_salary.pop(4)\nfor i in range (len(month_salary)):\n    if month_salary[i]['salary'] < 5000:\n        month_salary[i]['salary'] = 5000\n        index = i\n        print('月薪低于5000的索引为：' + str(index))\n    else:\n        month_salary[i]['salary'] = month_salary[i]['salary']\nfor i in range (len(month_salary)):\n    print(month_salary[i])\n```\n>创建一个字典，将员工工号、姓名、月薪数据保存到字典中，并按要求做如下操作:\n1.打印所有员工信息\n2.从字典中获取员工工号为“a4”的员工信息，并打印\n3.判断是否有工号为“a9”的员工，如果存在，输出该员工信息；否则输出“员工不存在”\n4.遍历字典中所有员工信息，并输出\n5.添加一名员工数据：工号a7，姓名李梅，月薪9000\n6.将工号为a4的员工的月薪修改为4900\n7.删除列表中工号为a4的员工数据 \n```python\nmonth_salary = {'a1':['王保华',10000],\n          'a2':['李维新',10000],\n          'a3':['张强',10000],\n          'a4':['张明',10000],\n          'a5':['陈鑫',10000],\n          'a6':['李牧',10000]}\ni = 'a9'\nprint(month_salary)\nprint(month_salary['a4'])\nif i in month_salary:\n    employee = month_salary[i]\n    print('工号为%s的员工信息：'%i)\n    print(employee)\nelse:\n    print('员工不存在')\nfor number in month_salary:\n    print(month_salary['%s'%number])\nmonth_salary['a7'] = ['李梅',9000]\nmonth_salary['a4'][1] = 4900\nprint(month_salary['a4'][1])\nprint(month_salary)\ndel month_salary['a4']\nprint(month_salary)\n```\n>统计诗经《桃夭》中出现的汉字和标点的次数。\n1.使用字符串保存《桃夭》\n2.遍历诗歌中所有的汉字和标点 \n3.遍历过程中统计用到了哪些汉字和标点 \n4.统计汉字和标点个数使用字典结构 \n5.判断字符是否在字典中，如果在，则将该键对应的值加1，如果不在则新创建该键，并赋值1\n6.使用for循环遍历输出汉字、标点的使用个数 \n```python\npoem = \"\"\"桃之夭夭，灼灼其华。之子于归，宜其室家。桃之夭夭，有蕡其实。之子于归，宜其家室。桃之夭夭，其叶蓁蓁。之子于归，宜其家人。\"\"\"\ncharacter_counts = {}\nfor character in poem:\n    if character in character_counts:\n        character_counts[character] += 1\n    else:\n        character_counts[character] = 1\nfor key in character_counts:\n    print(\"%s出现了 %d次\"%(key,character_counts[key]))\n```\n>定义函数接收年份和月份，返回对应的月份有多少天：闰年二月为29天，否则为28天（闰年就是二月有29天的年份，能被4整除但不能被100整除的是闰年，能被400整除的也是闰年）。4,6,9,11月为30天,其余月为31天\n```python\ndef getYear():\n    print('请输入一个年份：')\n    year = eval(input())\n    print('请输入月份：')\n    month = eval(input())\n    if(year % 4 == 0 and year % 100 != 0 or year % 400 == 0):\n        if month == 2:\n            print('%d年%d月有29天'%(year,month))\n        else:\n            print('%d年%d月有29天' % (year, month))\n    else:\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            print('%d年%d月有30天'%(year,month))\n        elif month == 2:\n            print('%d年%d月有28天' % (year, month))\n        else:\n            print('%d年%d月有31天' % (year, month))\ngetYear()\n```","slug":"Python","published":1,"updated":"2020-08-27T08:22:17.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfk0008r0u27gxr5c03","content":"<center>Python作业，熟悉Python语法基础</center>\n\n<a id=\"more\"></a>\n\n<blockquote>\n<p>题目背景介绍：你准备去海南旅游，现在要订购机票。机票的价格受旺季、淡季影响，而且头等舱和经济舱的价格也不同。假设机票原价是5000元，4~10月为旺季，旺季头等舱打9折，经济舱6折；其他月份为淡季，淡季头等舱5折，经济舱4折，编写程序，根据出行的月份和选择的舱位输出实际机票的价格。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final_price = <span class=\"number\">0</span></span><br><span class=\"line\">price = <span class=\"number\">5000</span></span><br><span class=\"line\">print(<span class=\"string\">'请输入你想出行的月份(1~12)：'</span>)</span><br><span class=\"line\">month = eval(input())</span><br><span class=\"line\">print(<span class=\"string\">'请输入你想购买的舱位，头等舱输入1，二等舱输入2'</span>)</span><br><span class=\"line\">level = eval(input())</span><br><span class=\"line\"><span class=\"keyword\">if</span> month &gt;= <span class=\"number\">4</span> <span class=\"keyword\">and</span> month &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> level == <span class=\"number\">1</span>:</span><br><span class=\"line\">        final_price = price * <span class=\"number\">0.9</span></span><br><span class=\"line\">        print(<span class=\"string\">'您的机票价格为：'</span> + str(final_price))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> level == <span class=\"number\">2</span>:</span><br><span class=\"line\">        final_price = price * <span class=\"number\">0.6</span></span><br><span class=\"line\">        print(<span class=\"string\">'您的机票价格为：'</span> + str(final_price))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> level == <span class=\"number\">1</span>:</span><br><span class=\"line\">        final_price = price * <span class=\"number\">0.5</span></span><br><span class=\"line\">        print(<span class=\"string\">'您的机票价格为：'</span> + str(final_price))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> level == <span class=\"number\">2</span>:</span><br><span class=\"line\">        final_price = price * <span class=\"number\">0.4</span></span><br><span class=\"line\">        print(<span class=\"string\">'您的机票价格为：'</span> + str(final_price))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>题目：输入一批数字，输出其中的最大值和最小值，输入数字0结束.</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\">list = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> a == <span class=\"number\">0</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'请输入一个数:'</span>)</span><br><span class=\"line\">    number = eval(input())</span><br><span class=\"line\">    list.append(number)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">0</span>:</span><br><span class=\"line\">        a != <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">list.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(<span class=\"string\">'最大值为:'</span> + str(list[<span class=\"number\">0</span>]))</span><br><span class=\"line\">list.sort()</span><br><span class=\"line\">print(<span class=\"string\">'最小值为：'</span> + str(list[<span class=\"number\">1</span>]))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>题目：创建一个列表，将员工月薪数据保存到其中，并对列表进行如下操作：<br>1.添加一名月薪6000的员工至列表末尾<br>2.插入一名月薪7500的员工到列表中索引为2的位置<br>3.移除列表中最后一个数据，并显示移除的值<br>4.将列表中的第二个数据的值增加100<br>5.删除列表中第5个数据<br>6.按顺序遍历输出员工的月薪<br>7.将所有月薪小于5000的员工月薪，修改为5000，并输出其索引值</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">month_salary = [&#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a1'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'王保华'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">10000</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a2'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'李维新'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">5200</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a3'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'张强'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">4700</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a4'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'张明'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">3860</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a5'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'陈鑫'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">1200</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a6'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'李牧'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">8500</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">month_salary.append(&#123;<span class=\"string\">'salary'</span>:<span class=\"number\">6000</span>&#125;)</span><br><span class=\"line\">month_salary.insert(<span class=\"number\">2</span>,&#123;<span class=\"string\">'salary'</span>:<span class=\"number\">7500</span>&#125;)</span><br><span class=\"line\">month_salary[<span class=\"number\">1</span>][<span class=\"string\">'salary'</span>] += <span class=\"number\">100</span></span><br><span class=\"line\">month_salary.pop(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range (len(month_salary)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> month_salary[i][<span class=\"string\">'salary'</span>] &lt; <span class=\"number\">5000</span>:</span><br><span class=\"line\">        month_salary[i][<span class=\"string\">'salary'</span>] = <span class=\"number\">5000</span></span><br><span class=\"line\">        index = i</span><br><span class=\"line\">        print(<span class=\"string\">'月薪低于5000的索引为：'</span> + str(index))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        month_salary[i][<span class=\"string\">'salary'</span>] = month_salary[i][<span class=\"string\">'salary'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range (len(month_salary)):</span><br><span class=\"line\">    print(month_salary[i])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>创建一个字典，将员工工号、姓名、月薪数据保存到字典中，并按要求做如下操作:<br>1.打印所有员工信息<br>2.从字典中获取员工工号为“a4”的员工信息，并打印<br>3.判断是否有工号为“a9”的员工，如果存在，输出该员工信息；否则输出“员工不存在”<br>4.遍历字典中所有员工信息，并输出<br>5.添加一名员工数据：工号a7，姓名李梅，月薪9000<br>6.将工号为a4的员工的月薪修改为4900<br>7.删除列表中工号为a4的员工数据 </p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">month_salary = &#123;<span class=\"string\">'a1'</span>:[<span class=\"string\">'王保华'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a2'</span>:[<span class=\"string\">'李维新'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a3'</span>:[<span class=\"string\">'张强'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a4'</span>:[<span class=\"string\">'张明'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a5'</span>:[<span class=\"string\">'陈鑫'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a6'</span>:[<span class=\"string\">'李牧'</span>,<span class=\"number\">10000</span>]&#125;</span><br><span class=\"line\">i = <span class=\"string\">'a9'</span></span><br><span class=\"line\">print(month_salary)</span><br><span class=\"line\">print(month_salary[<span class=\"string\">'a4'</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> month_salary:</span><br><span class=\"line\">    employee = month_salary[i]</span><br><span class=\"line\">    print(<span class=\"string\">'工号为%s的员工信息：'</span>%i)</span><br><span class=\"line\">    print(employee)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'员工不存在'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> month_salary:</span><br><span class=\"line\">    print(month_salary[<span class=\"string\">'%s'</span>%number])</span><br><span class=\"line\">month_salary[<span class=\"string\">'a7'</span>] = [<span class=\"string\">'李梅'</span>,<span class=\"number\">9000</span>]</span><br><span class=\"line\">month_salary[<span class=\"string\">'a4'</span>][<span class=\"number\">1</span>] = <span class=\"number\">4900</span></span><br><span class=\"line\">print(month_salary[<span class=\"string\">'a4'</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">print(month_salary)</span><br><span class=\"line\"><span class=\"keyword\">del</span> month_salary[<span class=\"string\">'a4'</span>]</span><br><span class=\"line\">print(month_salary)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>统计诗经《桃夭》中出现的汉字和标点的次数。<br>1.使用字符串保存《桃夭》<br>2.遍历诗歌中所有的汉字和标点<br>3.遍历过程中统计用到了哪些汉字和标点<br>4.统计汉字和标点个数使用字典结构<br>5.判断字符是否在字典中，如果在，则将该键对应的值加1，如果不在则新创建该键，并赋值1<br>6.使用for循环遍历输出汉字、标点的使用个数 </p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poem = <span class=\"string\">\"\"\"桃之夭夭，灼灼其华。之子于归，宜其室家。桃之夭夭，有蕡其实。之子于归，宜其家室。桃之夭夭，其叶蓁蓁。之子于归，宜其家人。\"\"\"</span></span><br><span class=\"line\">character_counts = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> poem:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> character <span class=\"keyword\">in</span> character_counts:</span><br><span class=\"line\">        character_counts[character] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        character_counts[character] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> character_counts:</span><br><span class=\"line\">    print(<span class=\"string\">\"%s出现了 %d次\"</span>%(key,character_counts[key]))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>定义函数接收年份和月份，返回对应的月份有多少天：闰年二月为29天，否则为28天（闰年就是二月有29天的年份，能被4整除但不能被100整除的是闰年，能被400整除的也是闰年）。4,6,9,11月为30天,其余月为31天</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getYear</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'请输入一个年份：'</span>)</span><br><span class=\"line\">    year = eval(input())</span><br><span class=\"line\">    print(<span class=\"string\">'请输入月份：'</span>)</span><br><span class=\"line\">    month = eval(input())</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(year % <span class=\"number\">4</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> year % <span class=\"number\">100</span> != <span class=\"number\">0</span> <span class=\"keyword\">or</span> year % <span class=\"number\">400</span> == <span class=\"number\">0</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> month == <span class=\"number\">2</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有29天'</span>%(year,month))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有29天'</span> % (year, month))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> month == <span class=\"number\">4</span> <span class=\"keyword\">or</span> month == <span class=\"number\">6</span> <span class=\"keyword\">or</span> month == <span class=\"number\">9</span> <span class=\"keyword\">or</span> month == <span class=\"number\">11</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有30天'</span>%(year,month))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> month == <span class=\"number\">2</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有28天'</span> % (year, month))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有31天'</span> % (year, month))</span><br><span class=\"line\">getYear()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>Python作业，熟悉Python语法基础</center>","more":"<blockquote>\n<p>题目背景介绍：你准备去海南旅游，现在要订购机票。机票的价格受旺季、淡季影响，而且头等舱和经济舱的价格也不同。假设机票原价是5000元，4~10月为旺季，旺季头等舱打9折，经济舱6折；其他月份为淡季，淡季头等舱5折，经济舱4折，编写程序，根据出行的月份和选择的舱位输出实际机票的价格。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final_price = <span class=\"number\">0</span></span><br><span class=\"line\">price = <span class=\"number\">5000</span></span><br><span class=\"line\">print(<span class=\"string\">'请输入你想出行的月份(1~12)：'</span>)</span><br><span class=\"line\">month = eval(input())</span><br><span class=\"line\">print(<span class=\"string\">'请输入你想购买的舱位，头等舱输入1，二等舱输入2'</span>)</span><br><span class=\"line\">level = eval(input())</span><br><span class=\"line\"><span class=\"keyword\">if</span> month &gt;= <span class=\"number\">4</span> <span class=\"keyword\">and</span> month &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> level == <span class=\"number\">1</span>:</span><br><span class=\"line\">        final_price = price * <span class=\"number\">0.9</span></span><br><span class=\"line\">        print(<span class=\"string\">'您的机票价格为：'</span> + str(final_price))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> level == <span class=\"number\">2</span>:</span><br><span class=\"line\">        final_price = price * <span class=\"number\">0.6</span></span><br><span class=\"line\">        print(<span class=\"string\">'您的机票价格为：'</span> + str(final_price))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> level == <span class=\"number\">1</span>:</span><br><span class=\"line\">        final_price = price * <span class=\"number\">0.5</span></span><br><span class=\"line\">        print(<span class=\"string\">'您的机票价格为：'</span> + str(final_price))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> level == <span class=\"number\">2</span>:</span><br><span class=\"line\">        final_price = price * <span class=\"number\">0.4</span></span><br><span class=\"line\">        print(<span class=\"string\">'您的机票价格为：'</span> + str(final_price))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>题目：输入一批数字，输出其中的最大值和最小值，输入数字0结束.</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\">list = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> a == <span class=\"number\">0</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'请输入一个数:'</span>)</span><br><span class=\"line\">    number = eval(input())</span><br><span class=\"line\">    list.append(number)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">0</span>:</span><br><span class=\"line\">        a != <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">list.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(<span class=\"string\">'最大值为:'</span> + str(list[<span class=\"number\">0</span>]))</span><br><span class=\"line\">list.sort()</span><br><span class=\"line\">print(<span class=\"string\">'最小值为：'</span> + str(list[<span class=\"number\">1</span>]))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>题目：创建一个列表，将员工月薪数据保存到其中，并对列表进行如下操作：<br>1.添加一名月薪6000的员工至列表末尾<br>2.插入一名月薪7500的员工到列表中索引为2的位置<br>3.移除列表中最后一个数据，并显示移除的值<br>4.将列表中的第二个数据的值增加100<br>5.删除列表中第5个数据<br>6.按顺序遍历输出员工的月薪<br>7.将所有月薪小于5000的员工月薪，修改为5000，并输出其索引值</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">month_salary = [&#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a1'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'王保华'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">10000</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a2'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'李维新'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">5200</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a3'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'张强'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">4700</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a4'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'张明'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">3860</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a5'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'陈鑫'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">1200</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">'id'</span>:<span class=\"string\">'a6'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'李牧'</span>,<span class=\"string\">'salary'</span>:<span class=\"number\">8500</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">month_salary.append(&#123;<span class=\"string\">'salary'</span>:<span class=\"number\">6000</span>&#125;)</span><br><span class=\"line\">month_salary.insert(<span class=\"number\">2</span>,&#123;<span class=\"string\">'salary'</span>:<span class=\"number\">7500</span>&#125;)</span><br><span class=\"line\">month_salary[<span class=\"number\">1</span>][<span class=\"string\">'salary'</span>] += <span class=\"number\">100</span></span><br><span class=\"line\">month_salary.pop(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range (len(month_salary)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> month_salary[i][<span class=\"string\">'salary'</span>] &lt; <span class=\"number\">5000</span>:</span><br><span class=\"line\">        month_salary[i][<span class=\"string\">'salary'</span>] = <span class=\"number\">5000</span></span><br><span class=\"line\">        index = i</span><br><span class=\"line\">        print(<span class=\"string\">'月薪低于5000的索引为：'</span> + str(index))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        month_salary[i][<span class=\"string\">'salary'</span>] = month_salary[i][<span class=\"string\">'salary'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range (len(month_salary)):</span><br><span class=\"line\">    print(month_salary[i])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>创建一个字典，将员工工号、姓名、月薪数据保存到字典中，并按要求做如下操作:<br>1.打印所有员工信息<br>2.从字典中获取员工工号为“a4”的员工信息，并打印<br>3.判断是否有工号为“a9”的员工，如果存在，输出该员工信息；否则输出“员工不存在”<br>4.遍历字典中所有员工信息，并输出<br>5.添加一名员工数据：工号a7，姓名李梅，月薪9000<br>6.将工号为a4的员工的月薪修改为4900<br>7.删除列表中工号为a4的员工数据 </p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">month_salary = &#123;<span class=\"string\">'a1'</span>:[<span class=\"string\">'王保华'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a2'</span>:[<span class=\"string\">'李维新'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a3'</span>:[<span class=\"string\">'张强'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a4'</span>:[<span class=\"string\">'张明'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a5'</span>:[<span class=\"string\">'陈鑫'</span>,<span class=\"number\">10000</span>],</span><br><span class=\"line\">          <span class=\"string\">'a6'</span>:[<span class=\"string\">'李牧'</span>,<span class=\"number\">10000</span>]&#125;</span><br><span class=\"line\">i = <span class=\"string\">'a9'</span></span><br><span class=\"line\">print(month_salary)</span><br><span class=\"line\">print(month_salary[<span class=\"string\">'a4'</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> month_salary:</span><br><span class=\"line\">    employee = month_salary[i]</span><br><span class=\"line\">    print(<span class=\"string\">'工号为%s的员工信息：'</span>%i)</span><br><span class=\"line\">    print(employee)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'员工不存在'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> month_salary:</span><br><span class=\"line\">    print(month_salary[<span class=\"string\">'%s'</span>%number])</span><br><span class=\"line\">month_salary[<span class=\"string\">'a7'</span>] = [<span class=\"string\">'李梅'</span>,<span class=\"number\">9000</span>]</span><br><span class=\"line\">month_salary[<span class=\"string\">'a4'</span>][<span class=\"number\">1</span>] = <span class=\"number\">4900</span></span><br><span class=\"line\">print(month_salary[<span class=\"string\">'a4'</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">print(month_salary)</span><br><span class=\"line\"><span class=\"keyword\">del</span> month_salary[<span class=\"string\">'a4'</span>]</span><br><span class=\"line\">print(month_salary)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>统计诗经《桃夭》中出现的汉字和标点的次数。<br>1.使用字符串保存《桃夭》<br>2.遍历诗歌中所有的汉字和标点<br>3.遍历过程中统计用到了哪些汉字和标点<br>4.统计汉字和标点个数使用字典结构<br>5.判断字符是否在字典中，如果在，则将该键对应的值加1，如果不在则新创建该键，并赋值1<br>6.使用for循环遍历输出汉字、标点的使用个数 </p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poem = <span class=\"string\">\"\"\"桃之夭夭，灼灼其华。之子于归，宜其室家。桃之夭夭，有蕡其实。之子于归，宜其家室。桃之夭夭，其叶蓁蓁。之子于归，宜其家人。\"\"\"</span></span><br><span class=\"line\">character_counts = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> poem:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> character <span class=\"keyword\">in</span> character_counts:</span><br><span class=\"line\">        character_counts[character] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        character_counts[character] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> character_counts:</span><br><span class=\"line\">    print(<span class=\"string\">\"%s出现了 %d次\"</span>%(key,character_counts[key]))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>定义函数接收年份和月份，返回对应的月份有多少天：闰年二月为29天，否则为28天（闰年就是二月有29天的年份，能被4整除但不能被100整除的是闰年，能被400整除的也是闰年）。4,6,9,11月为30天,其余月为31天</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getYear</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'请输入一个年份：'</span>)</span><br><span class=\"line\">    year = eval(input())</span><br><span class=\"line\">    print(<span class=\"string\">'请输入月份：'</span>)</span><br><span class=\"line\">    month = eval(input())</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(year % <span class=\"number\">4</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> year % <span class=\"number\">100</span> != <span class=\"number\">0</span> <span class=\"keyword\">or</span> year % <span class=\"number\">400</span> == <span class=\"number\">0</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> month == <span class=\"number\">2</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有29天'</span>%(year,month))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有29天'</span> % (year, month))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> month == <span class=\"number\">4</span> <span class=\"keyword\">or</span> month == <span class=\"number\">6</span> <span class=\"keyword\">or</span> month == <span class=\"number\">9</span> <span class=\"keyword\">or</span> month == <span class=\"number\">11</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有30天'</span>%(year,month))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> month == <span class=\"number\">2</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有28天'</span> % (year, month))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'%d年%d月有31天'</span> % (year, month))</span><br><span class=\"line\">getYear()</span><br></pre></td></tr></table></figure>"},{"title":"数据结构 单链表的基本操作","date":"2020-05-30T09:59:10.000Z","_content":"\n<div>\n    <p>\n        链表是通过一组地址任意的存储单元来存储线性表中的数据元素，可以连续也可以不连续。所以在链表中，逻辑上相邻的数据元素在物理上并不一定相邻。\n    </p>\n</div>\n\n\n\n<!--more-->\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/单链表.jfif)\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\ntypedef int elemtype;\ntypedef struct node{\n\telemtype data;\n\tstruct node *next;\n}LinkList;\n\n\n/*头插法建立单链表*/\n\nLinkList *Create_LinkListF() {\n\telemtype ix;\n\tLinkList *head, *p;\n\thead = (LinkList *)malloc(sizeof(LinkList));\t// 生成头结点指针 head\n\tif (head == NULL) {\n\t\treturn head; // 如果申请失败，返回头指针\n\t}\n\thead->next = NULL; \n\tprintf(\"请输入数据直到输入0结束:\\n\");\n\tscanf(\"%d\", &ix); // 输入第一个数据\n\twhile (ix != 0) { // 输入数据，以 0 结束\n\t\tp = (LinkList *)malloc(sizeof(LinkList)); // 生成新结点\n\t\tif (p == NULL) { \n\t\t\treturn head; // 申请失败，返回\n\t\t}\n\t\tp->data = ix; // 将输入的数据赋值给新结点\n\t\tp->next = head->next; // 修改新结点的指针域\n\t\thead->next = p;\t\t// 修改头结点的指针域\n\t\tscanf(\"%d\", &ix); // 读取下一个数据\n\t}\n\treturn head;  // 返回头结点指针\n}\n\n/*尾插法建立单链表*/\nLinkList *Create_LinkListR() {\n\telemtype ix;\n\tLinkList *head, *p, *tail; // *head,*tail分别为头指针和尾指针\n\thead = (LinkList *)malloc(sizeof(LinkList)); // 生成头结点\n\tif (head == NULL) {\n\t\treturn head;\n\t}\n\thead->next = NULL; // 置头结点指针域为空\n\ttail = head; //  尾指针指向头结点\n\tprintf(\"请输入数据直到输入0结束:\\n\");\n\tscanf(\"%d\", &ix); // 输入第一个数据\n\twhile (ix != 0) { // 输入数据，以 0 结束\n\t\tp = (LinkList *)malloc(sizeof(LinkList)); // 生成新结点\n\t\tif (p == NULL) {\n\t\t\treturn head; // 申请失败，返回\n\t\t}\n\t\tp->data = ix; // 将输入的数据赋值给新结点\n\t\ttail->next = p; // 修改尾结点指针域指向p\n\t\ttail = p; // 修改尾指针\n\t\ttail->next = NULL;// 置尾结点指针域为空\n\t\tscanf(\"%d\", &ix);// 读取下一个数据\n\t}\n\treturn head; // 返回头结点指针\n\n}\n\n/*遍历*/\nint Print_LinkList(LinkList *head) {\n\tLinkList *p = head->next;\n\tif (p == NULL) { \n\t\t// 链表为空，返回值为 0\n\t\treturn 0;\n\t}\n\twhile (p != NULL) { // 当前结点不为空\n\t\tprintf(\"\\t%d\", p->data); // 输出当前节点的数据\n\t\tp = p->next; // 移动指针指向下一个结点\n\t}\n\treturn 1;\n}\n\n/*求单链表长度*/\nint LinkList_Length(LinkList *head) {\n\tLinkList *p = head; // p指向头结点\n\tint j = 0;\n\twhile (p->next != NULL){\n\t\tp = p->next; // p指向下一个结点\n\t\tj++;\n\t}\n\treturn j;// 遍历完毕，返回长度\n}\n\n/*按序号查找*/\nLinkList *GetData_LinkList(LinkList *head, int i) {\n\tLinkList *p;\n\tint j = 0;\n\tif (i <= 0) {\n\t\treturn NULL; // 指定的位置非法，返回NULL\n\t}\n\tp = head;\n\twhile (p->next != NULL && j < 1) { \n\t\tp = p->next; // 不是目标节点且还有后继结点时继续查找\n\t\tj++;\n\t}\n\tif (i == j) return p; // 找到目标结点，返回当前指针\n\telse return NULL; // 未找到目标结点，返回NULL\n}\n\n/*按值查找*/\nLinkList *Search_LinkList(LinkList *head, elemtype key) {\n\tLinkList *p;  // 创建LinkList类型指针变量p\n\tp = head->next; // p指向头结点\n\twhile (p != NULL) { // p的结点不为空则执行\n\t\tif (p->data != key) { // 与 key 值不匹配\n\t\t\tp = p->next; // 移动指针，指向下一个结点\n\t\t}\n\t\telse {\n\t\t\tbreak; // 找到，退出循环\n\t\t}\n\t}\n\treturn p; // 返回找到的结点指针或者未找到时的NULL\n}\n\n/*插入, 后插*/\nvoid InsertAter_LinkList(LinkList *p, LinkList *s) { // *p指向单链表某一结点，*s指向待插入值的新结点\n\ts->next = p->next; // 新结点连入链表\n\tp->next = s; // 修改前趋结点的指针域\n}\n\n/*插入，前插*/\nvoid InsertBefore_LinkList(LinkList *head, LinkList *p, LinkList *s) {\n\tLinkList *q;\n\tq = head;\n\twhile (q->next != p) { // 从头结点开始搜索结点p的前趋结点\n\t\tq = q->next;\n\t}\n\ts->next = p; // 修改相应结点的指针域\n\tq->next = s; \n}\n\n/*在指定序号前插入*/\nint InsertNo_LinkList(LinkList *head, LinkList *s, int i) {\n\tLinkList *p;\n\tif (i <= 0) {\n\t\tp = NULL;\n\t}\n\telse if(i == 1){\n\t\tp == head;\n\t}\n\telse {\n\t\tp = GetData_LinkList(head, i - 1); // 搜索第i - 1个结点\n\t}\n\tif (p == NULL) return 0; // 不存在第 i 个位置的结点\n\telse {\n\t\tInsertAter_LinkList(p, s); // 调用后插函数\n\t\treturn 1;\n\t}\n}\n\n/*删除后继结点*/\nint DeleteAfter_LinkList(LinkList *p) {\n\tLinkList *r;\n\tif (!p) return 0;\n\tr = p->next;\n\tif (!r) return 0;\n\tp->next = r->next; // 修改p的指针，指向r的后继结点，跳过r从而将r从链表上删除\n\tfree(r); // 释放r占用的内存空间\n\treturn 1; // 删除成功返回1\n}\n\n/*删除指定结点本身*/\nint DeleteNode_LinkList(LinkList *head, LinkList *p) {\n\tLinkList *r;\n\tif (p->next != NULL) {\n\t\tp->data = p->next->data; // 将后继结点的数据写入到当前节点的数据域\n\t\treturn (DeleteAfter_LinkList(p));// 删除p的后继结点\n\t}\n\telse {\n\t\tr = head;\n\t\twhile (r->next != p) { // 搜索p的前驱结点\n\t\t\tr->next;\n\t\t\treturn (DeleteAfter_LinkList(r)); // 删除p的后继结点\n\t\t}\n\t}\n}\n\n/*删除指定位置的结点*/\nint DeleteNo_LinkList(LinkList *head, int i) {\n\tLinkList *p, *r;\n\tif (i <= 0) p = NULL;\n\telse if (i == 1) p = head;\n\telse p = GetData_LinkList(head, i - 1); // 搜索第 i-1 个结点\n\tif (p == NULL) return 0; // 不存在第 i  个结点，删除失败\n\telse {\n\t\tr = p->next;\n\t\tif (r == NULL) return 0; // 结点不存在，删除失败\n\t\tp->next = r->next; // 删除指定结点\n\t\tfree(r);\n\t\treturn 1;\n\t}\n}\n/*置空表*/\nLinkList *SetNull_LinkList(LinkList *head) {\n\twhile (head->next) {\n\t\tDeleteAfter_LinkList(head);\n\t}\n\treturn head;\n}\n\n```\n\n","source":"_posts/StructOfData-LinkList-Operation.md","raw":"---\ntitle: 数据结构 单链表的基本操作\ndate: 2020-05-30 17:59:10\ntags: 数据结构\ncategories: 数据结构\n---\n\n<div>\n    <p>\n        链表是通过一组地址任意的存储单元来存储线性表中的数据元素，可以连续也可以不连续。所以在链表中，逻辑上相邻的数据元素在物理上并不一定相邻。\n    </p>\n</div>\n\n\n\n<!--more-->\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/单链表.jfif)\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\ntypedef int elemtype;\ntypedef struct node{\n\telemtype data;\n\tstruct node *next;\n}LinkList;\n\n\n/*头插法建立单链表*/\n\nLinkList *Create_LinkListF() {\n\telemtype ix;\n\tLinkList *head, *p;\n\thead = (LinkList *)malloc(sizeof(LinkList));\t// 生成头结点指针 head\n\tif (head == NULL) {\n\t\treturn head; // 如果申请失败，返回头指针\n\t}\n\thead->next = NULL; \n\tprintf(\"请输入数据直到输入0结束:\\n\");\n\tscanf(\"%d\", &ix); // 输入第一个数据\n\twhile (ix != 0) { // 输入数据，以 0 结束\n\t\tp = (LinkList *)malloc(sizeof(LinkList)); // 生成新结点\n\t\tif (p == NULL) { \n\t\t\treturn head; // 申请失败，返回\n\t\t}\n\t\tp->data = ix; // 将输入的数据赋值给新结点\n\t\tp->next = head->next; // 修改新结点的指针域\n\t\thead->next = p;\t\t// 修改头结点的指针域\n\t\tscanf(\"%d\", &ix); // 读取下一个数据\n\t}\n\treturn head;  // 返回头结点指针\n}\n\n/*尾插法建立单链表*/\nLinkList *Create_LinkListR() {\n\telemtype ix;\n\tLinkList *head, *p, *tail; // *head,*tail分别为头指针和尾指针\n\thead = (LinkList *)malloc(sizeof(LinkList)); // 生成头结点\n\tif (head == NULL) {\n\t\treturn head;\n\t}\n\thead->next = NULL; // 置头结点指针域为空\n\ttail = head; //  尾指针指向头结点\n\tprintf(\"请输入数据直到输入0结束:\\n\");\n\tscanf(\"%d\", &ix); // 输入第一个数据\n\twhile (ix != 0) { // 输入数据，以 0 结束\n\t\tp = (LinkList *)malloc(sizeof(LinkList)); // 生成新结点\n\t\tif (p == NULL) {\n\t\t\treturn head; // 申请失败，返回\n\t\t}\n\t\tp->data = ix; // 将输入的数据赋值给新结点\n\t\ttail->next = p; // 修改尾结点指针域指向p\n\t\ttail = p; // 修改尾指针\n\t\ttail->next = NULL;// 置尾结点指针域为空\n\t\tscanf(\"%d\", &ix);// 读取下一个数据\n\t}\n\treturn head; // 返回头结点指针\n\n}\n\n/*遍历*/\nint Print_LinkList(LinkList *head) {\n\tLinkList *p = head->next;\n\tif (p == NULL) { \n\t\t// 链表为空，返回值为 0\n\t\treturn 0;\n\t}\n\twhile (p != NULL) { // 当前结点不为空\n\t\tprintf(\"\\t%d\", p->data); // 输出当前节点的数据\n\t\tp = p->next; // 移动指针指向下一个结点\n\t}\n\treturn 1;\n}\n\n/*求单链表长度*/\nint LinkList_Length(LinkList *head) {\n\tLinkList *p = head; // p指向头结点\n\tint j = 0;\n\twhile (p->next != NULL){\n\t\tp = p->next; // p指向下一个结点\n\t\tj++;\n\t}\n\treturn j;// 遍历完毕，返回长度\n}\n\n/*按序号查找*/\nLinkList *GetData_LinkList(LinkList *head, int i) {\n\tLinkList *p;\n\tint j = 0;\n\tif (i <= 0) {\n\t\treturn NULL; // 指定的位置非法，返回NULL\n\t}\n\tp = head;\n\twhile (p->next != NULL && j < 1) { \n\t\tp = p->next; // 不是目标节点且还有后继结点时继续查找\n\t\tj++;\n\t}\n\tif (i == j) return p; // 找到目标结点，返回当前指针\n\telse return NULL; // 未找到目标结点，返回NULL\n}\n\n/*按值查找*/\nLinkList *Search_LinkList(LinkList *head, elemtype key) {\n\tLinkList *p;  // 创建LinkList类型指针变量p\n\tp = head->next; // p指向头结点\n\twhile (p != NULL) { // p的结点不为空则执行\n\t\tif (p->data != key) { // 与 key 值不匹配\n\t\t\tp = p->next; // 移动指针，指向下一个结点\n\t\t}\n\t\telse {\n\t\t\tbreak; // 找到，退出循环\n\t\t}\n\t}\n\treturn p; // 返回找到的结点指针或者未找到时的NULL\n}\n\n/*插入, 后插*/\nvoid InsertAter_LinkList(LinkList *p, LinkList *s) { // *p指向单链表某一结点，*s指向待插入值的新结点\n\ts->next = p->next; // 新结点连入链表\n\tp->next = s; // 修改前趋结点的指针域\n}\n\n/*插入，前插*/\nvoid InsertBefore_LinkList(LinkList *head, LinkList *p, LinkList *s) {\n\tLinkList *q;\n\tq = head;\n\twhile (q->next != p) { // 从头结点开始搜索结点p的前趋结点\n\t\tq = q->next;\n\t}\n\ts->next = p; // 修改相应结点的指针域\n\tq->next = s; \n}\n\n/*在指定序号前插入*/\nint InsertNo_LinkList(LinkList *head, LinkList *s, int i) {\n\tLinkList *p;\n\tif (i <= 0) {\n\t\tp = NULL;\n\t}\n\telse if(i == 1){\n\t\tp == head;\n\t}\n\telse {\n\t\tp = GetData_LinkList(head, i - 1); // 搜索第i - 1个结点\n\t}\n\tif (p == NULL) return 0; // 不存在第 i 个位置的结点\n\telse {\n\t\tInsertAter_LinkList(p, s); // 调用后插函数\n\t\treturn 1;\n\t}\n}\n\n/*删除后继结点*/\nint DeleteAfter_LinkList(LinkList *p) {\n\tLinkList *r;\n\tif (!p) return 0;\n\tr = p->next;\n\tif (!r) return 0;\n\tp->next = r->next; // 修改p的指针，指向r的后继结点，跳过r从而将r从链表上删除\n\tfree(r); // 释放r占用的内存空间\n\treturn 1; // 删除成功返回1\n}\n\n/*删除指定结点本身*/\nint DeleteNode_LinkList(LinkList *head, LinkList *p) {\n\tLinkList *r;\n\tif (p->next != NULL) {\n\t\tp->data = p->next->data; // 将后继结点的数据写入到当前节点的数据域\n\t\treturn (DeleteAfter_LinkList(p));// 删除p的后继结点\n\t}\n\telse {\n\t\tr = head;\n\t\twhile (r->next != p) { // 搜索p的前驱结点\n\t\t\tr->next;\n\t\t\treturn (DeleteAfter_LinkList(r)); // 删除p的后继结点\n\t\t}\n\t}\n}\n\n/*删除指定位置的结点*/\nint DeleteNo_LinkList(LinkList *head, int i) {\n\tLinkList *p, *r;\n\tif (i <= 0) p = NULL;\n\telse if (i == 1) p = head;\n\telse p = GetData_LinkList(head, i - 1); // 搜索第 i-1 个结点\n\tif (p == NULL) return 0; // 不存在第 i  个结点，删除失败\n\telse {\n\t\tr = p->next;\n\t\tif (r == NULL) return 0; // 结点不存在，删除失败\n\t\tp->next = r->next; // 删除指定结点\n\t\tfree(r);\n\t\treturn 1;\n\t}\n}\n/*置空表*/\nLinkList *SetNull_LinkList(LinkList *head) {\n\twhile (head->next) {\n\t\tDeleteAfter_LinkList(head);\n\t}\n\treturn head;\n}\n\n```\n\n","slug":"StructOfData-LinkList-Operation","published":1,"updated":"2020-08-27T08:22:17.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfl000cr0u23vn36xf6","content":"<div>\n    <p>\n        链表是通过一组地址任意的存储单元来存储线性表中的数据元素，可以连续也可以不连续。所以在链表中，逻辑上相邻的数据元素在物理上并不一定相邻。\n    </p>\n</div>\n\n\n\n<a id=\"more\"></a>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%8D%95%E9%93%BE%E8%A1%A8.jfif\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemtype;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">\telemtype data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*头插法建立单链表*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">Create_LinkListF</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\telemtype ix;</span><br><span class=\"line\">\tLinkList *head, *p;</span><br><span class=\"line\">\thead = (LinkList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkList));\t<span class=\"comment\">// 生成头结点指针 head</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head; <span class=\"comment\">// 如果申请失败，返回头指针</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thead-&gt;next = <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入数据直到输入0结束:\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ix); <span class=\"comment\">// 输入第一个数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ix != <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 输入数据，以 0 结束</span></span><br><span class=\"line\">\t\tp = (LinkList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkList)); <span class=\"comment\">// 生成新结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> head; <span class=\"comment\">// 申请失败，返回</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp-&gt;data = ix; <span class=\"comment\">// 将输入的数据赋值给新结点</span></span><br><span class=\"line\">\t\tp-&gt;next = head-&gt;next; <span class=\"comment\">// 修改新结点的指针域</span></span><br><span class=\"line\">\t\thead-&gt;next = p;\t\t<span class=\"comment\">// 修改头结点的指针域</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ix); <span class=\"comment\">// 读取下一个数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head;  <span class=\"comment\">// 返回头结点指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*尾插法建立单链表*/</span></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">Create_LinkListR</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\telemtype ix;</span><br><span class=\"line\">\tLinkList *head, *p, *tail; <span class=\"comment\">// *head,*tail分别为头指针和尾指针</span></span><br><span class=\"line\">\thead = (LinkList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkList)); <span class=\"comment\">// 生成头结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thead-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 置头结点指针域为空</span></span><br><span class=\"line\">\ttail = head; <span class=\"comment\">//  尾指针指向头结点</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入数据直到输入0结束:\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ix); <span class=\"comment\">// 输入第一个数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ix != <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 输入数据，以 0 结束</span></span><br><span class=\"line\">\t\tp = (LinkList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkList)); <span class=\"comment\">// 生成新结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> head; <span class=\"comment\">// 申请失败，返回</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp-&gt;data = ix; <span class=\"comment\">// 将输入的数据赋值给新结点</span></span><br><span class=\"line\">\t\ttail-&gt;next = p; <span class=\"comment\">// 修改尾结点指针域指向p</span></span><br><span class=\"line\">\t\ttail = p; <span class=\"comment\">// 修改尾指针</span></span><br><span class=\"line\">\t\ttail-&gt;next = <span class=\"literal\">NULL</span>;<span class=\"comment\">// 置尾结点指针域为空</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ix);<span class=\"comment\">// 读取下一个数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head; <span class=\"comment\">// 返回头结点指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*遍历*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Print_LinkList</span><span class=\"params\">(LinkList *head)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p = head-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) &#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 链表为空，返回值为 0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// 当前结点不为空</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\t%d\"</span>, p-&gt;data); <span class=\"comment\">// 输出当前节点的数据</span></span><br><span class=\"line\">\t\tp = p-&gt;next; <span class=\"comment\">// 移动指针指向下一个结点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*求单链表长度*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LinkList_Length</span><span class=\"params\">(LinkList *head)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p = head; <span class=\"comment\">// p指向头结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p-&gt;next != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\tp = p-&gt;next; <span class=\"comment\">// p指向下一个结点</span></span><br><span class=\"line\">\t\tj++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> j;<span class=\"comment\">// 遍历完毕，返回长度</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*按序号查找*/</span></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">GetData_LinkList</span><span class=\"params\">(LinkList *head, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; <span class=\"comment\">// 指定的位置非法，返回NULL</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp = head;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p-&gt;next != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">\t\tp = p-&gt;next; <span class=\"comment\">// 不是目标节点且还有后继结点时继续查找</span></span><br><span class=\"line\">\t\tj++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == j) <span class=\"keyword\">return</span> p; <span class=\"comment\">// 找到目标结点，返回当前指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; <span class=\"comment\">// 未找到目标结点，返回NULL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*按值查找*/</span></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">Search_LinkList</span><span class=\"params\">(LinkList *head, elemtype key)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p;  <span class=\"comment\">// 创建LinkList类型指针变量p</span></span><br><span class=\"line\">\tp = head-&gt;next; <span class=\"comment\">// p指向头结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// p的结点不为空则执行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p-&gt;data != key) &#123; <span class=\"comment\">// 与 key 值不匹配</span></span><br><span class=\"line\">\t\t\tp = p-&gt;next; <span class=\"comment\">// 移动指针，指向下一个结点</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">// 找到，退出循环</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p; <span class=\"comment\">// 返回找到的结点指针或者未找到时的NULL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*插入, 后插*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InsertAter_LinkList</span><span class=\"params\">(LinkList *p, LinkList *s)</span> </span>&#123; <span class=\"comment\">// *p指向单链表某一结点，*s指向待插入值的新结点</span></span><br><span class=\"line\">\ts-&gt;next = p-&gt;next; <span class=\"comment\">// 新结点连入链表</span></span><br><span class=\"line\">\tp-&gt;next = s; <span class=\"comment\">// 修改前趋结点的指针域</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*插入，前插*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InsertBefore_LinkList</span><span class=\"params\">(LinkList *head, LinkList *p, LinkList *s)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *q;</span><br><span class=\"line\">\tq = head;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (q-&gt;next != p) &#123; <span class=\"comment\">// 从头结点开始搜索结点p的前趋结点</span></span><br><span class=\"line\">\t\tq = q-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts-&gt;next = p; <span class=\"comment\">// 修改相应结点的指针域</span></span><br><span class=\"line\">\tq-&gt;next = s; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*在指定序号前插入*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">InsertNo_LinkList</span><span class=\"params\">(LinkList *head, LinkList *s, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tp == head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tp = GetData_LinkList(head, i - <span class=\"number\">1</span>); <span class=\"comment\">// 搜索第i - 1个结点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 不存在第 i 个位置的结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tInsertAter_LinkList(p, s); <span class=\"comment\">// 调用后插函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*删除后继结点*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DeleteAfter_LinkList</span><span class=\"params\">(LinkList *p)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *r;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!p) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\tr = p-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\tp-&gt;next = r-&gt;next; <span class=\"comment\">// 修改p的指针，指向r的后继结点，跳过r从而将r从链表上删除</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(r); <span class=\"comment\">// 释放r占用的内存空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 删除成功返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*删除指定结点本身*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DeleteNode_LinkList</span><span class=\"params\">(LinkList *head, LinkList *p)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *r;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tp-&gt;data = p-&gt;next-&gt;data; <span class=\"comment\">// 将后继结点的数据写入到当前节点的数据域</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (DeleteAfter_LinkList(p));<span class=\"comment\">// 删除p的后继结点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tr = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (r-&gt;next != p) &#123; <span class=\"comment\">// 搜索p的前驱结点</span></span><br><span class=\"line\">\t\t\tr-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (DeleteAfter_LinkList(r)); <span class=\"comment\">// 删除p的后继结点</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*删除指定位置的结点*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DeleteNo_LinkList</span><span class=\"params\">(LinkList *head, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p, *r;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>) p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) p = head;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> p = GetData_LinkList(head, i - <span class=\"number\">1</span>); <span class=\"comment\">// 搜索第 i-1 个结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 不存在第 i  个结点，删除失败</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tr = p-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (r == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 结点不存在，删除失败</span></span><br><span class=\"line\">\t\tp-&gt;next = r-&gt;next; <span class=\"comment\">// 删除指定结点</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*置空表*/</span></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">SetNull_LinkList</span><span class=\"params\">(LinkList *head)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (head-&gt;next) &#123;</span><br><span class=\"line\">\t\tDeleteAfter_LinkList(head);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<div>\n    <p>\n        链表是通过一组地址任意的存储单元来存储线性表中的数据元素，可以连续也可以不连续。所以在链表中，逻辑上相邻的数据元素在物理上并不一定相邻。\n    </p>\n</div>","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E5%8D%95%E9%93%BE%E8%A1%A8.jfif\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemtype;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">\telemtype data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*头插法建立单链表*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">Create_LinkListF</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\telemtype ix;</span><br><span class=\"line\">\tLinkList *head, *p;</span><br><span class=\"line\">\thead = (LinkList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkList));\t<span class=\"comment\">// 生成头结点指针 head</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head; <span class=\"comment\">// 如果申请失败，返回头指针</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thead-&gt;next = <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入数据直到输入0结束:\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ix); <span class=\"comment\">// 输入第一个数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ix != <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 输入数据，以 0 结束</span></span><br><span class=\"line\">\t\tp = (LinkList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkList)); <span class=\"comment\">// 生成新结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> head; <span class=\"comment\">// 申请失败，返回</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp-&gt;data = ix; <span class=\"comment\">// 将输入的数据赋值给新结点</span></span><br><span class=\"line\">\t\tp-&gt;next = head-&gt;next; <span class=\"comment\">// 修改新结点的指针域</span></span><br><span class=\"line\">\t\thead-&gt;next = p;\t\t<span class=\"comment\">// 修改头结点的指针域</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ix); <span class=\"comment\">// 读取下一个数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head;  <span class=\"comment\">// 返回头结点指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*尾插法建立单链表*/</span></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">Create_LinkListR</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\telemtype ix;</span><br><span class=\"line\">\tLinkList *head, *p, *tail; <span class=\"comment\">// *head,*tail分别为头指针和尾指针</span></span><br><span class=\"line\">\thead = (LinkList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkList)); <span class=\"comment\">// 生成头结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thead-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 置头结点指针域为空</span></span><br><span class=\"line\">\ttail = head; <span class=\"comment\">//  尾指针指向头结点</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入数据直到输入0结束:\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ix); <span class=\"comment\">// 输入第一个数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ix != <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 输入数据，以 0 结束</span></span><br><span class=\"line\">\t\tp = (LinkList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkList)); <span class=\"comment\">// 生成新结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> head; <span class=\"comment\">// 申请失败，返回</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp-&gt;data = ix; <span class=\"comment\">// 将输入的数据赋值给新结点</span></span><br><span class=\"line\">\t\ttail-&gt;next = p; <span class=\"comment\">// 修改尾结点指针域指向p</span></span><br><span class=\"line\">\t\ttail = p; <span class=\"comment\">// 修改尾指针</span></span><br><span class=\"line\">\t\ttail-&gt;next = <span class=\"literal\">NULL</span>;<span class=\"comment\">// 置尾结点指针域为空</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;ix);<span class=\"comment\">// 读取下一个数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head; <span class=\"comment\">// 返回头结点指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*遍历*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Print_LinkList</span><span class=\"params\">(LinkList *head)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p = head-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) &#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 链表为空，返回值为 0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// 当前结点不为空</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\t%d\"</span>, p-&gt;data); <span class=\"comment\">// 输出当前节点的数据</span></span><br><span class=\"line\">\t\tp = p-&gt;next; <span class=\"comment\">// 移动指针指向下一个结点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*求单链表长度*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LinkList_Length</span><span class=\"params\">(LinkList *head)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p = head; <span class=\"comment\">// p指向头结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p-&gt;next != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\tp = p-&gt;next; <span class=\"comment\">// p指向下一个结点</span></span><br><span class=\"line\">\t\tj++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> j;<span class=\"comment\">// 遍历完毕，返回长度</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*按序号查找*/</span></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">GetData_LinkList</span><span class=\"params\">(LinkList *head, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; <span class=\"comment\">// 指定的位置非法，返回NULL</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp = head;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p-&gt;next != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">\t\tp = p-&gt;next; <span class=\"comment\">// 不是目标节点且还有后继结点时继续查找</span></span><br><span class=\"line\">\t\tj++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == j) <span class=\"keyword\">return</span> p; <span class=\"comment\">// 找到目标结点，返回当前指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; <span class=\"comment\">// 未找到目标结点，返回NULL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*按值查找*/</span></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">Search_LinkList</span><span class=\"params\">(LinkList *head, elemtype key)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p;  <span class=\"comment\">// 创建LinkList类型指针变量p</span></span><br><span class=\"line\">\tp = head-&gt;next; <span class=\"comment\">// p指向头结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// p的结点不为空则执行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p-&gt;data != key) &#123; <span class=\"comment\">// 与 key 值不匹配</span></span><br><span class=\"line\">\t\t\tp = p-&gt;next; <span class=\"comment\">// 移动指针，指向下一个结点</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">// 找到，退出循环</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p; <span class=\"comment\">// 返回找到的结点指针或者未找到时的NULL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*插入, 后插*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InsertAter_LinkList</span><span class=\"params\">(LinkList *p, LinkList *s)</span> </span>&#123; <span class=\"comment\">// *p指向单链表某一结点，*s指向待插入值的新结点</span></span><br><span class=\"line\">\ts-&gt;next = p-&gt;next; <span class=\"comment\">// 新结点连入链表</span></span><br><span class=\"line\">\tp-&gt;next = s; <span class=\"comment\">// 修改前趋结点的指针域</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*插入，前插*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InsertBefore_LinkList</span><span class=\"params\">(LinkList *head, LinkList *p, LinkList *s)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *q;</span><br><span class=\"line\">\tq = head;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (q-&gt;next != p) &#123; <span class=\"comment\">// 从头结点开始搜索结点p的前趋结点</span></span><br><span class=\"line\">\t\tq = q-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts-&gt;next = p; <span class=\"comment\">// 修改相应结点的指针域</span></span><br><span class=\"line\">\tq-&gt;next = s; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*在指定序号前插入*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">InsertNo_LinkList</span><span class=\"params\">(LinkList *head, LinkList *s, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tp == head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tp = GetData_LinkList(head, i - <span class=\"number\">1</span>); <span class=\"comment\">// 搜索第i - 1个结点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 不存在第 i 个位置的结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tInsertAter_LinkList(p, s); <span class=\"comment\">// 调用后插函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*删除后继结点*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DeleteAfter_LinkList</span><span class=\"params\">(LinkList *p)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *r;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!p) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\tr = p-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\tp-&gt;next = r-&gt;next; <span class=\"comment\">// 修改p的指针，指向r的后继结点，跳过r从而将r从链表上删除</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(r); <span class=\"comment\">// 释放r占用的内存空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 删除成功返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*删除指定结点本身*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DeleteNode_LinkList</span><span class=\"params\">(LinkList *head, LinkList *p)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *r;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tp-&gt;data = p-&gt;next-&gt;data; <span class=\"comment\">// 将后继结点的数据写入到当前节点的数据域</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (DeleteAfter_LinkList(p));<span class=\"comment\">// 删除p的后继结点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tr = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (r-&gt;next != p) &#123; <span class=\"comment\">// 搜索p的前驱结点</span></span><br><span class=\"line\">\t\t\tr-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (DeleteAfter_LinkList(r)); <span class=\"comment\">// 删除p的后继结点</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*删除指定位置的结点*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DeleteNo_LinkList</span><span class=\"params\">(LinkList *head, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\tLinkList *p, *r;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>) p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) p = head;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> p = GetData_LinkList(head, i - <span class=\"number\">1</span>); <span class=\"comment\">// 搜索第 i-1 个结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 不存在第 i  个结点，删除失败</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tr = p-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (r == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 结点不存在，删除失败</span></span><br><span class=\"line\">\t\tp-&gt;next = r-&gt;next; <span class=\"comment\">// 删除指定结点</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*置空表*/</span></span><br><span class=\"line\"><span class=\"function\">LinkList *<span class=\"title\">SetNull_LinkList</span><span class=\"params\">(LinkList *head)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (head-&gt;next) &#123;</span><br><span class=\"line\">\t\tDeleteAfter_LinkList(head);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据结构 线性表的初始化及操作","date":"2020-05-30T07:25:03.000Z","_content":"\n<div class='notification is-info'>\n    <p>\n        线性表的基本操作\n    </p>\n</div>\n\n| 优点                                               | 缺点                       |\n| -------------------------------------------------- | -------------------------- |\n| 结构简单，易于理解                                 | 存储空间不易扩充           |\n| 方便随机访问表中的每个元素                         | 容易造成存储空间的利用率地 |\n| 不需要再为表示结点间的逻辑关系而增加额外的存储空间 | 插入删除运算不方便         |\n\n\n\n<!--more-->\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/线性表.jfif)\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXSIZE 1024\ntypedef int elemtype;\ntypedef struct sequlist{\n\telemtype data[MAXSIZE];\n\tint last;\n}SequenList;\n/*顺序表的初始化*/\nSequenList *Init_SequenList() {\n\tSequenList *L; /*定义顺序表指针变量*/\n\n\t/*申请分配内存空间*/\n\tL = (SequenList *)malloc(sizeof(SequenList)); \n\t/*申请分配内存空间成功*/\n\tif (L != NULL) { \n\t\t /*设置顺序表的长度last为 -1 表示顺序表为空*/\n\t\tL->last = -1;\n\t}\n\treturn L; // 返回顺序表的首地址\n}\n\n/*求顺序表的长度*/\nint SequenList_Length(SequenList *L) {\n\treturn(L->last + 1);\n}\n\n/*顺序表指定位置插入元素*/\nint Insert_SequenList(SequenList *L, elemtype x, int i) {\n\t/*在顺序表中指定的位置插入值为x的节点*/\n\t/*L是SequenList类型的指针变量*/\n\t/*i是指定要插入的位置*/\n\tint j;\n\tif (L->last >= MAXSIZE - 1) {   // 判满\n\t\treturn 0;\n\t}\n\tif (i < 1 || i > L->last + 2) {  // 判断插入位置是否合法\n\t\treturn 0;\n\t}\n\tfor (j = L->last; j >= i - 1; j--) {  // 在第 i 个位置插入新元素\n\t\tL->data[j+1] = L->data[j];    // 结点依次向后移动一个位置\n\t\tL->data[i - 1] = x;\t\t\t// 将 x 插入到第 i 个位置\n\t\tL->last = L->last + 1;\t\t// 表长加一\n\t}\n\treturn 1; // 插入成功，返回 1\n\n}\n\n/*顺序表删除指定位置元素*/\nint Delete_SequenList(SequenList *L, int i) {\n\tint j;\n\tif (i < 1 || i > L->last + 2) {  // 判断插入位置是否合法\n\t\treturn 0;\n\t}\n\telse {\n\t\tfor (j = i; j <= L->last; j++) { // 在第 i 个位置删除元素\n\t\t\tL->data[j - 1] = L->data[j]; // 结点依次向前移动一个位置\n\t\t}\n\t\tL->last - 1; // 表长减 1\n\t}\n\treturn 1;// 删除成功，返回 1\n}\n\n/*取数据元素*/\nelemtype GetData_SequenList(SequenList *L, int i) {\n\tif (i < 1 || i > L->last + 1) { // 判断位置是否合法\n\t\treturn 0;\n\t}\n\telse {\n\t\treturn (L->data[i - 1]);  // 返回所需结点的值\n\t}\n}\n\n/*查找*/\nint Search_SequenList(SequenList *L, elemtype key) {\n\tint i;\n\tfor (i = 0; i <= L->last; i++) {  // 遍历表，将遍历项依次和 key 进行比较\n\t\tif (L->data[i] == key) { // 找到与 key 相等的元素\n\t\t\treturn (i + 1);   // 返回其位置\n\t\t}\n\t}\n\treturn 0;\n}\n\n/*遍历*/\nint Print_SequenList(SequenList *L) {\n\tint i;\n\tif (L->last == -1) {\n\t\treturn 0;  // 空表，返回 0\n\t}\n\tfor (i = 0; i <= L->last; i++) {\n\t\tprintf(\"a[%2d]=%4d\\t\", i+1, L->data[i]); // 输出表元素\n\t\tif ((i + 1) % 5 == 0) printf(\"\\n\");  // 控制每行输出的个数\n\t}\n\treturn 1;\n}\n\nvoid main() {\n\tSequenList *L;\n\tL = Init_SequenList();\n\tif (L == NULL) {\n\t\tprintf(\"申请顺序表内存空间失败！程序结束！\\n\");\n\t\treturn;\n\t}\n\telse {\n\t\tprintf(\"申请顺序表内存空间成功！\\n\");\n\t}\n}\n```\n\n","source":"_posts/StructOfData-SequenList-Operation.md","raw":"---\ntitle: 数据结构 线性表的初始化及操作\ndate: 2020-05-30 15:25:03\ntags: 数据结构\ncategories: 数据结构\n---\n\n<div class='notification is-info'>\n    <p>\n        线性表的基本操作\n    </p>\n</div>\n\n| 优点                                               | 缺点                       |\n| -------------------------------------------------- | -------------------------- |\n| 结构简单，易于理解                                 | 存储空间不易扩充           |\n| 方便随机访问表中的每个元素                         | 容易造成存储空间的利用率地 |\n| 不需要再为表示结点间的逻辑关系而增加额外的存储空间 | 插入删除运算不方便         |\n\n\n\n<!--more-->\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/线性表.jfif)\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXSIZE 1024\ntypedef int elemtype;\ntypedef struct sequlist{\n\telemtype data[MAXSIZE];\n\tint last;\n}SequenList;\n/*顺序表的初始化*/\nSequenList *Init_SequenList() {\n\tSequenList *L; /*定义顺序表指针变量*/\n\n\t/*申请分配内存空间*/\n\tL = (SequenList *)malloc(sizeof(SequenList)); \n\t/*申请分配内存空间成功*/\n\tif (L != NULL) { \n\t\t /*设置顺序表的长度last为 -1 表示顺序表为空*/\n\t\tL->last = -1;\n\t}\n\treturn L; // 返回顺序表的首地址\n}\n\n/*求顺序表的长度*/\nint SequenList_Length(SequenList *L) {\n\treturn(L->last + 1);\n}\n\n/*顺序表指定位置插入元素*/\nint Insert_SequenList(SequenList *L, elemtype x, int i) {\n\t/*在顺序表中指定的位置插入值为x的节点*/\n\t/*L是SequenList类型的指针变量*/\n\t/*i是指定要插入的位置*/\n\tint j;\n\tif (L->last >= MAXSIZE - 1) {   // 判满\n\t\treturn 0;\n\t}\n\tif (i < 1 || i > L->last + 2) {  // 判断插入位置是否合法\n\t\treturn 0;\n\t}\n\tfor (j = L->last; j >= i - 1; j--) {  // 在第 i 个位置插入新元素\n\t\tL->data[j+1] = L->data[j];    // 结点依次向后移动一个位置\n\t\tL->data[i - 1] = x;\t\t\t// 将 x 插入到第 i 个位置\n\t\tL->last = L->last + 1;\t\t// 表长加一\n\t}\n\treturn 1; // 插入成功，返回 1\n\n}\n\n/*顺序表删除指定位置元素*/\nint Delete_SequenList(SequenList *L, int i) {\n\tint j;\n\tif (i < 1 || i > L->last + 2) {  // 判断插入位置是否合法\n\t\treturn 0;\n\t}\n\telse {\n\t\tfor (j = i; j <= L->last; j++) { // 在第 i 个位置删除元素\n\t\t\tL->data[j - 1] = L->data[j]; // 结点依次向前移动一个位置\n\t\t}\n\t\tL->last - 1; // 表长减 1\n\t}\n\treturn 1;// 删除成功，返回 1\n}\n\n/*取数据元素*/\nelemtype GetData_SequenList(SequenList *L, int i) {\n\tif (i < 1 || i > L->last + 1) { // 判断位置是否合法\n\t\treturn 0;\n\t}\n\telse {\n\t\treturn (L->data[i - 1]);  // 返回所需结点的值\n\t}\n}\n\n/*查找*/\nint Search_SequenList(SequenList *L, elemtype key) {\n\tint i;\n\tfor (i = 0; i <= L->last; i++) {  // 遍历表，将遍历项依次和 key 进行比较\n\t\tif (L->data[i] == key) { // 找到与 key 相等的元素\n\t\t\treturn (i + 1);   // 返回其位置\n\t\t}\n\t}\n\treturn 0;\n}\n\n/*遍历*/\nint Print_SequenList(SequenList *L) {\n\tint i;\n\tif (L->last == -1) {\n\t\treturn 0;  // 空表，返回 0\n\t}\n\tfor (i = 0; i <= L->last; i++) {\n\t\tprintf(\"a[%2d]=%4d\\t\", i+1, L->data[i]); // 输出表元素\n\t\tif ((i + 1) % 5 == 0) printf(\"\\n\");  // 控制每行输出的个数\n\t}\n\treturn 1;\n}\n\nvoid main() {\n\tSequenList *L;\n\tL = Init_SequenList();\n\tif (L == NULL) {\n\t\tprintf(\"申请顺序表内存空间失败！程序结束！\\n\");\n\t\treturn;\n\t}\n\telse {\n\t\tprintf(\"申请顺序表内存空间成功！\\n\");\n\t}\n}\n```\n\n","slug":"StructOfData-SequenList-Operation","published":1,"updated":"2020-08-27T08:22:17.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfm000dr0u21vhvfqaf","content":"<div class='notification is-info'>\n    <p>\n        线性表的基本操作\n    </p>\n</div>\n\n<table>\n<thead>\n<tr>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>结构简单，易于理解</td>\n<td>存储空间不易扩充</td>\n</tr>\n<tr>\n<td>方便随机访问表中的每个元素</td>\n<td>容易造成存储空间的利用率地</td>\n</tr>\n<tr>\n<td>不需要再为表示结点间的逻辑关系而增加额外的存储空间</td>\n<td>插入删除运算不方便</td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E7%BA%BF%E6%80%A7%E8%A1%A8.jfif\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXSIZE 1024</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemtype;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sequlist</span>&#123;</span></span><br><span class=\"line\">\telemtype data[MAXSIZE];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> last;</span><br><span class=\"line\">&#125;SequenList;</span><br><span class=\"line\"><span class=\"comment\">/*顺序表的初始化*/</span></span><br><span class=\"line\"><span class=\"function\">SequenList *<span class=\"title\">Init_SequenList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSequenList *L; <span class=\"comment\">/*定义顺序表指针变量*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*申请分配内存空间*/</span></span><br><span class=\"line\">\tL = (SequenList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(SequenList)); </span><br><span class=\"line\">\t<span class=\"comment\">/*申请分配内存空间成功*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L != <span class=\"literal\">NULL</span>) &#123; </span><br><span class=\"line\">\t\t <span class=\"comment\">/*设置顺序表的长度last为 -1 表示顺序表为空*/</span></span><br><span class=\"line\">\t\tL-&gt;last = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> L; <span class=\"comment\">// 返回顺序表的首地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*求顺序表的长度*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SequenList_Length</span><span class=\"params\">(SequenList *L)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>(L-&gt;last + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*顺序表指定位置插入元素*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Insert_SequenList</span><span class=\"params\">(SequenList *L, elemtype x, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*在顺序表中指定的位置插入值为x的节点*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*L是SequenList类型的指针变量*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*i是指定要插入的位置*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L-&gt;last &gt;= MAXSIZE - <span class=\"number\">1</span>) &#123;   <span class=\"comment\">// 判满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;last + <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// 判断插入位置是否合法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = L-&gt;last; j &gt;= i - <span class=\"number\">1</span>; j--) &#123;  <span class=\"comment\">// 在第 i 个位置插入新元素</span></span><br><span class=\"line\">\t\tL-&gt;data[j+<span class=\"number\">1</span>] = L-&gt;data[j];    <span class=\"comment\">// 结点依次向后移动一个位置</span></span><br><span class=\"line\">\t\tL-&gt;data[i - <span class=\"number\">1</span>] = x;\t\t\t<span class=\"comment\">// 将 x 插入到第 i 个位置</span></span><br><span class=\"line\">\t\tL-&gt;last = L-&gt;last + <span class=\"number\">1</span>;\t\t<span class=\"comment\">// 表长加一</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 插入成功，返回 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*顺序表删除指定位置元素*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Delete_SequenList</span><span class=\"params\">(SequenList *L, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;last + <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// 判断插入位置是否合法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i; j &lt;= L-&gt;last; j++) &#123; <span class=\"comment\">// 在第 i 个位置删除元素</span></span><br><span class=\"line\">\t\t\tL-&gt;data[j - <span class=\"number\">1</span>] = L-&gt;data[j]; <span class=\"comment\">// 结点依次向前移动一个位置</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tL-&gt;last - <span class=\"number\">1</span>; <span class=\"comment\">// 表长减 1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">// 删除成功，返回 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*取数据元素*/</span></span><br><span class=\"line\"><span class=\"function\">elemtype <span class=\"title\">GetData_SequenList</span><span class=\"params\">(SequenList *L, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;last + <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 判断位置是否合法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (L-&gt;data[i - <span class=\"number\">1</span>]);  <span class=\"comment\">// 返回所需结点的值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*查找*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Search_SequenList</span><span class=\"params\">(SequenList *L, elemtype key)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= L-&gt;last; i++) &#123;  <span class=\"comment\">// 遍历表，将遍历项依次和 key 进行比较</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (L-&gt;data[i] == key) &#123; <span class=\"comment\">// 找到与 key 相等的元素</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (i + <span class=\"number\">1</span>);   <span class=\"comment\">// 返回其位置</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*遍历*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Print_SequenList</span><span class=\"params\">(SequenList *L)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L-&gt;last == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 空表，返回 0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= L-&gt;last; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a[%2d]=%4d\\t\"</span>, i+<span class=\"number\">1</span>, L-&gt;data[i]); <span class=\"comment\">// 输出表元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((i + <span class=\"number\">1</span>) % <span class=\"number\">5</span> == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);  <span class=\"comment\">// 控制每行输出的个数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSequenList *L;</span><br><span class=\"line\">\tL = Init_SequenList();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"申请顺序表内存空间失败！程序结束！\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"申请顺序表内存空间成功！\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<div class='notification is-info'>\n    <p>\n        线性表的基本操作\n    </p>\n</div>\n\n<table>\n<thead>\n<tr>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>结构简单，易于理解</td>\n<td>存储空间不易扩充</td>\n</tr>\n<tr>\n<td>方便随机访问表中的每个元素</td>\n<td>容易造成存储空间的利用率地</td>\n</tr>\n<tr>\n<td>不需要再为表示结点间的逻辑关系而增加额外的存储空间</td>\n<td>插入删除运算不方便</td>\n</tr>\n</tbody></table>","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/%E7%BA%BF%E6%80%A7%E8%A1%A8.jfif\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXSIZE 1024</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemtype;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sequlist</span>&#123;</span></span><br><span class=\"line\">\telemtype data[MAXSIZE];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> last;</span><br><span class=\"line\">&#125;SequenList;</span><br><span class=\"line\"><span class=\"comment\">/*顺序表的初始化*/</span></span><br><span class=\"line\"><span class=\"function\">SequenList *<span class=\"title\">Init_SequenList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSequenList *L; <span class=\"comment\">/*定义顺序表指针变量*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*申请分配内存空间*/</span></span><br><span class=\"line\">\tL = (SequenList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(SequenList)); </span><br><span class=\"line\">\t<span class=\"comment\">/*申请分配内存空间成功*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L != <span class=\"literal\">NULL</span>) &#123; </span><br><span class=\"line\">\t\t <span class=\"comment\">/*设置顺序表的长度last为 -1 表示顺序表为空*/</span></span><br><span class=\"line\">\t\tL-&gt;last = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> L; <span class=\"comment\">// 返回顺序表的首地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*求顺序表的长度*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SequenList_Length</span><span class=\"params\">(SequenList *L)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>(L-&gt;last + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*顺序表指定位置插入元素*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Insert_SequenList</span><span class=\"params\">(SequenList *L, elemtype x, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*在顺序表中指定的位置插入值为x的节点*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*L是SequenList类型的指针变量*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*i是指定要插入的位置*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L-&gt;last &gt;= MAXSIZE - <span class=\"number\">1</span>) &#123;   <span class=\"comment\">// 判满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;last + <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// 判断插入位置是否合法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = L-&gt;last; j &gt;= i - <span class=\"number\">1</span>; j--) &#123;  <span class=\"comment\">// 在第 i 个位置插入新元素</span></span><br><span class=\"line\">\t\tL-&gt;data[j+<span class=\"number\">1</span>] = L-&gt;data[j];    <span class=\"comment\">// 结点依次向后移动一个位置</span></span><br><span class=\"line\">\t\tL-&gt;data[i - <span class=\"number\">1</span>] = x;\t\t\t<span class=\"comment\">// 将 x 插入到第 i 个位置</span></span><br><span class=\"line\">\t\tL-&gt;last = L-&gt;last + <span class=\"number\">1</span>;\t\t<span class=\"comment\">// 表长加一</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 插入成功，返回 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*顺序表删除指定位置元素*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Delete_SequenList</span><span class=\"params\">(SequenList *L, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;last + <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// 判断插入位置是否合法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i; j &lt;= L-&gt;last; j++) &#123; <span class=\"comment\">// 在第 i 个位置删除元素</span></span><br><span class=\"line\">\t\t\tL-&gt;data[j - <span class=\"number\">1</span>] = L-&gt;data[j]; <span class=\"comment\">// 结点依次向前移动一个位置</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tL-&gt;last - <span class=\"number\">1</span>; <span class=\"comment\">// 表长减 1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">// 删除成功，返回 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*取数据元素*/</span></span><br><span class=\"line\"><span class=\"function\">elemtype <span class=\"title\">GetData_SequenList</span><span class=\"params\">(SequenList *L, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;last + <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 判断位置是否合法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (L-&gt;data[i - <span class=\"number\">1</span>]);  <span class=\"comment\">// 返回所需结点的值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*查找*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Search_SequenList</span><span class=\"params\">(SequenList *L, elemtype key)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= L-&gt;last; i++) &#123;  <span class=\"comment\">// 遍历表，将遍历项依次和 key 进行比较</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (L-&gt;data[i] == key) &#123; <span class=\"comment\">// 找到与 key 相等的元素</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (i + <span class=\"number\">1</span>);   <span class=\"comment\">// 返回其位置</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*遍历*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Print_SequenList</span><span class=\"params\">(SequenList *L)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L-&gt;last == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 空表，返回 0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= L-&gt;last; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a[%2d]=%4d\\t\"</span>, i+<span class=\"number\">1</span>, L-&gt;data[i]); <span class=\"comment\">// 输出表元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((i + <span class=\"number\">1</span>) % <span class=\"number\">5</span> == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);  <span class=\"comment\">// 控制每行输出的个数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSequenList *L;</span><br><span class=\"line\">\tL = Init_SequenList();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"申请顺序表内存空间失败！程序结束！\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"申请顺序表内存空间成功！\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue.js入门","date":"2019-11-05T09:10:31.000Z","_content":"<center>Vue基础的指令</center>\n<!--more-->\n**<center>v-for</center>**\n```html\n<div id=\"player\">\n    <ul>\n        <li v-for=\"player in nba\">{{ player.name }}</li>\n    </ul>\n</div>\n```\n```javascript\nvar player = new Vue({\n\tel: '#player',\n\tdata: {\n\t\tnba: [\n\t\t\t{ name: 'Dwyane Wade' },\n\t\t\t{ name: 'Lebron  James' },\n\t\t\t{ name: 'Anthony Davis' }\n\t\t]\n\t}\n})   \n```\n**<center>v-on 和 v-if</center>** \n```html\n<div id=\"app\">\n\t<button v-if=\"showBtn\" v-on:click=\"handleClick\">Click me</button>\n</div>\n```\n```javascript\nnew Vue({\n\tel: '#app',\n\tdata:{\n\t\tshowBtn: true\n\t},\n\tmethods:{   \n\t\thandleClick: function(){\n\t\t\tconsole.log('Clicked!');\n\t\t}\n\t}\n})\n```\n**<center>v-model 双向数据绑定</center>**\n```html\n<div id=\"app\">\n\t<input type=\"text\" v-model=\"name\" placeholder=\"请输入您的名字\">\n\t<h1>你好, {{ name }}</h1>\n</div>\n<script>\n\tnew Vue({\n\tel: '#app',\n\tdata: {\n\t\tname: ''\n\t}\n\t})\n</script>\n\n```\n<center>vue实现文字滚动显示效果</center>\n\n```html\n<div id=\"app\">\n\t\t\t<!--v-on可以缩写例如：v-on:click  |  缩写为: @click  -->\n\t\t\t<input type=\"button\" value=\"MoveIt\" @click=\"move()\">\n\t\t\t<input type=\"button\" value=\"SlowIt\" v-on:click=\"stop()\">\n\t\t\t<input type=\"button\" value=\"UseThis\" v-on:click=\"usethis()\">\n\t\t\t<h3>{{ text }}</h3>\n\t\t</div>\n\t\t<script>\n\t\t\tvar app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\ttext: 'I will success!',\n\t\t\t\t\tintervalId: null //在data上定义一个定时器的ID,方便methods中访问并改变值\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tmove(){\n\t\t\t\t\t\tvar _this = this\n\t\t\t\t\t\t//防止this指向不明\n\t\t\t\t\t\tif(this.intervalId != null) return;\n\t\t\t\t\t\tthis.intervalId = setInterval(function(){\n\t\t\t\t\t\t\t//在vue实例中,要获取data上的数据,或者想要调用methods里面的方法,需要用到this来调用\n\t\t\t\t\t\t\tvar start = _this.text.substring(0,1); \n\t\t\t\t\t\t\t//获取到text的头一个字符\n\t\t\t\t\t\t\tvar end = _this.text.substring(1); \n\t\t\t\t\t\t\t//获取到text的最后一个字符\n\t\t\t\t\t\t\t_this.text = end + start;\n\t\t\t\t\t\t\t//重新拼接得到新的字符串,赋值给this.text\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//注意: 这个app的vue实例会自动监听自己身上data中所有数据的改变,\n\t\t\t\t\t\t\t//只要数据一发生改变,就会自动把最新的数据从data中同步到页面中去,\n\t\t\t\t\t\t\t//[好处：只需要关心数据，不需要考虑如何重新渲染DOM页面]\n\t\t\t\t\t\t},100)\n\t\t\t\t\t},\n\t\t\t\t\tstop(){\n\t\t\t\t\t\tclearInterval(this.intervalId);\n\t\t\t\t\t\tthis.intervalId = null;\n\t\t\t\t\t},\n\t\t\t\t\tusethis: function(){\n\t\t\t\t\t\talert(this.text); //这里的text是data中的text的值\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t\n\t\t\t\n\t\t</script>\n\n````","source":"_posts/Vue-js-Learn.md","raw":"---\ntitle: Vue.js入门\ndate: 2019-11-05 17:10:31\ncategories: Vue.js\ntags: Vue\n---\n<center>Vue基础的指令</center>\n<!--more-->\n**<center>v-for</center>**\n```html\n<div id=\"player\">\n    <ul>\n        <li v-for=\"player in nba\">{{ player.name }}</li>\n    </ul>\n</div>\n```\n```javascript\nvar player = new Vue({\n\tel: '#player',\n\tdata: {\n\t\tnba: [\n\t\t\t{ name: 'Dwyane Wade' },\n\t\t\t{ name: 'Lebron  James' },\n\t\t\t{ name: 'Anthony Davis' }\n\t\t]\n\t}\n})   \n```\n**<center>v-on 和 v-if</center>** \n```html\n<div id=\"app\">\n\t<button v-if=\"showBtn\" v-on:click=\"handleClick\">Click me</button>\n</div>\n```\n```javascript\nnew Vue({\n\tel: '#app',\n\tdata:{\n\t\tshowBtn: true\n\t},\n\tmethods:{   \n\t\thandleClick: function(){\n\t\t\tconsole.log('Clicked!');\n\t\t}\n\t}\n})\n```\n**<center>v-model 双向数据绑定</center>**\n```html\n<div id=\"app\">\n\t<input type=\"text\" v-model=\"name\" placeholder=\"请输入您的名字\">\n\t<h1>你好, {{ name }}</h1>\n</div>\n<script>\n\tnew Vue({\n\tel: '#app',\n\tdata: {\n\t\tname: ''\n\t}\n\t})\n</script>\n\n```\n<center>vue实现文字滚动显示效果</center>\n\n```html\n<div id=\"app\">\n\t\t\t<!--v-on可以缩写例如：v-on:click  |  缩写为: @click  -->\n\t\t\t<input type=\"button\" value=\"MoveIt\" @click=\"move()\">\n\t\t\t<input type=\"button\" value=\"SlowIt\" v-on:click=\"stop()\">\n\t\t\t<input type=\"button\" value=\"UseThis\" v-on:click=\"usethis()\">\n\t\t\t<h3>{{ text }}</h3>\n\t\t</div>\n\t\t<script>\n\t\t\tvar app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\ttext: 'I will success!',\n\t\t\t\t\tintervalId: null //在data上定义一个定时器的ID,方便methods中访问并改变值\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tmove(){\n\t\t\t\t\t\tvar _this = this\n\t\t\t\t\t\t//防止this指向不明\n\t\t\t\t\t\tif(this.intervalId != null) return;\n\t\t\t\t\t\tthis.intervalId = setInterval(function(){\n\t\t\t\t\t\t\t//在vue实例中,要获取data上的数据,或者想要调用methods里面的方法,需要用到this来调用\n\t\t\t\t\t\t\tvar start = _this.text.substring(0,1); \n\t\t\t\t\t\t\t//获取到text的头一个字符\n\t\t\t\t\t\t\tvar end = _this.text.substring(1); \n\t\t\t\t\t\t\t//获取到text的最后一个字符\n\t\t\t\t\t\t\t_this.text = end + start;\n\t\t\t\t\t\t\t//重新拼接得到新的字符串,赋值给this.text\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//注意: 这个app的vue实例会自动监听自己身上data中所有数据的改变,\n\t\t\t\t\t\t\t//只要数据一发生改变,就会自动把最新的数据从data中同步到页面中去,\n\t\t\t\t\t\t\t//[好处：只需要关心数据，不需要考虑如何重新渲染DOM页面]\n\t\t\t\t\t\t},100)\n\t\t\t\t\t},\n\t\t\t\t\tstop(){\n\t\t\t\t\t\tclearInterval(this.intervalId);\n\t\t\t\t\t\tthis.intervalId = null;\n\t\t\t\t\t},\n\t\t\t\t\tusethis: function(){\n\t\t\t\t\t\talert(this.text); //这里的text是data中的text的值\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t\n\t\t\t\n\t\t</script>\n\n````","slug":"Vue-js-Learn","published":1,"updated":"2020-08-27T08:22:17.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfn000hr0u2arjz1s88","content":"<center>Vue基础的指令</center>\n<a id=\"more\"></a>\n**<center>v-for</center>**\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"player\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"player in nba\"</span>&gt;</span>&#123;&#123; player.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> player = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">'#player'</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">\t\tnba: [</span><br><span class=\"line\">\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Dwyane Wade'</span> &#125;,</span><br><span class=\"line\">\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Lebron  James'</span> &#125;,</span><br><span class=\"line\">\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Anthony Davis'</span> &#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n**<center>v-on 和 v-if</center>** \n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showBtn\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"handleClick\"</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">\tdata:&#123;</span><br><span class=\"line\">\t\tshowBtn: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;   </span><br><span class=\"line\">\t\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Clicked!'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n**<center>v-model 双向数据绑定</center>**\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入您的名字\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你好, &#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">''</span></span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<center>vue实现文字滚动显示效果</center>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!--v-on可以缩写例如：v-on:click  |  缩写为: @click  --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"MoveIt\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"move()\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"SlowIt\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"stop()\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UseThis\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"usethis()\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\ttext: <span class=\"string\">'I will success!'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tintervalId: <span class=\"literal\">null</span> <span class=\"comment\">//在data上定义一个定时器的ID,方便methods中访问并改变值</span></span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\tmethods: &#123;</span><br><span class=\"line\">\t\t\t\t\tmove()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"comment\">//防止this指向不明</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.intervalId != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//在vue实例中,要获取data上的数据,或者想要调用methods里面的方法,需要用到this来调用</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"keyword\">var</span> start = _this.text.substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>); </span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//获取到text的头一个字符</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"keyword\">var</span> end = _this.text.substring(<span class=\"number\">1</span>); </span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//获取到text的最后一个字符</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t_this.text = end + start;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//重新拼接得到新的字符串,赋值给this.text</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//注意: 这个app的vue实例会自动监听自己身上data中所有数据的改变,</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//只要数据一发生改变,就会自动把最新的数据从data中同步到页面中去,</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//[好处：只需要关心数据，不需要考虑如何重新渲染DOM页面]</span></span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;,100)</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\tstop()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\tclearInterval(<span class=\"keyword\">this</span>.intervalId);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.intervalId = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tusethis: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\talert(<span class=\"keyword\">this</span>.text); <span class=\"comment\">//这里的text是data中的text的值</span></span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>Vue基础的指令</center>","more":"**<center>v-for</center>**\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"player\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"player in nba\"</span>&gt;</span>&#123;&#123; player.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> player = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">'#player'</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">\t\tnba: [</span><br><span class=\"line\">\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Dwyane Wade'</span> &#125;,</span><br><span class=\"line\">\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Lebron  James'</span> &#125;,</span><br><span class=\"line\">\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Anthony Davis'</span> &#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n**<center>v-on 和 v-if</center>** \n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showBtn\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"handleClick\"</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">\tdata:&#123;</span><br><span class=\"line\">\t\tshowBtn: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;   </span><br><span class=\"line\">\t\thandleClick: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Clicked!'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n**<center>v-model 双向数据绑定</center>**\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入您的名字\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你好, &#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">''</span></span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<center>vue实现文字滚动显示效果</center>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!--v-on可以缩写例如：v-on:click  |  缩写为: @click  --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"MoveIt\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"move()\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"SlowIt\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"stop()\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UseThis\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"usethis()\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\ttext: <span class=\"string\">'I will success!'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tintervalId: <span class=\"literal\">null</span> <span class=\"comment\">//在data上定义一个定时器的ID,方便methods中访问并改变值</span></span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\tmethods: &#123;</span><br><span class=\"line\">\t\t\t\t\tmove()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"comment\">//防止this指向不明</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.intervalId != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//在vue实例中,要获取data上的数据,或者想要调用methods里面的方法,需要用到this来调用</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"keyword\">var</span> start = _this.text.substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>); </span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//获取到text的头一个字符</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"keyword\">var</span> end = _this.text.substring(<span class=\"number\">1</span>); </span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//获取到text的最后一个字符</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t_this.text = end + start;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//重新拼接得到新的字符串,赋值给this.text</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//注意: 这个app的vue实例会自动监听自己身上data中所有数据的改变,</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//只要数据一发生改变,就会自动把最新的数据从data中同步到页面中去,</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t<span class=\"comment\">//[好处：只需要关心数据，不需要考虑如何重新渲染DOM页面]</span></span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;,100)</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\tstop()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\tclearInterval(<span class=\"keyword\">this</span>.intervalId);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.intervalId = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tusethis: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\talert(<span class=\"keyword\">this</span>.text); <span class=\"comment\">//这里的text是data中的text的值</span></span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>"},{"title":"webpack中配置babel（babel7.X）","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/babel.png","date":"2020-04-29T14:25:30.000Z","_content":"\n<div class='post-summary'>\n    <div class='notification is-info'>\n        <p>\n            babel是什么？\n        </p>\n        <p>\n            babel的作用是把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。就是让以前的浏览器也能识别新的es6的语法。\n        </p>\n    </div>\n</div>\n\n\n\n<!--more-->\n\n### 下载插件\n\n#### 使用npm进行下载如下插件\n\n+ @babel/core\n+ @babel/plugin-proposal-class-properties\n+ @babel/plugin-transform-runtime\n+ @babel/preset-env\n+ @babel/runtime\n+ babel-loader\n\n### 配置\n\n<div class='notification is-success'>\n    在项目根目录新建一个名为`.babelrc`的babel配置文件，配置如下：\n</div>\n\n```json\n{\n    \"presets\": [\"@babel/preset-env\"],\n    \"plugins\": [\n        \"@babel/plugin-transform-runtime\",\n        \"@babel/plugin-proposal-class-properties\"\n    ]\n}\n```\n\n<div class='notification is-success'>\n    在`webpack.config.js`中增加对js文件的配置（配置完成就可以在项目中使用es6语法而不用担心兼容性的问题了）：\n</div>\n\n```javascript\nconst path = require('path');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: path.resolve(__dirname, './dist'),\n        filename: 'bundle.js'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.vue$/,\n                use: 'vue-loader'\n            },\n            {\n                test: /\\.css$/,\n                use: ['style-loader', 'css-loader']\n            },\n            {\n                test: /\\.(ttf|svg|woff|png|jpg|gif|jpeg)$/,\n                use: 'url-loader'\n            },\n            {\n                test: /\\.js$/,\n                use: 'babel-loader',  // 配置的babel\n                exclude: /node_modules/\n            }\n        ]\n    },\n    plugins: [\n        new VueLoaderPlugin()\n    ]\n}\n```\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","source":"_posts/babel-config.md","raw":"---\ntitle: webpack中配置babel（babel7.X）\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/babel.png\ndate: 2020-04-29 22:25:30\ntags: [webpack,babel]\ncategories: webpack\n---\n\n<div class='post-summary'>\n    <div class='notification is-info'>\n        <p>\n            babel是什么？\n        </p>\n        <p>\n            babel的作用是把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。就是让以前的浏览器也能识别新的es6的语法。\n        </p>\n    </div>\n</div>\n\n\n\n<!--more-->\n\n### 下载插件\n\n#### 使用npm进行下载如下插件\n\n+ @babel/core\n+ @babel/plugin-proposal-class-properties\n+ @babel/plugin-transform-runtime\n+ @babel/preset-env\n+ @babel/runtime\n+ babel-loader\n\n### 配置\n\n<div class='notification is-success'>\n    在项目根目录新建一个名为`.babelrc`的babel配置文件，配置如下：\n</div>\n\n```json\n{\n    \"presets\": [\"@babel/preset-env\"],\n    \"plugins\": [\n        \"@babel/plugin-transform-runtime\",\n        \"@babel/plugin-proposal-class-properties\"\n    ]\n}\n```\n\n<div class='notification is-success'>\n    在`webpack.config.js`中增加对js文件的配置（配置完成就可以在项目中使用es6语法而不用担心兼容性的问题了）：\n</div>\n\n```javascript\nconst path = require('path');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: path.resolve(__dirname, './dist'),\n        filename: 'bundle.js'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.vue$/,\n                use: 'vue-loader'\n            },\n            {\n                test: /\\.css$/,\n                use: ['style-loader', 'css-loader']\n            },\n            {\n                test: /\\.(ttf|svg|woff|png|jpg|gif|jpeg)$/,\n                use: 'url-loader'\n            },\n            {\n                test: /\\.js$/,\n                use: 'babel-loader',  // 配置的babel\n                exclude: /node_modules/\n            }\n        ]\n    },\n    plugins: [\n        new VueLoaderPlugin()\n    ]\n}\n```\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","slug":"babel-config","published":1,"updated":"2020-08-27T08:22:17.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfo000jr0u285jybwxz","content":"<div class='post-summary'>\n    <div class='notification is-info'>\n        <p>\n            babel是什么？\n        </p>\n        <p>\n            babel的作用是把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。就是让以前的浏览器也能识别新的es6的语法。\n        </p>\n    </div>\n</div>\n\n\n\n<a id=\"more\"></a>\n\n<h3 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h3><h4 id=\"使用npm进行下载如下插件\"><a href=\"#使用npm进行下载如下插件\" class=\"headerlink\" title=\"使用npm进行下载如下插件\"></a>使用npm进行下载如下插件</h4><ul>\n<li>@babel/core</li>\n<li>@babel/plugin-proposal-class-properties</li>\n<li>@babel/plugin-transform-runtime</li>\n<li>@babel/preset-env</li>\n<li>@babel/runtime</li>\n<li>babel-loader</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><div class='notification is-success'>\n    在项目根目录新建一个名为`.babelrc`的babel配置文件，配置如下：\n</div>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/plugin-transform-runtime\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class='notification is-success'>\n    在`webpack.config.js`中增加对js文件的配置（配置完成就可以在项目中使用es6语法而不用担心兼容性的问题了）：\n</div>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> VueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">'vue-loader'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(ttf|svg|woff|png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">'url-loader'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">'babel-loader'</span>,  <span class=\"comment\">// 配置的babel</span></span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> VueLoaderPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","site":{"data":{}},"excerpt":"<div class='post-summary'>\n    <div class='notification is-info'>\n        <p>\n            babel是什么？\n        </p>\n        <p>\n            babel的作用是把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。就是让以前的浏览器也能识别新的es6的语法。\n        </p>\n    </div>\n</div>","more":"<h3 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h3><h4 id=\"使用npm进行下载如下插件\"><a href=\"#使用npm进行下载如下插件\" class=\"headerlink\" title=\"使用npm进行下载如下插件\"></a>使用npm进行下载如下插件</h4><ul>\n<li>@babel/core</li>\n<li>@babel/plugin-proposal-class-properties</li>\n<li>@babel/plugin-transform-runtime</li>\n<li>@babel/preset-env</li>\n<li>@babel/runtime</li>\n<li>babel-loader</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><div class='notification is-success'>\n    在项目根目录新建一个名为`.babelrc`的babel配置文件，配置如下：\n</div>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/plugin-transform-runtime\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class='notification is-success'>\n    在`webpack.config.js`中增加对js文件的配置（配置完成就可以在项目中使用es6语法而不用担心兼容性的问题了）：\n</div>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> VueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">'vue-loader'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(ttf|svg|woff|png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">'url-loader'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">'babel-loader'</span>,  <span class=\"comment\">// 配置的babel</span></span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> VueLoaderPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>"},{"title":"使用GitHub仓库来保存自己的代码","date":"2020-04-07T08:35:16.000Z","_content":"### 绑定GitHub\n#### 获取电脑的密钥\n+ 在Gitbash中输入<span style='color: red;font-weight: bold;'>`Add-AppxPackage -register AppxManifest.xml`</span>并回车，回车，再回车\n+ 打开用户目录，找到`.ssh\\id_rsa.pub`文件，记事本打开复制里面的内容，这就是密钥\n+ 点击Github自己的头像里面的`setting`，找到`SSH and GPG keys`，点击右侧`New SSH key`随意填一个名称，在下面填入`id_rsa.pub`里面的内容，保存，这样就把电脑和Github绑定了\n<!--more-->\n#### 本地上传到GitHub\n+ GitHub里面新建一个代码仓库，名称随意\n+ 进入仓库,复生成的https链接：\n\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/git.png'>\n</div>\n\n\n+ 在本地新建一个文件夹，使用`GitBash`进入这个文件夹，执行命令：\n```\n    git init\n```\n+ 命令执行完毕后这个文件夹下面就会生成一个.git的文件夹，这样就初始化完毕了\n+ 在文件夹下新建一个helloGit.txt文件做测试\n+ 执行以下命令\n```\n    git add helloGit.txt // 选择文件，加入提交暂存区\n    git commit -m \"提交测试\" // 本次提交的描述信息\n    git remote add origin 刚刚复制的链接 // 绑定刚刚创建的远程Git仓库\n    git push -u origin master // 提交\n```\n这样就完成了将自己电脑和GitHub远程仓库的绑定\n\n\n","source":"_posts/git-res-tutorial.md","raw":"---\ntitle: 使用GitHub仓库来保存自己的代码\ndate: 2020-04-07 16:35:16\ntags: Github\ncategories: Github\n---\n### 绑定GitHub\n#### 获取电脑的密钥\n+ 在Gitbash中输入<span style='color: red;font-weight: bold;'>`Add-AppxPackage -register AppxManifest.xml`</span>并回车，回车，再回车\n+ 打开用户目录，找到`.ssh\\id_rsa.pub`文件，记事本打开复制里面的内容，这就是密钥\n+ 点击Github自己的头像里面的`setting`，找到`SSH and GPG keys`，点击右侧`New SSH key`随意填一个名称，在下面填入`id_rsa.pub`里面的内容，保存，这样就把电脑和Github绑定了\n<!--more-->\n#### 本地上传到GitHub\n+ GitHub里面新建一个代码仓库，名称随意\n+ 进入仓库,复生成的https链接：\n\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/git.png'>\n</div>\n\n\n+ 在本地新建一个文件夹，使用`GitBash`进入这个文件夹，执行命令：\n```\n    git init\n```\n+ 命令执行完毕后这个文件夹下面就会生成一个.git的文件夹，这样就初始化完毕了\n+ 在文件夹下新建一个helloGit.txt文件做测试\n+ 执行以下命令\n```\n    git add helloGit.txt // 选择文件，加入提交暂存区\n    git commit -m \"提交测试\" // 本次提交的描述信息\n    git remote add origin 刚刚复制的链接 // 绑定刚刚创建的远程Git仓库\n    git push -u origin master // 提交\n```\n这样就完成了将自己电脑和GitHub远程仓库的绑定\n\n\n","slug":"git-res-tutorial","published":1,"updated":"2020-08-27T08:22:17.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfp000nr0u295du1ezu","content":"<h3 id=\"绑定GitHub\"><a href=\"#绑定GitHub\" class=\"headerlink\" title=\"绑定GitHub\"></a>绑定GitHub</h3><h4 id=\"获取电脑的密钥\"><a href=\"#获取电脑的密钥\" class=\"headerlink\" title=\"获取电脑的密钥\"></a>获取电脑的密钥</h4><ul>\n<li>在Gitbash中输入<span style='color: red;font-weight: bold;'><code>Add-AppxPackage -register AppxManifest.xml</code></span>并回车，回车，再回车</li>\n<li>打开用户目录，找到<code>.ssh\\id_rsa.pub</code>文件，记事本打开复制里面的内容，这就是密钥</li>\n<li>点击Github自己的头像里面的<code>setting</code>，找到<code>SSH and GPG keys</code>，点击右侧<code>New SSH key</code>随意填一个名称，在下面填入<code>id_rsa.pub</code>里面的内容，保存，这样就把电脑和Github绑定了<a id=\"more\"></a>\n<h4 id=\"本地上传到GitHub\"><a href=\"#本地上传到GitHub\" class=\"headerlink\" title=\"本地上传到GitHub\"></a>本地上传到GitHub</h4></li>\n<li>GitHub里面新建一个代码仓库，名称随意</li>\n<li>进入仓库,复生成的https链接：</li>\n</ul>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/git.png'>\n</div>\n\n\n<ul>\n<li>在本地新建一个文件夹，使用<code>GitBash</code>进入这个文件夹，执行命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></li>\n<li>命令执行完毕后这个文件夹下面就会生成一个.git的文件夹，这样就初始化完毕了</li>\n<li>在文件夹下新建一个helloGit.txt文件做测试</li>\n<li>执行以下命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add helloGit.txt &#x2F;&#x2F; 选择文件，加入提交暂存区</span><br><span class=\"line\">git commit -m &quot;提交测试&quot; &#x2F;&#x2F; 本次提交的描述信息</span><br><span class=\"line\">git remote add origin 刚刚复制的链接 &#x2F;&#x2F; 绑定刚刚创建的远程Git仓库</span><br><span class=\"line\">git push -u origin master &#x2F;&#x2F; 提交</span><br></pre></td></tr></table></figure>\n这样就完成了将自己电脑和GitHub远程仓库的绑定</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"绑定GitHub\"><a href=\"#绑定GitHub\" class=\"headerlink\" title=\"绑定GitHub\"></a>绑定GitHub</h3><h4 id=\"获取电脑的密钥\"><a href=\"#获取电脑的密钥\" class=\"headerlink\" title=\"获取电脑的密钥\"></a>获取电脑的密钥</h4><ul>\n<li>在Gitbash中输入<span style='color: red;font-weight: bold;'><code>Add-AppxPackage -register AppxManifest.xml</code></span>并回车，回车，再回车</li>\n<li>打开用户目录，找到<code>.ssh\\id_rsa.pub</code>文件，记事本打开复制里面的内容，这就是密钥</li>\n<li>点击Github自己的头像里面的<code>setting</code>，找到<code>SSH and GPG keys</code>，点击右侧<code>New SSH key</code>随意填一个名称，在下面填入<code>id_rsa.pub</code>里面的内容，保存，这样就把电脑和Github绑定了","more":"<h4 id=\"本地上传到GitHub\"><a href=\"#本地上传到GitHub\" class=\"headerlink\" title=\"本地上传到GitHub\"></a>本地上传到GitHub</h4></li>\n<li>GitHub里面新建一个代码仓库，名称随意</li>\n<li>进入仓库,复生成的https链接：</li>\n</ul>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/git.png'>\n</div>\n\n\n<ul>\n<li>在本地新建一个文件夹，使用<code>GitBash</code>进入这个文件夹，执行命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></li>\n<li>命令执行完毕后这个文件夹下面就会生成一个.git的文件夹，这样就初始化完毕了</li>\n<li>在文件夹下新建一个helloGit.txt文件做测试</li>\n<li>执行以下命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add helloGit.txt &#x2F;&#x2F; 选择文件，加入提交暂存区</span><br><span class=\"line\">git commit -m &quot;提交测试&quot; &#x2F;&#x2F; 本次提交的描述信息</span><br><span class=\"line\">git remote add origin 刚刚复制的链接 &#x2F;&#x2F; 绑定刚刚创建的远程Git仓库</span><br><span class=\"line\">git push -u origin master &#x2F;&#x2F; 提交</span><br></pre></td></tr></table></figure>\n这样就完成了将自己电脑和GitHub远程仓库的绑定</li>\n</ul>"},{"title":"webpack中跨域问题(已解决)","date":"2020-04-07T08:36:03.000Z","_content":"<img src=\"https://s1.ax1x.com/2020/04/07/GgUB8J.jpg\" border=\"0\" />\n\n<p>\n<span style='letter-spacing: 2px;'>\n\t最近几天学完了vue的基本课程，想跟着教程做个实战，由于教程不是最新的，里面涉及到的接口就失效了，于是网上找了个接口，使用axios请求数据发现控制台居然报了上面这个错，还是小白的我一脸懵b，马上百度，发现一个专有名词： <span style='color: red;font-weight: bolder;font-size: 16px;'>跨域</span>，跨域的解释这里就不啰嗦了，百度一大堆。为了解决这个问题，翻了很多篇教程，无果.........\n</span>\n</p>\n<!--more-->\n\n<p style='letter-spacing: 2px;'>\n一直解决不了这个问题，作为小白真想放弃，但第二天还是决定认真看一看其他教程，最终找到了webpack中解决跨域问题的办法，就是在`webpack.config.js`中加入以下语句：\n</p>\n```javascript\nmodule.exports = {\n\tdevServer: {\n    \tproxy: {\n        \t'/api': {\n            \ttarget: 'http: www.exsample.cn',\n                changeOrigin: true\n            }\n        }\n    }\n}\n```\n重点就是这个`changeOrigin: true`，\n在上面的代码中,`/api`就是在请求中，遇到这个开头的就马上代理为本地服务器，比如要请求的网络地址是`http://jiekou.cn/api/data.json`，那么经过webpack这段配置文件处理过后请求的地址就转变为本地服务器地址`http://localhost:8080/api/data.json`，这样本地服务器去请求接口数据的头部都是`localhost:8080`了\n\n","source":"_posts/cross-origin.md","raw":"---\ntitle: webpack中跨域问题(已解决)\ndate: 2020-04-07 16:36:03\ntags: 跨域\ncategories: webpack\n---\n<img src=\"https://s1.ax1x.com/2020/04/07/GgUB8J.jpg\" border=\"0\" />\n\n<p>\n<span style='letter-spacing: 2px;'>\n\t最近几天学完了vue的基本课程，想跟着教程做个实战，由于教程不是最新的，里面涉及到的接口就失效了，于是网上找了个接口，使用axios请求数据发现控制台居然报了上面这个错，还是小白的我一脸懵b，马上百度，发现一个专有名词： <span style='color: red;font-weight: bolder;font-size: 16px;'>跨域</span>，跨域的解释这里就不啰嗦了，百度一大堆。为了解决这个问题，翻了很多篇教程，无果.........\n</span>\n</p>\n<!--more-->\n\n<p style='letter-spacing: 2px;'>\n一直解决不了这个问题，作为小白真想放弃，但第二天还是决定认真看一看其他教程，最终找到了webpack中解决跨域问题的办法，就是在`webpack.config.js`中加入以下语句：\n</p>\n```javascript\nmodule.exports = {\n\tdevServer: {\n    \tproxy: {\n        \t'/api': {\n            \ttarget: 'http: www.exsample.cn',\n                changeOrigin: true\n            }\n        }\n    }\n}\n```\n重点就是这个`changeOrigin: true`，\n在上面的代码中,`/api`就是在请求中，遇到这个开头的就马上代理为本地服务器，比如要请求的网络地址是`http://jiekou.cn/api/data.json`，那么经过webpack这段配置文件处理过后请求的地址就转变为本地服务器地址`http://localhost:8080/api/data.json`，这样本地服务器去请求接口数据的头部都是`localhost:8080`了\n\n","slug":"cross-origin","published":1,"updated":"2020-08-27T08:22:17.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfr000pr0u22ee7dkvj","content":"<img src=\"https://s1.ax1x.com/2020/04/07/GgUB8J.jpg\" border=\"0\" />\n\n<p>\n<span style='letter-spacing: 2px;'>\n    最近几天学完了vue的基本课程，想跟着教程做个实战，由于教程不是最新的，里面涉及到的接口就失效了，于是网上找了个接口，使用axios请求数据发现控制台居然报了上面这个错，还是小白的我一脸懵b，马上百度，发现一个专有名词： <span style='color: red;font-weight: bolder;font-size: 16px;'>跨域</span>，跨域的解释这里就不啰嗦了，百度一大堆。为了解决这个问题，翻了很多篇教程，无果.........\n</span>\n</p>\n<a id=\"more\"></a>\n\n<p style='letter-spacing: 2px;'>\n一直解决不了这个问题，作为小白真想放弃，但第二天还是决定认真看一看其他教程，最终找到了webpack中解决跨域问题的办法，就是在`webpack.config.js`中加入以下语句：\n</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tdevServer: &#123;</span><br><span class=\"line\">    \tproxy: &#123;</span><br><span class=\"line\">        \t<span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">            \ttarget: <span class=\"string\">'http: www.exsample.cn'</span>,</span><br><span class=\"line\">                changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n重点就是这个`changeOrigin: true`，\n在上面的代码中,`/api`就是在请求中，遇到这个开头的就马上代理为本地服务器，比如要请求的网络地址是`http://jiekou.cn/api/data.json`，那么经过webpack这段配置文件处理过后请求的地址就转变为本地服务器地址`http://localhost:8080/api/data.json`，这样本地服务器去请求接口数据的头部都是`localhost:8080`了\n\n","site":{"data":{}},"excerpt":"<img src=\"https://s1.ax1x.com/2020/04/07/GgUB8J.jpg\" border=\"0\" />\n\n<p>\n<span style='letter-spacing: 2px;'>\n    最近几天学完了vue的基本课程，想跟着教程做个实战，由于教程不是最新的，里面涉及到的接口就失效了，于是网上找了个接口，使用axios请求数据发现控制台居然报了上面这个错，还是小白的我一脸懵b，马上百度，发现一个专有名词： <span style='color: red;font-weight: bolder;font-size: 16px;'>跨域</span>，跨域的解释这里就不啰嗦了，百度一大堆。为了解决这个问题，翻了很多篇教程，无果.........\n</span>\n</p>","more":"<p style='letter-spacing: 2px;'>\n一直解决不了这个问题，作为小白真想放弃，但第二天还是决定认真看一看其他教程，最终找到了webpack中解决跨域问题的办法，就是在`webpack.config.js`中加入以下语句：\n</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tdevServer: &#123;</span><br><span class=\"line\">    \tproxy: &#123;</span><br><span class=\"line\">        \t<span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">            \ttarget: <span class=\"string\">'http: www.exsample.cn'</span>,</span><br><span class=\"line\">                changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n重点就是这个`changeOrigin: true`，\n在上面的代码中,`/api`就是在请求中，遇到这个开头的就马上代理为本地服务器，比如要请求的网络地址是`http://jiekou.cn/api/data.json`，那么经过webpack这段配置文件处理过后请求的地址就转变为本地服务器地址`http://localhost:8080/api/data.json`，这样本地服务器去请求接口数据的头部都是`localhost:8080`了"},{"title":"使用Git管理自己的代码，将代码上传到Github(Windows)","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/git-and-github.jpg","date":"2020-05-25T06:36:13.000Z","_content":"\n<div class='post-summary'>\n    <p>\n        将本地代码上传到Github做个备份，而且使用这个Git也可以控制代码版本。每次提交可以写上提交信息，比如更新了什么东西之类的，方便后续查看。\n    </p>\n</div>\n\n\n\n<!--more-->\n\n### 前提\n\n#### 下载git\n\n百度直接搜索`git`进入官网进行下载，然后安装。\n\n#### 将本机与Github远程绑定\n\n通过密钥进行绑定\n\n### 创建Github仓库\n\n在Github上创建一个新的仓库，并且`复制仓库地址`\n\n### 创建本地仓库\n\n在本地目录新建一个文件夹，这个就作为本地仓库了，安装好git之后，进入这个文件夹，右键选择Gitbash here然后输入下面命令来初始化这个git仓库：\n\n```shell\ngit init\n```\n\n再配置提交者的用户名和邮箱：\n\n```shell\ngit config user.name \"用户名\"\n```\n\n```shell\ngit config user.email \"邮箱@gmail.com\"\n```\n\n在这个仓库文件中随意存放或者新建一个文件，然后再gitbash中输入`git status`来查看还有什么文件是没有添加到提交目录中的（如果文件显示红色，则这个文件还未被添加到待提交的目录）：\n\n```shell\ngit status\n```\n\n将待提交的文件加入到提交目录：\n\n```shell\ngit add 文件\n```\n\n给这个本地仓库添加远程地址：\n\n```shell\ngit remote add origin 远程地址\n```\n\n提交并且输入提交信息：\n\n```shell\ngit commit -m \"first commit\"\n```\n\n将待推送的文件推送到Github主分支：\n\n```shell\ngit push origin master\n```\n\n","source":"_posts/git-with-reponsitory.md","raw":"---\ntitle: 使用Git管理自己的代码，将代码上传到Github(Windows)\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/git-and-github.jpg\ndate: 2020-05-25 14:36:13\ntags: git\ncategories: git\n---\n\n<div class='post-summary'>\n    <p>\n        将本地代码上传到Github做个备份，而且使用这个Git也可以控制代码版本。每次提交可以写上提交信息，比如更新了什么东西之类的，方便后续查看。\n    </p>\n</div>\n\n\n\n<!--more-->\n\n### 前提\n\n#### 下载git\n\n百度直接搜索`git`进入官网进行下载，然后安装。\n\n#### 将本机与Github远程绑定\n\n通过密钥进行绑定\n\n### 创建Github仓库\n\n在Github上创建一个新的仓库，并且`复制仓库地址`\n\n### 创建本地仓库\n\n在本地目录新建一个文件夹，这个就作为本地仓库了，安装好git之后，进入这个文件夹，右键选择Gitbash here然后输入下面命令来初始化这个git仓库：\n\n```shell\ngit init\n```\n\n再配置提交者的用户名和邮箱：\n\n```shell\ngit config user.name \"用户名\"\n```\n\n```shell\ngit config user.email \"邮箱@gmail.com\"\n```\n\n在这个仓库文件中随意存放或者新建一个文件，然后再gitbash中输入`git status`来查看还有什么文件是没有添加到提交目录中的（如果文件显示红色，则这个文件还未被添加到待提交的目录）：\n\n```shell\ngit status\n```\n\n将待提交的文件加入到提交目录：\n\n```shell\ngit add 文件\n```\n\n给这个本地仓库添加远程地址：\n\n```shell\ngit remote add origin 远程地址\n```\n\n提交并且输入提交信息：\n\n```shell\ngit commit -m \"first commit\"\n```\n\n将待推送的文件推送到Github主分支：\n\n```shell\ngit push origin master\n```\n\n","slug":"git-with-reponsitory","published":1,"updated":"2020-08-27T08:22:17.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfs000tr0u2ezbj7igr","content":"<div class='post-summary'>\n    <p>\n        将本地代码上传到Github做个备份，而且使用这个Git也可以控制代码版本。每次提交可以写上提交信息，比如更新了什么东西之类的，方便后续查看。\n    </p>\n</div>\n\n\n\n<a id=\"more\"></a>\n\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><h4 id=\"下载git\"><a href=\"#下载git\" class=\"headerlink\" title=\"下载git\"></a>下载git</h4><p>百度直接搜索<code>git</code>进入官网进行下载，然后安装。</p>\n<h4 id=\"将本机与Github远程绑定\"><a href=\"#将本机与Github远程绑定\" class=\"headerlink\" title=\"将本机与Github远程绑定\"></a>将本机与Github远程绑定</h4><p>通过密钥进行绑定</p>\n<h3 id=\"创建Github仓库\"><a href=\"#创建Github仓库\" class=\"headerlink\" title=\"创建Github仓库\"></a>创建Github仓库</h3><p>在Github上创建一个新的仓库，并且<code>复制仓库地址</code></p>\n<h3 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h3><p>在本地目录新建一个文件夹，这个就作为本地仓库了，安装好git之后，进入这个文件夹，右键选择Gitbash here然后输入下面命令来初始化这个git仓库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>再配置提交者的用户名和邮箱：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name \"用户名\"</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.email \"邮箱@gmail.com\"</span><br></pre></td></tr></table></figure>\n\n<p>在这个仓库文件中随意存放或者新建一个文件，然后再gitbash中输入<code>git status</code>来查看还有什么文件是没有添加到提交目录中的（如果文件显示红色，则这个文件还未被添加到待提交的目录）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<p>将待提交的文件加入到提交目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件</span><br></pre></td></tr></table></figure>\n\n<p>给这个本地仓库添加远程地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin 远程地址</span><br></pre></td></tr></table></figure>\n\n<p>提交并且输入提交信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m \"first commit\"</span><br></pre></td></tr></table></figure>\n\n<p>将待推送的文件推送到Github主分支：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<div class='post-summary'>\n    <p>\n        将本地代码上传到Github做个备份，而且使用这个Git也可以控制代码版本。每次提交可以写上提交信息，比如更新了什么东西之类的，方便后续查看。\n    </p>\n</div>","more":"<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><h4 id=\"下载git\"><a href=\"#下载git\" class=\"headerlink\" title=\"下载git\"></a>下载git</h4><p>百度直接搜索<code>git</code>进入官网进行下载，然后安装。</p>\n<h4 id=\"将本机与Github远程绑定\"><a href=\"#将本机与Github远程绑定\" class=\"headerlink\" title=\"将本机与Github远程绑定\"></a>将本机与Github远程绑定</h4><p>通过密钥进行绑定</p>\n<h3 id=\"创建Github仓库\"><a href=\"#创建Github仓库\" class=\"headerlink\" title=\"创建Github仓库\"></a>创建Github仓库</h3><p>在Github上创建一个新的仓库，并且<code>复制仓库地址</code></p>\n<h3 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h3><p>在本地目录新建一个文件夹，这个就作为本地仓库了，安装好git之后，进入这个文件夹，右键选择Gitbash here然后输入下面命令来初始化这个git仓库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>再配置提交者的用户名和邮箱：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name \"用户名\"</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.email \"邮箱@gmail.com\"</span><br></pre></td></tr></table></figure>\n\n<p>在这个仓库文件中随意存放或者新建一个文件，然后再gitbash中输入<code>git status</code>来查看还有什么文件是没有添加到提交目录中的（如果文件显示红色，则这个文件还未被添加到待提交的目录）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<p>将待提交的文件加入到提交目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件</span><br></pre></td></tr></table></figure>\n\n<p>给这个本地仓库添加远程地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin 远程地址</span><br></pre></td></tr></table></figure>\n\n<p>提交并且输入提交信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m \"first commit\"</span><br></pre></td></tr></table></figure>\n\n<p>将待推送的文件推送到Github主分支：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>"},{"title":"如何有效的卸载Windows的软件","date":"2020-03-28T14:33:30.000Z","_content":"在电脑中，卸载软件不如手机那么方便，方法多种多样，但往往都卸载不干净，残留注册表等不好删除。所以需要借助第三方工具来帮助我们轻松并且完完全全的卸载掉想要卸载的软件，这篇文章要推荐的就是IObit Uninstaller这款软件，它UI漂亮，操作便捷，卸载彻底！试一试吧！\n\n<a src='https://www.iobit.com/fr/advanceduninstaller.php'>@官网下载</a>\n\n","source":"_posts/howtouninstall.md","raw":"---\ntitle: 如何有效的卸载Windows的软件\ndate: 2020-03-28 22:33:30\ntags: Windows技巧\ncategories: 电脑相关\n\n---\n在电脑中，卸载软件不如手机那么方便，方法多种多样，但往往都卸载不干净，残留注册表等不好删除。所以需要借助第三方工具来帮助我们轻松并且完完全全的卸载掉想要卸载的软件，这篇文章要推荐的就是IObit Uninstaller这款软件，它UI漂亮，操作便捷，卸载彻底！试一试吧！\n\n<a src='https://www.iobit.com/fr/advanceduninstaller.php'>@官网下载</a>\n\n","slug":"howtouninstall","published":1,"updated":"2020-08-27T08:22:17.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrft000vr0u20pbw5qfp","content":"<p>在电脑中，卸载软件不如手机那么方便，方法多种多样，但往往都卸载不干净，残留注册表等不好删除。所以需要借助第三方工具来帮助我们轻松并且完完全全的卸载掉想要卸载的软件，这篇文章要推荐的就是IObit Uninstaller这款软件，它UI漂亮，操作便捷，卸载彻底！试一试吧！</p>\n<p><a src='https://www.iobit.com/fr/advanceduninstaller.php'>@官网下载</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在电脑中，卸载软件不如手机那么方便，方法多种多样，但往往都卸载不干净，残留注册表等不好删除。所以需要借助第三方工具来帮助我们轻松并且完完全全的卸载掉想要卸载的软件，这篇文章要推荐的就是IObit Uninstaller这款软件，它UI漂亮，操作便捷，卸载彻底！试一试吧！</p>\n<p><a src='https://www.iobit.com/fr/advanceduninstaller.php'>@官网下载</a></p>\n"},{"title":"JAVA-抽象","date":"2019-10-26T03:52:47.000Z","_content":"\n<center>JAVA中的抽象，作业实例</center>\n<!--more-->\n\n```java\n//定义了一个抽象基类（父类）\npublic abstract class Shape {\n\t\n\tprotected String shapeName;\n\t\n\tpublic abstract double getArea(); //抽象方法\n\tpublic abstract double getLength(); //抽象方法\n\t\n\tShape(String shapeName) {\n\t\tthis.shapeName = shapeName;\n\t\tSystem.out.println(\"形状是：\"+shapeName);\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t\tShape rectangle,circle;\n\t\trectangle = new Rectangle(\"矩形\", 3.0, 4.0);\n\t\trectangle.getArea();\n\t\trectangle.getLength();\n\t\tcircle = new Circle(\"圆\", 5.0);\n\t\tcircle.getArea();\n\t\tcircle.getLength();\n\t}\n\t\n}\n\n//继承自Shape类，必须实现父类的抽象方法\nclass Rectangle extends Shape{\n\tDouble area,length,width,height;\n\tRectangle(String shapeName,double width,double height) {\n\t\tsuper(shapeName); \n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\t\n\t}\n\t\n\t//实现父类中的getArea方法\n\tpublic double getArea() {\n\t\tarea = width * height;\n\t\tSystem.out.println(\"面积是：\" + area);\n\t\treturn area;\n\t}\n\t\n\t//实现父类中的getLength方法\n\tpublic double getLength() {\n\t\tlength = 2 * (width + height);\n\t\tSystem.out.println(\"周长是：\" + length);\n\t\treturn length;\n\t}\n\t\n}\n\n//继承自Shape类，必须实现父类的抽象方法\nclass Circle extends Shape{\n\tDouble area,length,radius;\n\tfinal double PI = 3.14;\n\tCircle(String shapeName,double radius) {\n\t\tsuper(shapeName);\n\t\tthis.radius = radius;\n\t\t\n\t}\n\t\n\t//实现父类中的getArea方法\n\tpublic double getArea() {\n\t\tarea = PI * (radius * radius);\n\t\tSystem.out.println(\"面积是：\" + area);\n\t\treturn area;\n\t}\n\t\n\t//实现父类中的getLength方法\n\tpublic double getLength() {\n\t\tlength = (2 * radius) * PI;\n\t\tSystem.out.println(\"周长是：\" + length);\n\t\treturn length;\n\t}\n\t\n}\n```","source":"_posts/java-AbstractDemo.md","raw":"---\ntitle: JAVA-抽象\ndate: 2019-10-26 11:52:47\ntags: java\ncategories: 编程\n---\n\n<center>JAVA中的抽象，作业实例</center>\n<!--more-->\n\n```java\n//定义了一个抽象基类（父类）\npublic abstract class Shape {\n\t\n\tprotected String shapeName;\n\t\n\tpublic abstract double getArea(); //抽象方法\n\tpublic abstract double getLength(); //抽象方法\n\t\n\tShape(String shapeName) {\n\t\tthis.shapeName = shapeName;\n\t\tSystem.out.println(\"形状是：\"+shapeName);\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t\tShape rectangle,circle;\n\t\trectangle = new Rectangle(\"矩形\", 3.0, 4.0);\n\t\trectangle.getArea();\n\t\trectangle.getLength();\n\t\tcircle = new Circle(\"圆\", 5.0);\n\t\tcircle.getArea();\n\t\tcircle.getLength();\n\t}\n\t\n}\n\n//继承自Shape类，必须实现父类的抽象方法\nclass Rectangle extends Shape{\n\tDouble area,length,width,height;\n\tRectangle(String shapeName,double width,double height) {\n\t\tsuper(shapeName); \n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\t\n\t}\n\t\n\t//实现父类中的getArea方法\n\tpublic double getArea() {\n\t\tarea = width * height;\n\t\tSystem.out.println(\"面积是：\" + area);\n\t\treturn area;\n\t}\n\t\n\t//实现父类中的getLength方法\n\tpublic double getLength() {\n\t\tlength = 2 * (width + height);\n\t\tSystem.out.println(\"周长是：\" + length);\n\t\treturn length;\n\t}\n\t\n}\n\n//继承自Shape类，必须实现父类的抽象方法\nclass Circle extends Shape{\n\tDouble area,length,radius;\n\tfinal double PI = 3.14;\n\tCircle(String shapeName,double radius) {\n\t\tsuper(shapeName);\n\t\tthis.radius = radius;\n\t\t\n\t}\n\t\n\t//实现父类中的getArea方法\n\tpublic double getArea() {\n\t\tarea = PI * (radius * radius);\n\t\tSystem.out.println(\"面积是：\" + area);\n\t\treturn area;\n\t}\n\t\n\t//实现父类中的getLength方法\n\tpublic double getLength() {\n\t\tlength = (2 * radius) * PI;\n\t\tSystem.out.println(\"周长是：\" + length);\n\t\treturn length;\n\t}\n\t\n}\n```","slug":"java-AbstractDemo","published":1,"updated":"2020-08-27T08:22:17.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrft000zr0u2cgos9kpd","content":"<center>JAVA中的抽象，作业实例</center>\n<a id=\"more\"></a>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义了一个抽象基类（父类）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String shapeName;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">getArea</span><span class=\"params\">()</span></span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span></span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tShape(String shapeName) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.shapeName = shapeName;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"形状是：\"</span>+shapeName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tShape rectangle,circle;</span><br><span class=\"line\">\t\trectangle = <span class=\"keyword\">new</span> Rectangle(<span class=\"string\">\"矩形\"</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t\trectangle.getArea();</span><br><span class=\"line\">\t\trectangle.getLength();</span><br><span class=\"line\">\t\tcircle = <span class=\"keyword\">new</span> Circle(<span class=\"string\">\"圆\"</span>, <span class=\"number\">5.0</span>);</span><br><span class=\"line\">\t\tcircle.getArea();</span><br><span class=\"line\">\t\tcircle.getLength();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//继承自Shape类，必须实现父类的抽象方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">\tDouble area,length,width,height;</span><br><span class=\"line\">\tRectangle(String shapeName,<span class=\"keyword\">double</span> width,<span class=\"keyword\">double</span> height) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(shapeName); </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//实现父类中的getArea方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getArea</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tarea = width * height;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"面积是：\"</span> + area);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> area;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//实现父类中的getLength方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tlength = <span class=\"number\">2</span> * (width + height);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"周长是：\"</span> + length);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//继承自Shape类，必须实现父类的抽象方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">\tDouble area,length,radius;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\tCircle(String shapeName,<span class=\"keyword\">double</span> radius) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(shapeName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//实现父类中的getArea方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getArea</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tarea = PI * (radius * radius);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"面积是：\"</span> + area);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> area;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//实现父类中的getLength方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tlength = (<span class=\"number\">2</span> * radius) * PI;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"周长是：\"</span> + length);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>JAVA中的抽象，作业实例</center>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义了一个抽象基类（父类）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String shapeName;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">getArea</span><span class=\"params\">()</span></span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span></span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tShape(String shapeName) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.shapeName = shapeName;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"形状是：\"</span>+shapeName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tShape rectangle,circle;</span><br><span class=\"line\">\t\trectangle = <span class=\"keyword\">new</span> Rectangle(<span class=\"string\">\"矩形\"</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t\trectangle.getArea();</span><br><span class=\"line\">\t\trectangle.getLength();</span><br><span class=\"line\">\t\tcircle = <span class=\"keyword\">new</span> Circle(<span class=\"string\">\"圆\"</span>, <span class=\"number\">5.0</span>);</span><br><span class=\"line\">\t\tcircle.getArea();</span><br><span class=\"line\">\t\tcircle.getLength();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//继承自Shape类，必须实现父类的抽象方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">\tDouble area,length,width,height;</span><br><span class=\"line\">\tRectangle(String shapeName,<span class=\"keyword\">double</span> width,<span class=\"keyword\">double</span> height) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(shapeName); </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//实现父类中的getArea方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getArea</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tarea = width * height;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"面积是：\"</span> + area);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> area;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//实现父类中的getLength方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tlength = <span class=\"number\">2</span> * (width + height);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"周长是：\"</span> + length);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//继承自Shape类，必须实现父类的抽象方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">\tDouble area,length,radius;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\tCircle(String shapeName,<span class=\"keyword\">double</span> radius) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(shapeName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//实现父类中的getArea方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getArea</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tarea = PI * (radius * radius);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"面积是：\"</span> + area);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> area;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//实现父类中的getLength方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tlength = (<span class=\"number\">2</span> * radius) * PI;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"周长是：\"</span> + length);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"(Java)猜一个随机数字","date":"2020-01-10T16:00:00.000Z","_content":"\n<center></center>\n<!--more-->\n\n<center>GuessRandomNuber.java</center>\t\n\n```java\n\npublic class GuessRandomNumber extends JFrame {\n\tprivate ButtonPanel panel;\n\tprivate JTextField input;\n\tprivate JLabel output;\n\tprivate Random random;\n\tprivate int randomInt;\n\t//设置一个随机数\n\tpublic void createRandomInt() {\n\t\trandom = new Random();\n\t\trandomInt = random.nextInt(1000) + 1;\n\t\tSystem.out.println(\"随机数是：\" + randomInt);\n\t}\n\t\n\t/*初始化方法*/\n\tpublic void init() {\n\t\t//设置窗体属性\n\t\tsetSize(600,337);\n\t\tsetTitle(\"窗体\");\n\t\t//初始化组件\n\t\tinput = new JTextField();\n\t\toutput = new JLabel(\"请猜个数字\"); \n\t\tpanel = new ButtonPanel();\n\t\t//获取面板\n\t\tContainer con = this.getContentPane();\n\t\t//面板设置布局\n\t\tcon.setLayout(new BorderLayout());\n\t\t//panel.setLayout(new GridLayout(1,3));\n\t\t\n\t\t//将组件添加到面板\n\t\tcon.add(input,BorderLayout.NORTH);\n\t\tcon.add(output,BorderLayout.CENTER);\n\t\tcon.add(panel,BorderLayout.SOUTH);\n\t\t//设置组件属性\n\t\toutput.setFont(new Font(\"XHei\",Font.BOLD,20));\n\t\toutput.setForeground(Color.RED);\n\t\t\n\t\tsetVisible(true);\n\t\t//设置默认关闭动作\n\t\tsetDefaultCloseOperation(EXIT_ON_CLOSE);\n\t\t\n\t\t//生成一个随机数\n\t\tcreateRandomInt();\n\t\t\n\t\tpanel.getGuess().addActionListener(new ActionListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\toutput.setText(\"Guess...\");\n\t\t\t\tString value = input.getText();\n\t\t\t\tint guessNumer = -1;\n\t\t\t\ttry {\n\t\t\t\t\tguessNumer = Integer.parseInt(value);\n\t\t\t\t} catch (NumberFormatException e1) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\toutput.setText(\"您输入的不是数字，请重新输入\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(guessNumer < 0 || guessNumer > 1000) {\n\t\t\t\t\toutput.setText(\"猜的数字要在1~1000，请重新输入\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(guessNumer > randomInt) {\n\t\t\t\t\toutput.setText(\"猜大了，往小了猜\");\n\t\t\t\t\tinput.setText(\"\");\n\t\t\t\t}\n\t\t\t\telse if( guessNumer < randomInt) {\n\t\t\t\t\toutput.setText(\"猜小了，往大了猜\");\n\t\t\t\t\tinput.setText(\"\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toutput.setText(\"恭喜你，猜对了\");\n\t\t\t\t\tinput.setText(\"\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tpanel.getReset().addActionListener(new ActionListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tcreateRandomInt();\n\t\t\t\tSystem.out.println(\"随机数是：\" + randomInt);\n\t\t\t\toutput.setText(\"请猜一个数字\");\n\t\t\t}\n\t\t});\n\t\tpanel.getExit().addActionListener(new ActionListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t});\n\t}\n\t/*构造方法*/\n\tpublic GuessRandomNumber() {\n\t\tinit();\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew GuessRandomNumber();\n\t}\n}\n```\n<center>ButtonPanel.java</center>\n\n```java\n\npublic class ButtonPanel extends JPanel{\n\tprivate JButton guess,reset,exit;\n\tpublic JButton getGuess() {\n\t\treturn guess;\n\t}\n\tpublic void setGuess(JButton guess) {\n\t\tthis.guess = guess;\n\t}\n\tpublic JButton getReset() {\n\t\treturn reset;\n\t}\n\tpublic void setReset(JButton reset) {\n\t\tthis.reset = reset;\n\t}\n\tpublic JButton getExit() {\n\t\treturn exit;\n\t}\n\tpublic void setExit(JButton exit) {\n\t\tthis.exit = exit;\n\t}\n\tpublic void init() {\n\t\tguess = new JButton(\"猜\");\n\t\treset = new JButton(\"重置\");\n\t\texit = new JButton(\"退出\");\n\t\tsetLayout(new GridLayout(1,3));\n\t\tadd(guess);\n\t\tadd(reset);\n\t\tadd(exit);\n\t\t\n\t\t\n\t}\n\tpublic ButtonPanel() {\n\t\tinit();\n\t}\n}\n\n```","source":"_posts/java-GUI-GuessRandomNumber.md","raw":"---\ntitle: (Java)猜一个随机数字\ndate: 2020-01-11\ntags: java\ncategories: 编程\n---\n\n<center></center>\n<!--more-->\n\n<center>GuessRandomNuber.java</center>\t\n\n```java\n\npublic class GuessRandomNumber extends JFrame {\n\tprivate ButtonPanel panel;\n\tprivate JTextField input;\n\tprivate JLabel output;\n\tprivate Random random;\n\tprivate int randomInt;\n\t//设置一个随机数\n\tpublic void createRandomInt() {\n\t\trandom = new Random();\n\t\trandomInt = random.nextInt(1000) + 1;\n\t\tSystem.out.println(\"随机数是：\" + randomInt);\n\t}\n\t\n\t/*初始化方法*/\n\tpublic void init() {\n\t\t//设置窗体属性\n\t\tsetSize(600,337);\n\t\tsetTitle(\"窗体\");\n\t\t//初始化组件\n\t\tinput = new JTextField();\n\t\toutput = new JLabel(\"请猜个数字\"); \n\t\tpanel = new ButtonPanel();\n\t\t//获取面板\n\t\tContainer con = this.getContentPane();\n\t\t//面板设置布局\n\t\tcon.setLayout(new BorderLayout());\n\t\t//panel.setLayout(new GridLayout(1,3));\n\t\t\n\t\t//将组件添加到面板\n\t\tcon.add(input,BorderLayout.NORTH);\n\t\tcon.add(output,BorderLayout.CENTER);\n\t\tcon.add(panel,BorderLayout.SOUTH);\n\t\t//设置组件属性\n\t\toutput.setFont(new Font(\"XHei\",Font.BOLD,20));\n\t\toutput.setForeground(Color.RED);\n\t\t\n\t\tsetVisible(true);\n\t\t//设置默认关闭动作\n\t\tsetDefaultCloseOperation(EXIT_ON_CLOSE);\n\t\t\n\t\t//生成一个随机数\n\t\tcreateRandomInt();\n\t\t\n\t\tpanel.getGuess().addActionListener(new ActionListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\toutput.setText(\"Guess...\");\n\t\t\t\tString value = input.getText();\n\t\t\t\tint guessNumer = -1;\n\t\t\t\ttry {\n\t\t\t\t\tguessNumer = Integer.parseInt(value);\n\t\t\t\t} catch (NumberFormatException e1) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\toutput.setText(\"您输入的不是数字，请重新输入\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(guessNumer < 0 || guessNumer > 1000) {\n\t\t\t\t\toutput.setText(\"猜的数字要在1~1000，请重新输入\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(guessNumer > randomInt) {\n\t\t\t\t\toutput.setText(\"猜大了，往小了猜\");\n\t\t\t\t\tinput.setText(\"\");\n\t\t\t\t}\n\t\t\t\telse if( guessNumer < randomInt) {\n\t\t\t\t\toutput.setText(\"猜小了，往大了猜\");\n\t\t\t\t\tinput.setText(\"\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toutput.setText(\"恭喜你，猜对了\");\n\t\t\t\t\tinput.setText(\"\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tpanel.getReset().addActionListener(new ActionListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tcreateRandomInt();\n\t\t\t\tSystem.out.println(\"随机数是：\" + randomInt);\n\t\t\t\toutput.setText(\"请猜一个数字\");\n\t\t\t}\n\t\t});\n\t\tpanel.getExit().addActionListener(new ActionListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t});\n\t}\n\t/*构造方法*/\n\tpublic GuessRandomNumber() {\n\t\tinit();\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew GuessRandomNumber();\n\t}\n}\n```\n<center>ButtonPanel.java</center>\n\n```java\n\npublic class ButtonPanel extends JPanel{\n\tprivate JButton guess,reset,exit;\n\tpublic JButton getGuess() {\n\t\treturn guess;\n\t}\n\tpublic void setGuess(JButton guess) {\n\t\tthis.guess = guess;\n\t}\n\tpublic JButton getReset() {\n\t\treturn reset;\n\t}\n\tpublic void setReset(JButton reset) {\n\t\tthis.reset = reset;\n\t}\n\tpublic JButton getExit() {\n\t\treturn exit;\n\t}\n\tpublic void setExit(JButton exit) {\n\t\tthis.exit = exit;\n\t}\n\tpublic void init() {\n\t\tguess = new JButton(\"猜\");\n\t\treset = new JButton(\"重置\");\n\t\texit = new JButton(\"退出\");\n\t\tsetLayout(new GridLayout(1,3));\n\t\tadd(guess);\n\t\tadd(reset);\n\t\tadd(exit);\n\t\t\n\t\t\n\t}\n\tpublic ButtonPanel() {\n\t\tinit();\n\t}\n}\n\n```","slug":"java-GUI-GuessRandomNumber","published":1,"updated":"2020-08-27T08:22:17.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfu0011r0u29hc1ai9k","content":"<center></center>\n<a id=\"more\"></a>\n\n<center>GuessRandomNuber.java</center>    \n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuessRandomNumber</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ButtonPanel panel;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JTextField input;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JLabel output;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Random random;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> randomInt;</span><br><span class=\"line\">\t<span class=\"comment\">//设置一个随机数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createRandomInt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\trandom = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">\t\trandomInt = random.nextInt(<span class=\"number\">1000</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"随机数是：\"</span> + randomInt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*初始化方法*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置窗体属性</span></span><br><span class=\"line\">\t\tsetSize(<span class=\"number\">600</span>,<span class=\"number\">337</span>);</span><br><span class=\"line\">\t\tsetTitle(<span class=\"string\">\"窗体\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化组件</span></span><br><span class=\"line\">\t\tinput = <span class=\"keyword\">new</span> JTextField();</span><br><span class=\"line\">\t\toutput = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"请猜个数字\"</span>); </span><br><span class=\"line\">\t\tpanel = <span class=\"keyword\">new</span> ButtonPanel();</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取面板</span></span><br><span class=\"line\">\t\tContainer con = <span class=\"keyword\">this</span>.getContentPane();</span><br><span class=\"line\">\t\t<span class=\"comment\">//面板设置布局</span></span><br><span class=\"line\">\t\tcon.setLayout(<span class=\"keyword\">new</span> BorderLayout());</span><br><span class=\"line\">\t\t<span class=\"comment\">//panel.setLayout(new GridLayout(1,3));</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//将组件添加到面板</span></span><br><span class=\"line\">\t\tcon.add(input,BorderLayout.NORTH);</span><br><span class=\"line\">\t\tcon.add(output,BorderLayout.CENTER);</span><br><span class=\"line\">\t\tcon.add(panel,BorderLayout.SOUTH);</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置组件属性</span></span><br><span class=\"line\">\t\toutput.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"XHei\"</span>,Font.BOLD,<span class=\"number\">20</span>));</span><br><span class=\"line\">\t\toutput.setForeground(Color.RED);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsetVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置默认关闭动作</span></span><br><span class=\"line\">\t\tsetDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//生成一个随机数</span></span><br><span class=\"line\">\t\tcreateRandomInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpanel.getGuess().addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t\toutput.setText(<span class=\"string\">\"Guess...\"</span>);</span><br><span class=\"line\">\t\t\t\tString value = input.getText();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> guessNumer = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tguessNumer = Integer.parseInt(value);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (NumberFormatException e1) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\te1.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"您输入的不是数字，请重新输入\"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(guessNumer &lt; <span class=\"number\">0</span> || guessNumer &gt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"猜的数字要在1~1000，请重新输入\"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(guessNumer &gt; randomInt) &#123;</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"猜大了，往小了猜\"</span>);</span><br><span class=\"line\">\t\t\t\t\tinput.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( guessNumer &lt; randomInt) &#123;</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"猜小了，往大了猜\"</span>);</span><br><span class=\"line\">\t\t\t\t\tinput.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"恭喜你，猜对了\"</span>);</span><br><span class=\"line\">\t\t\t\t\tinput.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tpanel.getReset().addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t\tcreateRandomInt();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"随机数是：\"</span> + randomInt);</span><br><span class=\"line\">\t\t\t\toutput.setText(<span class=\"string\">\"请猜一个数字\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tpanel.getExit().addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t\tSystem.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*构造方法*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GuessRandomNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tinit();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> GuessRandomNumber();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<center>ButtonPanel.java</center>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JButton guess,reset,exit;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> JButton <span class=\"title\">getGuess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> guess;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGuess</span><span class=\"params\">(JButton guess)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.guess = guess;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> JButton <span class=\"title\">getReset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> reset;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setReset</span><span class=\"params\">(JButton reset)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.reset = reset;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> JButton <span class=\"title\">getExit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> exit;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setExit</span><span class=\"params\">(JButton exit)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.exit = exit;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tguess = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"猜\"</span>);</span><br><span class=\"line\">\t\treset = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"重置\"</span>);</span><br><span class=\"line\">\t\texit = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"退出\"</span>);</span><br><span class=\"line\">\t\tsetLayout(<span class=\"keyword\">new</span> GridLayout(<span class=\"number\">1</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">\t\tadd(guess);</span><br><span class=\"line\">\t\tadd(reset);</span><br><span class=\"line\">\t\tadd(exit);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ButtonPanel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tinit();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center></center>","more":"<center>GuessRandomNuber.java</center>    \n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuessRandomNumber</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFrame</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ButtonPanel panel;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JTextField input;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JLabel output;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Random random;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> randomInt;</span><br><span class=\"line\">\t<span class=\"comment\">//设置一个随机数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createRandomInt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\trandom = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">\t\trandomInt = random.nextInt(<span class=\"number\">1000</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"随机数是：\"</span> + randomInt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*初始化方法*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置窗体属性</span></span><br><span class=\"line\">\t\tsetSize(<span class=\"number\">600</span>,<span class=\"number\">337</span>);</span><br><span class=\"line\">\t\tsetTitle(<span class=\"string\">\"窗体\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化组件</span></span><br><span class=\"line\">\t\tinput = <span class=\"keyword\">new</span> JTextField();</span><br><span class=\"line\">\t\toutput = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">\"请猜个数字\"</span>); </span><br><span class=\"line\">\t\tpanel = <span class=\"keyword\">new</span> ButtonPanel();</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取面板</span></span><br><span class=\"line\">\t\tContainer con = <span class=\"keyword\">this</span>.getContentPane();</span><br><span class=\"line\">\t\t<span class=\"comment\">//面板设置布局</span></span><br><span class=\"line\">\t\tcon.setLayout(<span class=\"keyword\">new</span> BorderLayout());</span><br><span class=\"line\">\t\t<span class=\"comment\">//panel.setLayout(new GridLayout(1,3));</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//将组件添加到面板</span></span><br><span class=\"line\">\t\tcon.add(input,BorderLayout.NORTH);</span><br><span class=\"line\">\t\tcon.add(output,BorderLayout.CENTER);</span><br><span class=\"line\">\t\tcon.add(panel,BorderLayout.SOUTH);</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置组件属性</span></span><br><span class=\"line\">\t\toutput.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"XHei\"</span>,Font.BOLD,<span class=\"number\">20</span>));</span><br><span class=\"line\">\t\toutput.setForeground(Color.RED);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsetVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置默认关闭动作</span></span><br><span class=\"line\">\t\tsetDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//生成一个随机数</span></span><br><span class=\"line\">\t\tcreateRandomInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpanel.getGuess().addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t\toutput.setText(<span class=\"string\">\"Guess...\"</span>);</span><br><span class=\"line\">\t\t\t\tString value = input.getText();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> guessNumer = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tguessNumer = Integer.parseInt(value);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (NumberFormatException e1) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\te1.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"您输入的不是数字，请重新输入\"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(guessNumer &lt; <span class=\"number\">0</span> || guessNumer &gt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"猜的数字要在1~1000，请重新输入\"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(guessNumer &gt; randomInt) &#123;</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"猜大了，往小了猜\"</span>);</span><br><span class=\"line\">\t\t\t\t\tinput.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( guessNumer &lt; randomInt) &#123;</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"猜小了，往大了猜\"</span>);</span><br><span class=\"line\">\t\t\t\t\tinput.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\toutput.setText(<span class=\"string\">\"恭喜你，猜对了\"</span>);</span><br><span class=\"line\">\t\t\t\t\tinput.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tpanel.getReset().addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t\tcreateRandomInt();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"随机数是：\"</span> + randomInt);</span><br><span class=\"line\">\t\t\t\toutput.setText(<span class=\"string\">\"请猜一个数字\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tpanel.getExit().addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t\tSystem.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*构造方法*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GuessRandomNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tinit();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> GuessRandomNumber();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<center>ButtonPanel.java</center>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">JPanel</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JButton guess,reset,exit;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> JButton <span class=\"title\">getGuess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> guess;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGuess</span><span class=\"params\">(JButton guess)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.guess = guess;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> JButton <span class=\"title\">getReset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> reset;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setReset</span><span class=\"params\">(JButton reset)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.reset = reset;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> JButton <span class=\"title\">getExit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> exit;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setExit</span><span class=\"params\">(JButton exit)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.exit = exit;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tguess = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"猜\"</span>);</span><br><span class=\"line\">\t\treset = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"重置\"</span>);</span><br><span class=\"line\">\t\texit = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"退出\"</span>);</span><br><span class=\"line\">\t\tsetLayout(<span class=\"keyword\">new</span> GridLayout(<span class=\"number\">1</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">\t\tadd(guess);</span><br><span class=\"line\">\t\tadd(reset);</span><br><span class=\"line\">\t\tadd(exit);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ButtonPanel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tinit();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java作业","date":"2019-10-15T05:54:39.000Z","_content":"<center>BMI计算器</center>\n<!--more-->\n\n---\n\n```java\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\nimport org.omg.CORBA.PRIVATE_MEMBER;\n\nclass GetBMI{\n\tdouble weight,height,final_BMI;\n\tboolean right = true;\n\t\n\t//计算BMI的值\t\n\tdouble GetBMI(){\n\t\tfinal_BMI = weight/(height*height);\n\t\treturn final_BMI;\n\t}\n\t\n\t//获取身高体重数据，并对输入的数据进行可行性验证\n\tvoid getData() {\n\t\tboolean a = true;\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(a) {\n\t\t\tSystem.out.println(\"请输入你的体重:\");\n\t\t\tif(input.hasNextDouble()) {\n\t\t\t\tweight = input.nextDouble();\n\t\t\t\tSystem.out.println(\"请输入你的身高:\");\n\t\t\t\theight = input.nextDouble();\n\t\t\t\tbreak;\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"数据输入错误，请重新来！\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//获取BMI所在的范围，打印出提醒语句\n\tvoid compare() {\n\t\tGetBMI();\n\t\tif (final_BMI >= 40) {\n\t\t\tSystem.out.println(\"You can go die!!!!\");\n\t\t}else  if(final_BMI >= 35 && final_BMI < 40) {\n\t\t\tSystem.out.println(\"你严重肥胖！\");\n\t\t}else if (final_BMI >= 30 && final_BMI < 35) {\n\t\t\tSystem.out.println(\"你属于肥胖！\");\n\t\t}else if (final_BMI >= 25 && final_BMI < 30) {\n\t\t\tSystem.out.println(\"你属于偏胖！\");\n\t\t}else if (final_BMI >= 18 && final_BMI < 25 ) {\n\t\t\tSystem.out.println(\"你的BMI正常！\");\n\t\t}else{\n\t\t\tSystem.out.println(\"你太瘦了！\");\n\t\t}\n\t}\n\t\n\t//获得计算结果并输出\n\tvoid show() {\n\t\tDecimalFormat dFormat = new DecimalFormat(\"0.00\");\n\t\tthis.GetBMI();\n\t\tSystem.out.println(\"Your BMI is :\"+dFormat.format(final_BMI));\n\t\tcompare();\n\t}\n\t\n}\npublic class BMICauculator {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\tGetBMI bmi = new GetBMI();\n\t\t\tbmi.getData();\n\t\t\tbmi.show();\n\t}\n\n}\n\n```\n","source":"_posts/java-homework.md","raw":"---\ntitle: Java作业\ndate: 2019-10-15 13:54:39\ntags: java\ncategories: 编程\n---\n<center>BMI计算器</center>\n<!--more-->\n\n---\n\n```java\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\nimport org.omg.CORBA.PRIVATE_MEMBER;\n\nclass GetBMI{\n\tdouble weight,height,final_BMI;\n\tboolean right = true;\n\t\n\t//计算BMI的值\t\n\tdouble GetBMI(){\n\t\tfinal_BMI = weight/(height*height);\n\t\treturn final_BMI;\n\t}\n\t\n\t//获取身高体重数据，并对输入的数据进行可行性验证\n\tvoid getData() {\n\t\tboolean a = true;\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(a) {\n\t\t\tSystem.out.println(\"请输入你的体重:\");\n\t\t\tif(input.hasNextDouble()) {\n\t\t\t\tweight = input.nextDouble();\n\t\t\t\tSystem.out.println(\"请输入你的身高:\");\n\t\t\t\theight = input.nextDouble();\n\t\t\t\tbreak;\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"数据输入错误，请重新来！\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//获取BMI所在的范围，打印出提醒语句\n\tvoid compare() {\n\t\tGetBMI();\n\t\tif (final_BMI >= 40) {\n\t\t\tSystem.out.println(\"You can go die!!!!\");\n\t\t}else  if(final_BMI >= 35 && final_BMI < 40) {\n\t\t\tSystem.out.println(\"你严重肥胖！\");\n\t\t}else if (final_BMI >= 30 && final_BMI < 35) {\n\t\t\tSystem.out.println(\"你属于肥胖！\");\n\t\t}else if (final_BMI >= 25 && final_BMI < 30) {\n\t\t\tSystem.out.println(\"你属于偏胖！\");\n\t\t}else if (final_BMI >= 18 && final_BMI < 25 ) {\n\t\t\tSystem.out.println(\"你的BMI正常！\");\n\t\t}else{\n\t\t\tSystem.out.println(\"你太瘦了！\");\n\t\t}\n\t}\n\t\n\t//获得计算结果并输出\n\tvoid show() {\n\t\tDecimalFormat dFormat = new DecimalFormat(\"0.00\");\n\t\tthis.GetBMI();\n\t\tSystem.out.println(\"Your BMI is :\"+dFormat.format(final_BMI));\n\t\tcompare();\n\t}\n\t\n}\npublic class BMICauculator {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\tGetBMI bmi = new GetBMI();\n\t\t\tbmi.getData();\n\t\t\tbmi.show();\n\t}\n\n}\n\n```\n","slug":"java-homework","published":1,"updated":"2020-08-27T08:22:17.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfv0015r0u26h1w49cy","content":"<center>BMI计算器</center>\n<a id=\"more\"></a>\n\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.DecimalFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.omg.CORBA.PRIVATE_MEMBER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetBMI</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> weight,height,final_BMI;</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> right = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//计算BMI的值\t</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">GetBMI</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tfinal_BMI = weight/(height*height);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> final_BMI;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获取身高体重数据，并对输入的数据进行可行性验证</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> a = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tScanner input = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(a) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"请输入你的体重:\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(input.hasNextDouble()) &#123;</span><br><span class=\"line\">\t\t\t\tweight = input.nextDouble();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"请输入你的身高:\"</span>);</span><br><span class=\"line\">\t\t\t\theight = input.nextDouble();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"数据输入错误，请重新来！\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获取BMI所在的范围，打印出提醒语句</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">compare</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tGetBMI();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (final_BMI &gt;= <span class=\"number\">40</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"You can go die!!!!\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>  <span class=\"keyword\">if</span>(final_BMI &gt;= <span class=\"number\">35</span> &amp;&amp; final_BMI &lt; <span class=\"number\">40</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你严重肥胖！\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (final_BMI &gt;= <span class=\"number\">30</span> &amp;&amp; final_BMI &lt; <span class=\"number\">35</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你属于肥胖！\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (final_BMI &gt;= <span class=\"number\">25</span> &amp;&amp; final_BMI &lt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你属于偏胖！\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (final_BMI &gt;= <span class=\"number\">18</span> &amp;&amp; final_BMI &lt; <span class=\"number\">25</span> ) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你的BMI正常！\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你太瘦了！\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获得计算结果并输出</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tDecimalFormat dFormat = <span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">\"0.00\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.GetBMI();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Your BMI is :\"</span>+dFormat.format(final_BMI));</span><br><span class=\"line\">\t\tcompare();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMICauculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\tGetBMI bmi = <span class=\"keyword\">new</span> GetBMI();</span><br><span class=\"line\">\t\t\tbmi.getData();</span><br><span class=\"line\">\t\t\tbmi.show();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<center>BMI计算器</center>","more":"<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.DecimalFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.omg.CORBA.PRIVATE_MEMBER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetBMI</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> weight,height,final_BMI;</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> right = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//计算BMI的值\t</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">GetBMI</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tfinal_BMI = weight/(height*height);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> final_BMI;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获取身高体重数据，并对输入的数据进行可行性验证</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> a = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tScanner input = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(a) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"请输入你的体重:\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(input.hasNextDouble()) &#123;</span><br><span class=\"line\">\t\t\t\tweight = input.nextDouble();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"请输入你的身高:\"</span>);</span><br><span class=\"line\">\t\t\t\theight = input.nextDouble();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"数据输入错误，请重新来！\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获取BMI所在的范围，打印出提醒语句</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">compare</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tGetBMI();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (final_BMI &gt;= <span class=\"number\">40</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"You can go die!!!!\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>  <span class=\"keyword\">if</span>(final_BMI &gt;= <span class=\"number\">35</span> &amp;&amp; final_BMI &lt; <span class=\"number\">40</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你严重肥胖！\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (final_BMI &gt;= <span class=\"number\">30</span> &amp;&amp; final_BMI &lt; <span class=\"number\">35</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你属于肥胖！\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (final_BMI &gt;= <span class=\"number\">25</span> &amp;&amp; final_BMI &lt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你属于偏胖！\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (final_BMI &gt;= <span class=\"number\">18</span> &amp;&amp; final_BMI &lt; <span class=\"number\">25</span> ) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你的BMI正常！\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"你太瘦了！\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获得计算结果并输出</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tDecimalFormat dFormat = <span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">\"0.00\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.GetBMI();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Your BMI is :\"</span>+dFormat.format(final_BMI));</span><br><span class=\"line\">\t\tcompare();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMICauculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\tGetBMI bmi = <span class=\"keyword\">new</span> GetBMI();</span><br><span class=\"line\">\t\t\tbmi.getData();</span><br><span class=\"line\">\t\t\tbmi.show();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"记录在使用webpack做的项目过程中遇到的问题及解决办法和总结","date":"2020-04-17T04:40:00.000Z","_content":"问题一： \n- 背景：做一个新闻页面，每一条新闻点进去进入新闻详情的时候，之前是点进去之后再次请求服务器数据，这样就请求了两次，对访问速度也有影响，也浪费资源。\n- 问题：怎么才能直接把每条新闻获取的数据在点击之后直接传到新闻详情页\n- 解决：\n - 试过使用中央事件总线bus来在两个组件之间传递数据，但是测试的时候，只能在控制台看见数据，不能传给接收组件自己的变量。或者说是我的使用方式不正确。效果不佳，舍弃。\n - 搜索一番发现，可以使用`$router`来传值，很方便.\n\n点击`阅读更多`查看使用方法\n<!--more-->\n\n下面是使用方法:\n要发送数据的组件：\n```javascript\n\tdata(){\n    \treturn: {\n        \tdata: 'Hello'\n        }\n    },\n    methods: {\n    \tsendData(){\n        \tthis.$router.push({\n                path: '/home',\n                query: {\n                    data: this.data\n                }\n\t\t\t})\n        }\n    }\n```\n要接收数据的组件：\n```javascript\n\tdata(){\n    \treturn: {\n        \tmydata: ''\n        }\n    }\n\tmethods: {\n    \tgetData(){\n        \tthis.mydata = this.$route.query.data\n        }\n    }\n```\n问题二:\n+ 如何在手机上调试项目\n+ 背景：局域网ip为192.168.101.8\n - 保证电脑和手机在同一局域网下（连接同一wifi）\n - 在`package.json`中的启动参数中添加`--host 192.168.101.8`\n - 手机访问这个ip地址+端口号+项目首地址\n - 例如：原本项目地址为：`localhost:8080/#/home`\n - 配置后：`192.168.101.8:8080/#/home`\n - 手机访问这个地址即可","source":"_posts/my-project-note.md","raw":"---\ntitle: 记录在使用webpack做的项目过程中遇到的问题及解决办法和总结\ndate: 2020-04-17 12:40:00\ntags: Vue\ncategories:\t笔记\n---\n问题一： \n- 背景：做一个新闻页面，每一条新闻点进去进入新闻详情的时候，之前是点进去之后再次请求服务器数据，这样就请求了两次，对访问速度也有影响，也浪费资源。\n- 问题：怎么才能直接把每条新闻获取的数据在点击之后直接传到新闻详情页\n- 解决：\n - 试过使用中央事件总线bus来在两个组件之间传递数据，但是测试的时候，只能在控制台看见数据，不能传给接收组件自己的变量。或者说是我的使用方式不正确。效果不佳，舍弃。\n - 搜索一番发现，可以使用`$router`来传值，很方便.\n\n点击`阅读更多`查看使用方法\n<!--more-->\n\n下面是使用方法:\n要发送数据的组件：\n```javascript\n\tdata(){\n    \treturn: {\n        \tdata: 'Hello'\n        }\n    },\n    methods: {\n    \tsendData(){\n        \tthis.$router.push({\n                path: '/home',\n                query: {\n                    data: this.data\n                }\n\t\t\t})\n        }\n    }\n```\n要接收数据的组件：\n```javascript\n\tdata(){\n    \treturn: {\n        \tmydata: ''\n        }\n    }\n\tmethods: {\n    \tgetData(){\n        \tthis.mydata = this.$route.query.data\n        }\n    }\n```\n问题二:\n+ 如何在手机上调试项目\n+ 背景：局域网ip为192.168.101.8\n - 保证电脑和手机在同一局域网下（连接同一wifi）\n - 在`package.json`中的启动参数中添加`--host 192.168.101.8`\n - 手机访问这个ip地址+端口号+项目首地址\n - 例如：原本项目地址为：`localhost:8080/#/home`\n - 配置后：`192.168.101.8:8080/#/home`\n - 手机访问这个地址即可","slug":"my-project-note","published":1,"updated":"2020-08-27T08:22:17.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfw0017r0u2cmq6f3q2","content":"<p>问题一： </p>\n<ul>\n<li>背景：做一个新闻页面，每一条新闻点进去进入新闻详情的时候，之前是点进去之后再次请求服务器数据，这样就请求了两次，对访问速度也有影响，也浪费资源。</li>\n<li>问题：怎么才能直接把每条新闻获取的数据在点击之后直接传到新闻详情页</li>\n<li>解决：<ul>\n<li>试过使用中央事件总线bus来在两个组件之间传递数据，但是测试的时候，只能在控制台看见数据，不能传给接收组件自己的变量。或者说是我的使用方式不正确。效果不佳，舍弃。</li>\n<li>搜索一番发现，可以使用<code>$router</code>来传值，很方便.</li>\n</ul>\n</li>\n</ul>\n<p>点击<code>阅读更多</code>查看使用方法</p>\n<a id=\"more\"></a>\n\n<p>下面是使用方法:<br>要发送数据的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span>: &#123;</span><br><span class=\"line\">       \tdata: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">   \tsendData()&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">this</span>.$router.push(&#123;</span><br><span class=\"line\">               path: <span class=\"string\">'/home'</span>,</span><br><span class=\"line\">               query: &#123;</span><br><span class=\"line\">                   data: <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>要接收数据的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span>: &#123;</span><br><span class=\"line\">       \tmydata: <span class=\"string\">''</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">   \tgetData()&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">this</span>.mydata = <span class=\"keyword\">this</span>.$route.query.data</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>问题二:</p>\n<ul>\n<li>如何在手机上调试项目</li>\n<li>背景：局域网ip为192.168.101.8<ul>\n<li>保证电脑和手机在同一局域网下（连接同一wifi）</li>\n<li>在<code>package.json</code>中的启动参数中添加<code>--host 192.168.101.8</code></li>\n<li>手机访问这个ip地址+端口号+项目首地址</li>\n<li>例如：原本项目地址为：<code>localhost:8080/#/home</code></li>\n<li>配置后：<code>192.168.101.8:8080/#/home</code></li>\n<li>手机访问这个地址即可</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>问题一： </p>\n<ul>\n<li>背景：做一个新闻页面，每一条新闻点进去进入新闻详情的时候，之前是点进去之后再次请求服务器数据，这样就请求了两次，对访问速度也有影响，也浪费资源。</li>\n<li>问题：怎么才能直接把每条新闻获取的数据在点击之后直接传到新闻详情页</li>\n<li>解决：<ul>\n<li>试过使用中央事件总线bus来在两个组件之间传递数据，但是测试的时候，只能在控制台看见数据，不能传给接收组件自己的变量。或者说是我的使用方式不正确。效果不佳，舍弃。</li>\n<li>搜索一番发现，可以使用<code>$router</code>来传值，很方便.</li>\n</ul>\n</li>\n</ul>\n<p>点击<code>阅读更多</code>查看使用方法</p>","more":"<p>下面是使用方法:<br>要发送数据的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span>: &#123;</span><br><span class=\"line\">       \tdata: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">   \tsendData()&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">this</span>.$router.push(&#123;</span><br><span class=\"line\">               path: <span class=\"string\">'/home'</span>,</span><br><span class=\"line\">               query: &#123;</span><br><span class=\"line\">                   data: <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>要接收数据的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span>: &#123;</span><br><span class=\"line\">       \tmydata: <span class=\"string\">''</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">   \tgetData()&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">this</span>.mydata = <span class=\"keyword\">this</span>.$route.query.data</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>问题二:</p>\n<ul>\n<li>如何在手机上调试项目</li>\n<li>背景：局域网ip为192.168.101.8<ul>\n<li>保证电脑和手机在同一局域网下（连接同一wifi）</li>\n<li>在<code>package.json</code>中的启动参数中添加<code>--host 192.168.101.8</code></li>\n<li>手机访问这个ip地址+端口号+项目首地址</li>\n<li>例如：原本项目地址为：<code>localhost:8080/#/home</code></li>\n<li>配置后：<code>192.168.101.8:8080/#/home</code></li>\n<li>手机访问这个地址即可</li>\n</ul>\n</li>\n</ul>"},{"title":"我的第一个项目下线啦","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/laotou.jpg","date":"2020-04-25T10:04:48.000Z","_content":"\n历时一个多月学习了Vue之后结合教程做的第一个小项目，我觉得可以归类为移动端的小程序。\n\n通过这个小小的项目，一个在以后看起来很渣渣的小项目，让现在的我对Vue的理解更加深刻，还学习了webpack、axios、Promise、接口、vue-cli等很多以及其他UI组件库的使用。\n\n这个项目还有很多不足，存在的问题有：\n\n+ 重复请求api数据，点击过的页面和获取过的数据重新进入会丢失并重新发起请求\n+ 新闻列表点进一条新闻之后再回到新闻列表不能还原点击之前的分类和界面\n+ 新闻列表传参是显示传参，后期会优化为隐式传参\n\n<!--more-->\n\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/appinfo.jpg' />    \n</div>\n\n项目使用的相关：\n\n+ UI\n  - Mint-UI\n  - Vant-UI\n  - Muse-UI\n  - MUI\n+ 技术栈\n  - Webpack\n  - Vue.js\n  - Axios\n+ 接口：\n  - 聚合数据\n  - 进制数据\n  - 一言\n\n\n\n\n\n","source":"_posts/myfirstpractice.md","raw":"---\ntitle: 我的第一个项目下线啦\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/laotou.jpg\ndate: 2020-04-25 18:04:48\ntags: 项目\ncategories: Vue.js\n---\n\n历时一个多月学习了Vue之后结合教程做的第一个小项目，我觉得可以归类为移动端的小程序。\n\n通过这个小小的项目，一个在以后看起来很渣渣的小项目，让现在的我对Vue的理解更加深刻，还学习了webpack、axios、Promise、接口、vue-cli等很多以及其他UI组件库的使用。\n\n这个项目还有很多不足，存在的问题有：\n\n+ 重复请求api数据，点击过的页面和获取过的数据重新进入会丢失并重新发起请求\n+ 新闻列表点进一条新闻之后再回到新闻列表不能还原点击之前的分类和界面\n+ 新闻列表传参是显示传参，后期会优化为隐式传参\n\n<!--more-->\n\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/appinfo.jpg' />    \n</div>\n\n项目使用的相关：\n\n+ UI\n  - Mint-UI\n  - Vant-UI\n  - Muse-UI\n  - MUI\n+ 技术栈\n  - Webpack\n  - Vue.js\n  - Axios\n+ 接口：\n  - 聚合数据\n  - 进制数据\n  - 一言\n\n\n\n\n\n","slug":"myfirstpractice","published":1,"updated":"2020-08-27T08:22:17.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfx001br0u26pw982fu","content":"<p>历时一个多月学习了Vue之后结合教程做的第一个小项目，我觉得可以归类为移动端的小程序。</p>\n<p>通过这个小小的项目，一个在以后看起来很渣渣的小项目，让现在的我对Vue的理解更加深刻，还学习了webpack、axios、Promise、接口、vue-cli等很多以及其他UI组件库的使用。</p>\n<p>这个项目还有很多不足，存在的问题有：</p>\n<ul>\n<li>重复请求api数据，点击过的页面和获取过的数据重新进入会丢失并重新发起请求</li>\n<li>新闻列表点进一条新闻之后再回到新闻列表不能还原点击之前的分类和界面</li>\n<li>新闻列表传参是显示传参，后期会优化为隐式传参</li>\n</ul>\n<a id=\"more\"></a>\n\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/appinfo.jpg' />    \n</div>\n\n<p>项目使用的相关：</p>\n<ul>\n<li>UI<ul>\n<li>Mint-UI</li>\n<li>Vant-UI</li>\n<li>Muse-UI</li>\n<li>MUI</li>\n</ul>\n</li>\n<li>技术栈<ul>\n<li>Webpack</li>\n<li>Vue.js</li>\n<li>Axios</li>\n</ul>\n</li>\n<li>接口：<ul>\n<li>聚合数据</li>\n<li>进制数据</li>\n<li>一言</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>历时一个多月学习了Vue之后结合教程做的第一个小项目，我觉得可以归类为移动端的小程序。</p>\n<p>通过这个小小的项目，一个在以后看起来很渣渣的小项目，让现在的我对Vue的理解更加深刻，还学习了webpack、axios、Promise、接口、vue-cli等很多以及其他UI组件库的使用。</p>\n<p>这个项目还有很多不足，存在的问题有：</p>\n<ul>\n<li>重复请求api数据，点击过的页面和获取过的数据重新进入会丢失并重新发起请求</li>\n<li>新闻列表点进一条新闻之后再回到新闻列表不能还原点击之前的分类和界面</li>\n<li>新闻列表传参是显示传参，后期会优化为隐式传参</li>\n</ul>","more":"<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/appinfo.jpg' />    \n</div>\n\n<p>项目使用的相关：</p>\n<ul>\n<li>UI<ul>\n<li>Mint-UI</li>\n<li>Vant-UI</li>\n<li>Muse-UI</li>\n<li>MUI</li>\n</ul>\n</li>\n<li>技术栈<ul>\n<li>Webpack</li>\n<li>Vue.js</li>\n<li>Axios</li>\n</ul>\n</li>\n<li>接口：<ul>\n<li>聚合数据</li>\n<li>进制数据</li>\n<li>一言</li>\n</ul>\n</li>\n</ul>"},{"title":"使用Express和express-art-template来编写Node(配合nodemon)","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/express.jpg","date":"2020-05-13T02:44:18.000Z","_content":"\n<div class='post-summary notification is-warning'>\n    使用Express来开发node可以使开发变得很方便，可以抽离路由从而让每个请求处理变得很清晰，加上express-art-template模板引擎让页面渲染数据变得很简单。使用nodemon则不用去频繁的重复开启关闭服务器，nodemon会监听服务器脚本文件，一旦有变化会自动重启服务器。\n</div>\n\n<!--more-->\n\n### Express\n\n**安装：**\n\n```shell\nnpm install --save express\n```\n\n**使用express-generator来自动创建express项目**：\n\n```shell\nnpm install -g express-generator\n```\n\n**创建express项目：**\n\n```shell\nexpress myExpress  // 会创建一个名为myExpress的项目目录\n```\n\n**项目目录：**\n\n```\n.\n├── app.js    //服务器文件\n├── bin\n│   └── www\n├── package.json  // 资源包、开发依赖\n├── public       // 公共资源目录，可以自由访问，没有限制\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes    // 路由目录\n│   ├── index.js\n│   └── users.js\n└── views    // 视图目录\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n```\n\n\n\n### express-art-template\n\n**安装：**\n\n```shell\nnpm install --save art-template express-art-template\n```\n\n**配置app.js，新增一条规则：**\n\n```javascript\napp.engine('html', require('express-art-template'));\n```\n\n**使用：**\n\n```javascript\napp.get('/', function(request, response){\n    // express默认会去项目的 views 目录中找 index.html\n    response.render('index.html', {\n        title: 'Hello World'\n    })\n})\n```\n\n### nodemon\n\n**安装：**\n\n```shell\nnpm install -g nodemon\n```\n\n**使用：**\n\n```shell\nnodemon app.js // 使用 nodemon 命令来代替 node 去执行服务器文件\n```\n\nOver,enjoy......\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","source":"_posts/node-express-start.md","raw":"---\ntitle: 使用Express和express-art-template来编写Node(配合nodemon)\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/express.jpg\ndate: 2020-05-13 10:44:18\ntags: 笔记\ncategories: node\n---\n\n<div class='post-summary notification is-warning'>\n    使用Express来开发node可以使开发变得很方便，可以抽离路由从而让每个请求处理变得很清晰，加上express-art-template模板引擎让页面渲染数据变得很简单。使用nodemon则不用去频繁的重复开启关闭服务器，nodemon会监听服务器脚本文件，一旦有变化会自动重启服务器。\n</div>\n\n<!--more-->\n\n### Express\n\n**安装：**\n\n```shell\nnpm install --save express\n```\n\n**使用express-generator来自动创建express项目**：\n\n```shell\nnpm install -g express-generator\n```\n\n**创建express项目：**\n\n```shell\nexpress myExpress  // 会创建一个名为myExpress的项目目录\n```\n\n**项目目录：**\n\n```\n.\n├── app.js    //服务器文件\n├── bin\n│   └── www\n├── package.json  // 资源包、开发依赖\n├── public       // 公共资源目录，可以自由访问，没有限制\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes    // 路由目录\n│   ├── index.js\n│   └── users.js\n└── views    // 视图目录\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n```\n\n\n\n### express-art-template\n\n**安装：**\n\n```shell\nnpm install --save art-template express-art-template\n```\n\n**配置app.js，新增一条规则：**\n\n```javascript\napp.engine('html', require('express-art-template'));\n```\n\n**使用：**\n\n```javascript\napp.get('/', function(request, response){\n    // express默认会去项目的 views 目录中找 index.html\n    response.render('index.html', {\n        title: 'Hello World'\n    })\n})\n```\n\n### nodemon\n\n**安装：**\n\n```shell\nnpm install -g nodemon\n```\n\n**使用：**\n\n```shell\nnodemon app.js // 使用 nodemon 命令来代替 node 去执行服务器文件\n```\n\nOver,enjoy......\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","slug":"node-express-start","published":1,"updated":"2020-08-27T08:22:17.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfy001er0u2fto31bsi","content":"<div class='post-summary notification is-warning'>\n    使用Express来开发node可以使开发变得很方便，可以抽离路由从而让每个请求处理变得很清晰，加上express-art-template模板引擎让页面渲染数据变得很简单。使用nodemon则不用去频繁的重复开启关闭服务器，nodemon会监听服务器脚本文件，一旦有变化会自动重启服务器。\n</div>\n\n<a id=\"more\"></a>\n\n<h3 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h3><p><strong>安装：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save express</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用express-generator来自动创建express项目</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g express-generator</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建express项目：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express myExpress  // 会创建一个名为myExpress的项目目录</span><br></pre></td></tr></table></figure>\n\n<p><strong>项目目录：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── app.js    &#x2F;&#x2F;服务器文件</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">│   └── www</span><br><span class=\"line\">├── package.json  &#x2F;&#x2F; 资源包、开发依赖</span><br><span class=\"line\">├── public       &#x2F;&#x2F; 公共资源目录，可以自由访问，没有限制</span><br><span class=\"line\">│   ├── images</span><br><span class=\"line\">│   ├── javascripts</span><br><span class=\"line\">│   └── stylesheets</span><br><span class=\"line\">│       └── style.css</span><br><span class=\"line\">├── routes    &#x2F;&#x2F; 路由目录</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── users.js</span><br><span class=\"line\">└── views    &#x2F;&#x2F; 视图目录</span><br><span class=\"line\">    ├── error.pug</span><br><span class=\"line\">    ├── index.pug</span><br><span class=\"line\">    └── layout.pug</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"express-art-template\"><a href=\"#express-art-template\" class=\"headerlink\" title=\"express-art-template\"></a>express-art-template</h3><p><strong>安装：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save art-template express-art-template</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置app.js，新增一条规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'html'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'express-art-template'</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// express默认会去项目的 views 目录中找 index.html</span></span><br><span class=\"line\">    response.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nodemon\"><a href=\"#nodemon\" class=\"headerlink\" title=\"nodemon\"></a>nodemon</h3><p><strong>安装：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nodemon</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodemon app.js // 使用 nodemon 命令来代替 node 去执行服务器文件</span><br></pre></td></tr></table></figure>\n\n<p>Over,enjoy……</p>\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","site":{"data":{}},"excerpt":"<div class='post-summary notification is-warning'>\n    使用Express来开发node可以使开发变得很方便，可以抽离路由从而让每个请求处理变得很清晰，加上express-art-template模板引擎让页面渲染数据变得很简单。使用nodemon则不用去频繁的重复开启关闭服务器，nodemon会监听服务器脚本文件，一旦有变化会自动重启服务器。\n</div>","more":"<h3 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h3><p><strong>安装：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save express</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用express-generator来自动创建express项目</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g express-generator</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建express项目：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express myExpress  // 会创建一个名为myExpress的项目目录</span><br></pre></td></tr></table></figure>\n\n<p><strong>项目目录：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── app.js    &#x2F;&#x2F;服务器文件</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">│   └── www</span><br><span class=\"line\">├── package.json  &#x2F;&#x2F; 资源包、开发依赖</span><br><span class=\"line\">├── public       &#x2F;&#x2F; 公共资源目录，可以自由访问，没有限制</span><br><span class=\"line\">│   ├── images</span><br><span class=\"line\">│   ├── javascripts</span><br><span class=\"line\">│   └── stylesheets</span><br><span class=\"line\">│       └── style.css</span><br><span class=\"line\">├── routes    &#x2F;&#x2F; 路由目录</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── users.js</span><br><span class=\"line\">└── views    &#x2F;&#x2F; 视图目录</span><br><span class=\"line\">    ├── error.pug</span><br><span class=\"line\">    ├── index.pug</span><br><span class=\"line\">    └── layout.pug</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"express-art-template\"><a href=\"#express-art-template\" class=\"headerlink\" title=\"express-art-template\"></a>express-art-template</h3><p><strong>安装：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save art-template express-art-template</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置app.js，新增一条规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'html'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'express-art-template'</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// express默认会去项目的 views 目录中找 index.html</span></span><br><span class=\"line\">    response.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nodemon\"><a href=\"#nodemon\" class=\"headerlink\" title=\"nodemon\"></a>nodemon</h3><p><strong>安装：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nodemon</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodemon app.js // 使用 nodemon 命令来代替 node 去执行服务器文件</span><br></pre></td></tr></table></figure>\n\n<p>Over,enjoy……</p>\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>"},{"title":"Node小案例 简易评论系统","date":"2020-05-11T11:21:50.000Z","_content":"\n<div class='post-summary notification is-success'>\n    <p>\n       学习两天Node然后做的一个非常简易的评论系统，涉及到请求处理，请求重定向，使用art-template模板引擎渲染等。\n    </p>\n    <p>\n        涉及到的Node中的模块：\n    </p>\n    <ul>\n        <li>http</li>\n\t\t<li>url</li>\n        <li>fs</li>\n        <li>art-template（第三方）</li>\n    </ul>\n</div>\n\n\n<!--more-->\n\n### 项目演示\n\n<div class='images' align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/test.gif' alt='项目动图演示'/>\n</div>\n\n\n\n### 代码\n\n**服务器脚本文件app.js**\n\n```javascript\nvar http = require('http')\nvar fs = require('fs')\nvar template = require('art-template')\nvar url = require('url')\n\nvar comments = [\n    {\n      name: '张三',\n      message: '今天天气不错！',\n      dateTime: '2020-4-15'\n    },\n    {\n      name: '韦德',\n      message: 'This is my house!',\n      dateTime: '2013-5-9'\n    }\n]\n\nhttp\n    .createServer(function(request, response){\n        var parseObj = url.parse(request.url, true)\n        var pathname = parseObj.pathname\n        if(pathname === '/'){\n            fs.readFile('./views/index.html', function(err, data){\n                if (err) {\n                    fs.readFile('./views/404.html', function(err, data){\n                        response.end(data)\n                    })\n                }\n                else{\n                    // 模板引擎渲染\n                    var res = template.render(data.toString(), {\n                        comments: comments\n                    })\n                    response.end(res)\n                }\n            })\n        }\n        else if(pathname === '/post'){\n            fs.readFile('.' + url, function(err, data){\n                if(err){\n                    fs.readFile('./views/post.html', function(err, data){\n                        if (err) {\n                            fs.readFile('./views/404.html', function(err, data){\n                                response.end(data)\n                            })\n                        }\n                        else{\n                            response.end(data)\n                        }\n                    })\n                }\n                else{\n                    response.end(data)\n                }\n            })\n        }\n        else if(pathname === '/pinglun'){\n            // 设置请求头\n            response.setHeader('Content-Type', 'text/plain;charset=utf-8')\n            // 获取使用url模块解析过的传递的数据\n            var comment = parseObj.query\n            // 格式化时间\n            var date = new Date()\n            var year = date.getFullYear()\n            var month = date.getMonth() + 1\n            var day = date.getDay()\n            var hour = date.getHours()\n            var minutes = date.getMinutes()\n            var seconds = date.getSeconds()\n            // 将时间添加到评论的时间\n            comment.dateTime = year + '-' + month + '-' + day + ' ' + hour + ':' + minutes + ':' + seconds\n            // 将新的评论追加到评论列表\n            comments.push(comment)\n            // 设置状态码\n            response.statusCode = 302\n            // 重定向，重新请求首页地址\n            response.setHeader('Location', '/')\n            // 返回资源\n            response.end()\n            \n        }\n        else if(pathname.indexOf('/public/' === 0)){\n            fs.readFile('.' + pathname, function(err, data){\n                if(err){\n                    fs.readFile('./views/404.html', function(err, data){\n                        response.end(data)\n                    })\n                }\n                else{\n                    response.end(data)\n                }\n            })\n        \n        }else{\n            fs.readFile('./views/404.html', function(err, data){\n                response.end(data)\n            })\n        }\n    }).listen(3000, function(){\n        console.log('Server is running......')\n    })\n```\n\n**首页评论index.html**\n\n```html\n<body>\n  <div class=\"header container\">\n    <div class=\"page-header\">\n      <h1>留言板<small>test</small></h1>\n      <a class=\"btn btn-primary\" href=\"/post\">发表留言</a>\n    </div>\n  </div>\n  <div class=\"comments container\">\n    <ul class=\"list-group\">\n      {{each comments}}\n      <li class=\"list-group-item\">{{ $value.name }}说：{{ $value.message }} <span class=\"pull-right\">{{ $value.dateTime }}</span></li>\n      {{/each}}\n    </ul>\n  </div>\n</body>\n```\n\n**发表评论post.html**\n\n```html\n<div class=\"header container\">\n    <div class=\"page-header\">\n      <h1><a href=\"/\">首页</a> <small>发表评论</small></h1>\n    </div>\n  </div>\n  <div class=\"comments container\">\n    <form action=\"/pinglun\" method=\"get\">\n      <div class=\"form-group\">\n        <label for=\"input_name\">你的大名</label>\n        <input type=\"text\" class=\"form-control\" required minlength=\"2\" maxlength=\"10\" id=\"input_name\" name=\"name\" placeholder=\"请写入你的姓名\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"textarea_message\">留言内容</label>\n        <textarea class=\"form-control\" name=\"message\" id=\"textarea_message\" cols=\"30\" rows=\"10\" required minlength=\"5\" maxlength=\"20\"></textarea>\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary\">发表</button>\n    </form>\n  </div>\n```\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n\n\n\n","source":"_posts/node-first_demo.md","raw":"---\ntitle: Node小案例 简易评论系统\ndate: 2020-05-11 19:21:50\ntags: 项目\ncategories: node\n---\n\n<div class='post-summary notification is-success'>\n    <p>\n       学习两天Node然后做的一个非常简易的评论系统，涉及到请求处理，请求重定向，使用art-template模板引擎渲染等。\n    </p>\n    <p>\n        涉及到的Node中的模块：\n    </p>\n    <ul>\n        <li>http</li>\n\t\t<li>url</li>\n        <li>fs</li>\n        <li>art-template（第三方）</li>\n    </ul>\n</div>\n\n\n<!--more-->\n\n### 项目演示\n\n<div class='images' align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/test.gif' alt='项目动图演示'/>\n</div>\n\n\n\n### 代码\n\n**服务器脚本文件app.js**\n\n```javascript\nvar http = require('http')\nvar fs = require('fs')\nvar template = require('art-template')\nvar url = require('url')\n\nvar comments = [\n    {\n      name: '张三',\n      message: '今天天气不错！',\n      dateTime: '2020-4-15'\n    },\n    {\n      name: '韦德',\n      message: 'This is my house!',\n      dateTime: '2013-5-9'\n    }\n]\n\nhttp\n    .createServer(function(request, response){\n        var parseObj = url.parse(request.url, true)\n        var pathname = parseObj.pathname\n        if(pathname === '/'){\n            fs.readFile('./views/index.html', function(err, data){\n                if (err) {\n                    fs.readFile('./views/404.html', function(err, data){\n                        response.end(data)\n                    })\n                }\n                else{\n                    // 模板引擎渲染\n                    var res = template.render(data.toString(), {\n                        comments: comments\n                    })\n                    response.end(res)\n                }\n            })\n        }\n        else if(pathname === '/post'){\n            fs.readFile('.' + url, function(err, data){\n                if(err){\n                    fs.readFile('./views/post.html', function(err, data){\n                        if (err) {\n                            fs.readFile('./views/404.html', function(err, data){\n                                response.end(data)\n                            })\n                        }\n                        else{\n                            response.end(data)\n                        }\n                    })\n                }\n                else{\n                    response.end(data)\n                }\n            })\n        }\n        else if(pathname === '/pinglun'){\n            // 设置请求头\n            response.setHeader('Content-Type', 'text/plain;charset=utf-8')\n            // 获取使用url模块解析过的传递的数据\n            var comment = parseObj.query\n            // 格式化时间\n            var date = new Date()\n            var year = date.getFullYear()\n            var month = date.getMonth() + 1\n            var day = date.getDay()\n            var hour = date.getHours()\n            var minutes = date.getMinutes()\n            var seconds = date.getSeconds()\n            // 将时间添加到评论的时间\n            comment.dateTime = year + '-' + month + '-' + day + ' ' + hour + ':' + minutes + ':' + seconds\n            // 将新的评论追加到评论列表\n            comments.push(comment)\n            // 设置状态码\n            response.statusCode = 302\n            // 重定向，重新请求首页地址\n            response.setHeader('Location', '/')\n            // 返回资源\n            response.end()\n            \n        }\n        else if(pathname.indexOf('/public/' === 0)){\n            fs.readFile('.' + pathname, function(err, data){\n                if(err){\n                    fs.readFile('./views/404.html', function(err, data){\n                        response.end(data)\n                    })\n                }\n                else{\n                    response.end(data)\n                }\n            })\n        \n        }else{\n            fs.readFile('./views/404.html', function(err, data){\n                response.end(data)\n            })\n        }\n    }).listen(3000, function(){\n        console.log('Server is running......')\n    })\n```\n\n**首页评论index.html**\n\n```html\n<body>\n  <div class=\"header container\">\n    <div class=\"page-header\">\n      <h1>留言板<small>test</small></h1>\n      <a class=\"btn btn-primary\" href=\"/post\">发表留言</a>\n    </div>\n  </div>\n  <div class=\"comments container\">\n    <ul class=\"list-group\">\n      {{each comments}}\n      <li class=\"list-group-item\">{{ $value.name }}说：{{ $value.message }} <span class=\"pull-right\">{{ $value.dateTime }}</span></li>\n      {{/each}}\n    </ul>\n  </div>\n</body>\n```\n\n**发表评论post.html**\n\n```html\n<div class=\"header container\">\n    <div class=\"page-header\">\n      <h1><a href=\"/\">首页</a> <small>发表评论</small></h1>\n    </div>\n  </div>\n  <div class=\"comments container\">\n    <form action=\"/pinglun\" method=\"get\">\n      <div class=\"form-group\">\n        <label for=\"input_name\">你的大名</label>\n        <input type=\"text\" class=\"form-control\" required minlength=\"2\" maxlength=\"10\" id=\"input_name\" name=\"name\" placeholder=\"请写入你的姓名\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"textarea_message\">留言内容</label>\n        <textarea class=\"form-control\" name=\"message\" id=\"textarea_message\" cols=\"30\" rows=\"10\" required minlength=\"5\" maxlength=\"20\"></textarea>\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary\">发表</button>\n    </form>\n  </div>\n```\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n\n\n\n","slug":"node-first_demo","published":1,"updated":"2020-08-27T08:22:17.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrfy001gr0u21gva0k61","content":"<div class='post-summary notification is-success'>\n    <p>\n       学习两天Node然后做的一个非常简易的评论系统，涉及到请求处理，请求重定向，使用art-template模板引擎渲染等。\n    </p>\n    <p>\n        涉及到的Node中的模块：\n    </p>\n    <ul>\n        <li>http</li>\n        <li>url</li>\n        <li>fs</li>\n        <li>art-template（第三方）</li>\n    </ul>\n</div>\n\n\n<a id=\"more\"></a>\n\n<h3 id=\"项目演示\"><a href=\"#项目演示\" class=\"headerlink\" title=\"项目演示\"></a>项目演示</h3><div class='images' align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/test.gif' alt='项目动图演示'/>\n</div>\n\n\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><strong>服务器脚本文件app.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">'art-template'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> comments = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'张三'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'今天天气不错！'</span>,</span><br><span class=\"line\">      dateTime: <span class=\"string\">'2020-4-15'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'韦德'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'This is my house!'</span>,</span><br><span class=\"line\">      dateTime: <span class=\"string\">'2013-5-9'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">    .createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> parseObj = url.parse(request.url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pathname = parseObj.pathname</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pathname === <span class=\"string\">'/'</span>)&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">'./views/index.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                    fs.readFile(<span class=\"string\">'./views/404.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                        response.end(data)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 模板引擎渲染</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> res = template.render(data.toString(), &#123;</span><br><span class=\"line\">                        comments: comments</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    response.end(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname === <span class=\"string\">'/post'</span>)&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">'.'</span> + url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                    fs.readFile(<span class=\"string\">'./views/post.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                            fs.readFile(<span class=\"string\">'./views/404.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                                response.end(data)</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            response.end(data)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    response.end(data)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname === <span class=\"string\">'/pinglun'</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置请求头</span></span><br><span class=\"line\">            response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain;charset=utf-8'</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 获取使用url模块解析过的传递的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> comment = parseObj.query</span><br><span class=\"line\">            <span class=\"comment\">// 格式化时间</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> year = date.getFullYear()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> month = date.getMonth() + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> day = date.getDay()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hour = date.getHours()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> minutes = date.getMinutes()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> seconds = date.getSeconds()</span><br><span class=\"line\">            <span class=\"comment\">// 将时间添加到评论的时间</span></span><br><span class=\"line\">            comment.dateTime = year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + day + <span class=\"string\">' '</span> + hour + <span class=\"string\">':'</span> + minutes + <span class=\"string\">':'</span> + seconds</span><br><span class=\"line\">            <span class=\"comment\">// 将新的评论追加到评论列表</span></span><br><span class=\"line\">            comments.push(comment)</span><br><span class=\"line\">            <span class=\"comment\">// 设置状态码</span></span><br><span class=\"line\">            response.statusCode = <span class=\"number\">302</span></span><br><span class=\"line\">            <span class=\"comment\">// 重定向，重新请求首页地址</span></span><br><span class=\"line\">            response.setHeader(<span class=\"string\">'Location'</span>, <span class=\"string\">'/'</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 返回资源</span></span><br><span class=\"line\">            response.end()</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname.indexOf(<span class=\"string\">'/public/'</span> === <span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">'.'</span> + pathname, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                    fs.readFile(<span class=\"string\">'./views/404.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                        response.end(data)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    response.end(data)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">'./views/404.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                response.end(data)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running......'</span>)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>首页评论index.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>留言板<span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/post\"</span>&gt;</span>发表留言<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comments container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;each comments&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>&#123;&#123; $value.name &#125;&#125;说：&#123;&#123; $value.message &#125;&#125; <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pull-right\"</span>&gt;</span>&#123;&#123; $value.dateTime &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;/each&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>发表评论post.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>发表评论<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comments container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/pinglun\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"input_name\"</span>&gt;</span>你的大名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">required</span> <span class=\"attr\">minlength</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input_name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请写入你的姓名\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"textarea_message\"</span>&gt;</span>留言内容<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"textarea_message\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">required</span> <span class=\"attr\">minlength</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"20\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>发表<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n\n\n\n","site":{"data":{}},"excerpt":"<div class='post-summary notification is-success'>\n    <p>\n       学习两天Node然后做的一个非常简易的评论系统，涉及到请求处理，请求重定向，使用art-template模板引擎渲染等。\n    </p>\n    <p>\n        涉及到的Node中的模块：\n    </p>\n    <ul>\n        <li>http</li>\n        <li>url</li>\n        <li>fs</li>\n        <li>art-template（第三方）</li>\n    </ul>\n</div>","more":"<h3 id=\"项目演示\"><a href=\"#项目演示\" class=\"headerlink\" title=\"项目演示\"></a>项目演示</h3><div class='images' align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/test.gif' alt='项目动图演示'/>\n</div>\n\n\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><strong>服务器脚本文件app.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">'art-template'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> comments = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'张三'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'今天天气不错！'</span>,</span><br><span class=\"line\">      dateTime: <span class=\"string\">'2020-4-15'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'韦德'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'This is my house!'</span>,</span><br><span class=\"line\">      dateTime: <span class=\"string\">'2013-5-9'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">    .createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> parseObj = url.parse(request.url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pathname = parseObj.pathname</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pathname === <span class=\"string\">'/'</span>)&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">'./views/index.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                    fs.readFile(<span class=\"string\">'./views/404.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                        response.end(data)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 模板引擎渲染</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> res = template.render(data.toString(), &#123;</span><br><span class=\"line\">                        comments: comments</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    response.end(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname === <span class=\"string\">'/post'</span>)&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">'.'</span> + url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                    fs.readFile(<span class=\"string\">'./views/post.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                            fs.readFile(<span class=\"string\">'./views/404.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                                response.end(data)</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            response.end(data)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    response.end(data)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname === <span class=\"string\">'/pinglun'</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置请求头</span></span><br><span class=\"line\">            response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain;charset=utf-8'</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 获取使用url模块解析过的传递的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> comment = parseObj.query</span><br><span class=\"line\">            <span class=\"comment\">// 格式化时间</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> year = date.getFullYear()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> month = date.getMonth() + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> day = date.getDay()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hour = date.getHours()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> minutes = date.getMinutes()</span><br><span class=\"line\">            <span class=\"keyword\">var</span> seconds = date.getSeconds()</span><br><span class=\"line\">            <span class=\"comment\">// 将时间添加到评论的时间</span></span><br><span class=\"line\">            comment.dateTime = year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + day + <span class=\"string\">' '</span> + hour + <span class=\"string\">':'</span> + minutes + <span class=\"string\">':'</span> + seconds</span><br><span class=\"line\">            <span class=\"comment\">// 将新的评论追加到评论列表</span></span><br><span class=\"line\">            comments.push(comment)</span><br><span class=\"line\">            <span class=\"comment\">// 设置状态码</span></span><br><span class=\"line\">            response.statusCode = <span class=\"number\">302</span></span><br><span class=\"line\">            <span class=\"comment\">// 重定向，重新请求首页地址</span></span><br><span class=\"line\">            response.setHeader(<span class=\"string\">'Location'</span>, <span class=\"string\">'/'</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 返回资源</span></span><br><span class=\"line\">            response.end()</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname.indexOf(<span class=\"string\">'/public/'</span> === <span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">'.'</span> + pathname, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                    fs.readFile(<span class=\"string\">'./views/404.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                        response.end(data)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    response.end(data)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">'./views/404.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">                response.end(data)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running......'</span>)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>首页评论index.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>留言板<span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/post\"</span>&gt;</span>发表留言<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comments container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;each comments&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>&#123;&#123; $value.name &#125;&#125;说：&#123;&#123; $value.message &#125;&#125; <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pull-right\"</span>&gt;</span>&#123;&#123; $value.dateTime &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;/each&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>发表评论post.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>发表评论<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comments container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/pinglun\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"input_name\"</span>&gt;</span>你的大名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">required</span> <span class=\"attr\">minlength</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input_name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请写入你的姓名\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"textarea_message\"</span>&gt;</span>留言内容<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"textarea_message\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">required</span> <span class=\"attr\">minlength</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"20\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>发表<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>"},{"title":"【新坑】学习node.js","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/node.jpg","date":"2020-05-09T10:03:54.000Z","_content":"\n<div class='notification is-danger post-summary'>\n    <p>\n        学习了vue之后想做一个类似于后台管理系统这样的项目，网上搜索了一圈，需要用到node的express来开发，正好应该学一学后端。\n    </p>\n</div>\n\n<!--more-->\n\n### 介绍\n\n**根据官网介绍来看：**\n\n- 简单的说 Node.js 就是运行在服务端的 JavaScript。\n- Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。\n- Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。\n\n### 文件操作\n\n**先引入node中的fs文件模块:**\n\n```javascript\nvar fs = require('fs')\n```\n\n#### 读文件\n\n```javascript\nfs.readFile('test_read.txt', function(err, data){\n    if(err)\n        console.log(\"读取失败，错误为：\" + err)\n    console.log(\"读取成功，内容：\" + data.toString())\n});\n```\n\n#### 写文件\n\n```javascript\nfs.writeFile('test_write.txt', function(err){\n    if(err)\n        console.log(\"写入失败，错误为：\" + err)\n    console.log(\"写入成功\")\n});\n```\n\n### 创建一个本地服务器\n\n**引入node中的http模块**\n\n```javascript\nvar http = require('http')\n```\n\n#### 创建服务\n\n```javascript\nvar server = http.createServer()\n```\n\n#### 开启服务\n\n```javascript\nserver.on('request', function(request, response){ // 回调函数里有两个参数，第一个为请求，第二个是响应\n    console.log(\"服务器开启成功，输入http://localhost:3000即可访问\")\n    console.log(\"请求的路径是：\" + request.url)\n    console.log()\n})\n\n\n\n```\n\n#### 使用自定义端口\n\n```javascript\nserver.listhen(3000， function(){\n    console.log(\"服务启动成功，可以访问\")\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","source":"_posts/node-start.md","raw":"---\ntitle: 【新坑】学习node.js\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/node.jpg\ndate: 2020-05-09 18:03:54\ntags: node\ncategories: node\n---\n\n<div class='notification is-danger post-summary'>\n    <p>\n        学习了vue之后想做一个类似于后台管理系统这样的项目，网上搜索了一圈，需要用到node的express来开发，正好应该学一学后端。\n    </p>\n</div>\n\n<!--more-->\n\n### 介绍\n\n**根据官网介绍来看：**\n\n- 简单的说 Node.js 就是运行在服务端的 JavaScript。\n- Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。\n- Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。\n\n### 文件操作\n\n**先引入node中的fs文件模块:**\n\n```javascript\nvar fs = require('fs')\n```\n\n#### 读文件\n\n```javascript\nfs.readFile('test_read.txt', function(err, data){\n    if(err)\n        console.log(\"读取失败，错误为：\" + err)\n    console.log(\"读取成功，内容：\" + data.toString())\n});\n```\n\n#### 写文件\n\n```javascript\nfs.writeFile('test_write.txt', function(err){\n    if(err)\n        console.log(\"写入失败，错误为：\" + err)\n    console.log(\"写入成功\")\n});\n```\n\n### 创建一个本地服务器\n\n**引入node中的http模块**\n\n```javascript\nvar http = require('http')\n```\n\n#### 创建服务\n\n```javascript\nvar server = http.createServer()\n```\n\n#### 开启服务\n\n```javascript\nserver.on('request', function(request, response){ // 回调函数里有两个参数，第一个为请求，第二个是响应\n    console.log(\"服务器开启成功，输入http://localhost:3000即可访问\")\n    console.log(\"请求的路径是：\" + request.url)\n    console.log()\n})\n\n\n\n```\n\n#### 使用自定义端口\n\n```javascript\nserver.listhen(3000， function(){\n    console.log(\"服务启动成功，可以访问\")\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","slug":"node-start","published":1,"updated":"2020-08-27T08:22:17.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg0001lr0u2acq0ayfu","content":"<div class='notification is-danger post-summary'>\n    <p>\n        学习了vue之后想做一个类似于后台管理系统这样的项目，网上搜索了一圈，需要用到node的express来开发，正好应该学一学后端。\n    </p>\n</div>\n\n<a id=\"more\"></a>\n\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>根据官网介绍来看：</strong></p>\n<ul>\n<li>简单的说 Node.js 就是运行在服务端的 JavaScript。</li>\n<li>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</li>\n<li>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</li>\n</ul>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><p><strong>先引入node中的fs文件模块:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'test_read.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"读取失败，错误为：\"</span> + err)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"读取成功，内容：\"</span> + data.toString())</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.writeFile(<span class=\"string\">'test_write.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入失败，错误为：\"</span> + err)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入成功\"</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建一个本地服务器\"><a href=\"#创建一个本地服务器\" class=\"headerlink\" title=\"创建一个本地服务器\"></a>创建一个本地服务器</h3><p><strong>引入node中的http模块</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开启服务\"><a href=\"#开启服务\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)</span>&#123; <span class=\"comment\">// 回调函数里有两个参数，第一个为请求，第二个是响应</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器开启成功，输入http://localhost:3000即可访问\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"请求的路径是：\"</span> + request.url)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用自定义端口\"><a href=\"#使用自定义端口\" class=\"headerlink\" title=\"使用自定义端口\"></a>使用自定义端口</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.listhen(<span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务启动成功，可以访问\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","site":{"data":{}},"excerpt":"<div class='notification is-danger post-summary'>\n    <p>\n        学习了vue之后想做一个类似于后台管理系统这样的项目，网上搜索了一圈，需要用到node的express来开发，正好应该学一学后端。\n    </p>\n</div>","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>根据官网介绍来看：</strong></p>\n<ul>\n<li>简单的说 Node.js 就是运行在服务端的 JavaScript。</li>\n<li>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</li>\n<li>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</li>\n</ul>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><p><strong>先引入node中的fs文件模块:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'test_read.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"读取失败，错误为：\"</span> + err)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"读取成功，内容：\"</span> + data.toString())</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.writeFile(<span class=\"string\">'test_write.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入失败，错误为：\"</span> + err)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入成功\"</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建一个本地服务器\"><a href=\"#创建一个本地服务器\" class=\"headerlink\" title=\"创建一个本地服务器\"></a>创建一个本地服务器</h3><p><strong>引入node中的http模块</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开启服务\"><a href=\"#开启服务\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)</span>&#123; <span class=\"comment\">// 回调函数里有两个参数，第一个为请求，第二个是响应</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器开启成功，输入http://localhost:3000即可访问\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"请求的路径是：\"</span> + request.url)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用自定义端口\"><a href=\"#使用自定义端口\" class=\"headerlink\" title=\"使用自定义端口\"></a>使用自定义端口</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.listhen(<span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务启动成功，可以访问\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>"},{"title":"Node 学生管理系统（Express + 读写JSON文件）","date":"2020-05-20T13:02:29.000Z","_content":"\n<div class='notification is-primary post-summary'>\n    <p>基于上一个node极简评论系统做的一个具有增删改的小型学生管理系统,这次使用到了Express，使用js的模块化编程将路由和增删改操作分别抽离成模块再使用。</p>\n</div>\n<ul class='post-summary'>\n        <li>这次使用到的知识点有：</li>\n        <li>express</li>\n        <li>body-parser</li>\n        <li>art-template</li>\n</ul>\n\n总结：这个demo里面涉及到了回调函数，其实在之前的vue项目中使用axios请求服务器数据，处理服务器返回的数据也是回调函数，当时只是知道是回调函数，不知道或者不理解到底是什么；这个项目多次使用到了封装的回调函数，让自己对这个有了初步的理解；这个项目中也有针对增、删、改的操作而封装的模块，也让自己对模块有了更深的理解。\n\n还存在的问题：虽然封装了增、删、改的操作，减少了代码的重复率，但是封装不彻底，仍有部分代码是重复的，后续熟练使用回调函数的时候再进行进一步优化。\n\n<!--more-->\n\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/crud.gif' alt='效果图'/>\n    <br>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/trees.jpg' alt='项目结构'/>\n</div>\n\n\n### 路由模块 router.js\n\n```javascript\nconst express = require('express')\nconst router = express()\nconst fs = require('fs')\nconst Action = require('./action')\n\nrouter.get('/students', (req, res) => {\n    fs.readFile('./students.json', (err, data) => {\n        let students = JSON.parse(data).students\n        if(err)\n            return this.response.status(500).send('oops! Something Crashed!!!')\n        \n        res.render('index.html', {\n            students: students\n        })\n    })\n})\n\nrouter.get('/students/new', (req, res) => {\n    res.render('add_student.html')\n})\n    \nrouter.post('/students/new', (req, res) => {\n    // 使用 body-parser 获取的请求数据给student\n    let student = req.body\n    // 使用封装的保存学生的 save 方法，两个参数，一个是学生实参，一个为错误，错误用用回调函数处理\n    Action.save(student, (err) => {\n        if(err)\n            res.status(500).send('Error')\n        // 重定向到首页\n        res.redirect('/students')\n    })\n})\n\nrouter.get('/students/edit', (req, res) => {\n    let reqId = parseInt(req.query.id)\n    Action.findById(reqId, (err, student) => {\n        if(err)\n            return res.status(500).send('Oops! Something Error')\n        res.render('edit_student.html', {\n            student: student\n        })\n    })\n})\n\nrouter.post('/students/edit', (req, res) => {\n    let student = req.body\n    Action.editById(student, (err) => {\n        if(err)\n            return res.status(500).send('Oops! Something Error')\n        res.redirect('/students')\n    })\n})\n\nrouter.get('/students/delete', (req, res) => {\n    let id = parseInt(req.query.id)\n    Action.deleteById(id, (err) => {\n        if(err)\n            return res.status(500).send('Oops! Something Error')\n        res.redirect('/students')\n    })\n})\nmodule.exports = router\n```\n\n### 读写文件模块 action.js\n\n```javascript\nconst fs = require('fs')\nconst db_url = './students.json'\n\n/**\n * 保存添加学生数据到json文件里\n * 封装save方法，使用回调函数处理错误\n * 两个参数 student为传入的新增学生对象\n * callback为回调函数，处理错误\n */\nexports.save = (student,callback) => {\n    // 读取文件内容\n    fs.readFile(db_url, 'utf8', (err, data) => {\n        // 如果有错误，使用回调函数处理     \n        if(err)\n            return callback(err)\n        // 没有错误就把获取的数据转换成字符串并赋值给students\n        let students = JSON.parse(data).students\n        if(students.length === 0){\n            student.id = 1\n            students.push(student)\n            let newStudents = JSON.stringify({\n                students: students\n            })\n            // 写入文件，如果有错，就是用回调函数处理\n            fs.writeFile(db_url, newStudents, (err) => {\n                // 如果有错误，使用回调函数处理\n                if(err)\n                    return callback(err)\n                // 没有错误，使回调函数参数为空\n                callback(null)\n            })\n            return\n        }\n        // 添加 id \n        student.id = students[students.length - 1].id + 1\n        // 将新增的学生添加到从文件获取的数据中\n        students.push(student)\n        // 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents\n        let newStudents = JSON.stringify({\n            students: students\n        })\n        // 写入文件，如果有错，就是用回调函数处理\n        fs.writeFile(db_url, newStudents, (err) => {\n            // 如果有错误，使用回调函数处理\n            if(err)\n                return callback(err)\n            // 没有错误，使回调函数参数为空\n            callback(null)\n        })\n    })\n}\n\n/**\n * 保存编辑学生方法\n * 使用 学生id 为关键字进行编辑\n */\n\nexports.editById = (student, callback) => {\n    fs.readFile('./students.json', (err, data) => {\n        if(err) \n            return callback(err)\n        let students = JSON.parse(data).students\n\n        student.id = parseInt(student.id)\n\n        let stu = students.find((item) => {\n            return item.id === student.id\n        })\n        \n        for(let key in student){\n            stu[key] = student[key]\n        }\n        // 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents\n        let newStudents = JSON.stringify({\n            students: students\n        })\n        // 写入文件，如果有错，就是用回调函数处理\n        fs.writeFile(db_url, newStudents, (err) => {\n            // 如果有错误，使用回调函数处理\n            if(err)\n                return callback(err)\n            // 没有错误，使回调函数参数为空\n            callback(null)\n        })\n    })\n}\n/**\n * 根据 id 查询学生信息\n */\nexports.findById = (id, callback) => {\n    fs.readFile('./students.json', (err, data) => {\n        if(err)\n            return console.log('编辑失败');\n        let students = JSON.parse(data).students\n        let student = students.find((item) => {\n            return item.id === parseInt(id)\n        })\n        callback(null, student)\n    })\n}\n\n/**\n * 根据 id 删除\n */\n\nexports.deleteById = (id, callback) => {\n    fs.readFile('./students.json', (err, data) => {\n        if(err) \n            return callback(err)\n        let students = JSON.parse(data).students\n\n        let index = students.findIndex((item) => {\n            return item.id === id\n        })\n        \n        students.splice(index, 1)\n\n        // 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents\n        let newStudents = JSON.stringify({\n            students: students\n        })\n        // 写入文件，如果有错，就是用回调函数处理\n        fs.writeFile(db_url, newStudents, (err) => {\n            // 如果有错误，使用回调函数处理\n            if(err)\n                return callback(err)\n            // 没有错误，使回调函数参数为空\n            callback(null)\n        })\n    })\n}\n```\n\n\n\n\n<style>\n    .post-summary{\n        display:none;\n    }\n</style>\n\n","source":"_posts/node-studentOS-file.md","raw":"---\ntitle: Node 学生管理系统（Express + 读写JSON文件）\ndate: 2020-05-20 21:02:29\ntags: node\ncategories: node\n---\n\n<div class='notification is-primary post-summary'>\n    <p>基于上一个node极简评论系统做的一个具有增删改的小型学生管理系统,这次使用到了Express，使用js的模块化编程将路由和增删改操作分别抽离成模块再使用。</p>\n</div>\n<ul class='post-summary'>\n        <li>这次使用到的知识点有：</li>\n        <li>express</li>\n        <li>body-parser</li>\n        <li>art-template</li>\n</ul>\n\n总结：这个demo里面涉及到了回调函数，其实在之前的vue项目中使用axios请求服务器数据，处理服务器返回的数据也是回调函数，当时只是知道是回调函数，不知道或者不理解到底是什么；这个项目多次使用到了封装的回调函数，让自己对这个有了初步的理解；这个项目中也有针对增、删、改的操作而封装的模块，也让自己对模块有了更深的理解。\n\n还存在的问题：虽然封装了增、删、改的操作，减少了代码的重复率，但是封装不彻底，仍有部分代码是重复的，后续熟练使用回调函数的时候再进行进一步优化。\n\n<!--more-->\n\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/crud.gif' alt='效果图'/>\n    <br>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/trees.jpg' alt='项目结构'/>\n</div>\n\n\n### 路由模块 router.js\n\n```javascript\nconst express = require('express')\nconst router = express()\nconst fs = require('fs')\nconst Action = require('./action')\n\nrouter.get('/students', (req, res) => {\n    fs.readFile('./students.json', (err, data) => {\n        let students = JSON.parse(data).students\n        if(err)\n            return this.response.status(500).send('oops! Something Crashed!!!')\n        \n        res.render('index.html', {\n            students: students\n        })\n    })\n})\n\nrouter.get('/students/new', (req, res) => {\n    res.render('add_student.html')\n})\n    \nrouter.post('/students/new', (req, res) => {\n    // 使用 body-parser 获取的请求数据给student\n    let student = req.body\n    // 使用封装的保存学生的 save 方法，两个参数，一个是学生实参，一个为错误，错误用用回调函数处理\n    Action.save(student, (err) => {\n        if(err)\n            res.status(500).send('Error')\n        // 重定向到首页\n        res.redirect('/students')\n    })\n})\n\nrouter.get('/students/edit', (req, res) => {\n    let reqId = parseInt(req.query.id)\n    Action.findById(reqId, (err, student) => {\n        if(err)\n            return res.status(500).send('Oops! Something Error')\n        res.render('edit_student.html', {\n            student: student\n        })\n    })\n})\n\nrouter.post('/students/edit', (req, res) => {\n    let student = req.body\n    Action.editById(student, (err) => {\n        if(err)\n            return res.status(500).send('Oops! Something Error')\n        res.redirect('/students')\n    })\n})\n\nrouter.get('/students/delete', (req, res) => {\n    let id = parseInt(req.query.id)\n    Action.deleteById(id, (err) => {\n        if(err)\n            return res.status(500).send('Oops! Something Error')\n        res.redirect('/students')\n    })\n})\nmodule.exports = router\n```\n\n### 读写文件模块 action.js\n\n```javascript\nconst fs = require('fs')\nconst db_url = './students.json'\n\n/**\n * 保存添加学生数据到json文件里\n * 封装save方法，使用回调函数处理错误\n * 两个参数 student为传入的新增学生对象\n * callback为回调函数，处理错误\n */\nexports.save = (student,callback) => {\n    // 读取文件内容\n    fs.readFile(db_url, 'utf8', (err, data) => {\n        // 如果有错误，使用回调函数处理     \n        if(err)\n            return callback(err)\n        // 没有错误就把获取的数据转换成字符串并赋值给students\n        let students = JSON.parse(data).students\n        if(students.length === 0){\n            student.id = 1\n            students.push(student)\n            let newStudents = JSON.stringify({\n                students: students\n            })\n            // 写入文件，如果有错，就是用回调函数处理\n            fs.writeFile(db_url, newStudents, (err) => {\n                // 如果有错误，使用回调函数处理\n                if(err)\n                    return callback(err)\n                // 没有错误，使回调函数参数为空\n                callback(null)\n            })\n            return\n        }\n        // 添加 id \n        student.id = students[students.length - 1].id + 1\n        // 将新增的学生添加到从文件获取的数据中\n        students.push(student)\n        // 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents\n        let newStudents = JSON.stringify({\n            students: students\n        })\n        // 写入文件，如果有错，就是用回调函数处理\n        fs.writeFile(db_url, newStudents, (err) => {\n            // 如果有错误，使用回调函数处理\n            if(err)\n                return callback(err)\n            // 没有错误，使回调函数参数为空\n            callback(null)\n        })\n    })\n}\n\n/**\n * 保存编辑学生方法\n * 使用 学生id 为关键字进行编辑\n */\n\nexports.editById = (student, callback) => {\n    fs.readFile('./students.json', (err, data) => {\n        if(err) \n            return callback(err)\n        let students = JSON.parse(data).students\n\n        student.id = parseInt(student.id)\n\n        let stu = students.find((item) => {\n            return item.id === student.id\n        })\n        \n        for(let key in student){\n            stu[key] = student[key]\n        }\n        // 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents\n        let newStudents = JSON.stringify({\n            students: students\n        })\n        // 写入文件，如果有错，就是用回调函数处理\n        fs.writeFile(db_url, newStudents, (err) => {\n            // 如果有错误，使用回调函数处理\n            if(err)\n                return callback(err)\n            // 没有错误，使回调函数参数为空\n            callback(null)\n        })\n    })\n}\n/**\n * 根据 id 查询学生信息\n */\nexports.findById = (id, callback) => {\n    fs.readFile('./students.json', (err, data) => {\n        if(err)\n            return console.log('编辑失败');\n        let students = JSON.parse(data).students\n        let student = students.find((item) => {\n            return item.id === parseInt(id)\n        })\n        callback(null, student)\n    })\n}\n\n/**\n * 根据 id 删除\n */\n\nexports.deleteById = (id, callback) => {\n    fs.readFile('./students.json', (err, data) => {\n        if(err) \n            return callback(err)\n        let students = JSON.parse(data).students\n\n        let index = students.findIndex((item) => {\n            return item.id === id\n        })\n        \n        students.splice(index, 1)\n\n        // 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents\n        let newStudents = JSON.stringify({\n            students: students\n        })\n        // 写入文件，如果有错，就是用回调函数处理\n        fs.writeFile(db_url, newStudents, (err) => {\n            // 如果有错误，使用回调函数处理\n            if(err)\n                return callback(err)\n            // 没有错误，使回调函数参数为空\n            callback(null)\n        })\n    })\n}\n```\n\n\n\n\n<style>\n    .post-summary{\n        display:none;\n    }\n</style>\n\n","slug":"node-studentOS-file","published":1,"updated":"2020-08-27T08:22:17.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg1001nr0u21zdcar9x","content":"<div class='notification is-primary post-summary'>\n    <p>基于上一个node极简评论系统做的一个具有增删改的小型学生管理系统,这次使用到了Express，使用js的模块化编程将路由和增删改操作分别抽离成模块再使用。</p>\n</div>\n<ul class='post-summary'>\n        <li>这次使用到的知识点有：</li>\n        <li>express</li>\n        <li>body-parser</li>\n        <li>art-template</li>\n</ul>\n\n<p>总结：这个demo里面涉及到了回调函数，其实在之前的vue项目中使用axios请求服务器数据，处理服务器返回的数据也是回调函数，当时只是知道是回调函数，不知道或者不理解到底是什么；这个项目多次使用到了封装的回调函数，让自己对这个有了初步的理解；这个项目中也有针对增、删、改的操作而封装的模块，也让自己对模块有了更深的理解。</p>\n<p>还存在的问题：虽然封装了增、删、改的操作，减少了代码的重复率，但是封装不彻底，仍有部分代码是重复的，后续熟练使用回调函数的时候再进行进一步优化。</p>\n<a id=\"more\"></a>\n\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/crud.gif' alt='效果图'/>\n    <br>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/trees.jpg' alt='项目结构'/>\n</div>\n\n\n<h3 id=\"路由模块-router-js\"><a href=\"#路由模块-router-js\" class=\"headerlink\" title=\"路由模块 router.js\"></a>路由模块 router.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Action = <span class=\"built_in\">require</span>(<span class=\"string\">'./action'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./students.json'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.response.status(<span class=\"number\">500</span>).send(<span class=\"string\">'oops! Something Crashed!!!'</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        res.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/new'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">'add_student.html'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">router.post(<span class=\"string\">'/students/new'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 body-parser 获取的请求数据给student</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = req.body</span><br><span class=\"line\">    <span class=\"comment\">// 使用封装的保存学生的 save 方法，两个参数，一个是学生实参，一个为错误，错误用用回调函数处理</span></span><br><span class=\"line\">    Action.save(student, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Error'</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 重定向到首页</span></span><br><span class=\"line\">        res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/edit'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reqId = <span class=\"built_in\">parseInt</span>(req.query.id)</span><br><span class=\"line\">    Action.findById(reqId, (err, student) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Oops! Something Error'</span>)</span><br><span class=\"line\">        res.render(<span class=\"string\">'edit_student.html'</span>, &#123;</span><br><span class=\"line\">            student: student</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/students/edit'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = req.body</span><br><span class=\"line\">    Action.editById(student, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Oops! Something Error'</span>)</span><br><span class=\"line\">        res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/delete'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = <span class=\"built_in\">parseInt</span>(req.query.id)</span><br><span class=\"line\">    Action.deleteById(id, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Oops! Something Error'</span>)</span><br><span class=\"line\">        res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读写文件模块-action-js\"><a href=\"#读写文件模块-action-js\" class=\"headerlink\" title=\"读写文件模块 action.js\"></a>读写文件模块 action.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> db_url = <span class=\"string\">'./students.json'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存添加学生数据到json文件里</span></span><br><span class=\"line\"><span class=\"comment\"> * 封装save方法，使用回调函数处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> * 两个参数 student为传入的新增学生对象</span></span><br><span class=\"line\"><span class=\"comment\"> * callback为回调函数，处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.save = <span class=\"function\">(<span class=\"params\">student,callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取文件内容</span></span><br><span class=\"line\">    fs.readFile(db_url, <span class=\"string\">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有错误，使用回调函数处理     </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">        <span class=\"comment\">// 没有错误就把获取的数据转换成字符串并赋值给students</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(students.length === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            student.id = <span class=\"number\">1</span></span><br><span class=\"line\">            students.push(student)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newStudents = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">                students: students</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"comment\">// 写入文件，如果有错，就是用回调函数处理</span></span><br><span class=\"line\">            fs.writeFile(db_url, newStudents, (err) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果有错误，使用回调函数处理</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">                <span class=\"comment\">// 没有错误，使回调函数参数为空</span></span><br><span class=\"line\">                callback(<span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 添加 id </span></span><br><span class=\"line\">        student.id = students[students.length - <span class=\"number\">1</span>].id + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">// 将新增的学生添加到从文件获取的数据中</span></span><br><span class=\"line\">        students.push(student)</span><br><span class=\"line\">        <span class=\"comment\">// 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newStudents = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 写入文件，如果有错，就是用回调函数处理</span></span><br><span class=\"line\">        fs.writeFile(db_url, newStudents, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有错误，使用回调函数处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">            <span class=\"comment\">// 没有错误，使回调函数参数为空</span></span><br><span class=\"line\">            callback(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存编辑学生方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 学生id 为关键字进行编辑</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.editById = <span class=\"function\">(<span class=\"params\">student, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./students.json'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\"></span><br><span class=\"line\">        student.id = <span class=\"built_in\">parseInt</span>(student.id)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> stu = students.find(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.id === student.id</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> student)&#123;</span><br><span class=\"line\">            stu[key] = student[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newStudents = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 写入文件，如果有错，就是用回调函数处理</span></span><br><span class=\"line\">        fs.writeFile(db_url, newStudents, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有错误，使用回调函数处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">            <span class=\"comment\">// 没有错误，使回调函数参数为空</span></span><br><span class=\"line\">            callback(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据 id 查询学生信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.findById = <span class=\"function\">(<span class=\"params\">id, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./students.json'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'编辑失败'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\">        <span class=\"keyword\">let</span> student = students.find(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.id === <span class=\"built_in\">parseInt</span>(id)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, student)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据 id 删除</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.deleteById = <span class=\"function\">(<span class=\"params\">id, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./students.json'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = students.findIndex(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.id === id</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        students.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newStudents = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 写入文件，如果有错，就是用回调函数处理</span></span><br><span class=\"line\">        fs.writeFile(db_url, newStudents, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有错误，使用回调函数处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">            <span class=\"comment\">// 没有错误，使回调函数参数为空</span></span><br><span class=\"line\">            callback(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<style>\n    .post-summary{\n        display:none;\n    }\n</style>\n\n","site":{"data":{}},"excerpt":"<div class='notification is-primary post-summary'>\n    <p>基于上一个node极简评论系统做的一个具有增删改的小型学生管理系统,这次使用到了Express，使用js的模块化编程将路由和增删改操作分别抽离成模块再使用。</p>\n</div>\n<ul class='post-summary'>\n        <li>这次使用到的知识点有：</li>\n        <li>express</li>\n        <li>body-parser</li>\n        <li>art-template</li>\n</ul>\n\n<p>总结：这个demo里面涉及到了回调函数，其实在之前的vue项目中使用axios请求服务器数据，处理服务器返回的数据也是回调函数，当时只是知道是回调函数，不知道或者不理解到底是什么；这个项目多次使用到了封装的回调函数，让自己对这个有了初步的理解；这个项目中也有针对增、删、改的操作而封装的模块，也让自己对模块有了更深的理解。</p>\n<p>还存在的问题：虽然封装了增、删、改的操作，减少了代码的重复率，但是封装不彻底，仍有部分代码是重复的，后续熟练使用回调函数的时候再进行进一步优化。</p>","more":"<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/crud.gif' alt='效果图'/>\n    <br>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/trees.jpg' alt='项目结构'/>\n</div>\n\n\n<h3 id=\"路由模块-router-js\"><a href=\"#路由模块-router-js\" class=\"headerlink\" title=\"路由模块 router.js\"></a>路由模块 router.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Action = <span class=\"built_in\">require</span>(<span class=\"string\">'./action'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./students.json'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.response.status(<span class=\"number\">500</span>).send(<span class=\"string\">'oops! Something Crashed!!!'</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        res.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/new'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">'add_student.html'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">router.post(<span class=\"string\">'/students/new'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 body-parser 获取的请求数据给student</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = req.body</span><br><span class=\"line\">    <span class=\"comment\">// 使用封装的保存学生的 save 方法，两个参数，一个是学生实参，一个为错误，错误用用回调函数处理</span></span><br><span class=\"line\">    Action.save(student, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Error'</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 重定向到首页</span></span><br><span class=\"line\">        res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/edit'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reqId = <span class=\"built_in\">parseInt</span>(req.query.id)</span><br><span class=\"line\">    Action.findById(reqId, (err, student) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Oops! Something Error'</span>)</span><br><span class=\"line\">        res.render(<span class=\"string\">'edit_student.html'</span>, &#123;</span><br><span class=\"line\">            student: student</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/students/edit'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = req.body</span><br><span class=\"line\">    Action.editById(student, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Oops! Something Error'</span>)</span><br><span class=\"line\">        res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/delete'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = <span class=\"built_in\">parseInt</span>(req.query.id)</span><br><span class=\"line\">    Action.deleteById(id, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Oops! Something Error'</span>)</span><br><span class=\"line\">        res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读写文件模块-action-js\"><a href=\"#读写文件模块-action-js\" class=\"headerlink\" title=\"读写文件模块 action.js\"></a>读写文件模块 action.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> db_url = <span class=\"string\">'./students.json'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存添加学生数据到json文件里</span></span><br><span class=\"line\"><span class=\"comment\"> * 封装save方法，使用回调函数处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> * 两个参数 student为传入的新增学生对象</span></span><br><span class=\"line\"><span class=\"comment\"> * callback为回调函数，处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.save = <span class=\"function\">(<span class=\"params\">student,callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取文件内容</span></span><br><span class=\"line\">    fs.readFile(db_url, <span class=\"string\">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有错误，使用回调函数处理     </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">        <span class=\"comment\">// 没有错误就把获取的数据转换成字符串并赋值给students</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(students.length === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            student.id = <span class=\"number\">1</span></span><br><span class=\"line\">            students.push(student)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newStudents = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">                students: students</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"comment\">// 写入文件，如果有错，就是用回调函数处理</span></span><br><span class=\"line\">            fs.writeFile(db_url, newStudents, (err) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果有错误，使用回调函数处理</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">                <span class=\"comment\">// 没有错误，使回调函数参数为空</span></span><br><span class=\"line\">                callback(<span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 添加 id </span></span><br><span class=\"line\">        student.id = students[students.length - <span class=\"number\">1</span>].id + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">// 将新增的学生添加到从文件获取的数据中</span></span><br><span class=\"line\">        students.push(student)</span><br><span class=\"line\">        <span class=\"comment\">// 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newStudents = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 写入文件，如果有错，就是用回调函数处理</span></span><br><span class=\"line\">        fs.writeFile(db_url, newStudents, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有错误，使用回调函数处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">            <span class=\"comment\">// 没有错误，使回调函数参数为空</span></span><br><span class=\"line\">            callback(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存编辑学生方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 学生id 为关键字进行编辑</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.editById = <span class=\"function\">(<span class=\"params\">student, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./students.json'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\"></span><br><span class=\"line\">        student.id = <span class=\"built_in\">parseInt</span>(student.id)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> stu = students.find(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.id === student.id</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> student)&#123;</span><br><span class=\"line\">            stu[key] = student[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newStudents = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 写入文件，如果有错，就是用回调函数处理</span></span><br><span class=\"line\">        fs.writeFile(db_url, newStudents, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有错误，使用回调函数处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">            <span class=\"comment\">// 没有错误，使回调函数参数为空</span></span><br><span class=\"line\">            callback(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据 id 查询学生信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.findById = <span class=\"function\">(<span class=\"params\">id, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./students.json'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'编辑失败'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\">        <span class=\"keyword\">let</span> student = students.find(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.id === <span class=\"built_in\">parseInt</span>(id)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, student)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据 id 删除</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.deleteById = <span class=\"function\">(<span class=\"params\">id, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./students.json'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = <span class=\"built_in\">JSON</span>.parse(data).students</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = students.findIndex(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.id === id</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        students.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将 包含新增学生的数据格式化为JSON格式，并传递给newStudents</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newStudents = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 写入文件，如果有错，就是用回调函数处理</span></span><br><span class=\"line\">        fs.writeFile(db_url, newStudents, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有错误，使用回调函数处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">            <span class=\"comment\">// 没有错误，使回调函数参数为空</span></span><br><span class=\"line\">            callback(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<style>\n    .post-summary{\n        display:none;\n    }\n</style>"},{"title":"Node学生管理系统（使用MongoDB -> mongoose）","date":"2020-05-24T13:25:01.000Z","_content":"\n<div class='post-summary'>\n    <p>\n        在node开发中推荐使用第三方模块mongoose来使用MongoDB；这个项目优化了上一个同样的学生管理系统，减少了代码量，结构也更清晰，针对数据库的操作也独自封装成模块，不同的操作有不同的方法；\n    </p>\n    <p>\n        在封装针对数据库操作的模块的时候，里面方法中也涉及到了回调函数，多次使用使我对回调函数有了更多的理解，也能熟练封装和调用回调函数了。\n    </p>\n</div>\n\n<!--more-->\n\n这个系统内没有上一个系统的`Action.js`，而是单独有一个针对`mongoDB`的操作模块`db.js`\n\n```javascript\n// 引入 mongoose \nconst mongoose = require('mongoose')\n// 链接数据库，加入参数\nmongoose.connect('mongodb://localhost:27017/students', { useNewUrlParser: true ,useUnifiedTopology: true})\n// 创建 Schema 图表\nconst Schema = mongoose.Schema\n// 创建 Student 图表并且发布为模型\nconst Student = mongoose.model('Student', new Schema({\n    name: {\n        type: String,\n        required: true\n    },\n    sex: {\n        type: String,\n        //枚举，只能是男或者女\n        enum: ['男', '女'],\n        default: '男'\n    },\n    age: {\n        type: Number,\n        required: true\n    },\n    hobby: {\n        type: String,\n        required: true\n    }\n}))\n/**\n * 查找数据库中所有数据，用回调函数 handleData 来处理得到的数据\n */\nexports.find = (handleData) => {\n    Student.find((err, data) => {\n        if(err) return console.log(err);\n        handleData(data)\n    })\n}\n/**\n * 保存添加的新数据\n */\nexports.save = (newData, callback, handleShow) => {\n    new Student(newData).save((err, ret) => {\n        if(err) return callback(err)\n        handleShow(ret)\n    })\n}\n/**\n * 通过ID查找数据\n */\nexports.findById = (id, handleError, handleData) => {\n    Student.findById(id, (err, data) => {\n        if(err) return handleError(err)\n        handleData(data)\n    })\n}\n/**\n * 通过 Id 删除一条数据\n */\nexports.delete = (id, handleError) => {\n    Student.deleteOne({_id: id}, (err) => {\n        if(err) handleError(err)\n    })\n}\n/**\n * 通过 id 来修改查找到的数据\n */\nexports.modify = (id, newData, callback) => {\n    Student.findByIdAndUpdate(id, newData, (err) => {\n        if(err) return callback(err)\n    })\n}\n```\n\n同时，路由模块`router.js`也改变了\n\n```javascript\nconst express = require('express')\nconst router = express()\n// 导入自己封装的mongodb数据库操作模块\nconst db = require('./db')\n\nrouter.get('/students', (req, res) => {\n    db.find((data) => {\n        let students = data\n        res.render('index.html', {\n            students: students\n        })\n    })\n})\n\nrouter.get('/students/new', (req, res) => {\n    res.render('add_student.html')\n})\n    \nrouter.post('/students/new', (req, res) => {\n    // 使用 body-parser 获取的请求数据给student\n    let student = req.body\n    \n    // 调用封装的db里的save方法， 传入填入的数据进行保存\n    db.save(student, (err) => {\n        console.log('Something Wrong' + err);\n    }, (data) => {\n    })\n    // 重定向到首页 \n    res.redirect('/students')\n})\n\nrouter.get('/students/edit', (req, res) => {\n    // 直接通过body-parser获取的id有引号，用replace消除\n    let id = req.query.id.replace('\"', '').replace('\"', '')\n    // 根据 id 查找到数据，然后传递到渲染的编辑页面\n    db.findById(id, (err) => {\n        return console.log(err);\n    }, (data) => {\n        let student = data\n        res.render('edit_student.html', {\n            student: student\n        })\n    })\n})\n\nrouter.post('/students/edit', (req, res) => {\n    // 获取更新的数据内容\n    let student = req.body\n    // 获取 id\n    let id = req.body.id\n    // 调用封装的db数据库操作里面的modify方法\n    // 第一个参数为 要修改的对象的id，第二个为要修改后的数据，有错误就用回调函数处理\n    db.modify(id, student, (err) => {\n        console.log(\"Update Error!\");\n    })\n    // 重定向到首页\n    res.redirect('/students')\n})\n\nrouter.get('/students/delete', (req, res) => {\n    // 直接通过body-parser获取的id有引号，用replace消除\n    let id = req.query.id.replace('\"', '').replace('\"', '')\n    // 使用封装的db里的delete\n    db.delete(id, (err) => {\n        return console.log('Delete Error!');\n    })\n    res.redirect('/students')\n})\n\nmodule.exports = router\n```\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","source":"_posts/node-studentOS-mongo.md","raw":"---\ntitle: Node学生管理系统（使用MongoDB -> mongoose）\ndate: 2020-05-24 21:25:01\ntags: node\t\ncategories: node\n---\n\n<div class='post-summary'>\n    <p>\n        在node开发中推荐使用第三方模块mongoose来使用MongoDB；这个项目优化了上一个同样的学生管理系统，减少了代码量，结构也更清晰，针对数据库的操作也独自封装成模块，不同的操作有不同的方法；\n    </p>\n    <p>\n        在封装针对数据库操作的模块的时候，里面方法中也涉及到了回调函数，多次使用使我对回调函数有了更多的理解，也能熟练封装和调用回调函数了。\n    </p>\n</div>\n\n<!--more-->\n\n这个系统内没有上一个系统的`Action.js`，而是单独有一个针对`mongoDB`的操作模块`db.js`\n\n```javascript\n// 引入 mongoose \nconst mongoose = require('mongoose')\n// 链接数据库，加入参数\nmongoose.connect('mongodb://localhost:27017/students', { useNewUrlParser: true ,useUnifiedTopology: true})\n// 创建 Schema 图表\nconst Schema = mongoose.Schema\n// 创建 Student 图表并且发布为模型\nconst Student = mongoose.model('Student', new Schema({\n    name: {\n        type: String,\n        required: true\n    },\n    sex: {\n        type: String,\n        //枚举，只能是男或者女\n        enum: ['男', '女'],\n        default: '男'\n    },\n    age: {\n        type: Number,\n        required: true\n    },\n    hobby: {\n        type: String,\n        required: true\n    }\n}))\n/**\n * 查找数据库中所有数据，用回调函数 handleData 来处理得到的数据\n */\nexports.find = (handleData) => {\n    Student.find((err, data) => {\n        if(err) return console.log(err);\n        handleData(data)\n    })\n}\n/**\n * 保存添加的新数据\n */\nexports.save = (newData, callback, handleShow) => {\n    new Student(newData).save((err, ret) => {\n        if(err) return callback(err)\n        handleShow(ret)\n    })\n}\n/**\n * 通过ID查找数据\n */\nexports.findById = (id, handleError, handleData) => {\n    Student.findById(id, (err, data) => {\n        if(err) return handleError(err)\n        handleData(data)\n    })\n}\n/**\n * 通过 Id 删除一条数据\n */\nexports.delete = (id, handleError) => {\n    Student.deleteOne({_id: id}, (err) => {\n        if(err) handleError(err)\n    })\n}\n/**\n * 通过 id 来修改查找到的数据\n */\nexports.modify = (id, newData, callback) => {\n    Student.findByIdAndUpdate(id, newData, (err) => {\n        if(err) return callback(err)\n    })\n}\n```\n\n同时，路由模块`router.js`也改变了\n\n```javascript\nconst express = require('express')\nconst router = express()\n// 导入自己封装的mongodb数据库操作模块\nconst db = require('./db')\n\nrouter.get('/students', (req, res) => {\n    db.find((data) => {\n        let students = data\n        res.render('index.html', {\n            students: students\n        })\n    })\n})\n\nrouter.get('/students/new', (req, res) => {\n    res.render('add_student.html')\n})\n    \nrouter.post('/students/new', (req, res) => {\n    // 使用 body-parser 获取的请求数据给student\n    let student = req.body\n    \n    // 调用封装的db里的save方法， 传入填入的数据进行保存\n    db.save(student, (err) => {\n        console.log('Something Wrong' + err);\n    }, (data) => {\n    })\n    // 重定向到首页 \n    res.redirect('/students')\n})\n\nrouter.get('/students/edit', (req, res) => {\n    // 直接通过body-parser获取的id有引号，用replace消除\n    let id = req.query.id.replace('\"', '').replace('\"', '')\n    // 根据 id 查找到数据，然后传递到渲染的编辑页面\n    db.findById(id, (err) => {\n        return console.log(err);\n    }, (data) => {\n        let student = data\n        res.render('edit_student.html', {\n            student: student\n        })\n    })\n})\n\nrouter.post('/students/edit', (req, res) => {\n    // 获取更新的数据内容\n    let student = req.body\n    // 获取 id\n    let id = req.body.id\n    // 调用封装的db数据库操作里面的modify方法\n    // 第一个参数为 要修改的对象的id，第二个为要修改后的数据，有错误就用回调函数处理\n    db.modify(id, student, (err) => {\n        console.log(\"Update Error!\");\n    })\n    // 重定向到首页\n    res.redirect('/students')\n})\n\nrouter.get('/students/delete', (req, res) => {\n    // 直接通过body-parser获取的id有引号，用replace消除\n    let id = req.query.id.replace('\"', '').replace('\"', '')\n    // 使用封装的db里的delete\n    db.delete(id, (err) => {\n        return console.log('Delete Error!');\n    })\n    res.redirect('/students')\n})\n\nmodule.exports = router\n```\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","slug":"node-studentOS-mongo","published":1,"updated":"2020-08-27T08:22:17.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg2001rr0u217xbf2xr","content":"<div class='post-summary'>\n    <p>\n        在node开发中推荐使用第三方模块mongoose来使用MongoDB；这个项目优化了上一个同样的学生管理系统，减少了代码量，结构也更清晰，针对数据库的操作也独自封装成模块，不同的操作有不同的方法；\n    </p>\n    <p>\n        在封装针对数据库操作的模块的时候，里面方法中也涉及到了回调函数，多次使用使我对回调函数有了更多的理解，也能熟练封装和调用回调函数了。\n    </p>\n</div>\n\n<a id=\"more\"></a>\n\n<p>这个系统内没有上一个系统的<code>Action.js</code>，而是单独有一个针对<code>mongoDB</code>的操作模块<code>db.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 mongoose </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 链接数据库，加入参数</span></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost:27017/students'</span>, &#123; <span class=\"attr\">useNewUrlParser</span>: <span class=\"literal\">true</span> ,<span class=\"attr\">useUnifiedTopology</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 创建 Schema 图表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Schema = mongoose.Schema</span><br><span class=\"line\"><span class=\"comment\">// 创建 Student 图表并且发布为模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Student = mongoose.model(<span class=\"string\">'Student'</span>, <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        <span class=\"comment\">//枚举，只能是男或者女</span></span><br><span class=\"line\">        enum: [<span class=\"string\">'男'</span>, <span class=\"string\">'女'</span>],</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: <span class=\"string\">'男'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hobby: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查找数据库中所有数据，用回调函数 handleData 来处理得到的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.find = <span class=\"function\">(<span class=\"params\">handleData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.find(<span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        handleData(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存添加的新数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.save = <span class=\"function\">(<span class=\"params\">newData, callback, handleShow</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Student(newData).save(<span class=\"function\">(<span class=\"params\">err, ret</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">        handleShow(ret)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过ID查找数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.findById = <span class=\"function\">(<span class=\"params\">id, handleError, handleData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.findById(id, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> handleError(err)</span><br><span class=\"line\">        handleData(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过 Id 删除一条数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.delete = <span class=\"function\">(<span class=\"params\">id, handleError</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.deleteOne(&#123;<span class=\"attr\">_id</span>: id&#125;, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) handleError(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过 id 来修改查找到的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.modify = <span class=\"function\">(<span class=\"params\">id, newData, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.findByIdAndUpdate(id, newData, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时，路由模块<code>router.js</code>也改变了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express()</span><br><span class=\"line\"><span class=\"comment\">// 导入自己封装的mongodb数据库操作模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">'./db'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    db.find(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = data</span><br><span class=\"line\">        res.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/new'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">'add_student.html'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">router.post(<span class=\"string\">'/students/new'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 body-parser 获取的请求数据给student</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = req.body</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 调用封装的db里的save方法， 传入填入的数据进行保存</span></span><br><span class=\"line\">    db.save(student, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Something Wrong'</span> + err);</span><br><span class=\"line\">    &#125;, (data) =&gt; &#123;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 重定向到首页 </span></span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/edit'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接通过body-parser获取的id有引号，用replace消除</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = req.query.id.replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>).replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 根据 id 查找到数据，然后传递到渲染的编辑页面</span></span><br><span class=\"line\">    db.findById(id, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;, (data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> student = data</span><br><span class=\"line\">        res.render(<span class=\"string\">'edit_student.html'</span>, &#123;</span><br><span class=\"line\">            student: student</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/students/edit'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取更新的数据内容</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = req.body</span><br><span class=\"line\">    <span class=\"comment\">// 获取 id</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = req.body.id</span><br><span class=\"line\">    <span class=\"comment\">// 调用封装的db数据库操作里面的modify方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 第一个参数为 要修改的对象的id，第二个为要修改后的数据，有错误就用回调函数处理</span></span><br><span class=\"line\">    db.modify(id, student, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Update Error!\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 重定向到首页</span></span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/delete'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接通过body-parser获取的id有引号，用replace消除</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = req.query.id.replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>).replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 使用封装的db里的delete</span></span><br><span class=\"line\">    db.delete(id, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Delete Error!'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","site":{"data":{}},"excerpt":"<div class='post-summary'>\n    <p>\n        在node开发中推荐使用第三方模块mongoose来使用MongoDB；这个项目优化了上一个同样的学生管理系统，减少了代码量，结构也更清晰，针对数据库的操作也独自封装成模块，不同的操作有不同的方法；\n    </p>\n    <p>\n        在封装针对数据库操作的模块的时候，里面方法中也涉及到了回调函数，多次使用使我对回调函数有了更多的理解，也能熟练封装和调用回调函数了。\n    </p>\n</div>","more":"<p>这个系统内没有上一个系统的<code>Action.js</code>，而是单独有一个针对<code>mongoDB</code>的操作模块<code>db.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 mongoose </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 链接数据库，加入参数</span></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost:27017/students'</span>, &#123; <span class=\"attr\">useNewUrlParser</span>: <span class=\"literal\">true</span> ,<span class=\"attr\">useUnifiedTopology</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 创建 Schema 图表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Schema = mongoose.Schema</span><br><span class=\"line\"><span class=\"comment\">// 创建 Student 图表并且发布为模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Student = mongoose.model(<span class=\"string\">'Student'</span>, <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sex: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        <span class=\"comment\">//枚举，只能是男或者女</span></span><br><span class=\"line\">        enum: [<span class=\"string\">'男'</span>, <span class=\"string\">'女'</span>],</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: <span class=\"string\">'男'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hobby: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查找数据库中所有数据，用回调函数 handleData 来处理得到的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.find = <span class=\"function\">(<span class=\"params\">handleData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.find(<span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        handleData(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存添加的新数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.save = <span class=\"function\">(<span class=\"params\">newData, callback, handleShow</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Student(newData).save(<span class=\"function\">(<span class=\"params\">err, ret</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">        handleShow(ret)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过ID查找数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.findById = <span class=\"function\">(<span class=\"params\">id, handleError, handleData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.findById(id, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> handleError(err)</span><br><span class=\"line\">        handleData(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过 Id 删除一条数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.delete = <span class=\"function\">(<span class=\"params\">id, handleError</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.deleteOne(&#123;<span class=\"attr\">_id</span>: id&#125;, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) handleError(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过 id 来修改查找到的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.modify = <span class=\"function\">(<span class=\"params\">id, newData, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.findByIdAndUpdate(id, newData, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时，路由模块<code>router.js</code>也改变了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express()</span><br><span class=\"line\"><span class=\"comment\">// 导入自己封装的mongodb数据库操作模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">'./db'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    db.find(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> students = data</span><br><span class=\"line\">        res.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">            students: students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/new'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">'add_student.html'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">router.post(<span class=\"string\">'/students/new'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 body-parser 获取的请求数据给student</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = req.body</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 调用封装的db里的save方法， 传入填入的数据进行保存</span></span><br><span class=\"line\">    db.save(student, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Something Wrong'</span> + err);</span><br><span class=\"line\">    &#125;, (data) =&gt; &#123;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 重定向到首页 </span></span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/edit'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接通过body-parser获取的id有引号，用replace消除</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = req.query.id.replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>).replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 根据 id 查找到数据，然后传递到渲染的编辑页面</span></span><br><span class=\"line\">    db.findById(id, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;, (data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> student = data</span><br><span class=\"line\">        res.render(<span class=\"string\">'edit_student.html'</span>, &#123;</span><br><span class=\"line\">            student: student</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/students/edit'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取更新的数据内容</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = req.body</span><br><span class=\"line\">    <span class=\"comment\">// 获取 id</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = req.body.id</span><br><span class=\"line\">    <span class=\"comment\">// 调用封装的db数据库操作里面的modify方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 第一个参数为 要修改的对象的id，第二个为要修改后的数据，有错误就用回调函数处理</span></span><br><span class=\"line\">    db.modify(id, student, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Update Error!\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 重定向到首页</span></span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/delete'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接通过body-parser获取的id有引号，用replace消除</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = req.query.id.replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>).replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 使用封装的db里的delete</span></span><br><span class=\"line\">    db.delete(id, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Delete Error!'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/students'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>"},{"title":"对回调函数的一点理解","date":"2020-05-25T09:45:18.000Z","_content":"\n<div class='post-summary notification is-primary'>\n    <p>\n        在异步编程中，回调函数是非常常见的；在前面的帖子里，多处涉及到了回调函数，在网上搜索回调函数然后学习了一下，对回调函数有了一定的认识与理解，记录一下。\n    </p>\n</div>\n\n如果很好的利用了回调函数，则会让工作思路变得很清晰，方便开发。\n\n<!--more-->\n\n### 举例\n\n看一下这一段代码，这段代码里面三个控制台打印出1、2、3，但是2在异步的定时器里面，输出顺序为`1、3、2`，这就是异步，定时器里面的`2`不会在1输出之后输出，而是会在1、3输出一秒后输出：\n\n```javascript\nfunction test(){\n    console.log(1)\n    setTimeOut(function (){\n        var data = 2\n        console.log(data)\n    }, 1000)\n    console.log(3)\n}\n```\n\n真正要讲的是，如何才能拿到定时器里面定义的`data`，它是一个局部变量，只作用在定时器内，在外部是访问不到的，这个时候就该回调函数登场，下面就是使用回调函数获取到定时器里面的data并打印输出：\n\n```javascript\nfunction test(callback){\n    console.log(1);\n    setTimeout(() => {\n        var data = 2;\n        callback(data)\n    }, 1000);\n    console.log(3);\n}\n\ntest(function (data){\n    console.log('拿到了：' + data);\n})\n```\n\n这里的 test 方法中的***callback***就是定义的回调，作为参数传到test方法，使用这个回调去获取data；\n\n在调用test方法的时候，传入的这个具体的带参方法就是回调函数的具体实现，回调的参数就是使用的时候的具体参数，这就拿到了data，可以对data做任何操作。\n\n### 实际应用\n\n在之前的mongodb的操作中，就频繁使用到了回调函数来处理错误和数据，例如下面定义的一个根据id查找数据的方法，传入三个参数，handleError 和 handleData就为传入的回调，使用这两个回调来分别处理错误和数据：\n\n```javascript\nexports.findById = (id, handleError, handleData) => {\n    Student.findById(id, (err, data) => {\n        if(err) return handleError(err)\n        handleData(data)\n    })\n}\n```\n\n这是上面方法的具体使用，第一个参数就是实际的id，第二个是处理拿到的错误的函数，第三个就是处理拿到的数据的函数：\n\n```javascript\ndb.findById(id, (err) => {\n    return console.log(err);\n}, (data) => {\n    let student = data\n    res.render('edit_student.html', {\n        student: student\n    })\n})\n```\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","source":"_posts/note-callback.md","raw":"---\ntitle: 对回调函数的一点理解\ndate: 2020-05-25 17:45:18\ntags: 笔记\ncategories: 笔记\n---\n\n<div class='post-summary notification is-primary'>\n    <p>\n        在异步编程中，回调函数是非常常见的；在前面的帖子里，多处涉及到了回调函数，在网上搜索回调函数然后学习了一下，对回调函数有了一定的认识与理解，记录一下。\n    </p>\n</div>\n\n如果很好的利用了回调函数，则会让工作思路变得很清晰，方便开发。\n\n<!--more-->\n\n### 举例\n\n看一下这一段代码，这段代码里面三个控制台打印出1、2、3，但是2在异步的定时器里面，输出顺序为`1、3、2`，这就是异步，定时器里面的`2`不会在1输出之后输出，而是会在1、3输出一秒后输出：\n\n```javascript\nfunction test(){\n    console.log(1)\n    setTimeOut(function (){\n        var data = 2\n        console.log(data)\n    }, 1000)\n    console.log(3)\n}\n```\n\n真正要讲的是，如何才能拿到定时器里面定义的`data`，它是一个局部变量，只作用在定时器内，在外部是访问不到的，这个时候就该回调函数登场，下面就是使用回调函数获取到定时器里面的data并打印输出：\n\n```javascript\nfunction test(callback){\n    console.log(1);\n    setTimeout(() => {\n        var data = 2;\n        callback(data)\n    }, 1000);\n    console.log(3);\n}\n\ntest(function (data){\n    console.log('拿到了：' + data);\n})\n```\n\n这里的 test 方法中的***callback***就是定义的回调，作为参数传到test方法，使用这个回调去获取data；\n\n在调用test方法的时候，传入的这个具体的带参方法就是回调函数的具体实现，回调的参数就是使用的时候的具体参数，这就拿到了data，可以对data做任何操作。\n\n### 实际应用\n\n在之前的mongodb的操作中，就频繁使用到了回调函数来处理错误和数据，例如下面定义的一个根据id查找数据的方法，传入三个参数，handleError 和 handleData就为传入的回调，使用这两个回调来分别处理错误和数据：\n\n```javascript\nexports.findById = (id, handleError, handleData) => {\n    Student.findById(id, (err, data) => {\n        if(err) return handleError(err)\n        handleData(data)\n    })\n}\n```\n\n这是上面方法的具体使用，第一个参数就是实际的id，第二个是处理拿到的错误的函数，第三个就是处理拿到的数据的函数：\n\n```javascript\ndb.findById(id, (err) => {\n    return console.log(err);\n}, (data) => {\n    let student = data\n    res.render('edit_student.html', {\n        student: student\n    })\n})\n```\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","slug":"note-callback","published":1,"updated":"2020-08-27T08:22:17.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg3001sr0u2gk4vgq5c","content":"<div class='post-summary notification is-primary'>\n    <p>\n        在异步编程中，回调函数是非常常见的；在前面的帖子里，多处涉及到了回调函数，在网上搜索回调函数然后学习了一下，对回调函数有了一定的认识与理解，记录一下。\n    </p>\n</div>\n\n<p>如果很好的利用了回调函数，则会让工作思路变得很清晰，方便开发。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>看一下这一段代码，这段代码里面三个控制台打印出1、2、3，但是2在异步的定时器里面，输出顺序为<code>1、3、2</code>，这就是异步，定时器里面的<code>2</code>不会在1输出之后输出，而是会在1、3输出一秒后输出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    setTimeOut(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真正要讲的是，如何才能拿到定时器里面定义的<code>data</code>，它是一个局部变量，只作用在定时器内，在外部是访问不到的，这个时候就该回调函数登场，下面就是使用回调函数获取到定时器里面的data并打印输出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"number\">2</span>;</span><br><span class=\"line\">        callback(data)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'拿到了：'</span> + data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里的 test 方法中的<strong><em>callback</em></strong>就是定义的回调，作为参数传到test方法，使用这个回调去获取data；</p>\n<p>在调用test方法的时候，传入的这个具体的带参方法就是回调函数的具体实现，回调的参数就是使用的时候的具体参数，这就拿到了data，可以对data做任何操作。</p>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3><p>在之前的mongodb的操作中，就频繁使用到了回调函数来处理错误和数据，例如下面定义的一个根据id查找数据的方法，传入三个参数，handleError 和 handleData就为传入的回调，使用这两个回调来分别处理错误和数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.findById = <span class=\"function\">(<span class=\"params\">id, handleError, handleData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.findById(id, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> handleError(err)</span><br><span class=\"line\">        handleData(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是上面方法的具体使用，第一个参数就是实际的id，第二个是处理拿到的错误的函数，第三个就是处理拿到的数据的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.findById(id, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;, (data) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = data</span><br><span class=\"line\">    res.render(<span class=\"string\">'edit_student.html'</span>, &#123;</span><br><span class=\"line\">        student: student</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>\n\n","site":{"data":{}},"excerpt":"<div class='post-summary notification is-primary'>\n    <p>\n        在异步编程中，回调函数是非常常见的；在前面的帖子里，多处涉及到了回调函数，在网上搜索回调函数然后学习了一下，对回调函数有了一定的认识与理解，记录一下。\n    </p>\n</div>\n\n<p>如果很好的利用了回调函数，则会让工作思路变得很清晰，方便开发。</p>","more":"<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>看一下这一段代码，这段代码里面三个控制台打印出1、2、3，但是2在异步的定时器里面，输出顺序为<code>1、3、2</code>，这就是异步，定时器里面的<code>2</code>不会在1输出之后输出，而是会在1、3输出一秒后输出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    setTimeOut(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真正要讲的是，如何才能拿到定时器里面定义的<code>data</code>，它是一个局部变量，只作用在定时器内，在外部是访问不到的，这个时候就该回调函数登场，下面就是使用回调函数获取到定时器里面的data并打印输出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"number\">2</span>;</span><br><span class=\"line\">        callback(data)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'拿到了：'</span> + data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里的 test 方法中的<strong><em>callback</em></strong>就是定义的回调，作为参数传到test方法，使用这个回调去获取data；</p>\n<p>在调用test方法的时候，传入的这个具体的带参方法就是回调函数的具体实现，回调的参数就是使用的时候的具体参数，这就拿到了data，可以对data做任何操作。</p>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3><p>在之前的mongodb的操作中，就频繁使用到了回调函数来处理错误和数据，例如下面定义的一个根据id查找数据的方法，传入三个参数，handleError 和 handleData就为传入的回调，使用这两个回调来分别处理错误和数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.findById = <span class=\"function\">(<span class=\"params\">id, handleError, handleData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Student.findById(id, (err, data) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> handleError(err)</span><br><span class=\"line\">        handleData(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是上面方法的具体使用，第一个参数就是实际的id，第二个是处理拿到的错误的函数，第三个就是处理拿到的数据的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.findById(id, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;, (data) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> student = data</span><br><span class=\"line\">    res.render(<span class=\"string\">'edit_student.html'</span>, &#123;</span><br><span class=\"line\">        student: student</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<style>\n    .post-summary{\n        display: none;\n    }\n</style>"},{"title":"使用SVP给视频插帧，看电影如丝半顺滑","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/defu.jpg","date":"2020-05-26T01:55:48.000Z","_content":"\n<div class='post-summary'>\n   \t使用SVP4Pro(破解版)，搭配Potplayer让电影帧率达到60帧或者以上帧率，看电影或者视频很顺滑。\n</div>\n\n<!--more-->\n\n### 前提\n\nsvp4pro下载地址：[点我](https://pan.baidu.com/s/1aJNuOl3_Myng95EFJ5zJYw )  提取码：e93d\n\n+ 安装了potplayer\n+ 下载提供的链接里的所有内容\n+ 解压下载的压缩包\n\n下载后的文件如下，解压里面的svp压缩包：\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526101255.png)\n\n### 开始安装\n\n1. 将解压出来的SVP文件夹移动到C盘根目录\n\n2. 打开svp4-cracked这个软件，点击左下角setting，按照下图添加本地svp目录，不用去网上下载：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102012.png)\n\n3. 在上面第5步输入框中输入`file:///C:/SVP/common`，再同样点击add添加一个`file:///C:/SVP/free`，最终如下图所示：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102526.png)\n\n4. 点击ok然后next选择自己安装的版本：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102820.png)\n\n5. 然后一路next安装，直到安装完成，**最后先别打开软件！！！**\n\n6. 使用下载的包里面的SVPManager复制到`C:/Commonfiles(x86)/SVP4`，替换里面的同名文件\n\n7. 打开SVPManager，根据自己电脑性能来设置：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104018.png)\n\n8. 最后点击左上角图标，然后点击图标设置一下，防止svp对视频画面进行裁切：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104151.png)\n\n9. 打开potplayer，右键选项设置：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104407.png)\n\n10. 关闭内置视频处理滤镜\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104449.png)\n\n11. 点击系统滤镜，添加滤镜\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104523.png)\n\n12. 选择`ffdshow Video Decoder`，点击确定：\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104548.png)\n\n13. 最后勾选滤镜，然后强制使用，确定\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104613.png)\n\n打开potplayer，随便播放一个视频，按tab键查看播放信息，已经补帧到60了：\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526105540.png)","source":"_posts/pc-svp4pro.md","raw":"---\ntitle: 使用SVP给视频插帧，看电影如丝半顺滑\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/defu.jpg\ndate: 2020-05-26 09:55:48\ntags: 电脑\ncategories: 电脑相关\n---\n\n<div class='post-summary'>\n   \t使用SVP4Pro(破解版)，搭配Potplayer让电影帧率达到60帧或者以上帧率，看电影或者视频很顺滑。\n</div>\n\n<!--more-->\n\n### 前提\n\nsvp4pro下载地址：[点我](https://pan.baidu.com/s/1aJNuOl3_Myng95EFJ5zJYw )  提取码：e93d\n\n+ 安装了potplayer\n+ 下载提供的链接里的所有内容\n+ 解压下载的压缩包\n\n下载后的文件如下，解压里面的svp压缩包：\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526101255.png)\n\n### 开始安装\n\n1. 将解压出来的SVP文件夹移动到C盘根目录\n\n2. 打开svp4-cracked这个软件，点击左下角setting，按照下图添加本地svp目录，不用去网上下载：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102012.png)\n\n3. 在上面第5步输入框中输入`file:///C:/SVP/common`，再同样点击add添加一个`file:///C:/SVP/free`，最终如下图所示：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102526.png)\n\n4. 点击ok然后next选择自己安装的版本：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102820.png)\n\n5. 然后一路next安装，直到安装完成，**最后先别打开软件！！！**\n\n6. 使用下载的包里面的SVPManager复制到`C:/Commonfiles(x86)/SVP4`，替换里面的同名文件\n\n7. 打开SVPManager，根据自己电脑性能来设置：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104018.png)\n\n8. 最后点击左上角图标，然后点击图标设置一下，防止svp对视频画面进行裁切：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104151.png)\n\n9. 打开potplayer，右键选项设置：\n\n   ![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104407.png)\n\n10. 关闭内置视频处理滤镜\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104449.png)\n\n11. 点击系统滤镜，添加滤镜\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104523.png)\n\n12. 选择`ffdshow Video Decoder`，点击确定：\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104548.png)\n\n13. 最后勾选滤镜，然后强制使用，确定\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104613.png)\n\n打开potplayer，随便播放一个视频，按tab键查看播放信息，已经补帧到60了：\n\n![](https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526105540.png)","slug":"pc-svp4pro","published":1,"updated":"2020-08-27T08:22:17.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg4001wr0u234yw2hjt","content":"<div class='post-summary'>\n       使用SVP4Pro(破解版)，搭配Potplayer让电影帧率达到60帧或者以上帧率，看电影或者视频很顺滑。\n</div>\n\n<a id=\"more\"></a>\n\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>svp4pro下载地址：<a href=\"https://pan.baidu.com/s/1aJNuOl3_Myng95EFJ5zJYw\" target=\"_blank\" rel=\"noopener\">点我</a>  提取码：e93d</p>\n<ul>\n<li>安装了potplayer</li>\n<li>下载提供的链接里的所有内容</li>\n<li>解压下载的压缩包</li>\n</ul>\n<p>下载后的文件如下，解压里面的svp压缩包：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526101255.png\" alt=\"\"></p>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><ol>\n<li><p>将解压出来的SVP文件夹移动到C盘根目录</p>\n</li>\n<li><p>打开svp4-cracked这个软件，点击左下角setting，按照下图添加本地svp目录，不用去网上下载：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102012.png\" alt=\"\"></p>\n</li>\n<li><p>在上面第5步输入框中输入<code>file:///C:/SVP/common</code>，再同样点击add添加一个<code>file:///C:/SVP/free</code>，最终如下图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102526.png\" alt=\"\"></p>\n</li>\n<li><p>点击ok然后next选择自己安装的版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102820.png\" alt=\"\"></p>\n</li>\n<li><p>然后一路next安装，直到安装完成，<strong>最后先别打开软件！！！</strong></p>\n</li>\n<li><p>使用下载的包里面的SVPManager复制到<code>C:/Commonfiles(x86)/SVP4</code>，替换里面的同名文件</p>\n</li>\n<li><p>打开SVPManager，根据自己电脑性能来设置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104018.png\" alt=\"\"></p>\n</li>\n<li><p>最后点击左上角图标，然后点击图标设置一下，防止svp对视频画面进行裁切：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104151.png\" alt=\"\"></p>\n</li>\n<li><p>打开potplayer，右键选项设置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104407.png\" alt=\"\"></p>\n</li>\n<li><p>关闭内置视频处理滤镜</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104449.png\" alt=\"\"></p>\n<ol start=\"11\">\n<li>点击系统滤镜，添加滤镜</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104523.png\" alt=\"\"></p>\n<ol start=\"12\">\n<li>选择<code>ffdshow Video Decoder</code>，点击确定：</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104548.png\" alt=\"\"></p>\n<ol start=\"13\">\n<li>最后勾选滤镜，然后强制使用，确定</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104613.png\" alt=\"\"></p>\n<p>打开potplayer，随便播放一个视频，按tab键查看播放信息，已经补帧到60了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526105540.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<div class='post-summary'>\n       使用SVP4Pro(破解版)，搭配Potplayer让电影帧率达到60帧或者以上帧率，看电影或者视频很顺滑。\n</div>","more":"<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>svp4pro下载地址：<a href=\"https://pan.baidu.com/s/1aJNuOl3_Myng95EFJ5zJYw\" target=\"_blank\" rel=\"noopener\">点我</a>  提取码：e93d</p>\n<ul>\n<li>安装了potplayer</li>\n<li>下载提供的链接里的所有内容</li>\n<li>解压下载的压缩包</li>\n</ul>\n<p>下载后的文件如下，解压里面的svp压缩包：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526101255.png\" alt=\"\"></p>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><ol>\n<li><p>将解压出来的SVP文件夹移动到C盘根目录</p>\n</li>\n<li><p>打开svp4-cracked这个软件，点击左下角setting，按照下图添加本地svp目录，不用去网上下载：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102012.png\" alt=\"\"></p>\n</li>\n<li><p>在上面第5步输入框中输入<code>file:///C:/SVP/common</code>，再同样点击add添加一个<code>file:///C:/SVP/free</code>，最终如下图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102526.png\" alt=\"\"></p>\n</li>\n<li><p>点击ok然后next选择自己安装的版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526102820.png\" alt=\"\"></p>\n</li>\n<li><p>然后一路next安装，直到安装完成，<strong>最后先别打开软件！！！</strong></p>\n</li>\n<li><p>使用下载的包里面的SVPManager复制到<code>C:/Commonfiles(x86)/SVP4</code>，替换里面的同名文件</p>\n</li>\n<li><p>打开SVPManager，根据自己电脑性能来设置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104018.png\" alt=\"\"></p>\n</li>\n<li><p>最后点击左上角图标，然后点击图标设置一下，防止svp对视频画面进行裁切：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104151.png\" alt=\"\"></p>\n</li>\n<li><p>打开potplayer，右键选项设置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104407.png\" alt=\"\"></p>\n</li>\n<li><p>关闭内置视频处理滤镜</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104449.png\" alt=\"\"></p>\n<ol start=\"11\">\n<li>点击系统滤镜，添加滤镜</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104523.png\" alt=\"\"></p>\n<ol start=\"12\">\n<li>选择<code>ffdshow Video Decoder</code>，点击确定：</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104548.png\" alt=\"\"></p>\n<ol start=\"13\">\n<li>最后勾选滤镜，然后强制使用，确定</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526104613.png\" alt=\"\"></p>\n<p>打开potplayer，随便播放一个视频，按tab键查看播放信息，已经补帧到60了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/20200526105540.png\" alt=\"\"></p>"},{"title":"拉勾网职位爬取","date":"2020-02-10T02:44:01.000Z","_content":"\n<center>一个爬取拉勾网职位信息简单程序，涉及到异步加载，使用json分析数据并保存到MongoDB数据库</center>\n\n<!--more-->\n\n```python\nimport requests\nimport json\nimport time\nimport pymongo\nclient = pymongo.MongoClient('127.0.0.1', 27017)\nmydb = client['jobs']\nlagou = mydb['lagou']\n\nheaders = {\n    'Accept': 'application/json, text/javascript, */*; q=0.01',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',\n    'Connection': 'keep-alive',\n    'Content-Length': '37',\n    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    'Cookie': '_ga=GA1.2.1069426576.1578732618;'\n              ' index_location_city=%E5%85%A8%E5%9B%BD;'\n              ' user_trace_token=20200111165020-251b21ca-0efa-4e3a-b959-93855c309d4d;'\n              ' lagou_utm_source=B;'\n              ' JSESSIONID=ABAAAECABBJAAGI5F960B86A5C58E135C92D5813AEC82AC;'\n              ' WEBTJ-ID=20200202115956-170040e12e86-02f47fddf1f558-b383f66-2073600-170040e12e96f0;'\n              ' X_MIDDLE_TOKEN=dbdf524e8683f15975fa5fde4d8f2f39;'\n              ' X_HTTP_TOKEN=669a21470347f2436986360851ac25caf63ec40c85;'\n              ' _gat=1;'\n              ' SEARCH_ID=f04d4617085a4104bf037670fd36f76c',\n    'Host': 'www.lagou.com',\n    'Origin': 'https://www.lagou.com',\n    'Referer': 'https://www.lagou.com/jobs/list_java/',\n    'Sec-Fetch-Mode': 'cors',\n    'Sec-Fetch-Site': 'same-origin',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)' \\\n                  ' Chrome/79.0.3945.130 Safari/537.36',\n    'X-Anit-Forge-Code': '0',\n    'X-Anit-Forge-Token': 'None',\n    'X-Requested-With': 'XMLHttpRequest'\n}\n\n\ndef get_page(url, params):\n    html = requests.post(url, data=params, headers=headers)\n    print(html.text)\n    json_data = json.loads(html.text)\n    total_count = json_data['content']['positionResult']['totalCount']\n    page_number = int(total_count/15) if int(total_count/15) < 30 else 30\n    get_info(url, page_number)\n\n\ndef get_info(url, page):\n    for pn in range(1, page+1):\n        params = {\n            'first': 'true',\n            'pn': str(pn),\n            'kd': '游戏'\n        }\n        try:\n            html = requests.post(url, data=params, headers=headers)\n            json_data = json.loads(html.text)\n            results = json_data['content']['positionResult']['result']\n            for result in results:\n                infos = {\n                    'businessZones': result['businessZones'],\n                    'city': result['city'],\n                    'district': result['district'],\n                    'companyFullName': result['companyFullName'],\n                    'companyShortName': result['companyShortName'],\n                    'companySize': result['companySize'],\n                    'industryField': result['industryField'],\n                    'financeStage': result['financeStage'],\n                    'firstType': result['firstType'],\n                    'secondType': result['secondType'],\n                    'thirdType': result['thirdType'],\n                    'companyLabelList': result['companyLabelList'],\n                    'salary': result['salary'],\n                    'workYear': result['workYear'],\n                    'education': result['education'],\n                    'positionName': result['positionName'],\n                }\n                lagou.insert_one(infos)\n                time.sleep(2)\n        except KeyError:\n            print(\"关键词错误\")\n            pass\n\n\nif __name__ == '__main__':\n    url = 'https://www.lagou.com/jobs/positionAjax.json'\n    params = {\n        'first': 'true',\n        'pn': '1',\n        'kd': 'java'\n    }\n    get_page(url, params)\n    time.sleep(0.5)\n\n```","source":"_posts/python-lagou.md","raw":"---\ntitle: 拉勾网职位爬取\ndate: 2020-02-10 10:44:01\ntags: Python,爬虫\ncategories: Python\n---\n\n<center>一个爬取拉勾网职位信息简单程序，涉及到异步加载，使用json分析数据并保存到MongoDB数据库</center>\n\n<!--more-->\n\n```python\nimport requests\nimport json\nimport time\nimport pymongo\nclient = pymongo.MongoClient('127.0.0.1', 27017)\nmydb = client['jobs']\nlagou = mydb['lagou']\n\nheaders = {\n    'Accept': 'application/json, text/javascript, */*; q=0.01',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',\n    'Connection': 'keep-alive',\n    'Content-Length': '37',\n    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    'Cookie': '_ga=GA1.2.1069426576.1578732618;'\n              ' index_location_city=%E5%85%A8%E5%9B%BD;'\n              ' user_trace_token=20200111165020-251b21ca-0efa-4e3a-b959-93855c309d4d;'\n              ' lagou_utm_source=B;'\n              ' JSESSIONID=ABAAAECABBJAAGI5F960B86A5C58E135C92D5813AEC82AC;'\n              ' WEBTJ-ID=20200202115956-170040e12e86-02f47fddf1f558-b383f66-2073600-170040e12e96f0;'\n              ' X_MIDDLE_TOKEN=dbdf524e8683f15975fa5fde4d8f2f39;'\n              ' X_HTTP_TOKEN=669a21470347f2436986360851ac25caf63ec40c85;'\n              ' _gat=1;'\n              ' SEARCH_ID=f04d4617085a4104bf037670fd36f76c',\n    'Host': 'www.lagou.com',\n    'Origin': 'https://www.lagou.com',\n    'Referer': 'https://www.lagou.com/jobs/list_java/',\n    'Sec-Fetch-Mode': 'cors',\n    'Sec-Fetch-Site': 'same-origin',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)' \\\n                  ' Chrome/79.0.3945.130 Safari/537.36',\n    'X-Anit-Forge-Code': '0',\n    'X-Anit-Forge-Token': 'None',\n    'X-Requested-With': 'XMLHttpRequest'\n}\n\n\ndef get_page(url, params):\n    html = requests.post(url, data=params, headers=headers)\n    print(html.text)\n    json_data = json.loads(html.text)\n    total_count = json_data['content']['positionResult']['totalCount']\n    page_number = int(total_count/15) if int(total_count/15) < 30 else 30\n    get_info(url, page_number)\n\n\ndef get_info(url, page):\n    for pn in range(1, page+1):\n        params = {\n            'first': 'true',\n            'pn': str(pn),\n            'kd': '游戏'\n        }\n        try:\n            html = requests.post(url, data=params, headers=headers)\n            json_data = json.loads(html.text)\n            results = json_data['content']['positionResult']['result']\n            for result in results:\n                infos = {\n                    'businessZones': result['businessZones'],\n                    'city': result['city'],\n                    'district': result['district'],\n                    'companyFullName': result['companyFullName'],\n                    'companyShortName': result['companyShortName'],\n                    'companySize': result['companySize'],\n                    'industryField': result['industryField'],\n                    'financeStage': result['financeStage'],\n                    'firstType': result['firstType'],\n                    'secondType': result['secondType'],\n                    'thirdType': result['thirdType'],\n                    'companyLabelList': result['companyLabelList'],\n                    'salary': result['salary'],\n                    'workYear': result['workYear'],\n                    'education': result['education'],\n                    'positionName': result['positionName'],\n                }\n                lagou.insert_one(infos)\n                time.sleep(2)\n        except KeyError:\n            print(\"关键词错误\")\n            pass\n\n\nif __name__ == '__main__':\n    url = 'https://www.lagou.com/jobs/positionAjax.json'\n    params = {\n        'first': 'true',\n        'pn': '1',\n        'kd': 'java'\n    }\n    get_page(url, params)\n    time.sleep(0.5)\n\n```","slug":"python-lagou","published":1,"updated":"2020-08-27T08:22:17.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg5001yr0u2cr9ocbvx","content":"<center>一个爬取拉勾网职位信息简单程序，涉及到异步加载，使用json分析数据并保存到MongoDB数据库</center>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymongo</span><br><span class=\"line\">client = pymongo.MongoClient(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">27017</span>)</span><br><span class=\"line\">mydb = client[<span class=\"string\">'jobs'</span>]</span><br><span class=\"line\">lagou = mydb[<span class=\"string\">'lagou'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip, deflate, br'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Length'</span>: <span class=\"string\">'37'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Cookie'</span>: <span class=\"string\">'_ga=GA1.2.1069426576.1578732618;'</span></span><br><span class=\"line\">              <span class=\"string\">' index_location_city=%E5%85%A8%E5%9B%BD;'</span></span><br><span class=\"line\">              <span class=\"string\">' user_trace_token=20200111165020-251b21ca-0efa-4e3a-b959-93855c309d4d;'</span></span><br><span class=\"line\">              <span class=\"string\">' lagou_utm_source=B;'</span></span><br><span class=\"line\">              <span class=\"string\">' JSESSIONID=ABAAAECABBJAAGI5F960B86A5C58E135C92D5813AEC82AC;'</span></span><br><span class=\"line\">              <span class=\"string\">' WEBTJ-ID=20200202115956-170040e12e86-02f47fddf1f558-b383f66-2073600-170040e12e96f0;'</span></span><br><span class=\"line\">              <span class=\"string\">' X_MIDDLE_TOKEN=dbdf524e8683f15975fa5fde4d8f2f39;'</span></span><br><span class=\"line\">              <span class=\"string\">' X_HTTP_TOKEN=669a21470347f2436986360851ac25caf63ec40c85;'</span></span><br><span class=\"line\">              <span class=\"string\">' _gat=1;'</span></span><br><span class=\"line\">              <span class=\"string\">' SEARCH_ID=f04d4617085a4104bf037670fd36f76c'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Host'</span>: <span class=\"string\">'www.lagou.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Origin'</span>: <span class=\"string\">'https://www.lagou.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Referer'</span>: <span class=\"string\">'https://www.lagou.com/jobs/list_java/'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Sec-Fetch-Mode'</span>: <span class=\"string\">'cors'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Sec-Fetch-Site'</span>: <span class=\"string\">'same-origin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'</span> \\</span><br><span class=\"line\">                  <span class=\"string\">' Chrome/79.0.3945.130 Safari/537.36'</span>,</span><br><span class=\"line\">    <span class=\"string\">'X-Anit-Forge-Code'</span>: <span class=\"string\">'0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'X-Anit-Forge-Token'</span>: <span class=\"string\">'None'</span>,</span><br><span class=\"line\">    <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_page</span><span class=\"params\">(url, params)</span>:</span></span><br><span class=\"line\">    html = requests.post(url, data=params, headers=headers)</span><br><span class=\"line\">    print(html.text)</span><br><span class=\"line\">    json_data = json.loads(html.text)</span><br><span class=\"line\">    total_count = json_data[<span class=\"string\">'content'</span>][<span class=\"string\">'positionResult'</span>][<span class=\"string\">'totalCount'</span>]</span><br><span class=\"line\">    page_number = int(total_count/<span class=\"number\">15</span>) <span class=\"keyword\">if</span> int(total_count/<span class=\"number\">15</span>) &lt; <span class=\"number\">30</span> <span class=\"keyword\">else</span> <span class=\"number\">30</span></span><br><span class=\"line\">    get_info(url, page_number)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_info</span><span class=\"params\">(url, page)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> pn <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, page+<span class=\"number\">1</span>):</span><br><span class=\"line\">        params = &#123;</span><br><span class=\"line\">            <span class=\"string\">'first'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">            <span class=\"string\">'pn'</span>: str(pn),</span><br><span class=\"line\">            <span class=\"string\">'kd'</span>: <span class=\"string\">'游戏'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            html = requests.post(url, data=params, headers=headers)</span><br><span class=\"line\">            json_data = json.loads(html.text)</span><br><span class=\"line\">            results = json_data[<span class=\"string\">'content'</span>][<span class=\"string\">'positionResult'</span>][<span class=\"string\">'result'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">                infos = &#123;</span><br><span class=\"line\">                    <span class=\"string\">'businessZones'</span>: result[<span class=\"string\">'businessZones'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'city'</span>: result[<span class=\"string\">'city'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'district'</span>: result[<span class=\"string\">'district'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'companyFullName'</span>: result[<span class=\"string\">'companyFullName'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'companyShortName'</span>: result[<span class=\"string\">'companyShortName'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'companySize'</span>: result[<span class=\"string\">'companySize'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'industryField'</span>: result[<span class=\"string\">'industryField'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'financeStage'</span>: result[<span class=\"string\">'financeStage'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'firstType'</span>: result[<span class=\"string\">'firstType'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'secondType'</span>: result[<span class=\"string\">'secondType'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'thirdType'</span>: result[<span class=\"string\">'thirdType'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'companyLabelList'</span>: result[<span class=\"string\">'companyLabelList'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'salary'</span>: result[<span class=\"string\">'salary'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'workYear'</span>: result[<span class=\"string\">'workYear'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'education'</span>: result[<span class=\"string\">'education'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'positionName'</span>: result[<span class=\"string\">'positionName'</span>],</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                lagou.insert_one(infos)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            print(<span class=\"string\">\"关键词错误\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    url = <span class=\"string\">'https://www.lagou.com/jobs/positionAjax.json'</span></span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">        <span class=\"string\">'pn'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'kd'</span>: <span class=\"string\">'java'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    get_page(url, params)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>一个爬取拉勾网职位信息简单程序，涉及到异步加载，使用json分析数据并保存到MongoDB数据库</center>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymongo</span><br><span class=\"line\">client = pymongo.MongoClient(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">27017</span>)</span><br><span class=\"line\">mydb = client[<span class=\"string\">'jobs'</span>]</span><br><span class=\"line\">lagou = mydb[<span class=\"string\">'lagou'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip, deflate, br'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Length'</span>: <span class=\"string\">'37'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Cookie'</span>: <span class=\"string\">'_ga=GA1.2.1069426576.1578732618;'</span></span><br><span class=\"line\">              <span class=\"string\">' index_location_city=%E5%85%A8%E5%9B%BD;'</span></span><br><span class=\"line\">              <span class=\"string\">' user_trace_token=20200111165020-251b21ca-0efa-4e3a-b959-93855c309d4d;'</span></span><br><span class=\"line\">              <span class=\"string\">' lagou_utm_source=B;'</span></span><br><span class=\"line\">              <span class=\"string\">' JSESSIONID=ABAAAECABBJAAGI5F960B86A5C58E135C92D5813AEC82AC;'</span></span><br><span class=\"line\">              <span class=\"string\">' WEBTJ-ID=20200202115956-170040e12e86-02f47fddf1f558-b383f66-2073600-170040e12e96f0;'</span></span><br><span class=\"line\">              <span class=\"string\">' X_MIDDLE_TOKEN=dbdf524e8683f15975fa5fde4d8f2f39;'</span></span><br><span class=\"line\">              <span class=\"string\">' X_HTTP_TOKEN=669a21470347f2436986360851ac25caf63ec40c85;'</span></span><br><span class=\"line\">              <span class=\"string\">' _gat=1;'</span></span><br><span class=\"line\">              <span class=\"string\">' SEARCH_ID=f04d4617085a4104bf037670fd36f76c'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Host'</span>: <span class=\"string\">'www.lagou.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Origin'</span>: <span class=\"string\">'https://www.lagou.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Referer'</span>: <span class=\"string\">'https://www.lagou.com/jobs/list_java/'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Sec-Fetch-Mode'</span>: <span class=\"string\">'cors'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Sec-Fetch-Site'</span>: <span class=\"string\">'same-origin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'</span> \\</span><br><span class=\"line\">                  <span class=\"string\">' Chrome/79.0.3945.130 Safari/537.36'</span>,</span><br><span class=\"line\">    <span class=\"string\">'X-Anit-Forge-Code'</span>: <span class=\"string\">'0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'X-Anit-Forge-Token'</span>: <span class=\"string\">'None'</span>,</span><br><span class=\"line\">    <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_page</span><span class=\"params\">(url, params)</span>:</span></span><br><span class=\"line\">    html = requests.post(url, data=params, headers=headers)</span><br><span class=\"line\">    print(html.text)</span><br><span class=\"line\">    json_data = json.loads(html.text)</span><br><span class=\"line\">    total_count = json_data[<span class=\"string\">'content'</span>][<span class=\"string\">'positionResult'</span>][<span class=\"string\">'totalCount'</span>]</span><br><span class=\"line\">    page_number = int(total_count/<span class=\"number\">15</span>) <span class=\"keyword\">if</span> int(total_count/<span class=\"number\">15</span>) &lt; <span class=\"number\">30</span> <span class=\"keyword\">else</span> <span class=\"number\">30</span></span><br><span class=\"line\">    get_info(url, page_number)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_info</span><span class=\"params\">(url, page)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> pn <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, page+<span class=\"number\">1</span>):</span><br><span class=\"line\">        params = &#123;</span><br><span class=\"line\">            <span class=\"string\">'first'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">            <span class=\"string\">'pn'</span>: str(pn),</span><br><span class=\"line\">            <span class=\"string\">'kd'</span>: <span class=\"string\">'游戏'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            html = requests.post(url, data=params, headers=headers)</span><br><span class=\"line\">            json_data = json.loads(html.text)</span><br><span class=\"line\">            results = json_data[<span class=\"string\">'content'</span>][<span class=\"string\">'positionResult'</span>][<span class=\"string\">'result'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">                infos = &#123;</span><br><span class=\"line\">                    <span class=\"string\">'businessZones'</span>: result[<span class=\"string\">'businessZones'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'city'</span>: result[<span class=\"string\">'city'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'district'</span>: result[<span class=\"string\">'district'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'companyFullName'</span>: result[<span class=\"string\">'companyFullName'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'companyShortName'</span>: result[<span class=\"string\">'companyShortName'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'companySize'</span>: result[<span class=\"string\">'companySize'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'industryField'</span>: result[<span class=\"string\">'industryField'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'financeStage'</span>: result[<span class=\"string\">'financeStage'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'firstType'</span>: result[<span class=\"string\">'firstType'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'secondType'</span>: result[<span class=\"string\">'secondType'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'thirdType'</span>: result[<span class=\"string\">'thirdType'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'companyLabelList'</span>: result[<span class=\"string\">'companyLabelList'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'salary'</span>: result[<span class=\"string\">'salary'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'workYear'</span>: result[<span class=\"string\">'workYear'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'education'</span>: result[<span class=\"string\">'education'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'positionName'</span>: result[<span class=\"string\">'positionName'</span>],</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                lagou.insert_one(infos)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            print(<span class=\"string\">\"关键词错误\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    url = <span class=\"string\">'https://www.lagou.com/jobs/positionAjax.json'</span></span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'first'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">        <span class=\"string\">'pn'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'kd'</span>: <span class=\"string\">'java'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    get_page(url, params)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br></pre></td></tr></table></figure>"},{"title":"第一个爬虫项目","date":"2019-11-28T09:11:14.000Z","_content":"\n<center>第一个爬虫项目：爬取前程无忧重庆地区工作</center>\n<!--more-->\n<center>LoginUI.py</center>\n\n```python\nfrom tkinter import *\nimport tkinter as tk\nimport tkinter.messagebox\nfrom SearchItemUI import *\nwin = Tk()\nwin.geometry('368x600')\nwin.title('Login UI')\n\nbg_photo = tk.PhotoImage(file='img/login_bg.png')\nbg_label = tk.Label(\n    win,\n    image=bg_photo,\n    compound=tk.CENTER\n).pack()\nlabelimg = PhotoImage(file='img/smile.png')\nimg_label = Label(win, image=labelimg).place(x=120, y=60)\ntext_username = Label(win, bg='#68ABFF', fg='#fff', text='账号:', font=('Xhei', '16')).place(x=60, y=240)\ntext_password = Label(win, bg='#94C3FF', fg='#fff', text='密码:', font=('Xhei', '16')).place(x=60, y=280)\nusername = StringVar()\npassword = StringVar()\ninput_username = Entry(win, textvariable=username, font=('Xhei', '16'), width=14).place(x=120, y=240)\ninout_password = Entry(win, textvariable=password, font=('Xhei', '16'), show='*', width=14).place(x=120, y=280)\n\n\ndef check_login():\n    username_get = username.get()\n    password_get = password.get()\n    if username_get == 'user' and password_get == '123456':\n        win.destroy()\n        start_search()\n    elif username_get == '' or password_get == '':\n        tk.messagebox.showwarning(title='警告', message='请输入用户名或者密码!')\n    else:\n        tk.messagebox.showwarning(title='警告', message='用户名或者密码错误!')\n\n\nbtn_login = Button(win, command=check_login, text='登录', font=('Xhei', '16'), bg=\"#68ABFF\", fg=\"#FFF\").place(x=140, y=340)\nwin.mainloop()\n```\n<center>SearchItemUI.py</center>\n\n```python\nfrom tkinter import *\nimport requests\nimport webbrowser\nimport re\nimport tkinter.ttk as ttk\nfrom bs4 import BeautifulSoup\n\n\ndef start_search():\n    win = Tk()\n    win.title(\"51Job招聘\")\n    win.geometry('690x760')\n    job_categorie = StringVar()\n    keyword = StringVar()\n    page_num = IntVar()\n    v = IntVar()\n    com_type_value = StringVar()\n\n    top = Toplevel(win)\n    top.title(\"详细信息\")\n    top.geometry('930x724')\n\n    title = ['l1', 'l2', 'l3', 'l4']\n    tree = ttk.Treeview(top, column=title, show='headings', height=20, selectmode='browse')\n    tree.column('l1', anchor='center', width=300)\n    tree.column('l2', anchor='center', width=300)\n    tree.column('l3', anchor='center', width=145)\n    tree.column('l4', anchor='center', width=145)\n    tree.heading('l1', text='职位')\n    tree.heading('l2', text='公司名称')\n    tree.heading('l3', text='工作地点')\n    tree.heading('l4', text='薪资待遇')\n    tree.place(x=0, y=0, width=903, height=725)\n    vbar = ttk.Scrollbar(top, orient=\"vertical\", command=tree.yview)\n    tree.configure(yscrollcommand=vbar.set)\n    vbar.place(x=904, y=5, height=720)\n\n    def search_job():\n        input_keyword = keyword.get()\n        input_page_num = page_num.get()\n        select_com_type_value = com_type_value.get()\n        the_url = \"https://search.51job.com/list/060000,000000,0000,00,9,99,%s,2,%d.html\" % (input_keyword,\n                                                                                             input_page_num)\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                          'Chrome/78.0.3904.108 Safari/537.36'}\n        response = requests.get(the_url, headers=headers)\n        response.encoding = 'gbk'\n        html = response.text\n        soup = BeautifulSoup(html, features='lxml')\n        all_div_e1 = soup.select('div[class=\"el\"]')\n        span_t1 = soup.find_all('span', {'class': 't1'})\n        all_div_jobpositions = soup.find_all('p', {'class': 't1'})\n        all_companys = soup.find_all('span', {'class': 't2'})\n        all_address = soup.find_all('span', {'class': 't3'})\n        all_salary = soup.find_all('span', {'class': 't4'})\n        job_list = []\n        companys_list = []\n        address_list = []\n        salary_list = []\n        for item in all_div_jobpositions:\n            all_titles = item.find_all('a')\n            job_list.append(all_titles[0].get_text().strip('\\r').strip('\\n').strip(' ').strip('.'))\n        for get_item in all_companys:\n            get_a = get_item.find_all('a')\n            for i in get_a:\n                com_name = i.get_text().strip('.')\n                companys_list.append(com_name)\n        for add in all_address:\n            the_list = []\n            add_value = add.get_text()\n            the_list.append(add_value)\n            address_list = address_list + the_list\n        for salary in all_salary:\n            the_list = []\n            salary_value = salary.get_text()\n            if salary_value == \"\":\n                salary_value = \"未知或面谈\"\n            the_list.append(salary_value)\n            salary_list = salary_list + the_list\n        address_list.pop(0)\n        salary_list.pop(0)\n        zipped = zip(job_list, companys_list, address_list, salary_list)\n        for zip_item in zipped:\n            tree.insert(\"\", 1, value=zip_item)\n\n    def clear_data():\n        items = tree.get_children()\n        for each_item in items:\n            tree.delete(each_item)\n\n    wrap_framl = LabelFrame(win, text=\"搜索\", font=('Xhei', '14'), width=650, height=80) \\\n        .place(x=20, y=30)\n    label_notice = Label(wrap_framl, text='职位关键词:', font=('Xhei', '13')) \\\n        .place(x=35, y=60)\n    keyword_entry = Entry(wrap_framl, textvariable=keyword, font=('Xhei', '13')) \\\n        .place(x=150, y=60)\n    label_page_num = Label(wrap_framl, text=\"页数:\", font=('Xhei', '13')) \\\n        .place(x=370, y=60)\n    page_num_chosen = ttk.Combobox(wrap_framl, width=10, textvariable=page_num)\n    page_num_chosen['values'] = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    page_num_chosen.current(0)\n    page_num_chosen.place(x=425, y=60)\n    search_btn = Button(wrap_framl, text='搜索', font=('Xhei', '13'), bg='red', fg='white',\n                        command=search_job) \\\n        .place(x=540, y=55)\n    clear_data_btn = Button(wrap_framl, text='清除', font=('Xhei', '13'), bg='red', fg='white', command=clear_data) \\\n        .place(x=600, y=55)\n    other_keyword_label = Label(win, text=\"其他关键词\", font=('Xhei', '14'), bg='red', fg='white')\\\n        .place(x=290, y=130)\n    wrap_fram2 = LabelFrame(win, text=\"公司性质\", width=200, height=570, font=('Xhei', '14')) \\\n        .place(x=20, y=170)\n    company_type = [('所有', '99'), ('国企', '04'), ('外资(欧美)', '01'), ('外资(非欧美)', '02'), ('上市公司', '10'),\n                        ('合资', '03'), ('民营', '05'), ('外企代表处', '06'), ('政府机关', '07'), ('事业单位', '08')]\n\n    i = 0\n    for com_type, com_type_num in company_type:\n        Radiobutton(wrap_fram2, text=com_type, value=com_type_num, variable=v, font=('XHei', '13'))\\\n            .place(x=30, y=220+i)\n        i += 50\n    wrap_fram3 = LabelFrame(win, text=\"工资范围\", width=200, height=570, font=('Xhei', '14')) \\\n        .place(x=245, y=170)\n    wrap_fram4 = LabelFrame(win, text=\"学历要求\", width=200, height=570, font=('Xhei', '14')) \\\n        .place(x=470, y=170)\n    win.mainloop()\n\n\nstart_search()\n```","source":"_posts/python-scrapy.md","raw":"---\ntitle: 第一个爬虫项目\ndate: 2019-11-28 17:11:14\ntags: Python,爬虫\ncategories: Python\n---\n\n<center>第一个爬虫项目：爬取前程无忧重庆地区工作</center>\n<!--more-->\n<center>LoginUI.py</center>\n\n```python\nfrom tkinter import *\nimport tkinter as tk\nimport tkinter.messagebox\nfrom SearchItemUI import *\nwin = Tk()\nwin.geometry('368x600')\nwin.title('Login UI')\n\nbg_photo = tk.PhotoImage(file='img/login_bg.png')\nbg_label = tk.Label(\n    win,\n    image=bg_photo,\n    compound=tk.CENTER\n).pack()\nlabelimg = PhotoImage(file='img/smile.png')\nimg_label = Label(win, image=labelimg).place(x=120, y=60)\ntext_username = Label(win, bg='#68ABFF', fg='#fff', text='账号:', font=('Xhei', '16')).place(x=60, y=240)\ntext_password = Label(win, bg='#94C3FF', fg='#fff', text='密码:', font=('Xhei', '16')).place(x=60, y=280)\nusername = StringVar()\npassword = StringVar()\ninput_username = Entry(win, textvariable=username, font=('Xhei', '16'), width=14).place(x=120, y=240)\ninout_password = Entry(win, textvariable=password, font=('Xhei', '16'), show='*', width=14).place(x=120, y=280)\n\n\ndef check_login():\n    username_get = username.get()\n    password_get = password.get()\n    if username_get == 'user' and password_get == '123456':\n        win.destroy()\n        start_search()\n    elif username_get == '' or password_get == '':\n        tk.messagebox.showwarning(title='警告', message='请输入用户名或者密码!')\n    else:\n        tk.messagebox.showwarning(title='警告', message='用户名或者密码错误!')\n\n\nbtn_login = Button(win, command=check_login, text='登录', font=('Xhei', '16'), bg=\"#68ABFF\", fg=\"#FFF\").place(x=140, y=340)\nwin.mainloop()\n```\n<center>SearchItemUI.py</center>\n\n```python\nfrom tkinter import *\nimport requests\nimport webbrowser\nimport re\nimport tkinter.ttk as ttk\nfrom bs4 import BeautifulSoup\n\n\ndef start_search():\n    win = Tk()\n    win.title(\"51Job招聘\")\n    win.geometry('690x760')\n    job_categorie = StringVar()\n    keyword = StringVar()\n    page_num = IntVar()\n    v = IntVar()\n    com_type_value = StringVar()\n\n    top = Toplevel(win)\n    top.title(\"详细信息\")\n    top.geometry('930x724')\n\n    title = ['l1', 'l2', 'l3', 'l4']\n    tree = ttk.Treeview(top, column=title, show='headings', height=20, selectmode='browse')\n    tree.column('l1', anchor='center', width=300)\n    tree.column('l2', anchor='center', width=300)\n    tree.column('l3', anchor='center', width=145)\n    tree.column('l4', anchor='center', width=145)\n    tree.heading('l1', text='职位')\n    tree.heading('l2', text='公司名称')\n    tree.heading('l3', text='工作地点')\n    tree.heading('l4', text='薪资待遇')\n    tree.place(x=0, y=0, width=903, height=725)\n    vbar = ttk.Scrollbar(top, orient=\"vertical\", command=tree.yview)\n    tree.configure(yscrollcommand=vbar.set)\n    vbar.place(x=904, y=5, height=720)\n\n    def search_job():\n        input_keyword = keyword.get()\n        input_page_num = page_num.get()\n        select_com_type_value = com_type_value.get()\n        the_url = \"https://search.51job.com/list/060000,000000,0000,00,9,99,%s,2,%d.html\" % (input_keyword,\n                                                                                             input_page_num)\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                          'Chrome/78.0.3904.108 Safari/537.36'}\n        response = requests.get(the_url, headers=headers)\n        response.encoding = 'gbk'\n        html = response.text\n        soup = BeautifulSoup(html, features='lxml')\n        all_div_e1 = soup.select('div[class=\"el\"]')\n        span_t1 = soup.find_all('span', {'class': 't1'})\n        all_div_jobpositions = soup.find_all('p', {'class': 't1'})\n        all_companys = soup.find_all('span', {'class': 't2'})\n        all_address = soup.find_all('span', {'class': 't3'})\n        all_salary = soup.find_all('span', {'class': 't4'})\n        job_list = []\n        companys_list = []\n        address_list = []\n        salary_list = []\n        for item in all_div_jobpositions:\n            all_titles = item.find_all('a')\n            job_list.append(all_titles[0].get_text().strip('\\r').strip('\\n').strip(' ').strip('.'))\n        for get_item in all_companys:\n            get_a = get_item.find_all('a')\n            for i in get_a:\n                com_name = i.get_text().strip('.')\n                companys_list.append(com_name)\n        for add in all_address:\n            the_list = []\n            add_value = add.get_text()\n            the_list.append(add_value)\n            address_list = address_list + the_list\n        for salary in all_salary:\n            the_list = []\n            salary_value = salary.get_text()\n            if salary_value == \"\":\n                salary_value = \"未知或面谈\"\n            the_list.append(salary_value)\n            salary_list = salary_list + the_list\n        address_list.pop(0)\n        salary_list.pop(0)\n        zipped = zip(job_list, companys_list, address_list, salary_list)\n        for zip_item in zipped:\n            tree.insert(\"\", 1, value=zip_item)\n\n    def clear_data():\n        items = tree.get_children()\n        for each_item in items:\n            tree.delete(each_item)\n\n    wrap_framl = LabelFrame(win, text=\"搜索\", font=('Xhei', '14'), width=650, height=80) \\\n        .place(x=20, y=30)\n    label_notice = Label(wrap_framl, text='职位关键词:', font=('Xhei', '13')) \\\n        .place(x=35, y=60)\n    keyword_entry = Entry(wrap_framl, textvariable=keyword, font=('Xhei', '13')) \\\n        .place(x=150, y=60)\n    label_page_num = Label(wrap_framl, text=\"页数:\", font=('Xhei', '13')) \\\n        .place(x=370, y=60)\n    page_num_chosen = ttk.Combobox(wrap_framl, width=10, textvariable=page_num)\n    page_num_chosen['values'] = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    page_num_chosen.current(0)\n    page_num_chosen.place(x=425, y=60)\n    search_btn = Button(wrap_framl, text='搜索', font=('Xhei', '13'), bg='red', fg='white',\n                        command=search_job) \\\n        .place(x=540, y=55)\n    clear_data_btn = Button(wrap_framl, text='清除', font=('Xhei', '13'), bg='red', fg='white', command=clear_data) \\\n        .place(x=600, y=55)\n    other_keyword_label = Label(win, text=\"其他关键词\", font=('Xhei', '14'), bg='red', fg='white')\\\n        .place(x=290, y=130)\n    wrap_fram2 = LabelFrame(win, text=\"公司性质\", width=200, height=570, font=('Xhei', '14')) \\\n        .place(x=20, y=170)\n    company_type = [('所有', '99'), ('国企', '04'), ('外资(欧美)', '01'), ('外资(非欧美)', '02'), ('上市公司', '10'),\n                        ('合资', '03'), ('民营', '05'), ('外企代表处', '06'), ('政府机关', '07'), ('事业单位', '08')]\n\n    i = 0\n    for com_type, com_type_num in company_type:\n        Radiobutton(wrap_fram2, text=com_type, value=com_type_num, variable=v, font=('XHei', '13'))\\\n            .place(x=30, y=220+i)\n        i += 50\n    wrap_fram3 = LabelFrame(win, text=\"工资范围\", width=200, height=570, font=('Xhei', '14')) \\\n        .place(x=245, y=170)\n    wrap_fram4 = LabelFrame(win, text=\"学历要求\", width=200, height=570, font=('Xhei', '14')) \\\n        .place(x=470, y=170)\n    win.mainloop()\n\n\nstart_search()\n```","slug":"python-scrapy","published":1,"updated":"2020-08-27T08:22:17.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg60023r0u2e5frgpql","content":"<center>第一个爬虫项目：爬取前程无忧重庆地区工作</center>\n<a id=\"more\"></a>\n<center>LoginUI.py</center>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter.messagebox</span><br><span class=\"line\"><span class=\"keyword\">from</span> SearchItemUI <span class=\"keyword\">import</span> *</span><br><span class=\"line\">win = Tk()</span><br><span class=\"line\">win.geometry(<span class=\"string\">'368x600'</span>)</span><br><span class=\"line\">win.title(<span class=\"string\">'Login UI'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bg_photo = tk.PhotoImage(file=<span class=\"string\">'img/login_bg.png'</span>)</span><br><span class=\"line\">bg_label = tk.Label(</span><br><span class=\"line\">    win,</span><br><span class=\"line\">    image=bg_photo,</span><br><span class=\"line\">    compound=tk.CENTER</span><br><span class=\"line\">).pack()</span><br><span class=\"line\">labelimg = PhotoImage(file=<span class=\"string\">'img/smile.png'</span>)</span><br><span class=\"line\">img_label = Label(win, image=labelimg).place(x=<span class=\"number\">120</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">text_username = Label(win, bg=<span class=\"string\">'#68ABFF'</span>, fg=<span class=\"string\">'#fff'</span>, text=<span class=\"string\">'账号:'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>)).place(x=<span class=\"number\">60</span>, y=<span class=\"number\">240</span>)</span><br><span class=\"line\">text_password = Label(win, bg=<span class=\"string\">'#94C3FF'</span>, fg=<span class=\"string\">'#fff'</span>, text=<span class=\"string\">'密码:'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>)).place(x=<span class=\"number\">60</span>, y=<span class=\"number\">280</span>)</span><br><span class=\"line\">username = StringVar()</span><br><span class=\"line\">password = StringVar()</span><br><span class=\"line\">input_username = Entry(win, textvariable=username, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>), width=<span class=\"number\">14</span>).place(x=<span class=\"number\">120</span>, y=<span class=\"number\">240</span>)</span><br><span class=\"line\">inout_password = Entry(win, textvariable=password, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>), show=<span class=\"string\">'*'</span>, width=<span class=\"number\">14</span>).place(x=<span class=\"number\">120</span>, y=<span class=\"number\">280</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    username_get = username.get()</span><br><span class=\"line\">    password_get = password.get()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> username_get == <span class=\"string\">'user'</span> <span class=\"keyword\">and</span> password_get == <span class=\"string\">'123456'</span>:</span><br><span class=\"line\">        win.destroy()</span><br><span class=\"line\">        start_search()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> username_get == <span class=\"string\">''</span> <span class=\"keyword\">or</span> password_get == <span class=\"string\">''</span>:</span><br><span class=\"line\">        tk.messagebox.showwarning(title=<span class=\"string\">'警告'</span>, message=<span class=\"string\">'请输入用户名或者密码!'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        tk.messagebox.showwarning(title=<span class=\"string\">'警告'</span>, message=<span class=\"string\">'用户名或者密码错误!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">btn_login = Button(win, command=check_login, text=<span class=\"string\">'登录'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>), bg=<span class=\"string\">\"#68ABFF\"</span>, fg=<span class=\"string\">\"#FFF\"</span>).place(x=<span class=\"number\">140</span>, y=<span class=\"number\">340</span>)</span><br><span class=\"line\">win.mainloop()</span><br></pre></td></tr></table></figure>\n<center>SearchItemUI.py</center>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> webbrowser</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter.ttk <span class=\"keyword\">as</span> ttk</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_search</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    win = Tk()</span><br><span class=\"line\">    win.title(<span class=\"string\">\"51Job招聘\"</span>)</span><br><span class=\"line\">    win.geometry(<span class=\"string\">'690x760'</span>)</span><br><span class=\"line\">    job_categorie = StringVar()</span><br><span class=\"line\">    keyword = StringVar()</span><br><span class=\"line\">    page_num = IntVar()</span><br><span class=\"line\">    v = IntVar()</span><br><span class=\"line\">    com_type_value = StringVar()</span><br><span class=\"line\"></span><br><span class=\"line\">    top = Toplevel(win)</span><br><span class=\"line\">    top.title(<span class=\"string\">\"详细信息\"</span>)</span><br><span class=\"line\">    top.geometry(<span class=\"string\">'930x724'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    title = [<span class=\"string\">'l1'</span>, <span class=\"string\">'l2'</span>, <span class=\"string\">'l3'</span>, <span class=\"string\">'l4'</span>]</span><br><span class=\"line\">    tree = ttk.Treeview(top, column=title, show=<span class=\"string\">'headings'</span>, height=<span class=\"number\">20</span>, selectmode=<span class=\"string\">'browse'</span>)</span><br><span class=\"line\">    tree.column(<span class=\"string\">'l1'</span>, anchor=<span class=\"string\">'center'</span>, width=<span class=\"number\">300</span>)</span><br><span class=\"line\">    tree.column(<span class=\"string\">'l2'</span>, anchor=<span class=\"string\">'center'</span>, width=<span class=\"number\">300</span>)</span><br><span class=\"line\">    tree.column(<span class=\"string\">'l3'</span>, anchor=<span class=\"string\">'center'</span>, width=<span class=\"number\">145</span>)</span><br><span class=\"line\">    tree.column(<span class=\"string\">'l4'</span>, anchor=<span class=\"string\">'center'</span>, width=<span class=\"number\">145</span>)</span><br><span class=\"line\">    tree.heading(<span class=\"string\">'l1'</span>, text=<span class=\"string\">'职位'</span>)</span><br><span class=\"line\">    tree.heading(<span class=\"string\">'l2'</span>, text=<span class=\"string\">'公司名称'</span>)</span><br><span class=\"line\">    tree.heading(<span class=\"string\">'l3'</span>, text=<span class=\"string\">'工作地点'</span>)</span><br><span class=\"line\">    tree.heading(<span class=\"string\">'l4'</span>, text=<span class=\"string\">'薪资待遇'</span>)</span><br><span class=\"line\">    tree.place(x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span>, width=<span class=\"number\">903</span>, height=<span class=\"number\">725</span>)</span><br><span class=\"line\">    vbar = ttk.Scrollbar(top, orient=<span class=\"string\">\"vertical\"</span>, command=tree.yview)</span><br><span class=\"line\">    tree.configure(yscrollcommand=vbar.set)</span><br><span class=\"line\">    vbar.place(x=<span class=\"number\">904</span>, y=<span class=\"number\">5</span>, height=<span class=\"number\">720</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search_job</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        input_keyword = keyword.get()</span><br><span class=\"line\">        input_page_num = page_num.get()</span><br><span class=\"line\">        select_com_type_value = com_type_value.get()</span><br><span class=\"line\">        the_url = <span class=\"string\">\"https://search.51job.com/list/060000,000000,0000,00,9,99,%s,2,%d.html\"</span> % (input_keyword,</span><br><span class=\"line\">                                                                                             input_page_num)</span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class=\"line\">                          <span class=\"string\">'Chrome/78.0.3904.108 Safari/537.36'</span>&#125;</span><br><span class=\"line\">        response = requests.get(the_url, headers=headers)</span><br><span class=\"line\">        response.encoding = <span class=\"string\">'gbk'</span></span><br><span class=\"line\">        html = response.text</span><br><span class=\"line\">        soup = BeautifulSoup(html, features=<span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">        all_div_e1 = soup.select(<span class=\"string\">'div[class=\"el\"]'</span>)</span><br><span class=\"line\">        span_t1 = soup.find_all(<span class=\"string\">'span'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t1'</span>&#125;)</span><br><span class=\"line\">        all_div_jobpositions = soup.find_all(<span class=\"string\">'p'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t1'</span>&#125;)</span><br><span class=\"line\">        all_companys = soup.find_all(<span class=\"string\">'span'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t2'</span>&#125;)</span><br><span class=\"line\">        all_address = soup.find_all(<span class=\"string\">'span'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t3'</span>&#125;)</span><br><span class=\"line\">        all_salary = soup.find_all(<span class=\"string\">'span'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t4'</span>&#125;)</span><br><span class=\"line\">        job_list = []</span><br><span class=\"line\">        companys_list = []</span><br><span class=\"line\">        address_list = []</span><br><span class=\"line\">        salary_list = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> all_div_jobpositions:</span><br><span class=\"line\">            all_titles = item.find_all(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">            job_list.append(all_titles[<span class=\"number\">0</span>].get_text().strip(<span class=\"string\">'\\r'</span>).strip(<span class=\"string\">'\\n'</span>).strip(<span class=\"string\">' '</span>).strip(<span class=\"string\">'.'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> get_item <span class=\"keyword\">in</span> all_companys:</span><br><span class=\"line\">            get_a = get_item.find_all(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> get_a:</span><br><span class=\"line\">                com_name = i.get_text().strip(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">                companys_list.append(com_name)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> add <span class=\"keyword\">in</span> all_address:</span><br><span class=\"line\">            the_list = []</span><br><span class=\"line\">            add_value = add.get_text()</span><br><span class=\"line\">            the_list.append(add_value)</span><br><span class=\"line\">            address_list = address_list + the_list</span><br><span class=\"line\">        <span class=\"keyword\">for</span> salary <span class=\"keyword\">in</span> all_salary:</span><br><span class=\"line\">            the_list = []</span><br><span class=\"line\">            salary_value = salary.get_text()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> salary_value == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">                salary_value = <span class=\"string\">\"未知或面谈\"</span></span><br><span class=\"line\">            the_list.append(salary_value)</span><br><span class=\"line\">            salary_list = salary_list + the_list</span><br><span class=\"line\">        address_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        salary_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        zipped = zip(job_list, companys_list, address_list, salary_list)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> zip_item <span class=\"keyword\">in</span> zipped:</span><br><span class=\"line\">            tree.insert(<span class=\"string\">\"\"</span>, <span class=\"number\">1</span>, value=zip_item)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clear_data</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        items = tree.get_children()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each_item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">            tree.delete(each_item)</span><br><span class=\"line\"></span><br><span class=\"line\">    wrap_framl = LabelFrame(win, text=<span class=\"string\">\"搜索\"</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>), width=<span class=\"number\">650</span>, height=<span class=\"number\">80</span>) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">20</span>, y=<span class=\"number\">30</span>)</span><br><span class=\"line\">    label_notice = Label(wrap_framl, text=<span class=\"string\">'职位关键词:'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">35</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">    keyword_entry = Entry(wrap_framl, textvariable=keyword, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">150</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">    label_page_num = Label(wrap_framl, text=<span class=\"string\">\"页数:\"</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">370</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">    page_num_chosen = ttk.Combobox(wrap_framl, width=<span class=\"number\">10</span>, textvariable=page_num)</span><br><span class=\"line\">    page_num_chosen[<span class=\"string\">'values'</span>] = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    page_num_chosen.current(<span class=\"number\">0</span>)</span><br><span class=\"line\">    page_num_chosen.place(x=<span class=\"number\">425</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">    search_btn = Button(wrap_framl, text=<span class=\"string\">'搜索'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>), bg=<span class=\"string\">'red'</span>, fg=<span class=\"string\">'white'</span>,</span><br><span class=\"line\">                        command=search_job) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">540</span>, y=<span class=\"number\">55</span>)</span><br><span class=\"line\">    clear_data_btn = Button(wrap_framl, text=<span class=\"string\">'清除'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>), bg=<span class=\"string\">'red'</span>, fg=<span class=\"string\">'white'</span>, command=clear_data) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">600</span>, y=<span class=\"number\">55</span>)</span><br><span class=\"line\">    other_keyword_label = Label(win, text=<span class=\"string\">\"其他关键词\"</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>), bg=<span class=\"string\">'red'</span>, fg=<span class=\"string\">'white'</span>)\\</span><br><span class=\"line\">        .place(x=<span class=\"number\">290</span>, y=<span class=\"number\">130</span>)</span><br><span class=\"line\">    wrap_fram2 = LabelFrame(win, text=<span class=\"string\">\"公司性质\"</span>, width=<span class=\"number\">200</span>, height=<span class=\"number\">570</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">20</span>, y=<span class=\"number\">170</span>)</span><br><span class=\"line\">    company_type = [(<span class=\"string\">'所有'</span>, <span class=\"string\">'99'</span>), (<span class=\"string\">'国企'</span>, <span class=\"string\">'04'</span>), (<span class=\"string\">'外资(欧美)'</span>, <span class=\"string\">'01'</span>), (<span class=\"string\">'外资(非欧美)'</span>, <span class=\"string\">'02'</span>), (<span class=\"string\">'上市公司'</span>, <span class=\"string\">'10'</span>),</span><br><span class=\"line\">                        (<span class=\"string\">'合资'</span>, <span class=\"string\">'03'</span>), (<span class=\"string\">'民营'</span>, <span class=\"string\">'05'</span>), (<span class=\"string\">'外企代表处'</span>, <span class=\"string\">'06'</span>), (<span class=\"string\">'政府机关'</span>, <span class=\"string\">'07'</span>), (<span class=\"string\">'事业单位'</span>, <span class=\"string\">'08'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> com_type, com_type_num <span class=\"keyword\">in</span> company_type:</span><br><span class=\"line\">        Radiobutton(wrap_fram2, text=com_type, value=com_type_num, variable=v, font=(<span class=\"string\">'XHei'</span>, <span class=\"string\">'13'</span>))\\</span><br><span class=\"line\">            .place(x=<span class=\"number\">30</span>, y=<span class=\"number\">220</span>+i)</span><br><span class=\"line\">        i += <span class=\"number\">50</span></span><br><span class=\"line\">    wrap_fram3 = LabelFrame(win, text=<span class=\"string\">\"工资范围\"</span>, width=<span class=\"number\">200</span>, height=<span class=\"number\">570</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">245</span>, y=<span class=\"number\">170</span>)</span><br><span class=\"line\">    wrap_fram4 = LabelFrame(win, text=<span class=\"string\">\"学历要求\"</span>, width=<span class=\"number\">200</span>, height=<span class=\"number\">570</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">470</span>, y=<span class=\"number\">170</span>)</span><br><span class=\"line\">    win.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">start_search()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>第一个爬虫项目：爬取前程无忧重庆地区工作</center>","more":"<center>LoginUI.py</center>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter.messagebox</span><br><span class=\"line\"><span class=\"keyword\">from</span> SearchItemUI <span class=\"keyword\">import</span> *</span><br><span class=\"line\">win = Tk()</span><br><span class=\"line\">win.geometry(<span class=\"string\">'368x600'</span>)</span><br><span class=\"line\">win.title(<span class=\"string\">'Login UI'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bg_photo = tk.PhotoImage(file=<span class=\"string\">'img/login_bg.png'</span>)</span><br><span class=\"line\">bg_label = tk.Label(</span><br><span class=\"line\">    win,</span><br><span class=\"line\">    image=bg_photo,</span><br><span class=\"line\">    compound=tk.CENTER</span><br><span class=\"line\">).pack()</span><br><span class=\"line\">labelimg = PhotoImage(file=<span class=\"string\">'img/smile.png'</span>)</span><br><span class=\"line\">img_label = Label(win, image=labelimg).place(x=<span class=\"number\">120</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">text_username = Label(win, bg=<span class=\"string\">'#68ABFF'</span>, fg=<span class=\"string\">'#fff'</span>, text=<span class=\"string\">'账号:'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>)).place(x=<span class=\"number\">60</span>, y=<span class=\"number\">240</span>)</span><br><span class=\"line\">text_password = Label(win, bg=<span class=\"string\">'#94C3FF'</span>, fg=<span class=\"string\">'#fff'</span>, text=<span class=\"string\">'密码:'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>)).place(x=<span class=\"number\">60</span>, y=<span class=\"number\">280</span>)</span><br><span class=\"line\">username = StringVar()</span><br><span class=\"line\">password = StringVar()</span><br><span class=\"line\">input_username = Entry(win, textvariable=username, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>), width=<span class=\"number\">14</span>).place(x=<span class=\"number\">120</span>, y=<span class=\"number\">240</span>)</span><br><span class=\"line\">inout_password = Entry(win, textvariable=password, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>), show=<span class=\"string\">'*'</span>, width=<span class=\"number\">14</span>).place(x=<span class=\"number\">120</span>, y=<span class=\"number\">280</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    username_get = username.get()</span><br><span class=\"line\">    password_get = password.get()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> username_get == <span class=\"string\">'user'</span> <span class=\"keyword\">and</span> password_get == <span class=\"string\">'123456'</span>:</span><br><span class=\"line\">        win.destroy()</span><br><span class=\"line\">        start_search()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> username_get == <span class=\"string\">''</span> <span class=\"keyword\">or</span> password_get == <span class=\"string\">''</span>:</span><br><span class=\"line\">        tk.messagebox.showwarning(title=<span class=\"string\">'警告'</span>, message=<span class=\"string\">'请输入用户名或者密码!'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        tk.messagebox.showwarning(title=<span class=\"string\">'警告'</span>, message=<span class=\"string\">'用户名或者密码错误!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">btn_login = Button(win, command=check_login, text=<span class=\"string\">'登录'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'16'</span>), bg=<span class=\"string\">\"#68ABFF\"</span>, fg=<span class=\"string\">\"#FFF\"</span>).place(x=<span class=\"number\">140</span>, y=<span class=\"number\">340</span>)</span><br><span class=\"line\">win.mainloop()</span><br></pre></td></tr></table></figure>\n<center>SearchItemUI.py</center>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> webbrowser</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter.ttk <span class=\"keyword\">as</span> ttk</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_search</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    win = Tk()</span><br><span class=\"line\">    win.title(<span class=\"string\">\"51Job招聘\"</span>)</span><br><span class=\"line\">    win.geometry(<span class=\"string\">'690x760'</span>)</span><br><span class=\"line\">    job_categorie = StringVar()</span><br><span class=\"line\">    keyword = StringVar()</span><br><span class=\"line\">    page_num = IntVar()</span><br><span class=\"line\">    v = IntVar()</span><br><span class=\"line\">    com_type_value = StringVar()</span><br><span class=\"line\"></span><br><span class=\"line\">    top = Toplevel(win)</span><br><span class=\"line\">    top.title(<span class=\"string\">\"详细信息\"</span>)</span><br><span class=\"line\">    top.geometry(<span class=\"string\">'930x724'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    title = [<span class=\"string\">'l1'</span>, <span class=\"string\">'l2'</span>, <span class=\"string\">'l3'</span>, <span class=\"string\">'l4'</span>]</span><br><span class=\"line\">    tree = ttk.Treeview(top, column=title, show=<span class=\"string\">'headings'</span>, height=<span class=\"number\">20</span>, selectmode=<span class=\"string\">'browse'</span>)</span><br><span class=\"line\">    tree.column(<span class=\"string\">'l1'</span>, anchor=<span class=\"string\">'center'</span>, width=<span class=\"number\">300</span>)</span><br><span class=\"line\">    tree.column(<span class=\"string\">'l2'</span>, anchor=<span class=\"string\">'center'</span>, width=<span class=\"number\">300</span>)</span><br><span class=\"line\">    tree.column(<span class=\"string\">'l3'</span>, anchor=<span class=\"string\">'center'</span>, width=<span class=\"number\">145</span>)</span><br><span class=\"line\">    tree.column(<span class=\"string\">'l4'</span>, anchor=<span class=\"string\">'center'</span>, width=<span class=\"number\">145</span>)</span><br><span class=\"line\">    tree.heading(<span class=\"string\">'l1'</span>, text=<span class=\"string\">'职位'</span>)</span><br><span class=\"line\">    tree.heading(<span class=\"string\">'l2'</span>, text=<span class=\"string\">'公司名称'</span>)</span><br><span class=\"line\">    tree.heading(<span class=\"string\">'l3'</span>, text=<span class=\"string\">'工作地点'</span>)</span><br><span class=\"line\">    tree.heading(<span class=\"string\">'l4'</span>, text=<span class=\"string\">'薪资待遇'</span>)</span><br><span class=\"line\">    tree.place(x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span>, width=<span class=\"number\">903</span>, height=<span class=\"number\">725</span>)</span><br><span class=\"line\">    vbar = ttk.Scrollbar(top, orient=<span class=\"string\">\"vertical\"</span>, command=tree.yview)</span><br><span class=\"line\">    tree.configure(yscrollcommand=vbar.set)</span><br><span class=\"line\">    vbar.place(x=<span class=\"number\">904</span>, y=<span class=\"number\">5</span>, height=<span class=\"number\">720</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search_job</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        input_keyword = keyword.get()</span><br><span class=\"line\">        input_page_num = page_num.get()</span><br><span class=\"line\">        select_com_type_value = com_type_value.get()</span><br><span class=\"line\">        the_url = <span class=\"string\">\"https://search.51job.com/list/060000,000000,0000,00,9,99,%s,2,%d.html\"</span> % (input_keyword,</span><br><span class=\"line\">                                                                                             input_page_num)</span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class=\"line\">                          <span class=\"string\">'Chrome/78.0.3904.108 Safari/537.36'</span>&#125;</span><br><span class=\"line\">        response = requests.get(the_url, headers=headers)</span><br><span class=\"line\">        response.encoding = <span class=\"string\">'gbk'</span></span><br><span class=\"line\">        html = response.text</span><br><span class=\"line\">        soup = BeautifulSoup(html, features=<span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">        all_div_e1 = soup.select(<span class=\"string\">'div[class=\"el\"]'</span>)</span><br><span class=\"line\">        span_t1 = soup.find_all(<span class=\"string\">'span'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t1'</span>&#125;)</span><br><span class=\"line\">        all_div_jobpositions = soup.find_all(<span class=\"string\">'p'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t1'</span>&#125;)</span><br><span class=\"line\">        all_companys = soup.find_all(<span class=\"string\">'span'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t2'</span>&#125;)</span><br><span class=\"line\">        all_address = soup.find_all(<span class=\"string\">'span'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t3'</span>&#125;)</span><br><span class=\"line\">        all_salary = soup.find_all(<span class=\"string\">'span'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'t4'</span>&#125;)</span><br><span class=\"line\">        job_list = []</span><br><span class=\"line\">        companys_list = []</span><br><span class=\"line\">        address_list = []</span><br><span class=\"line\">        salary_list = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> all_div_jobpositions:</span><br><span class=\"line\">            all_titles = item.find_all(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">            job_list.append(all_titles[<span class=\"number\">0</span>].get_text().strip(<span class=\"string\">'\\r'</span>).strip(<span class=\"string\">'\\n'</span>).strip(<span class=\"string\">' '</span>).strip(<span class=\"string\">'.'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> get_item <span class=\"keyword\">in</span> all_companys:</span><br><span class=\"line\">            get_a = get_item.find_all(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> get_a:</span><br><span class=\"line\">                com_name = i.get_text().strip(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">                companys_list.append(com_name)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> add <span class=\"keyword\">in</span> all_address:</span><br><span class=\"line\">            the_list = []</span><br><span class=\"line\">            add_value = add.get_text()</span><br><span class=\"line\">            the_list.append(add_value)</span><br><span class=\"line\">            address_list = address_list + the_list</span><br><span class=\"line\">        <span class=\"keyword\">for</span> salary <span class=\"keyword\">in</span> all_salary:</span><br><span class=\"line\">            the_list = []</span><br><span class=\"line\">            salary_value = salary.get_text()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> salary_value == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">                salary_value = <span class=\"string\">\"未知或面谈\"</span></span><br><span class=\"line\">            the_list.append(salary_value)</span><br><span class=\"line\">            salary_list = salary_list + the_list</span><br><span class=\"line\">        address_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        salary_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        zipped = zip(job_list, companys_list, address_list, salary_list)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> zip_item <span class=\"keyword\">in</span> zipped:</span><br><span class=\"line\">            tree.insert(<span class=\"string\">\"\"</span>, <span class=\"number\">1</span>, value=zip_item)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clear_data</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        items = tree.get_children()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each_item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">            tree.delete(each_item)</span><br><span class=\"line\"></span><br><span class=\"line\">    wrap_framl = LabelFrame(win, text=<span class=\"string\">\"搜索\"</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>), width=<span class=\"number\">650</span>, height=<span class=\"number\">80</span>) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">20</span>, y=<span class=\"number\">30</span>)</span><br><span class=\"line\">    label_notice = Label(wrap_framl, text=<span class=\"string\">'职位关键词:'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">35</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">    keyword_entry = Entry(wrap_framl, textvariable=keyword, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">150</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">    label_page_num = Label(wrap_framl, text=<span class=\"string\">\"页数:\"</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">370</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">    page_num_chosen = ttk.Combobox(wrap_framl, width=<span class=\"number\">10</span>, textvariable=page_num)</span><br><span class=\"line\">    page_num_chosen[<span class=\"string\">'values'</span>] = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    page_num_chosen.current(<span class=\"number\">0</span>)</span><br><span class=\"line\">    page_num_chosen.place(x=<span class=\"number\">425</span>, y=<span class=\"number\">60</span>)</span><br><span class=\"line\">    search_btn = Button(wrap_framl, text=<span class=\"string\">'搜索'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>), bg=<span class=\"string\">'red'</span>, fg=<span class=\"string\">'white'</span>,</span><br><span class=\"line\">                        command=search_job) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">540</span>, y=<span class=\"number\">55</span>)</span><br><span class=\"line\">    clear_data_btn = Button(wrap_framl, text=<span class=\"string\">'清除'</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'13'</span>), bg=<span class=\"string\">'red'</span>, fg=<span class=\"string\">'white'</span>, command=clear_data) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">600</span>, y=<span class=\"number\">55</span>)</span><br><span class=\"line\">    other_keyword_label = Label(win, text=<span class=\"string\">\"其他关键词\"</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>), bg=<span class=\"string\">'red'</span>, fg=<span class=\"string\">'white'</span>)\\</span><br><span class=\"line\">        .place(x=<span class=\"number\">290</span>, y=<span class=\"number\">130</span>)</span><br><span class=\"line\">    wrap_fram2 = LabelFrame(win, text=<span class=\"string\">\"公司性质\"</span>, width=<span class=\"number\">200</span>, height=<span class=\"number\">570</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">20</span>, y=<span class=\"number\">170</span>)</span><br><span class=\"line\">    company_type = [(<span class=\"string\">'所有'</span>, <span class=\"string\">'99'</span>), (<span class=\"string\">'国企'</span>, <span class=\"string\">'04'</span>), (<span class=\"string\">'外资(欧美)'</span>, <span class=\"string\">'01'</span>), (<span class=\"string\">'外资(非欧美)'</span>, <span class=\"string\">'02'</span>), (<span class=\"string\">'上市公司'</span>, <span class=\"string\">'10'</span>),</span><br><span class=\"line\">                        (<span class=\"string\">'合资'</span>, <span class=\"string\">'03'</span>), (<span class=\"string\">'民营'</span>, <span class=\"string\">'05'</span>), (<span class=\"string\">'外企代表处'</span>, <span class=\"string\">'06'</span>), (<span class=\"string\">'政府机关'</span>, <span class=\"string\">'07'</span>), (<span class=\"string\">'事业单位'</span>, <span class=\"string\">'08'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> com_type, com_type_num <span class=\"keyword\">in</span> company_type:</span><br><span class=\"line\">        Radiobutton(wrap_fram2, text=com_type, value=com_type_num, variable=v, font=(<span class=\"string\">'XHei'</span>, <span class=\"string\">'13'</span>))\\</span><br><span class=\"line\">            .place(x=<span class=\"number\">30</span>, y=<span class=\"number\">220</span>+i)</span><br><span class=\"line\">        i += <span class=\"number\">50</span></span><br><span class=\"line\">    wrap_fram3 = LabelFrame(win, text=<span class=\"string\">\"工资范围\"</span>, width=<span class=\"number\">200</span>, height=<span class=\"number\">570</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">245</span>, y=<span class=\"number\">170</span>)</span><br><span class=\"line\">    wrap_fram4 = LabelFrame(win, text=<span class=\"string\">\"学历要求\"</span>, width=<span class=\"number\">200</span>, height=<span class=\"number\">570</span>, font=(<span class=\"string\">'Xhei'</span>, <span class=\"string\">'14'</span>)) \\</span><br><span class=\"line\">        .place(x=<span class=\"number\">470</span>, y=<span class=\"number\">170</span>)</span><br><span class=\"line\">    win.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">start_search()</span><br></pre></td></tr></table></figure>"},{"title":"配置了跨域，但是请求还是显示404的解决办法","date":"2020-04-13T10:23:07.000Z","_content":"原来使用`npm run dev`重启以下项目就行了，因为这个问题头疼了很久，以为跨域配置错误","source":"_posts/solution-404.md","raw":"---\ntitle: 配置了跨域，但是请求还是显示404的解决办法\ndate: 2020-04-13 18:23:07\ntags: 笔记, Vue.js, Webpack\ncategories: 笔记\n---\n原来使用`npm run dev`重启以下项目就行了，因为这个问题头疼了很久，以为跨域配置错误","slug":"solution-404","published":1,"updated":"2020-08-27T08:22:17.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg60025r0u24jzx82wl","content":"<p>原来使用<code>npm run dev</code>重启以下项目就行了，因为这个问题头疼了很久，以为跨域配置错误</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原来使用<code>npm run dev</code>重启以下项目就行了，因为这个问题头疼了很久，以为跨域配置错误</p>\n"},{"title":"Windows10/Office系列软件激活教程","date":"2020-02-22T12:05:06.000Z","_content":"<p align=\"left\">这个教程仅在Win10和Office16以后的版本做过测试并通过，其它Windows系统和其它Office软件版本未作测试，可以自行激活。</p>\n<p align=\"left\">点击下方“<span style=\"color: red;font-weight: bolder\">阅读更多</span>”进入教程</p>\n<!--more-->\n\n<h3 align=\"center\" style=\"font-weight: bolder\">激活前提</h3>\n\n+ 退出Windows自带安全软件或者360等安全软件，此激活程序请放心使用\n+ 下载KMS程序压缩包，点击下方链接下载KMS\n+ 下载完成后解压，得到一个名为KMS文件夹\n+ 进入文件夹，点击KMSpico_setup.exe进行安装\n+ <span style=\"color: red\">下载链接</span>：https://pan.baidu.com/s/1hsnChXWHXtkC2GEZzqgH4w 提取码: yavm\n\n---\n\n<h4 align=\"center\" style=\"font-weight: bolder\">开始</h4>\n\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms1.png\" alt=\"点击这个安装KMS\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms2.png\" alt=\"点击继续\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms3.png\" alt=\"点击我同意，再点击继续\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms4.png\" alt=\"等待安装完成\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms5.png\" alt=\"按Windows键或者点击左下角Windows图标打开开始菜单，找到这个文件夹，可以按字母K查找\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms6.png\" alt=\"找到这个，右键单击\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms7.png\" alt=\"选择更多，再选择以管理员身份运行\">\n</div>\n<p align=\"center\" style=\"font-weight: bolder; color: red\">执行上一步之后，不会显示软件界面，后台自动激活，听到Program Complete表示激活完成</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms9.png\" alt=\"桌面右键此电脑再点击属性，显示Windows已激活\">\n</div>\n<p align=\"center\" style=\"font-weight: bolder; color: red\">激活完成</p>\n\n","source":"_posts/tips-win-active.md","raw":"---\ntitle: Windows10/Office系列软件激活教程\ndate: 2020-02-22 20:05:06\ntags: 激活\ncategories: 电脑相关\n---\n<p align=\"left\">这个教程仅在Win10和Office16以后的版本做过测试并通过，其它Windows系统和其它Office软件版本未作测试，可以自行激活。</p>\n<p align=\"left\">点击下方“<span style=\"color: red;font-weight: bolder\">阅读更多</span>”进入教程</p>\n<!--more-->\n\n<h3 align=\"center\" style=\"font-weight: bolder\">激活前提</h3>\n\n+ 退出Windows自带安全软件或者360等安全软件，此激活程序请放心使用\n+ 下载KMS程序压缩包，点击下方链接下载KMS\n+ 下载完成后解压，得到一个名为KMS文件夹\n+ 进入文件夹，点击KMSpico_setup.exe进行安装\n+ <span style=\"color: red\">下载链接</span>：https://pan.baidu.com/s/1hsnChXWHXtkC2GEZzqgH4w 提取码: yavm\n\n---\n\n<h4 align=\"center\" style=\"font-weight: bolder\">开始</h4>\n\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms1.png\" alt=\"点击这个安装KMS\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms2.png\" alt=\"点击继续\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms3.png\" alt=\"点击我同意，再点击继续\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms4.png\" alt=\"等待安装完成\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms5.png\" alt=\"按Windows键或者点击左下角Windows图标打开开始菜单，找到这个文件夹，可以按字母K查找\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms6.png\" alt=\"找到这个，右键单击\">\n</div>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms7.png\" alt=\"选择更多，再选择以管理员身份运行\">\n</div>\n<p align=\"center\" style=\"font-weight: bolder; color: red\">执行上一步之后，不会显示软件界面，后台自动激活，听到Program Complete表示激活完成</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms9.png\" alt=\"桌面右键此电脑再点击属性，显示Windows已激活\">\n</div>\n<p align=\"center\" style=\"font-weight: bolder; color: red\">激活完成</p>\n\n","slug":"tips-win-active","published":1,"updated":"2020-08-27T08:22:17.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrg70028r0u20zr03mgl","content":"<p align=\"left\">这个教程仅在Win10和Office16以后的版本做过测试并通过，其它Windows系统和其它Office软件版本未作测试，可以自行激活。</p>\n<p align=\"left\">点击下方“<span style=\"color: red;font-weight: bolder\">阅读更多</span>”进入教程</p>\n<a id=\"more\"></a>\n\n<h3 align=\"center\" style=\"font-weight: bolder\">激活前提</h3>\n\n<ul>\n<li>退出Windows自带安全软件或者360等安全软件，此激活程序请放心使用</li>\n<li>下载KMS程序压缩包，点击下方链接下载KMS</li>\n<li>下载完成后解压，得到一个名为KMS文件夹</li>\n<li>进入文件夹，点击KMSpico_setup.exe进行安装</li>\n<li><span style=\"color: red\">下载链接</span>：<a href=\"https://pan.baidu.com/s/1hsnChXWHXtkC2GEZzqgH4w\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1hsnChXWHXtkC2GEZzqgH4w</a> 提取码: yavm</li>\n</ul>\n<hr>\n<h4 align=\"center\" style=\"font-weight: bolder\">开始</h4>\n\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms1.png\" alt=\"点击这个安装KMS\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms2.png\" alt=\"点击继续\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms3.png\" alt=\"点击我同意，再点击继续\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms4.png\" alt=\"等待安装完成\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms5.png\" alt=\"按Windows键或者点击左下角Windows图标打开开始菜单，找到这个文件夹，可以按字母K查找\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms6.png\" alt=\"找到这个，右键单击\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms7.png\" alt=\"选择更多，再选择以管理员身份运行\">\n</div>\n<p align=\"center\" style=\"font-weight: bolder; color: red\">执行上一步之后，不会显示软件界面，后台自动激活，听到Program Complete表示激活完成</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms9.png\" alt=\"桌面右键此电脑再点击属性，显示Windows已激活\">\n</div>\n<p align=\"center\" style=\"font-weight: bolder; color: red\">激活完成</p>\n\n","site":{"data":{}},"excerpt":"<p align=\"left\">这个教程仅在Win10和Office16以后的版本做过测试并通过，其它Windows系统和其它Office软件版本未作测试，可以自行激活。</p>\n<p align=\"left\">点击下方“<span style=\"color: red;font-weight: bolder\">阅读更多</span>”进入教程</p>","more":"<h3 align=\"center\" style=\"font-weight: bolder\">激活前提</h3>\n\n<ul>\n<li>退出Windows自带安全软件或者360等安全软件，此激活程序请放心使用</li>\n<li>下载KMS程序压缩包，点击下方链接下载KMS</li>\n<li>下载完成后解压，得到一个名为KMS文件夹</li>\n<li>进入文件夹，点击KMSpico_setup.exe进行安装</li>\n<li><span style=\"color: red\">下载链接</span>：<a href=\"https://pan.baidu.com/s/1hsnChXWHXtkC2GEZzqgH4w\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1hsnChXWHXtkC2GEZzqgH4w</a> 提取码: yavm</li>\n</ul>\n<hr>\n<h4 align=\"center\" style=\"font-weight: bolder\">开始</h4>\n\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms1.png\" alt=\"点击这个安装KMS\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms2.png\" alt=\"点击继续\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms3.png\" alt=\"点击我同意，再点击继续\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms4.png\" alt=\"等待安装完成\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms5.png\" alt=\"按Windows键或者点击左下角Windows图标打开开始菜单，找到这个文件夹，可以按字母K查找\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms6.png\" alt=\"找到这个，右键单击\">\n</div>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms7.png\" alt=\"选择更多，再选择以管理员身份运行\">\n</div>\n<p align=\"center\" style=\"font-weight: bolder; color: red\">执行上一步之后，不会显示软件界面，后台自动激活，听到Program Complete表示激活完成</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/kms9.png\" alt=\"桌面右键此电脑再点击属性，显示Windows已激活\">\n</div>\n<p align=\"center\" style=\"font-weight: bolder; color: red\">激活完成</p>"},{"title":"Vue 组件 | 子组件索引","date":"2020-02-28T08:13:13.000Z","_content":"<h4 style=\"color: #999;\" align=\"left\">Vue提供的子组件索引方法</h4>\n<p align=\"left\">使用特殊的属性ref来为子组件指定一个索引名称</p>\n<p align=\"left\">在父组件模板中，子组件标签上使用了ref指定了一个名称ComA，并在父组件内通过this.$refs来访问ComA这个子组件</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_com_child.gif\" alt=\"Demo\">\n</div>\n\n<!--more-->\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<button @click=\"handleRef\">通过ref获取子组件实例</button>\n\t\t<my-item ref=\"comA\"></my-item>\n\t</div>\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\tVue.component('my-item', {\n\t\t\ttemplate: \"<div>子组件</div>\",\n\t\t\tdata:  function (){\n\t\t\t\treturn {\n\t\t\t\t\tmessage: '子组件内容'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tmethods: {\n\t\t\t\thandleRef: function (){\n\t\t\t\t\tvar msg = this.$refs.comA.message;\n\t\t\t\t\tconsole.log(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t</script>\n</body>\n</html>\n```","source":"_posts/vue-com-child.md","raw":"---\ntitle: Vue 组件 | 子组件索引\ndate: 2020-02-28 16:13:13\ntags: Vue\ncategories: Vue.js\n---\n<h4 style=\"color: #999;\" align=\"left\">Vue提供的子组件索引方法</h4>\n<p align=\"left\">使用特殊的属性ref来为子组件指定一个索引名称</p>\n<p align=\"left\">在父组件模板中，子组件标签上使用了ref指定了一个名称ComA，并在父组件内通过this.$refs来访问ComA这个子组件</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_com_child.gif\" alt=\"Demo\">\n</div>\n\n<!--more-->\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<button @click=\"handleRef\">通过ref获取子组件实例</button>\n\t\t<my-item ref=\"comA\"></my-item>\n\t</div>\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\tVue.component('my-item', {\n\t\t\ttemplate: \"<div>子组件</div>\",\n\t\t\tdata:  function (){\n\t\t\t\treturn {\n\t\t\t\t\tmessage: '子组件内容'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tmethods: {\n\t\t\t\thandleRef: function (){\n\t\t\t\t\tvar msg = this.$refs.comA.message;\n\t\t\t\t\tconsole.log(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t</script>\n</body>\n</html>\n```","slug":"vue-com-child","published":1,"updated":"2020-08-27T08:22:17.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrga002br0u2dlgs5hwy","content":"<h4 style=\"color: #999;\" align=\"left\">Vue提供的子组件索引方法</h4>\n<p align=\"left\">使用特殊的属性ref来为子组件指定一个索引名称</p>\n<p align=\"left\">在父组件模板中，子组件标签上使用了ref指定了一个名称ComA，并在父组件内通过this.$refs来访问ComA这个子组件</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_com_child.gif\" alt=\"Demo\">\n</div>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleRef\"</span>&gt;</span>通过ref获取子组件实例<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">my-item</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"comA\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-item</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'my-item'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\ttemplate: \"<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>子组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\",</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata:  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tmessage: <span class=\"string\">'子组件内容'</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\thandleRef: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> msg = <span class=\"keyword\">this</span>.$refs.comA.message;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(msg);</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 style=\"color: #999;\" align=\"left\">Vue提供的子组件索引方法</h4>\n<p align=\"left\">使用特殊的属性ref来为子组件指定一个索引名称</p>\n<p align=\"left\">在父组件模板中，子组件标签上使用了ref指定了一个名称ComA，并在父组件内通过this.$refs来访问ComA这个子组件</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_com_child.gif\" alt=\"Demo\">\n</div>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleRef\"</span>&gt;</span>通过ref获取子组件实例<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">my-item</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"comA\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-item</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'my-item'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\ttemplate: \"<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>子组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\",</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata:  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tmessage: <span class=\"string\">'子组件内容'</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\thandleRef: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> msg = <span class=\"keyword\">this</span>.$refs.comA.message;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(msg);</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue路由笔记","date":"2020-03-22T03:45:53.000Z","_content":"<center></center>\n<!--more-->\n\n**redirect重定位，给路由指定默认的组件，打开就是指向的默认组件**\n\n```javascript\nvar router = new VueRouter({\n    route: [\n        //这里path后不是conponent，而是用redirect指向一个组件路径\n        {path: '/', redirect: '/login'},\n        {path: '/login', conponent: login}\n    ]\n})\n```\n\n**给激活的router-link添加高亮的两种方式**\n\n- 直接给默认的linkActiveClass添加样式\n- 改变router-link的默认类，使用构造方法VueRouter中的linkActiveClass来给自定义新的类\n\n```javascript\nvar router = new VueRouter({\n    route: [\n        {path: '/login', conponent: login}\n    ],\n    linkActiveClass: 'myActive', //改变了默认的类，可以给这个类指定样式使得激活后高亮\n})\n```\n\n**给router-link添加参数传递的两种方式**\n\n1. 在router-link中的to中加入参数：?id=10&name=username，组件中可以通过**$route.query.id**和**$route.query.name**来获取传递的参数值\n\n```html\n<router-link to='/login?id=10&name=username'></router-link>\n```\n\n2. 在路由的构造函数的routes的path中使用**/:name**来说明这里是会有参数传递的，也可以理解为占一个位置，可以通过**$route.params.id**和**$route.params.name**获取\n\n```javascript\nvar router = new VueRouter({\n    routes: [\n        {path: '/login/:id/:name', conponent: login}\n    ]\n})\n```\n\n​\t传递参数： 这里的实际参数id就为10，name就是username\n\n```html\n<router-link to='/login/10/username'></router-link>\n```\n\n**路由嵌套**\n\n​\t在路由构造函数实例中的**path**中添加**children**指向子路由，组件中还有router-link指向子组件\n\n\n\n```javascript\nvar parent = {\n    template: `\n\t\t<div>\n\t\t\tParent\n\t\t\t<router-link to='/parent/son'></router-link>\n\t\t</div>\n\t`\n}\nvar router = new VueRouter({\n    route: [\n        {\n            path: '/parent',\n            component: parent,\n            children: [\n                {path: 'son', component: son}\n            ]\n        }\n    ]\n})\n```\n\n**使用命名视图给路由组件添加名称，方便给每个组件渲染样式**\n\n```html\n<div id='app'>\n    <router-view></router-view>\n    <router-view name='left'></router-view>\n    <router-view name='main'></router-view>\n</div>\n```\n\n```javascript\n\nvar header = {\n    template: '<h1>顶部</h1>'\n}\nvar leftBox = {\n    template: '<h1>左侧侧边栏</h1>'\n}\nvar rightBox = {\n    template: '<h1>主体区域</h1>'\n}\nvar router = new VueRouter({\n    routes: [\n        { \n            path: '/', \n            components: {\n                'default': header,\n                'left': leftBox,\n                'main': rightBox\n            }\n        }\n    ]\n})\nvar app = new Vue({\n    el: '#app',\n    router: router,\n})\n\n```\n\n","source":"_posts/vue-component-note2.md","raw":"---\ntitle: Vue路由笔记\ndate: 2020-03-22 11:45:53\ntags: Vue\ncategories: Vue.js\n---\n<center></center>\n<!--more-->\n\n**redirect重定位，给路由指定默认的组件，打开就是指向的默认组件**\n\n```javascript\nvar router = new VueRouter({\n    route: [\n        //这里path后不是conponent，而是用redirect指向一个组件路径\n        {path: '/', redirect: '/login'},\n        {path: '/login', conponent: login}\n    ]\n})\n```\n\n**给激活的router-link添加高亮的两种方式**\n\n- 直接给默认的linkActiveClass添加样式\n- 改变router-link的默认类，使用构造方法VueRouter中的linkActiveClass来给自定义新的类\n\n```javascript\nvar router = new VueRouter({\n    route: [\n        {path: '/login', conponent: login}\n    ],\n    linkActiveClass: 'myActive', //改变了默认的类，可以给这个类指定样式使得激活后高亮\n})\n```\n\n**给router-link添加参数传递的两种方式**\n\n1. 在router-link中的to中加入参数：?id=10&name=username，组件中可以通过**$route.query.id**和**$route.query.name**来获取传递的参数值\n\n```html\n<router-link to='/login?id=10&name=username'></router-link>\n```\n\n2. 在路由的构造函数的routes的path中使用**/:name**来说明这里是会有参数传递的，也可以理解为占一个位置，可以通过**$route.params.id**和**$route.params.name**获取\n\n```javascript\nvar router = new VueRouter({\n    routes: [\n        {path: '/login/:id/:name', conponent: login}\n    ]\n})\n```\n\n​\t传递参数： 这里的实际参数id就为10，name就是username\n\n```html\n<router-link to='/login/10/username'></router-link>\n```\n\n**路由嵌套**\n\n​\t在路由构造函数实例中的**path**中添加**children**指向子路由，组件中还有router-link指向子组件\n\n\n\n```javascript\nvar parent = {\n    template: `\n\t\t<div>\n\t\t\tParent\n\t\t\t<router-link to='/parent/son'></router-link>\n\t\t</div>\n\t`\n}\nvar router = new VueRouter({\n    route: [\n        {\n            path: '/parent',\n            component: parent,\n            children: [\n                {path: 'son', component: son}\n            ]\n        }\n    ]\n})\n```\n\n**使用命名视图给路由组件添加名称，方便给每个组件渲染样式**\n\n```html\n<div id='app'>\n    <router-view></router-view>\n    <router-view name='left'></router-view>\n    <router-view name='main'></router-view>\n</div>\n```\n\n```javascript\n\nvar header = {\n    template: '<h1>顶部</h1>'\n}\nvar leftBox = {\n    template: '<h1>左侧侧边栏</h1>'\n}\nvar rightBox = {\n    template: '<h1>主体区域</h1>'\n}\nvar router = new VueRouter({\n    routes: [\n        { \n            path: '/', \n            components: {\n                'default': header,\n                'left': leftBox,\n                'main': rightBox\n            }\n        }\n    ]\n})\nvar app = new Vue({\n    el: '#app',\n    router: router,\n})\n\n```\n\n","slug":"vue-component-note2","published":1,"updated":"2020-08-27T08:22:17.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgb002dr0u26j3xchux","content":"<center></center>\n<a id=\"more\"></a>\n\n<p><strong>redirect重定位，给路由指定默认的组件，打开就是指向的默认组件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    route: [</span><br><span class=\"line\">        <span class=\"comment\">//这里path后不是conponent，而是用redirect指向一个组件路径</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">redirect</span>: <span class=\"string\">'/login'</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">conponent</span>: login&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>给激活的router-link添加高亮的两种方式</strong></p>\n<ul>\n<li>直接给默认的linkActiveClass添加样式</li>\n<li>改变router-link的默认类，使用构造方法VueRouter中的linkActiveClass来给自定义新的类</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    route: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">conponent</span>: login&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    linkActiveClass: <span class=\"string\">'myActive'</span>, <span class=\"comment\">//改变了默认的类，可以给这个类指定样式使得激活后高亮</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>给router-link添加参数传递的两种方式</strong></p>\n<ol>\n<li>在router-link中的to中加入参数：?id=10&amp;name=username，组件中可以通过<strong>$route.query.id</strong>和<strong>$route.query.name</strong>来获取传递的参数值</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">'/login?id=10&amp;name=username'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在路由的构造函数的routes的path中使用<strong>/:name</strong>来说明这里是会有参数传递的，也可以理解为占一个位置，可以通过<strong>$route.params.id</strong>和<strong>$route.params.name</strong>获取</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/login/:id/:name'</span>, <span class=\"attr\">conponent</span>: login&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>​    传递参数： 这里的实际参数id就为10，name就是username</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">'/login/10/username'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>路由嵌套</strong></p>\n<p>​    在路由构造函数实例中的<strong>path</strong>中添加<strong>children</strong>指向子路由，组件中还有router-link指向子组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parent = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tParent</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t&lt;router-link to='/parent/son'&gt;&lt;/router-link&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    route: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: <span class=\"string\">'/parent'</span>,</span><br><span class=\"line\">            component: parent,</span><br><span class=\"line\">            children: [</span><br><span class=\"line\">                &#123;<span class=\"attr\">path</span>: <span class=\"string\">'son'</span>, <span class=\"attr\">component</span>: son&#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用命名视图给路由组件添加名称，方便给每个组件渲染样式</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">'left'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">'main'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> header = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;h1&gt;顶部&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> leftBox = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;h1&gt;左侧侧边栏&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rightBox = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;h1&gt;主体区域&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            path: <span class=\"string\">'/'</span>, </span><br><span class=\"line\">            components: &#123;</span><br><span class=\"line\">                <span class=\"string\">'default'</span>: header,</span><br><span class=\"line\">                <span class=\"string\">'left'</span>: leftBox,</span><br><span class=\"line\">                <span class=\"string\">'main'</span>: rightBox</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    router: router,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<center></center>","more":"<p><strong>redirect重定位，给路由指定默认的组件，打开就是指向的默认组件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    route: [</span><br><span class=\"line\">        <span class=\"comment\">//这里path后不是conponent，而是用redirect指向一个组件路径</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">redirect</span>: <span class=\"string\">'/login'</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">conponent</span>: login&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>给激活的router-link添加高亮的两种方式</strong></p>\n<ul>\n<li>直接给默认的linkActiveClass添加样式</li>\n<li>改变router-link的默认类，使用构造方法VueRouter中的linkActiveClass来给自定义新的类</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    route: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">conponent</span>: login&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    linkActiveClass: <span class=\"string\">'myActive'</span>, <span class=\"comment\">//改变了默认的类，可以给这个类指定样式使得激活后高亮</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>给router-link添加参数传递的两种方式</strong></p>\n<ol>\n<li>在router-link中的to中加入参数：?id=10&amp;name=username，组件中可以通过<strong>$route.query.id</strong>和<strong>$route.query.name</strong>来获取传递的参数值</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">'/login?id=10&amp;name=username'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在路由的构造函数的routes的path中使用<strong>/:name</strong>来说明这里是会有参数传递的，也可以理解为占一个位置，可以通过<strong>$route.params.id</strong>和<strong>$route.params.name</strong>获取</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/login/:id/:name'</span>, <span class=\"attr\">conponent</span>: login&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>​    传递参数： 这里的实际参数id就为10，name就是username</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">'/login/10/username'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>路由嵌套</strong></p>\n<p>​    在路由构造函数实例中的<strong>path</strong>中添加<strong>children</strong>指向子路由，组件中还有router-link指向子组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parent = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tParent</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t&lt;router-link to='/parent/son'&gt;&lt;/router-link&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    route: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: <span class=\"string\">'/parent'</span>,</span><br><span class=\"line\">            component: parent,</span><br><span class=\"line\">            children: [</span><br><span class=\"line\">                &#123;<span class=\"attr\">path</span>: <span class=\"string\">'son'</span>, <span class=\"attr\">component</span>: son&#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用命名视图给路由组件添加名称，方便给每个组件渲染样式</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">'left'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">'main'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> header = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;h1&gt;顶部&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> leftBox = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;h1&gt;左侧侧边栏&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rightBox = &#123;</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;h1&gt;主体区域&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            path: <span class=\"string\">'/'</span>, </span><br><span class=\"line\">            components: &#123;</span><br><span class=\"line\">                <span class=\"string\">'default'</span>: header,</span><br><span class=\"line\">                <span class=\"string\">'left'</span>: leftBox,</span><br><span class=\"line\">                <span class=\"string\">'main'</span>: rightBox</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    router: router,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"Vue 组件 | 父子组件通信","date":"2020-02-18T09:30:05.000Z","_content":"<center>组件通信-父子组件的通信</center>\n<!--more-->\n\n\n> 文中涉及的$emit()解释：\n用法： $emit( eventName, […args] )\neventName:事件名，会绑定一个方法。当组件触发事件后，将调用这个方法。\n...args: 附加参数，会被抛出，由上述绑定的方法接收使用。\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t<title></title>\n</head>\n<body>\n\t\n\t<div id=\"app\">\n\t\t<balance></balance>\n\t</div>\n\t<script src=\"../lib/vue.js\"></script>\n\t<script type=\"text/javascript\">\n\t\t// 父组件,包含了子组件show\n\t\tVue.component('balance', {\n\t\t\ttemplate:` \n\t\t\t<div>\n\t\t\t    //@show-balance是事件名，被下面$emit调用，执行show_balance()方法\n\t\t\t\t<show @show-balance=\"show_balance()\"></show> \n\t\t\t\t<div v-if=\"show\">余额： ￥ 33</div>\n\t\t\t</div>\n\t\t\t`,\n\t\t\tmethods: {\n\t\t\t\tshow_balance: function (){\n\t\t\t\t\tthis.show = true\n\t\t\t\t}\n\t\t\t},\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\t//show变量，用于判断是否显示，默认为false，不显示\n\t\t\t\t\tshow: false\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t<!--子组件-->\n\t\tVue.component('show', {\n\t\t\t// 给按钮添加点击监听事件\n\t\t\ttemplate: `\n\t\t\t\t<button @click=\"on_click()\">显示余额</button>\n\t\t\t`,\n\t\t\tmethods: {\n\t\t\t\ton_click: function(){\n\t\t\t\t\t//绑定了show-balance方法\n\t\t\t\t\tthis.$emit('show-balance') \n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tnew Vue({\n\t\t\tel: '#app',\n\t\t})\n\t</script>\n</body>\n</html>\n```","source":"_posts/vue-component.md","raw":"---\ntitle: Vue 组件 | 父子组件通信\ndate: 2020-02-18 17:30:05\ntags: Vue\ncategories: Vue.js\n---\n<center>组件通信-父子组件的通信</center>\n<!--more-->\n\n\n> 文中涉及的$emit()解释：\n用法： $emit( eventName, […args] )\neventName:事件名，会绑定一个方法。当组件触发事件后，将调用这个方法。\n...args: 附加参数，会被抛出，由上述绑定的方法接收使用。\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t<title></title>\n</head>\n<body>\n\t\n\t<div id=\"app\">\n\t\t<balance></balance>\n\t</div>\n\t<script src=\"../lib/vue.js\"></script>\n\t<script type=\"text/javascript\">\n\t\t// 父组件,包含了子组件show\n\t\tVue.component('balance', {\n\t\t\ttemplate:` \n\t\t\t<div>\n\t\t\t    //@show-balance是事件名，被下面$emit调用，执行show_balance()方法\n\t\t\t\t<show @show-balance=\"show_balance()\"></show> \n\t\t\t\t<div v-if=\"show\">余额： ￥ 33</div>\n\t\t\t</div>\n\t\t\t`,\n\t\t\tmethods: {\n\t\t\t\tshow_balance: function (){\n\t\t\t\t\tthis.show = true\n\t\t\t\t}\n\t\t\t},\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\t//show变量，用于判断是否显示，默认为false，不显示\n\t\t\t\t\tshow: false\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t<!--子组件-->\n\t\tVue.component('show', {\n\t\t\t// 给按钮添加点击监听事件\n\t\t\ttemplate: `\n\t\t\t\t<button @click=\"on_click()\">显示余额</button>\n\t\t\t`,\n\t\t\tmethods: {\n\t\t\t\ton_click: function(){\n\t\t\t\t\t//绑定了show-balance方法\n\t\t\t\t\tthis.$emit('show-balance') \n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tnew Vue({\n\t\t\tel: '#app',\n\t\t})\n\t</script>\n</body>\n</html>\n```","slug":"vue-component","published":1,"updated":"2020-08-27T08:22:17.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgc002hr0u2atgv95n5","content":"<center>组件通信-父子组件的通信</center>\n<a id=\"more\"></a>\n\n\n<blockquote>\n<p>文中涉及的$emit()解释：<br>用法： $emit( eventName, […args] )<br>eventName:事件名，会绑定一个方法。当组件触发事件后，将调用这个方法。<br>…args: 附加参数，会被抛出，由上述绑定的方法接收使用。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">balance</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">balance</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// 父组件,包含了子组件show</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'balance'</span>, &#123;</span></span><br><span class=\"line\">\t\t\ttemplate:` </span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t    <span class=\"comment\">//@show-balance是事件名，被下面$emit调用，执行show_balance()方法</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">show</span> @<span class=\"attr\">show-balance</span>=<span class=\"string\">\"show_balance()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">show</span>&gt;</span> </span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>余额： ￥ 33<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tshow_balance: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.show = <span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">//show变量，用于判断是否显示，默认为false，不显示</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tshow: <span class=\"literal\">false</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t<span class=\"comment\">&lt;!--子组件--&gt;</span></span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'show'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 给按钮添加点击监听事件</span></span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"on_click()\"</span>&gt;</span>显示余额<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\ton_click: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">//绑定了show-balance方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'show-balance'</span>) </span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>组件通信-父子组件的通信</center>","more":"<blockquote>\n<p>文中涉及的$emit()解释：<br>用法： $emit( eventName, […args] )<br>eventName:事件名，会绑定一个方法。当组件触发事件后，将调用这个方法。<br>…args: 附加参数，会被抛出，由上述绑定的方法接收使用。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">balance</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">balance</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// 父组件,包含了子组件show</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'balance'</span>, &#123;</span></span><br><span class=\"line\">\t\t\ttemplate:` </span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t    <span class=\"comment\">//@show-balance是事件名，被下面$emit调用，执行show_balance()方法</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">show</span> @<span class=\"attr\">show-balance</span>=<span class=\"string\">\"show_balance()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">show</span>&gt;</span> </span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>余额： ￥ 33<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tshow_balance: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.show = <span class=\"literal\">true</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">//show变量，用于判断是否显示，默认为false，不显示</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tshow: <span class=\"literal\">false</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t<span class=\"comment\">&lt;!--子组件--&gt;</span></span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'show'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 给按钮添加点击监听事件</span></span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"on_click()\"</span>&gt;</span>显示余额<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\ton_click: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">//绑定了show-balance方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'show-balance'</span>) </span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue组件中css不能更改v-html内的样式的解决办法","date":"2020-04-12T04:43:51.000Z","_content":"今天在项目中使用axios请求数据的时候，返回的内容里含有html的各种标签，使用v-html渲染到组件页面的时候发现在style里直接更改v-html内的元素的样式没有任何效果，但是删除style的scoped属性之后，就有效果了，但是这种会引起问题，scoped对渲染的范围作了限制，去掉就没有限制。\n针对这个问题，搜了一下，发现可以使用`deep scoped`来更改v-html内的样式\n<!--more-->\n使用方法(举例一个div, 假设v-html中有一个类名称为content)：\n\n```html\n<div class='container'>\n\t<p v-html='content'></p>\n</div>\n```\n渲染：\n```css\n\t.container >>> .content{\n    \tbackground-color: red;\n        width: 300px;\n    }\n```\n\n现在v-html中的.content就会有指定的样式了","source":"_posts/vue-deep-scoped.md","raw":"---\ntitle: Vue组件中css不能更改v-html内的样式的解决办法\ndate: 2020-04-12 12:43:51\ntags: Vue笔记\ncategories: Vue.js\n---\n今天在项目中使用axios请求数据的时候，返回的内容里含有html的各种标签，使用v-html渲染到组件页面的时候发现在style里直接更改v-html内的元素的样式没有任何效果，但是删除style的scoped属性之后，就有效果了，但是这种会引起问题，scoped对渲染的范围作了限制，去掉就没有限制。\n针对这个问题，搜了一下，发现可以使用`deep scoped`来更改v-html内的样式\n<!--more-->\n使用方法(举例一个div, 假设v-html中有一个类名称为content)：\n\n```html\n<div class='container'>\n\t<p v-html='content'></p>\n</div>\n```\n渲染：\n```css\n\t.container >>> .content{\n    \tbackground-color: red;\n        width: 300px;\n    }\n```\n\n现在v-html中的.content就会有指定的样式了","slug":"vue-deep-scoped","published":1,"updated":"2020-08-27T08:22:17.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgd002jr0u2e0oe0x5m","content":"<p>今天在项目中使用axios请求数据的时候，返回的内容里含有html的各种标签，使用v-html渲染到组件页面的时候发现在style里直接更改v-html内的元素的样式没有任何效果，但是删除style的scoped属性之后，就有效果了，但是这种会引起问题，scoped对渲染的范围作了限制，去掉就没有限制。<br>针对这个问题，搜了一下，发现可以使用<code>deep scoped</code>来更改v-html内的样式</p>\n<a id=\"more\"></a>\n<p>使用方法(举例一个div, 假设v-html中有一个类名称为content)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'container'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">'content'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>渲染：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &gt;&gt;&gt; <span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">   \t<span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">       <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在v-html中的.content就会有指定的样式了</p>\n","site":{"data":{}},"excerpt":"<p>今天在项目中使用axios请求数据的时候，返回的内容里含有html的各种标签，使用v-html渲染到组件页面的时候发现在style里直接更改v-html内的元素的样式没有任何效果，但是删除style的scoped属性之后，就有效果了，但是这种会引起问题，scoped对渲染的范围作了限制，去掉就没有限制。<br>针对这个问题，搜了一下，发现可以使用<code>deep scoped</code>来更改v-html内的样式</p>","more":"<p>使用方法(举例一个div, 假设v-html中有一个类名称为content)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'container'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">'content'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>渲染：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &gt;&gt;&gt; <span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">   \t<span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">       <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在v-html中的.content就会有指定的样式了</p>"},{"title":"Vue | 自定义指令","date":"2020-03-11T02:37:08.000Z","_content":"<p>效果： 通过自定义指令给渲染的文本添加颜色</p>\n<p>自定义指令有两种方式：可以自定义私有`directives`或者公有指令`Vue.directive('name', {bind, inserted, updated})`</p>\n<!--more-->\n<h4 align=\"center\">代码</h4>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"app\">\n        <p v-color=\"'red'\">{{ msg }}</p>\n    </div>\n    <script src=\"lib/vue.js\"></script>\n    <script>\n        //定义全局指令\n        Vue.directive('color', {\n            bind: function (el, binding) { \n                // 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次\n                // 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象\n                // 在元素 刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用\n                //  因为，一个元素，只有插入DOM之后，才能获取焦点\n\n                //binding为传过来的参数\n                el.style.color = binding.value\n            },\n            inserted: function (el) {  // inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】\n                // 和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效\n            },\n            updated: function (el) {  // 当VNode更新的时候，会执行 updated， 可能会触发多次\n\n            }\n\n        })\n        var app = new Vue({\n            el: '#app',\n            data: {\n                msg: 'Hello Vue.js'\n            },\n            //定义私有指令\n            // directives: {\n            //     'color': function (el){\n            //         el.style.color = 'red'\n            //     }\n            // }\n        })\n    </script>\n</body>\n</html>\n```","source":"_posts/vue-directive.md","raw":"---\ntitle: Vue | 自定义指令\ndate: 2020-03-11 10:37:08\ntags: Vue\ncategories: Vue.js\n---\n<p>效果： 通过自定义指令给渲染的文本添加颜色</p>\n<p>自定义指令有两种方式：可以自定义私有`directives`或者公有指令`Vue.directive('name', {bind, inserted, updated})`</p>\n<!--more-->\n<h4 align=\"center\">代码</h4>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"app\">\n        <p v-color=\"'red'\">{{ msg }}</p>\n    </div>\n    <script src=\"lib/vue.js\"></script>\n    <script>\n        //定义全局指令\n        Vue.directive('color', {\n            bind: function (el, binding) { \n                // 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次\n                // 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象\n                // 在元素 刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用\n                //  因为，一个元素，只有插入DOM之后，才能获取焦点\n\n                //binding为传过来的参数\n                el.style.color = binding.value\n            },\n            inserted: function (el) {  // inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】\n                // 和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效\n            },\n            updated: function (el) {  // 当VNode更新的时候，会执行 updated， 可能会触发多次\n\n            }\n\n        })\n        var app = new Vue({\n            el: '#app',\n            data: {\n                msg: 'Hello Vue.js'\n            },\n            //定义私有指令\n            // directives: {\n            //     'color': function (el){\n            //         el.style.color = 'red'\n            //     }\n            // }\n        })\n    </script>\n</body>\n</html>\n```","slug":"vue-directive","published":1,"updated":"2020-08-27T08:22:17.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrge002or0u22fsibv1e","content":"<p>效果： 通过自定义指令给渲染的文本添加颜色</p>\n<p>自定义指令有两种方式：可以自定义私有`directives`或者公有指令`Vue.directive('name', {bind, inserted, updated})`</p>\n<a id=\"more\"></a>\n<h4 align=\"center\">代码</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-color</span>=<span class=\"string\">\"'red'\"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//定义全局指令</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        Vue.directive(<span class=\"string\">'color'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            bind: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(el, binding)</span> </span>&#123; </span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 在元素 刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">//  因为，一个元素，只有插入DOM之后，才能获取焦点</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">//binding为传过来的参数</span></span></span><br><span class=\"line\">                el.style.color = binding.value</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            inserted: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(el)</span> </span>&#123;  <span class=\"comment\">// inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</span></span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            updated: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(el)</span> </span>&#123;  <span class=\"comment\">// 当VNode更新的时候，会执行 updated， 可能会触发多次</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                msg: <span class=\"string\">'Hello Vue.js'</span></span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//定义私有指令</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// directives: &#123;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//     'color': function (el)&#123;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//         el.style.color = 'red'</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//     &#125;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// &#125;</span></span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>效果： 通过自定义指令给渲染的文本添加颜色</p>\n<p>自定义指令有两种方式：可以自定义私有`directives`或者公有指令`Vue.directive('name', {bind, inserted, updated})`</p>","more":"<h4 align=\"center\">代码</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-color</span>=<span class=\"string\">\"'red'\"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//定义全局指令</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        Vue.directive(<span class=\"string\">'color'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            bind: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(el, binding)</span> </span>&#123; </span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 在元素 刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">//  因为，一个元素，只有插入DOM之后，才能获取焦点</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">//binding为传过来的参数</span></span></span><br><span class=\"line\">                el.style.color = binding.value</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            inserted: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(el)</span> </span>&#123;  <span class=\"comment\">// inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</span></span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            updated: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(el)</span> </span>&#123;  <span class=\"comment\">// 当VNode更新的时候，会执行 updated， 可能会触发多次</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                msg: <span class=\"string\">'Hello Vue.js'</span></span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//定义私有指令</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// directives: &#123;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//     'color': function (el)&#123;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//         el.style.color = 'red'</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//     &#125;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// &#125;</span></span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue filter","date":"2020-02-18T12:26:30.000Z","_content":"<center>使用过滤器过滤日期</center>\n<!--more-->\n\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/demo_filter.gif\" alt=\"效果演示\">\n</div>\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<!--默认日期，不会刷新-->\n\t\t默认日期： {{ default_date }}\n\t\t<hr>\n\t\t<!--使用过滤器过滤日期-->\n\t\t过滤后日期： {{ date | fromDate }}\n\t</div>\n\t<script src=\"lib/vue.js\"></script>\n\t<script type=\"text/javascript\">\n\t\t//把小于10的数变成0+这个数，例01，02\n\t\tvar pddDate = function (value){\n\t\t\treturn value < 10 ? '0' + value : value; \n\t\t};\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tdata: {\n\t\t\t\tdate: new Date(),\n\t\t\t\tdefault_date: new Date()\n\t\t\t},\n\t\t\t// 这是一个自定义过滤器，把日期格式化一下\n\t\t\tfilters:{\n\t\t\t\tfromDate: function (){\n\t\t\t\t\tvar date = new Date();\n\t\t\t\t\tvar year = pddDate(date.getFullYear());\n\t\t\t\t\tvar month = pddDate(date.getMonth() + 1);\n\t\t\t\t\tvar day = pddDate(date.getDay());\n\t\t\t\t\tvar hours = pddDate(date.getHours());\n\t\t\t\t\tvar minutes = pddDate(date.getMinutes());\n\t\t\t\t\tvar seconds = pddDate(date.getSeconds());\n\t\t\t\t\treturn year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds; \n\t\t\t\t}\n\t\t\t},\n\t\t\tmounted: function(){\n\t\t\t\t//声明一个变量指向this，防止直接用this导致指向不明\n\t\t\t\tvar _this = this;\n\t\t\t\t//设置一个定时器，每秒刷新一次\n\t\t\t\tsetInterval(function(){\n\t\t\t\t\t_this.date = new Date;\n\t\t\t\t},1000)\n\t\t\t}\n\t\t});\n\t</script>\n</body>\n</html>\n```","source":"_posts/vue-filter.md","raw":"---\ntitle: Vue filter\ndate: 2020-02-18 20:26:30\ntags: Vue\ncategories: Vue.js\n---\n<center>使用过滤器过滤日期</center>\n<!--more-->\n\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/demo_filter.gif\" alt=\"效果演示\">\n</div>\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<!--默认日期，不会刷新-->\n\t\t默认日期： {{ default_date }}\n\t\t<hr>\n\t\t<!--使用过滤器过滤日期-->\n\t\t过滤后日期： {{ date | fromDate }}\n\t</div>\n\t<script src=\"lib/vue.js\"></script>\n\t<script type=\"text/javascript\">\n\t\t//把小于10的数变成0+这个数，例01，02\n\t\tvar pddDate = function (value){\n\t\t\treturn value < 10 ? '0' + value : value; \n\t\t};\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tdata: {\n\t\t\t\tdate: new Date(),\n\t\t\t\tdefault_date: new Date()\n\t\t\t},\n\t\t\t// 这是一个自定义过滤器，把日期格式化一下\n\t\t\tfilters:{\n\t\t\t\tfromDate: function (){\n\t\t\t\t\tvar date = new Date();\n\t\t\t\t\tvar year = pddDate(date.getFullYear());\n\t\t\t\t\tvar month = pddDate(date.getMonth() + 1);\n\t\t\t\t\tvar day = pddDate(date.getDay());\n\t\t\t\t\tvar hours = pddDate(date.getHours());\n\t\t\t\t\tvar minutes = pddDate(date.getMinutes());\n\t\t\t\t\tvar seconds = pddDate(date.getSeconds());\n\t\t\t\t\treturn year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds; \n\t\t\t\t}\n\t\t\t},\n\t\t\tmounted: function(){\n\t\t\t\t//声明一个变量指向this，防止直接用this导致指向不明\n\t\t\t\tvar _this = this;\n\t\t\t\t//设置一个定时器，每秒刷新一次\n\t\t\t\tsetInterval(function(){\n\t\t\t\t\t_this.date = new Date;\n\t\t\t\t},1000)\n\t\t\t}\n\t\t});\n\t</script>\n</body>\n</html>\n```","slug":"vue-filter","published":1,"updated":"2020-08-27T08:22:17.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgf002rr0u203jrdv6f","content":"<center>使用过滤器过滤日期</center>\n<a id=\"more\"></a>\n\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/demo_filter.gif\" alt=\"效果演示\">\n</div>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--默认日期，不会刷新--&gt;</span></span><br><span class=\"line\">\t\t默认日期： &#123;&#123; default_date &#125;&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--使用过滤器过滤日期--&gt;</span></span><br><span class=\"line\">\t\t过滤后日期： &#123;&#123; date | fromDate &#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//把小于10的数变成0+这个数，例01，02</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> pddDate = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(value)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> value &lt; <span class=\"number\">10</span> ? <span class=\"string\">'0'</span> + value : value; </span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tdate: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tdefault_date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 这是一个自定义过滤器，把日期格式化一下</span></span></span><br><span class=\"line\">\t\t\tfilters:&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tfromDate: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> year = pddDate(date.getFullYear());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> month = pddDate(date.getMonth() + <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> day = pddDate(date.getDay());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> hours = pddDate(date.getHours());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> minutes = pddDate(date.getMinutes());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> seconds = pddDate(date.getSeconds());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">return</span> year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + day + <span class=\"string\">' '</span> + hours + <span class=\"string\">':'</span> + minutes + <span class=\"string\">':'</span> + seconds; </span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tmounted: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//声明一个变量指向this，防止直接用this导致指向不明</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//设置一个定时器，每秒刷新一次</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tsetInterval(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t_this.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</span></span><br><span class=\"line\">\t\t\t\t&#125;,1000)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>使用过滤器过滤日期</center>","more":"<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/demo_filter.gif\" alt=\"效果演示\">\n</div>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--默认日期，不会刷新--&gt;</span></span><br><span class=\"line\">\t\t默认日期： &#123;&#123; default_date &#125;&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--使用过滤器过滤日期--&gt;</span></span><br><span class=\"line\">\t\t过滤后日期： &#123;&#123; date | fromDate &#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//把小于10的数变成0+这个数，例01，02</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> pddDate = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(value)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> value &lt; <span class=\"number\">10</span> ? <span class=\"string\">'0'</span> + value : value; </span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tdate: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tdefault_date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 这是一个自定义过滤器，把日期格式化一下</span></span></span><br><span class=\"line\">\t\t\tfilters:&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tfromDate: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> year = pddDate(date.getFullYear());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> month = pddDate(date.getMonth() + <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> day = pddDate(date.getDay());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> hours = pddDate(date.getHours());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> minutes = pddDate(date.getMinutes());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">var</span> seconds = pddDate(date.getSeconds());</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">return</span> year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + day + <span class=\"string\">' '</span> + hours + <span class=\"string\">':'</span> + minutes + <span class=\"string\">':'</span> + seconds; </span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tmounted: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//声明一个变量指向this，防止直接用this导致指向不明</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//设置一个定时器，每秒刷新一次</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tsetInterval(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t_this.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</span></span><br><span class=\"line\">\t\t\t\t&#125;,1000)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue mixins的厉害","date":"2020-02-28T09:40:35.000Z","_content":"<h4 align=\"left\">mixins:混合</h4>\n<p align=\"left\">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>\n<p align=\"left\">一处定义，多处复用</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_mixins.gif\" alt=\"效果\">\n</div>\n<!--more-->\n\n---\n<h4 align=\"center\">使用了mixins</h4>\n```html\n\t<div id=\"app\">\n\t\t<popup></popup>\n\t\t<toggle></toggle>\n\t</div>\n\t<!---->\n\t<template id='popup'>\n\t\t<div>\n\t\t\t<h1 @mouseenter='show' @mouseleave='hide'>HeiHei</h1>\n\t\t\t<p v-if='visible' class=\"para\">This is hide COntent</p>\n\t\t</div>\n\t</template>\n\t<template id='toggle'>\n\t\t<div>\n\t\t\t<button @click='isVisible'>Visible</button>\n\t\t\t<p v-if='visible'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempora itaque nesciunt voluptates, facilis corrupti quisquam maxime numquam odio nihil amet dolorum praesentium quibusdam dolor odit qui a, fuga quod soluta?</p>\n\t\t</div>\n\t</template>\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\t//声明一个名为base的对象，用来装会被复用的变量和方法，声明一次，多处使用\n\t\tvar base = {\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tvisible: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tshow:function (){\n\t\t\t\t\tthis.visible = true;\n\t\t\t\t},\n\t\t\t\thide: function (){\n\t\t\t\t\tthis.visible = false;\n\t\t\t\t},\n\t\t\t\tisVisible: function (){\n\t\t\t\t\tthis.visible = !this.visible;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tVue.component('popup', {\n\t\t\ttemplate: '#popup',\n\t\t\t//调用base对象，直接调用base内的变量和方法\n\t\t\tmixins: [base]\n\t\t})\n\t\tVue.component('toggle', {\n\t\t\ttemplate: '#toggle',\n\t\t\t//调用base对象，直接调用base内的变量和方法\n\t\t\tmixins: [base]\n\t\t});\n\t\tnew Vue({\n\t\t\tel: '#app'\n\t\t})\n\t</script>\n```\n---\n<h4 align=\"center\">没有使用mixins</h4>\n```html\n<script>\n\t\tVue.component('popup', {\n\t\t\ttemplate: '#popup',\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tvisible: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tshow:function (){\n\t\t\t\t\tthis.visible = true;\n\t\t\t\t},\n\t\t\t\thide: function (){\n\t\t\t\t\tthis.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tVue.component('toggle', {\n\t\t\ttemplate: '#toggle',\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tvisible: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tisVisible: function (){\n\t\t\t\t\tthis.visible = !this.visible;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tnew Vue({\n\t\t\tel: '#app'\n\t\t})\n\t</script>\n```","source":"_posts/vue-mixins.md","raw":"---\ntitle: Vue mixins的厉害\ndate: 2020-02-28 17:40:35\ntags: Vue\ncategories: Vue.js\n---\n<h4 align=\"left\">mixins:混合</h4>\n<p align=\"left\">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>\n<p align=\"left\">一处定义，多处复用</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_mixins.gif\" alt=\"效果\">\n</div>\n<!--more-->\n\n---\n<h4 align=\"center\">使用了mixins</h4>\n```html\n\t<div id=\"app\">\n\t\t<popup></popup>\n\t\t<toggle></toggle>\n\t</div>\n\t<!---->\n\t<template id='popup'>\n\t\t<div>\n\t\t\t<h1 @mouseenter='show' @mouseleave='hide'>HeiHei</h1>\n\t\t\t<p v-if='visible' class=\"para\">This is hide COntent</p>\n\t\t</div>\n\t</template>\n\t<template id='toggle'>\n\t\t<div>\n\t\t\t<button @click='isVisible'>Visible</button>\n\t\t\t<p v-if='visible'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempora itaque nesciunt voluptates, facilis corrupti quisquam maxime numquam odio nihil amet dolorum praesentium quibusdam dolor odit qui a, fuga quod soluta?</p>\n\t\t</div>\n\t</template>\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\t//声明一个名为base的对象，用来装会被复用的变量和方法，声明一次，多处使用\n\t\tvar base = {\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tvisible: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tshow:function (){\n\t\t\t\t\tthis.visible = true;\n\t\t\t\t},\n\t\t\t\thide: function (){\n\t\t\t\t\tthis.visible = false;\n\t\t\t\t},\n\t\t\t\tisVisible: function (){\n\t\t\t\t\tthis.visible = !this.visible;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tVue.component('popup', {\n\t\t\ttemplate: '#popup',\n\t\t\t//调用base对象，直接调用base内的变量和方法\n\t\t\tmixins: [base]\n\t\t})\n\t\tVue.component('toggle', {\n\t\t\ttemplate: '#toggle',\n\t\t\t//调用base对象，直接调用base内的变量和方法\n\t\t\tmixins: [base]\n\t\t});\n\t\tnew Vue({\n\t\t\tel: '#app'\n\t\t})\n\t</script>\n```\n---\n<h4 align=\"center\">没有使用mixins</h4>\n```html\n<script>\n\t\tVue.component('popup', {\n\t\t\ttemplate: '#popup',\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tvisible: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tshow:function (){\n\t\t\t\t\tthis.visible = true;\n\t\t\t\t},\n\t\t\t\thide: function (){\n\t\t\t\t\tthis.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tVue.component('toggle', {\n\t\t\ttemplate: '#toggle',\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tvisible: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tisVisible: function (){\n\t\t\t\t\tthis.visible = !this.visible;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tnew Vue({\n\t\t\tel: '#app'\n\t\t})\n\t</script>\n```","slug":"vue-mixins","published":1,"updated":"2020-08-27T08:22:17.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgg002wr0u222i97miz","content":"<h4 align=\"left\">mixins:混合</h4>\n<p align=\"left\">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>\n<p align=\"left\">一处定义，多处复用</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_mixins.gif\" alt=\"效果\">\n</div>\n<a id=\"more\"></a>\n\n<hr>\n<h4 align=\"center\">使用了mixins</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">popup</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">popup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">toggle</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">toggle</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!----&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">'popup'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> @<span class=\"attr\">mouseenter</span>=<span class=\"string\">'show'</span> @<span class=\"attr\">mouseleave</span>=<span class=\"string\">'hide'</span>&gt;</span>HeiHei<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">'visible'</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para\"</span>&gt;</span>This is hide COntent<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">'toggle'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">'isVisible'</span>&gt;</span>Visible<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">'visible'</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempora itaque nesciunt voluptates, facilis corrupti quisquam maxime numquam odio nihil amet dolorum praesentium quibusdam dolor odit qui a, fuga quod soluta?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">//声明一个名为base的对象，用来装会被复用的变量和方法，声明一次，多处使用</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"keyword\">var</span> base = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tvisible: <span class=\"literal\">false</span></span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tshow:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.visible = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\thide: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.visible = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tisVisible: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.visible = !<span class=\"keyword\">this</span>.visible;</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"><span class=\"actionscript\">\tVue.component(<span class=\"string\">'popup'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\ttemplate: <span class=\"string\">'#popup'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//调用base对象，直接调用base内的变量和方法</span></span></span><br><span class=\"line\">\t\tmixins: [base]</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\tVue.component(<span class=\"string\">'toggle'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\ttemplate: <span class=\"string\">'#toggle'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//调用base对象，直接调用base内的变量和方法</span></span></span><br><span class=\"line\">\t\tmixins: [base]</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tel: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n---\n<h4 align=\"center\">没有使用mixins</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'popup'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\ttemplate: <span class=\"string\">'#popup'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tvisible: <span class=\"literal\">false</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tshow:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.visible = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\thide: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.visible = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'toggle'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\ttemplate: <span class=\"string\">'#toggle'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tvisible: <span class=\"literal\">false</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tisVisible: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.visible = !<span class=\"keyword\">this</span>.visible;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 align=\"left\">mixins:混合</h4>\n<p align=\"left\">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>\n<p align=\"left\">一处定义，多处复用</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_mixins.gif\" alt=\"效果\">\n</div>","more":"<hr>\n<h4 align=\"center\">使用了mixins</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">popup</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">popup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">toggle</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">toggle</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!----&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">'popup'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> @<span class=\"attr\">mouseenter</span>=<span class=\"string\">'show'</span> @<span class=\"attr\">mouseleave</span>=<span class=\"string\">'hide'</span>&gt;</span>HeiHei<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">'visible'</span> <span class=\"attr\">class</span>=<span class=\"string\">\"para\"</span>&gt;</span>This is hide COntent<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">'toggle'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">'isVisible'</span>&gt;</span>Visible<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">'visible'</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempora itaque nesciunt voluptates, facilis corrupti quisquam maxime numquam odio nihil amet dolorum praesentium quibusdam dolor odit qui a, fuga quod soluta?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">//声明一个名为base的对象，用来装会被复用的变量和方法，声明一次，多处使用</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"keyword\">var</span> base = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tvisible: <span class=\"literal\">false</span></span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tshow:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.visible = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\thide: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.visible = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tisVisible: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.visible = !<span class=\"keyword\">this</span>.visible;</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"><span class=\"actionscript\">\tVue.component(<span class=\"string\">'popup'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\ttemplate: <span class=\"string\">'#popup'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//调用base对象，直接调用base内的变量和方法</span></span></span><br><span class=\"line\">\t\tmixins: [base]</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\tVue.component(<span class=\"string\">'toggle'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\ttemplate: <span class=\"string\">'#toggle'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//调用base对象，直接调用base内的变量和方法</span></span></span><br><span class=\"line\">\t\tmixins: [base]</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tel: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n---\n<h4 align=\"center\">没有使用mixins</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'popup'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\ttemplate: <span class=\"string\">'#popup'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tvisible: <span class=\"literal\">false</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tshow:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.visible = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\thide: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.visible = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'toggle'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\ttemplate: <span class=\"string\">'#toggle'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tvisible: <span class=\"literal\">false</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tisVisible: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.visible = !<span class=\"keyword\">this</span>.visible;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue-笔记","date":"2020-02-11T06:58:10.000Z","_content":"\n<center>在Vue学习中的笔记</center>\n<!--more-->\n\n笔记1：\n\n```java\nvar _this = this; //这句话可以用于防止直接用this导致指向不明>\n```\n<h5 align=\"left\">v-cloak解决闪动问题</h5>\n<p>通过给涉及到的元素加上一个v-cloak来解决</p>\n```css\n[v-cloak]{\n\tdisplay: none;\n}\n```\n```html\n<div id=\"app\" v-cloak>\n\t<p>{{ msg }}</p>\n\t<my-com>\n\t\t<template slot-scope='props'>\n\t\t\t<p>{{ props.msg }}</p>\n\t\t</template>\n\t</my-com>\n</div>\n```\n","source":"_posts/vue-notebook.md","raw":"---\ntitle: Vue-笔记\ndate: 2020-02-11 14:58:10\ntags: Vue\ncategories: Vue.js\n---\n\n<center>在Vue学习中的笔记</center>\n<!--more-->\n\n笔记1：\n\n```java\nvar _this = this; //这句话可以用于防止直接用this导致指向不明>\n```\n<h5 align=\"left\">v-cloak解决闪动问题</h5>\n<p>通过给涉及到的元素加上一个v-cloak来解决</p>\n```css\n[v-cloak]{\n\tdisplay: none;\n}\n```\n```html\n<div id=\"app\" v-cloak>\n\t<p>{{ msg }}</p>\n\t<my-com>\n\t\t<template slot-scope='props'>\n\t\t\t<p>{{ props.msg }}</p>\n\t\t</template>\n\t</my-com>\n</div>\n```\n","slug":"vue-notebook","published":1,"updated":"2020-08-27T08:22:17.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgh002zr0u2gza48o5w","content":"<center>在Vue学习中的笔记</center>\n<a id=\"more\"></a>\n\n<p>笔记1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>; <span class=\"comment\">//这句话可以用于防止直接用this导致指向不明&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 align=\"left\">v-cloak解决闪动问题</h5>\n<p>通过给涉及到的元素加上一个v-cloak来解决</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[v-cloak]</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">my-com</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">'props'</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; props.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">my-com</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<center>在Vue学习中的笔记</center>","more":"<p>笔记1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>; <span class=\"comment\">//这句话可以用于防止直接用this导致指向不明&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 align=\"left\">v-cloak解决闪动问题</h5>\n<p>通过给涉及到的元素加上一个v-cloak来解决</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[v-cloak]</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">my-com</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">'props'</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; props.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">my-com</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue 组件通信 | 平行组件的通信","date":"2020-02-22T09:27:59.000Z","_content":"<center>一个兄弟组件之间的通信</center>\n<!--more-->\n\n---\n\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue-component1.gif\" alt=\"效果图\">\n</div>\n\n---\n\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue-component2.png\" alt=\"元素结构图\">\n</div>\n\n---\n\n>代码中有两个平行组件ming,huahua，ming组件的内容可以传到huahua组件，huahua可以获取ming传输的内容\n>ming组件内通过给input元素绑定监听事件keyup来获取用户状态，当用户在input里输入内容，就会触发$emit调用on_change()函数，发送this.i_said的数据，再在huahua的组件中通过$on来监听$emit传出的数据，并使用回调函数把获取到的data赋值给huahua_said，就完成了平行组件之间的通信\n>关键点： 在JavaScript里第一行声明了一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；\n\n---\n<h3 align=\"center\">下面为代码</h3>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t<title>Document</title>\n\t<link rel=\"stylesheet\" href=\"\">\n\t<style media=\"screen\">\n\t\t#app{\n\t\t\twidth: 230px;\n\t\t\theight: 65px;\n\t\t\tbox-shadow: 0 0 30px rgba(0, 0, 0, 0.1);\n\t\t\tborder-radius: 10px;\n\t\t\tfont-family: 'XHei';\n\t\t\tpadding: 20px;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<ming style=\"margin-bottom: 20px\t\"></ming>\n\t\t<huahua></huahua>\n\t</div>\n\t<script src=\"lib/vue.js\" charset=\"utf-8\"></script>\n\t<script type=\"text/javascript\">\n\t\t//这里的Event很关键，声明一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；\n\t\tvar Event = new Vue();\n\t\tVue.component('ming',{\n\t\t\ttemplate: `\n\t\t\t<div>\n\t\t\t\t我说：<input @keyup='on_change()' v-model='i_said' type=\"text\" />\n\t\t\t</div>\n\t\t\t`,\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\ti_said: ''\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\t//当用户在input中输入内容，就会触发i_said_something事件，并将i_said的数据发送出去\n\t\t\t\ton_change: function (){\n\t\t\t\t\tEvent.$emit('i_said_something', this.i_said)\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tVue.component('huahua', {\n\t\t\ttemplate: `\n\t\t\t<div>\n\t\t\t\t花花说： {{ huahua_said }}\n\t\t\t</div>\n\t\t\t`,\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\thuahua_said: ''\n\t\t\t\t}\n\t\t\t},\n\t\t\t//在生命周期mounted钩子函数里监听了来自Event的时间i_said_something\n\t\t\tmounted: function (){\n\t\t\t\tvar _this = this;\n\t\t\t\tEvent.$on('i_said_something', function (data){\n\t\t\t\t\t_this.huahua_said = data;\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\tnew Vue({\n\t\t\tel: '#app'\n\t\t});\n\t</script>\n</body>\n</html>\n\n```","source":"_posts/vue-practice.md","raw":"---\ntitle: Vue 组件通信 | 平行组件的通信\ndate: 2020-02-22 17:27:59\ntags: Vue\ncategories: Vue.js\n---\n<center>一个兄弟组件之间的通信</center>\n<!--more-->\n\n---\n\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue-component1.gif\" alt=\"效果图\">\n</div>\n\n---\n\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue-component2.png\" alt=\"元素结构图\">\n</div>\n\n---\n\n>代码中有两个平行组件ming,huahua，ming组件的内容可以传到huahua组件，huahua可以获取ming传输的内容\n>ming组件内通过给input元素绑定监听事件keyup来获取用户状态，当用户在input里输入内容，就会触发$emit调用on_change()函数，发送this.i_said的数据，再在huahua的组件中通过$on来监听$emit传出的数据，并使用回调函数把获取到的data赋值给huahua_said，就完成了平行组件之间的通信\n>关键点： 在JavaScript里第一行声明了一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；\n\n---\n<h3 align=\"center\">下面为代码</h3>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t<title>Document</title>\n\t<link rel=\"stylesheet\" href=\"\">\n\t<style media=\"screen\">\n\t\t#app{\n\t\t\twidth: 230px;\n\t\t\theight: 65px;\n\t\t\tbox-shadow: 0 0 30px rgba(0, 0, 0, 0.1);\n\t\t\tborder-radius: 10px;\n\t\t\tfont-family: 'XHei';\n\t\t\tpadding: 20px;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<ming style=\"margin-bottom: 20px\t\"></ming>\n\t\t<huahua></huahua>\n\t</div>\n\t<script src=\"lib/vue.js\" charset=\"utf-8\"></script>\n\t<script type=\"text/javascript\">\n\t\t//这里的Event很关键，声明一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；\n\t\tvar Event = new Vue();\n\t\tVue.component('ming',{\n\t\t\ttemplate: `\n\t\t\t<div>\n\t\t\t\t我说：<input @keyup='on_change()' v-model='i_said' type=\"text\" />\n\t\t\t</div>\n\t\t\t`,\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\ti_said: ''\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\t//当用户在input中输入内容，就会触发i_said_something事件，并将i_said的数据发送出去\n\t\t\t\ton_change: function (){\n\t\t\t\t\tEvent.$emit('i_said_something', this.i_said)\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tVue.component('huahua', {\n\t\t\ttemplate: `\n\t\t\t<div>\n\t\t\t\t花花说： {{ huahua_said }}\n\t\t\t</div>\n\t\t\t`,\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\thuahua_said: ''\n\t\t\t\t}\n\t\t\t},\n\t\t\t//在生命周期mounted钩子函数里监听了来自Event的时间i_said_something\n\t\t\tmounted: function (){\n\t\t\t\tvar _this = this;\n\t\t\t\tEvent.$on('i_said_something', function (data){\n\t\t\t\t\t_this.huahua_said = data;\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\tnew Vue({\n\t\t\tel: '#app'\n\t\t});\n\t</script>\n</body>\n</html>\n\n```","slug":"vue-practice","published":1,"updated":"2020-08-27T08:22:17.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgj0034r0u2g72x009m","content":"<center>一个兄弟组件之间的通信</center>\n<a id=\"more\"></a>\n\n<hr>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue-component1.gif\" alt=\"效果图\">\n</div>\n\n<hr>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue-component2.png\" alt=\"元素结构图\">\n</div>\n\n<hr>\n<blockquote>\n<p>代码中有两个平行组件ming,huahua，ming组件的内容可以传到huahua组件，huahua可以获取ming传输的内容<br>ming组件内通过给input元素绑定监听事件keyup来获取用户状态，当用户在input里输入内容，就会触发$emit调用on_change()函数，发送this.i_said的数据，再在huahua的组件中通过$on来监听$emit传出的数据，并使用回调函数把获取到的data赋值给huahua_said，就完成了平行组件之间的通信<br>关键点： 在JavaScript里第一行声明了一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；</p>\n</blockquote>\n<hr>\n<h3 align=\"center\">下面为代码</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#app</span>&#123;</span></span><br><span class=\"line\">\t\t\twidth: 230px;</span><br><span class=\"line\">\t\t\theight: 65px;</span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">box-shadow</span>: 0 0 30<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0, 0, 0, 0<span class=\"selector-class\">.1</span>);</span></span><br><span class=\"line\">\t\t\tborder-radius: 10px;</span><br><span class=\"line\">\t\t\tfont-family: 'XHei';</span><br><span class=\"line\">\t\t\tpadding: 20px;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ming</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-bottom: 20px\t\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ming</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">huahua</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">huahua</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//这里的Event很关键，声明一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> Event = <span class=\"keyword\">new</span> Vue();</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'ming'</span>,&#123;</span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t我说：<span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup</span>=<span class=\"string\">'on_change()'</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'i_said'</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\ti_said: <span class=\"string\">''</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//当用户在input中输入内容，就会触发i_said_something事件，并将i_said的数据发送出去</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\ton_change: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tEvent.$emit(<span class=\"string\">'i_said_something'</span>, <span class=\"keyword\">this</span>.i_said)</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'huahua'</span>, &#123;</span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t花花说： </span><span class=\"template-variable\">&#123;&#123; huahua_said &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\thuahua_said: <span class=\"string\">''</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">//在生命周期mounted钩子函数里监听了来自Event的时间i_said_something</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tmounted: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tEvent.$on(<span class=\"string\">'i_said_something'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span></span>&#123;</span></span><br><span class=\"line\">\t\t\t\t\t_this.huahua_said = data;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>一个兄弟组件之间的通信</center>","more":"<hr>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue-component1.gif\" alt=\"效果图\">\n</div>\n\n<hr>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue-component2.png\" alt=\"元素结构图\">\n</div>\n\n<hr>\n<blockquote>\n<p>代码中有两个平行组件ming,huahua，ming组件的内容可以传到huahua组件，huahua可以获取ming传输的内容<br>ming组件内通过给input元素绑定监听事件keyup来获取用户状态，当用户在input里输入内容，就会触发$emit调用on_change()函数，发送this.i_said的数据，再在huahua的组件中通过$on来监听$emit传出的数据，并使用回调函数把获取到的data赋值给huahua_said，就完成了平行组件之间的通信<br>关键点： 在JavaScript里第一行声明了一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；</p>\n</blockquote>\n<hr>\n<h3 align=\"center\">下面为代码</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-id\">#app</span>&#123;</span></span><br><span class=\"line\">\t\t\twidth: 230px;</span><br><span class=\"line\">\t\t\theight: 65px;</span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">box-shadow</span>: 0 0 30<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0, 0, 0, 0<span class=\"selector-class\">.1</span>);</span></span><br><span class=\"line\">\t\t\tborder-radius: 10px;</span><br><span class=\"line\">\t\t\tfont-family: 'XHei';</span><br><span class=\"line\">\t\t\tpadding: 20px;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ming</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-bottom: 20px\t\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ming</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">huahua</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">huahua</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//这里的Event很关键，声明一个名为Event的空Vue实例，作为一个中间量，用来让两个平行组件通信；</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> Event = <span class=\"keyword\">new</span> Vue();</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'ming'</span>,&#123;</span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t我说：<span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup</span>=<span class=\"string\">'on_change()'</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'i_said'</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\ti_said: <span class=\"string\">''</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//当用户在input中输入内容，就会触发i_said_something事件，并将i_said的数据发送出去</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\ton_change: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\tEvent.$emit(<span class=\"string\">'i_said_something'</span>, <span class=\"keyword\">this</span>.i_said)</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'huahua'</span>, &#123;</span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t花花说： </span><span class=\"template-variable\">&#123;&#123; huahua_said &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\thuahua_said: <span class=\"string\">''</span></span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">//在生命周期mounted钩子函数里监听了来自Event的时间i_said_something</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tmounted: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tEvent.$on(<span class=\"string\">'i_said_something'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span></span>&#123;</span></span><br><span class=\"line\">\t\t\t\t\t_this.huahua_said = data;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue 自己的小练习","date":"2020-02-21T12:26:49.000Z","_content":"<h4 align=\"left\">mixins:混合</h4>\n<p align=\"left\">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>\n<p align=\"left\">一处定义，多处复用</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_mixins.gif\" alt=\"效果\">\n</div>\n\n\n\n<!--more-->\n\n<center>代码如下</center>\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t<title></title>\n\t<style type=\"text/css\">\n\t\t.img{\n\t\t\twidth: 512px;\n\t\t\theight: 360px;\n\t\t\tborder-radius: 5px;\n\t\t\toverflow: hidden;\n\t\t}\n\t\t.img:hover{\n\t\t}\n\t\t*{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\ttext-align: center;\n\t\t}\n\t\t.wrap{\n\t\t}\n\t\t.photo_show{\n\t\t\tdisplay: block;\n\t\t\twidth: 700px;\n\t\t\theight: 360px;\n\t\t\tpadding: 19px;\n\t\t\tbox-shadow: 0 0 30px rgba(0, 0, 0, .1);\n\t\t\ttext-align: center;\n\t\t\tborder-radius: 20px;\n\t\t\tmargin: 150px auto;\n\t\t}\n\t\t.btn{\n\t\t\tposition: relative;\n\t\t\ttransform: translateY(-140px);\n\t\t\ttransition: .3s;\n\t\t}\n\t\t.btn:hover{\n\t\t\tcursor: pointer;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"wrap\">\n\t\t<div class=\"photo_show\" id=\"app\">\n\t\t\t<img @click=\"start_last()\" src=\"../images/last.png\" class=\"btn btn-last\">\n\t\t\t<img :src=\"img_link\" class=\"img img1\">\n\t\t\t<img @click=\"start_next()\" src=\"../images/next.png\" class=\"btn btn-next\">\n\t\t</div>\n\t</div>\n\t<script src=\"../lib/vue.js\"></script>\n\t<script type=\"text/javascript\">\n\t\tvar link_index = 1;\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tdata: {\n\t\t\t\timg_link: '../images/' + link_index + '.png'\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tstart_next: function (){\n\t\t\t\t\tif(link_index < 6){\n\t\t\t\t\t\tlink_index++\n\t\t\t\t\t\tthis.img_link = '../images/' + link_index + '.png';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.img_link = '../images/1.png';\n\t\t\t\t\t\tlink_index = 1;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstart_last: function (){\n\t\t\t\t\tif(link_index > 1){\n\t\t\t\t\t\tlink_index--;\n\t\t\t\t\t\tthis.img_link = '../images/' + link_index + '.png';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.img_link = '../images/6.png';\n\t\t\t\t\t\tlink_index = 6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tmounted: function (){\n\t\t\t\tsetInterval(this.start_next(), 1000);\n\t\t\t}\n\t\t})\n\t</script>\n</body>\n</html>\n\n```","source":"_posts/vue-practice1.md","raw":"---\ntitle: Vue 自己的小练习\ndate: 2020-02-21 20:26:49\ntags: Vue\ncategories: Vue.js\n---\n<h4 align=\"left\">mixins:混合</h4>\n<p align=\"left\">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>\n<p align=\"left\">一处定义，多处复用</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_mixins.gif\" alt=\"效果\">\n</div>\n\n\n\n<!--more-->\n\n<center>代码如下</center>\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t<title></title>\n\t<style type=\"text/css\">\n\t\t.img{\n\t\t\twidth: 512px;\n\t\t\theight: 360px;\n\t\t\tborder-radius: 5px;\n\t\t\toverflow: hidden;\n\t\t}\n\t\t.img:hover{\n\t\t}\n\t\t*{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\ttext-align: center;\n\t\t}\n\t\t.wrap{\n\t\t}\n\t\t.photo_show{\n\t\t\tdisplay: block;\n\t\t\twidth: 700px;\n\t\t\theight: 360px;\n\t\t\tpadding: 19px;\n\t\t\tbox-shadow: 0 0 30px rgba(0, 0, 0, .1);\n\t\t\ttext-align: center;\n\t\t\tborder-radius: 20px;\n\t\t\tmargin: 150px auto;\n\t\t}\n\t\t.btn{\n\t\t\tposition: relative;\n\t\t\ttransform: translateY(-140px);\n\t\t\ttransition: .3s;\n\t\t}\n\t\t.btn:hover{\n\t\t\tcursor: pointer;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"wrap\">\n\t\t<div class=\"photo_show\" id=\"app\">\n\t\t\t<img @click=\"start_last()\" src=\"../images/last.png\" class=\"btn btn-last\">\n\t\t\t<img :src=\"img_link\" class=\"img img1\">\n\t\t\t<img @click=\"start_next()\" src=\"../images/next.png\" class=\"btn btn-next\">\n\t\t</div>\n\t</div>\n\t<script src=\"../lib/vue.js\"></script>\n\t<script type=\"text/javascript\">\n\t\tvar link_index = 1;\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tdata: {\n\t\t\t\timg_link: '../images/' + link_index + '.png'\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tstart_next: function (){\n\t\t\t\t\tif(link_index < 6){\n\t\t\t\t\t\tlink_index++\n\t\t\t\t\t\tthis.img_link = '../images/' + link_index + '.png';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.img_link = '../images/1.png';\n\t\t\t\t\t\tlink_index = 1;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstart_last: function (){\n\t\t\t\t\tif(link_index > 1){\n\t\t\t\t\t\tlink_index--;\n\t\t\t\t\t\tthis.img_link = '../images/' + link_index + '.png';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.img_link = '../images/6.png';\n\t\t\t\t\t\tlink_index = 6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tmounted: function (){\n\t\t\t\tsetInterval(this.start_next(), 1000);\n\t\t\t}\n\t\t})\n\t</script>\n</body>\n</html>\n\n```","slug":"vue-practice1","published":1,"updated":"2020-08-27T08:22:17.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgk0037r0u29fjqfxm1","content":"<h4 align=\"left\">mixins:混合</h4>\n<p align=\"left\">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>\n<p align=\"left\">一处定义，多处复用</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_mixins.gif\" alt=\"效果\">\n</div>\n\n\n\n<a id=\"more\"></a>\n\n<center>代码如下</center>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.img</span>&#123;</span></span><br><span class=\"line\">\t\t\twidth: 512px;</span><br><span class=\"line\">\t\t\theight: 360px;</span><br><span class=\"line\">\t\t\tborder-radius: 5px;</span><br><span class=\"line\">\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.img</span><span class=\"selector-pseudo\">:hover</span>&#123;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t*&#123;</span><br><span class=\"line\">\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.wrap</span>&#123;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.photo_show</span>&#123;</span></span><br><span class=\"line\">\t\t\tdisplay: block;</span><br><span class=\"line\">\t\t\twidth: 700px;</span><br><span class=\"line\">\t\t\theight: 360px;</span><br><span class=\"line\">\t\t\tpadding: 19px;</span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">box-shadow</span>: 0 0 30<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0, 0, 0, <span class=\"selector-class\">.1</span>);</span></span><br><span class=\"line\">\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\tborder-radius: 20px;</span><br><span class=\"line\">\t\t\tmargin: 150px auto;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.btn</span>&#123;</span></span><br><span class=\"line\">\t\t\tposition: relative;</span><br><span class=\"line\">\t\t\ttransform: translateY(-140px);</span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">transition</span>: <span class=\"selector-class\">.3s</span>;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.btn</span><span class=\"selector-pseudo\">:hover</span>&#123;</span></span><br><span class=\"line\">\t\t\tcursor: pointer;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"photo_show\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"start_last()\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../images/last.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-last\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"img_link\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img1\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"start_next()\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../images/next.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-next\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> link_index = <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\timg_link: <span class=\"string\">'../images/'</span> + link_index + <span class=\"string\">'.png'</span></span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tstart_next: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\">\t\t\t\t\tif(link_index &lt; 6)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlink_index++</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.img_link = <span class=\"string\">'../images/'</span> + link_index + <span class=\"string\">'.png'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.img_link = <span class=\"string\">'../images/1.png'</span>;</span></span><br><span class=\"line\">\t\t\t\t\t\tlink_index = 1;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tstart_last: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\">\t\t\t\t\tif(link_index &gt; 1)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlink_index--;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.img_link = <span class=\"string\">'../images/'</span> + link_index + <span class=\"string\">'.png'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.img_link = <span class=\"string\">'../images/6.png'</span>;</span></span><br><span class=\"line\">\t\t\t\t\t\tlink_index = 6;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tmounted: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tsetInterval(<span class=\"keyword\">this</span>.start_next(), <span class=\"number\">1000</span>);</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 align=\"left\">mixins:混合</h4>\n<p align=\"left\">用处：当有多个组件使用了相同方法或变量，就可以用mixins来把相同的变量或方法封装到一个对象里，哪个组件需要就可以使用mixins: [mixins对象名]来调用啦</p>\n<p align=\"left\">一处定义，多处复用</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/vue_mixins.gif\" alt=\"效果\">\n</div>","more":"<center>代码如下</center>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.img</span>&#123;</span></span><br><span class=\"line\">\t\t\twidth: 512px;</span><br><span class=\"line\">\t\t\theight: 360px;</span><br><span class=\"line\">\t\t\tborder-radius: 5px;</span><br><span class=\"line\">\t\t\toverflow: hidden;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.img</span><span class=\"selector-pseudo\">:hover</span>&#123;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t*&#123;</span><br><span class=\"line\">\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.wrap</span>&#123;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.photo_show</span>&#123;</span></span><br><span class=\"line\">\t\t\tdisplay: block;</span><br><span class=\"line\">\t\t\twidth: 700px;</span><br><span class=\"line\">\t\t\theight: 360px;</span><br><span class=\"line\">\t\t\tpadding: 19px;</span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">box-shadow</span>: 0 0 30<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0, 0, 0, <span class=\"selector-class\">.1</span>);</span></span><br><span class=\"line\">\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\tborder-radius: 20px;</span><br><span class=\"line\">\t\t\tmargin: 150px auto;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.btn</span>&#123;</span></span><br><span class=\"line\">\t\t\tposition: relative;</span><br><span class=\"line\">\t\t\ttransform: translateY(-140px);</span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">transition</span>: <span class=\"selector-class\">.3s</span>;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.btn</span><span class=\"selector-pseudo\">:hover</span>&#123;</span></span><br><span class=\"line\">\t\t\tcursor: pointer;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"photo_show\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"start_last()\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../images/last.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-last\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"img_link\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img1\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"start_next()\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../images/next.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-next\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> link_index = <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\timg_link: <span class=\"string\">'../images/'</span> + link_index + <span class=\"string\">'.png'</span></span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tstart_next: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\">\t\t\t\t\tif(link_index &lt; 6)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlink_index++</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.img_link = <span class=\"string\">'../images/'</span> + link_index + <span class=\"string\">'.png'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.img_link = <span class=\"string\">'../images/1.png'</span>;</span></span><br><span class=\"line\">\t\t\t\t\t\tlink_index = 1;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tstart_last: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\">\t\t\t\t\tif(link_index &gt; 1)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlink_index--;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.img_link = <span class=\"string\">'../images/'</span> + link_index + <span class=\"string\">'.png'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.img_link = <span class=\"string\">'../images/6.png'</span>;</span></span><br><span class=\"line\">\t\t\t\t\t\tlink_index = 6;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tmounted: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tsetInterval(<span class=\"keyword\">this</span>.start_next(), <span class=\"number\">1000</span>);</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue 实战|列表管理","date":"2020-03-10T05:45:14.000Z","_content":"<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/carlist.gif\" alt=\"Demo\">\n</div>\n<p>一个针对之前所学内容做的练习，用BootStrap做的样式，学习了js中几种新的遍历数组的方法（forEach, some, filter, findIndex）</p>\n<p>在渲染列表的时候，没有直接使用data中carList的内容，而是对data中的carList用自定义的search方法进行了处理得到的返回值，便于查找</p>\n<p>由于初始化时搜索的输入框没有内容，所以可以吧carList中的全部内容渲染到table里，当输入框输入了内容，table里渲染的内容就是在carList中匹配到的数据，这样搜索功能就实现了</p>\n\n---\n<!--more-->\n<h4 align=\"center\">源码</h4>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"lib/bootstrap.min.css\">\n    <script src=\"lib/vue.js\"></script>\n    <style>\n        [v-cloak]{\n            display: none;\n        }\n        .l1{\n            margin-left: 20px;\n        }\n        button{\n            margin-left: 20px;\n        }\n        .panel-body{\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app\" v-cloak>\n        <div class=\"panel panel-primary\">\n              <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">CarList</h3>\n              </div>\n              <div class=\"panel-body form-inline\">\n                    <label class=\"l1\">\n                        <span style=\"margin-right: 10px;\">Id: </span>\n                        <input type=\"text\" class=\"form-control\" v-model='id'>\n                    </label>\n                    <label for=\"\" class=\"l1\">\n                        <span style=\"margin-right: 10px;\">Name:</span> \n                        <input type=\"text\" class=\"form-control\" v-model='name'>\n                    </label>\n                    <button class=\"btn btn-primary\" @click='add'>添加</button>\n                    <label for=\"\" class=\"l1\">\n                        <span style=\"margin-right: 10px;\">Search:</span>\n                        <input type=\"text\" class=\"form-control\" v-model='keywords'>\n                    </label>\n              </div>\n        </div>\n        <table class=\"table table-bordered table-hover\">\n            <thead>\n                <tr>\n                    <th>id</th>\n                    <th>名称</th>\n                    <th>添加时间</th>\n                    <th>操作</th>\n                </tr>\n            </thead>\n            <tbody>\n                <!--第一种，直接从data里的carList获取数据-->\n                <!-- <tr v-for='(item, index) in carList'>\n                    <td>{{ index + 1 }}</td>\n                    <td>{{ item.name }}</td>\n                    <td>{{ item.time | formatDate }}</td>\n                    <td>\n                        <button class=\"btn btn-danger\" @click.present='remove(index)'>删除</button>\n                    </td>\n                </tr> -->\n                <!--第二种，自定义一个search方法，同时把搜索的\n                    关键字通过传参传递给了search方法-->\n                <tr v-for='item in search(keywords)'>\n                    <td>{{ item.id }}</td>\n                    <td>{{ item.name }}</td>\n                    <td>{{ item.time | formatDate }}</td>\n                    <td>\n                        <button class=\"btn btn-danger\" @click='remove(item.id)'>删除</button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</body>\n</html>\n```\n```javascript\n    <script>\n        var DateFormat = function (value){\n            return value < 10 ? '0' + value : value;\n        };\n        var app = new Vue({\n            el: '#app',\n            data: {\n                id: '',\n                name: '',\n                keywords: '',\n                carList: [\n                    {\n                        id: 1,\n                        name: '宝马 M4',\n                        time: new Date()\n                    },\n                    {\n                        id: 2,\n                        name: '奔驰 C63s',\n                        time: new Date()\n                    },\n                    {\n                        id: 3,\n                        name: '奥迪 RS6 Avent',\n                        time: new Date()\n                    }\n                ]\n            },\n            filters: {\n                formatDate: function (){\n                    var date = new Date();\n                    var year = date.getFullYear();\n                    var month = DateFormat(date.getMonth() + 1);\n                    var day = DateFormat(date.getDay());\n                    var hours = DateFormat(date.getHours());\n                    var minutes = DateFormat(date.getMinutes());\n                    var seconds = DateFormat(date.getSeconds());\n\n                    //ES6语法，使用占位符可以简化语句\n                    return `${ year }-${ month }-${ day } ${ hours }:${ minutes }:${ seconds }`;\n                }\n            },\n            methods: {\n                remove: function(index){\n                    this.carList.splice(index, 1);\n                },\n                add: function (){\n                    var car = {\n                        id: this.id,\n                        name: this.name,\n                        time: new Date()\n                    };\n                    if(this.id == '' || this.name == ''){\n                        alert('请输入内容！');\n                    }else{\n                        this.carList.push(car);\n                        this.id = '';\n                        this.name = '';\n                    }\n                },\n                search: function (keywords){\n                    //注意： forEach, some, filter, findIndex 这些都是属于数组的新方法，\n                    //都会对数组中的每一项进项遍历，执行相关操作\n                    // 第一种遍历方法\n                    // var newList = [];\n                    // this.carList.forEach(item => {\n                    //     if(item.name.indexOf(keywords) != -1){\n                    //         newList.push(item);\n                    //     }\n                    // });\n                    // return newList;\n                    // 第二种遍历方法\n                    return this.carList.filter(item => {\n                        if(item.name.includes(keywords)){\n                            return item;\n                        }\n                    })\n                    \n                }\n            }\n        });\n    </script>\n```","source":"_posts/vue-practice5.md","raw":"---\ntitle: Vue 实战|列表管理\ndate: 2020-03-10 13:45:14\ntags: Vue\ncategories: Vue.js\n---\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/carlist.gif\" alt=\"Demo\">\n</div>\n<p>一个针对之前所学内容做的练习，用BootStrap做的样式，学习了js中几种新的遍历数组的方法（forEach, some, filter, findIndex）</p>\n<p>在渲染列表的时候，没有直接使用data中carList的内容，而是对data中的carList用自定义的search方法进行了处理得到的返回值，便于查找</p>\n<p>由于初始化时搜索的输入框没有内容，所以可以吧carList中的全部内容渲染到table里，当输入框输入了内容，table里渲染的内容就是在carList中匹配到的数据，这样搜索功能就实现了</p>\n\n---\n<!--more-->\n<h4 align=\"center\">源码</h4>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"lib/bootstrap.min.css\">\n    <script src=\"lib/vue.js\"></script>\n    <style>\n        [v-cloak]{\n            display: none;\n        }\n        .l1{\n            margin-left: 20px;\n        }\n        button{\n            margin-left: 20px;\n        }\n        .panel-body{\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app\" v-cloak>\n        <div class=\"panel panel-primary\">\n              <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">CarList</h3>\n              </div>\n              <div class=\"panel-body form-inline\">\n                    <label class=\"l1\">\n                        <span style=\"margin-right: 10px;\">Id: </span>\n                        <input type=\"text\" class=\"form-control\" v-model='id'>\n                    </label>\n                    <label for=\"\" class=\"l1\">\n                        <span style=\"margin-right: 10px;\">Name:</span> \n                        <input type=\"text\" class=\"form-control\" v-model='name'>\n                    </label>\n                    <button class=\"btn btn-primary\" @click='add'>添加</button>\n                    <label for=\"\" class=\"l1\">\n                        <span style=\"margin-right: 10px;\">Search:</span>\n                        <input type=\"text\" class=\"form-control\" v-model='keywords'>\n                    </label>\n              </div>\n        </div>\n        <table class=\"table table-bordered table-hover\">\n            <thead>\n                <tr>\n                    <th>id</th>\n                    <th>名称</th>\n                    <th>添加时间</th>\n                    <th>操作</th>\n                </tr>\n            </thead>\n            <tbody>\n                <!--第一种，直接从data里的carList获取数据-->\n                <!-- <tr v-for='(item, index) in carList'>\n                    <td>{{ index + 1 }}</td>\n                    <td>{{ item.name }}</td>\n                    <td>{{ item.time | formatDate }}</td>\n                    <td>\n                        <button class=\"btn btn-danger\" @click.present='remove(index)'>删除</button>\n                    </td>\n                </tr> -->\n                <!--第二种，自定义一个search方法，同时把搜索的\n                    关键字通过传参传递给了search方法-->\n                <tr v-for='item in search(keywords)'>\n                    <td>{{ item.id }}</td>\n                    <td>{{ item.name }}</td>\n                    <td>{{ item.time | formatDate }}</td>\n                    <td>\n                        <button class=\"btn btn-danger\" @click='remove(item.id)'>删除</button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</body>\n</html>\n```\n```javascript\n    <script>\n        var DateFormat = function (value){\n            return value < 10 ? '0' + value : value;\n        };\n        var app = new Vue({\n            el: '#app',\n            data: {\n                id: '',\n                name: '',\n                keywords: '',\n                carList: [\n                    {\n                        id: 1,\n                        name: '宝马 M4',\n                        time: new Date()\n                    },\n                    {\n                        id: 2,\n                        name: '奔驰 C63s',\n                        time: new Date()\n                    },\n                    {\n                        id: 3,\n                        name: '奥迪 RS6 Avent',\n                        time: new Date()\n                    }\n                ]\n            },\n            filters: {\n                formatDate: function (){\n                    var date = new Date();\n                    var year = date.getFullYear();\n                    var month = DateFormat(date.getMonth() + 1);\n                    var day = DateFormat(date.getDay());\n                    var hours = DateFormat(date.getHours());\n                    var minutes = DateFormat(date.getMinutes());\n                    var seconds = DateFormat(date.getSeconds());\n\n                    //ES6语法，使用占位符可以简化语句\n                    return `${ year }-${ month }-${ day } ${ hours }:${ minutes }:${ seconds }`;\n                }\n            },\n            methods: {\n                remove: function(index){\n                    this.carList.splice(index, 1);\n                },\n                add: function (){\n                    var car = {\n                        id: this.id,\n                        name: this.name,\n                        time: new Date()\n                    };\n                    if(this.id == '' || this.name == ''){\n                        alert('请输入内容！');\n                    }else{\n                        this.carList.push(car);\n                        this.id = '';\n                        this.name = '';\n                    }\n                },\n                search: function (keywords){\n                    //注意： forEach, some, filter, findIndex 这些都是属于数组的新方法，\n                    //都会对数组中的每一项进项遍历，执行相关操作\n                    // 第一种遍历方法\n                    // var newList = [];\n                    // this.carList.forEach(item => {\n                    //     if(item.name.indexOf(keywords) != -1){\n                    //         newList.push(item);\n                    //     }\n                    // });\n                    // return newList;\n                    // 第二种遍历方法\n                    return this.carList.filter(item => {\n                        if(item.name.includes(keywords)){\n                            return item;\n                        }\n                    })\n                    \n                }\n            }\n        });\n    </script>\n```","slug":"vue-practice5","published":1,"updated":"2020-08-27T08:22:17.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgl003cr0u2ampgblhz","content":"<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/carlist.gif\" alt=\"Demo\">\n</div>\n<p>一个针对之前所学内容做的练习，用BootStrap做的样式，学习了js中几种新的遍历数组的方法（forEach, some, filter, findIndex）</p>\n<p>在渲染列表的时候，没有直接使用data中carList的内容，而是对data中的carList用自定义的search方法进行了处理得到的返回值，便于查找</p>\n<p>由于初始化时搜索的输入框没有内容，所以可以吧carList中的全部内容渲染到table里，当输入框输入了内容，table里渲染的内容就是在carList中匹配到的数据，这样搜索功能就实现了</p>\n\n<hr>\n<a id=\"more\"></a>\n<h4 align=\"center\">源码</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"lib/bootstrap.min.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-attr\">[v-cloak]</span>&#123;</span></span><br><span class=\"line\">            display: none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.l1</span>&#123;</span></span><br><span class=\"line\">            margin-left: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        button&#123;</span><br><span class=\"line\">            margin-left: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.panel-body</span>&#123;</span></span><br><span class=\"line\">            margin-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel panel-primary\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-heading\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-title\"</span>&gt;</span>CarList<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-body form-inline\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-right: 10px;\"</span>&gt;</span>Id: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'id'</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-right: 10px;\"</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> </span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'name'</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">'add'</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-right: 10px;\"</span>&gt;</span>Search:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'keywords'</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-bordered table-hover\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>添加时间<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--第一种，直接从data里的carList获取数据--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- &lt;tr v-for='(item, index) in carList'&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;td&gt;&#123;&#123; item.time | formatDate &#125;&#125;&lt;/td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;button class=\"btn btn-danger\" @click.present='remove(index)'&gt;删除&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;/td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;/tr&gt; --&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--第二种，自定义一个search方法，同时把搜索的</span></span><br><span class=\"line\"><span class=\"comment\">                    关键字通过传参传递给了search方法--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">'item in search(keywords)'</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.time | formatDate &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">'remove(item.id)'</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> DateFormat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value &lt; <span class=\"number\">10</span> ? <span class=\"string\">'0'</span> + value : value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            id: <span class=\"string\">''</span>,</span><br><span class=\"line\">            name: <span class=\"string\">''</span>,</span><br><span class=\"line\">            keywords: <span class=\"string\">''</span>,</span><br><span class=\"line\">            carList: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'宝马 M4'</span>,</span><br><span class=\"line\">                    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">2</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'奔驰 C63s'</span>,</span><br><span class=\"line\">                    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">3</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'奥迪 RS6 Avent'</span>,</span><br><span class=\"line\">                    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        filters: &#123;</span><br><span class=\"line\">            formatDate: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> year = date.getFullYear();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> month = DateFormat(date.getMonth() + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> day = DateFormat(date.getDay());</span><br><span class=\"line\">                <span class=\"keyword\">var</span> hours = DateFormat(date.getHours());</span><br><span class=\"line\">                <span class=\"keyword\">var</span> minutes = DateFormat(date.getMinutes());</span><br><span class=\"line\">                <span class=\"keyword\">var</span> seconds = DateFormat(date.getSeconds());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//ES6语法，使用占位符可以简化语句</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123; year &#125;</span>-<span class=\"subst\">$&#123; month &#125;</span>-<span class=\"subst\">$&#123; day &#125;</span> <span class=\"subst\">$&#123; hours &#125;</span>:<span class=\"subst\">$&#123; minutes &#125;</span>:<span class=\"subst\">$&#123; seconds &#125;</span>`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.carList.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> car = &#123;</span><br><span class=\"line\">                    id: <span class=\"keyword\">this</span>.id,</span><br><span class=\"line\">                    name: <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">                    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.id == <span class=\"string\">''</span> || <span class=\"keyword\">this</span>.name == <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">'请输入内容！'</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.carList.push(car);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.id = <span class=\"string\">''</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.name = <span class=\"string\">''</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            search: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keywords</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//注意： forEach, some, filter, findIndex 这些都是属于数组的新方法，</span></span><br><span class=\"line\">                <span class=\"comment\">//都会对数组中的每一项进项遍历，执行相关操作</span></span><br><span class=\"line\">                <span class=\"comment\">// 第一种遍历方法</span></span><br><span class=\"line\">                <span class=\"comment\">// var newList = [];</span></span><br><span class=\"line\">                <span class=\"comment\">// this.carList.forEach(item =&gt; &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     if(item.name.indexOf(keywords) != -1)&#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         newList.push(item);</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">                <span class=\"comment\">// return newList;</span></span><br><span class=\"line\">                <span class=\"comment\">// 第二种遍历方法</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.carList.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(item.name.includes(keywords))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/carlist.gif\" alt=\"Demo\">\n</div>\n<p>一个针对之前所学内容做的练习，用BootStrap做的样式，学习了js中几种新的遍历数组的方法（forEach, some, filter, findIndex）</p>\n<p>在渲染列表的时候，没有直接使用data中carList的内容，而是对data中的carList用自定义的search方法进行了处理得到的返回值，便于查找</p>\n<p>由于初始化时搜索的输入框没有内容，所以可以吧carList中的全部内容渲染到table里，当输入框输入了内容，table里渲染的内容就是在carList中匹配到的数据，这样搜索功能就实现了</p>\n\n<hr>","more":"<h4 align=\"center\">源码</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"lib/bootstrap.min.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-attr\">[v-cloak]</span>&#123;</span></span><br><span class=\"line\">            display: none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.l1</span>&#123;</span></span><br><span class=\"line\">            margin-left: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        button&#123;</span><br><span class=\"line\">            margin-left: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.panel-body</span>&#123;</span></span><br><span class=\"line\">            margin-bottom: 20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel panel-primary\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-heading\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-title\"</span>&gt;</span>CarList<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-body form-inline\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-right: 10px;\"</span>&gt;</span>Id: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'id'</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-right: 10px;\"</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> </span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'name'</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">'add'</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-right: 10px;\"</span>&gt;</span>Search:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'keywords'</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-bordered table-hover\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>添加时间<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--第一种，直接从data里的carList获取数据--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- &lt;tr v-for='(item, index) in carList'&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;td&gt;&#123;&#123; item.time | formatDate &#125;&#125;&lt;/td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;button class=\"btn btn-danger\" @click.present='remove(index)'&gt;删除&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;/td&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;/tr&gt; --&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--第二种，自定义一个search方法，同时把搜索的</span></span><br><span class=\"line\"><span class=\"comment\">                    关键字通过传参传递给了search方法--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">'item in search(keywords)'</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.time | formatDate &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">'remove(item.id)'</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> DateFormat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value &lt; <span class=\"number\">10</span> ? <span class=\"string\">'0'</span> + value : value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            id: <span class=\"string\">''</span>,</span><br><span class=\"line\">            name: <span class=\"string\">''</span>,</span><br><span class=\"line\">            keywords: <span class=\"string\">''</span>,</span><br><span class=\"line\">            carList: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'宝马 M4'</span>,</span><br><span class=\"line\">                    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">2</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'奔驰 C63s'</span>,</span><br><span class=\"line\">                    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    id: <span class=\"number\">3</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'奥迪 RS6 Avent'</span>,</span><br><span class=\"line\">                    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        filters: &#123;</span><br><span class=\"line\">            formatDate: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> year = date.getFullYear();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> month = DateFormat(date.getMonth() + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> day = DateFormat(date.getDay());</span><br><span class=\"line\">                <span class=\"keyword\">var</span> hours = DateFormat(date.getHours());</span><br><span class=\"line\">                <span class=\"keyword\">var</span> minutes = DateFormat(date.getMinutes());</span><br><span class=\"line\">                <span class=\"keyword\">var</span> seconds = DateFormat(date.getSeconds());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//ES6语法，使用占位符可以简化语句</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123; year &#125;</span>-<span class=\"subst\">$&#123; month &#125;</span>-<span class=\"subst\">$&#123; day &#125;</span> <span class=\"subst\">$&#123; hours &#125;</span>:<span class=\"subst\">$&#123; minutes &#125;</span>:<span class=\"subst\">$&#123; seconds &#125;</span>`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.carList.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> car = &#123;</span><br><span class=\"line\">                    id: <span class=\"keyword\">this</span>.id,</span><br><span class=\"line\">                    name: <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">                    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.id == <span class=\"string\">''</span> || <span class=\"keyword\">this</span>.name == <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">'请输入内容！'</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.carList.push(car);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.id = <span class=\"string\">''</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.name = <span class=\"string\">''</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            search: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keywords</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//注意： forEach, some, filter, findIndex 这些都是属于数组的新方法，</span></span><br><span class=\"line\">                <span class=\"comment\">//都会对数组中的每一项进项遍历，执行相关操作</span></span><br><span class=\"line\">                <span class=\"comment\">// 第一种遍历方法</span></span><br><span class=\"line\">                <span class=\"comment\">// var newList = [];</span></span><br><span class=\"line\">                <span class=\"comment\">// this.carList.forEach(item =&gt; &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     if(item.name.indexOf(keywords) != -1)&#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         newList.push(item);</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">                <span class=\"comment\">// return newList;</span></span><br><span class=\"line\">                <span class=\"comment\">// 第二种遍历方法</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.carList.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(item.name.includes(keywords))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue路由嵌套","date":"2020-03-25T01:46:43.000Z","_content":"\n**必须注意的两个点**\n\n1. 子路由的**router-link**中的path必须是完整的path（带父级path），例如父级是/parent，子级是/son，那么子路由的router-link中的path必须为/parent/son；\n2. routes里的children中的子路由的path前面不能带 <span style='color: red'>/</span>，例如：\n\n```javascript\nroutes: [\n    {\n        path: '/parent',\n        component: parent,\n        children: [\n            {\n                path: 'son',//这里就没有前面的 /\n                component: son\n            }\n        ]\n    }\n]\n```\n\n点击<span style='color: red'>阅读更多</span>查看代码\n\n<!--more-->\n<div align='center'>\n    <img src=\"/images/vue_router/vue_router1.gif\" alt=\"\" style=\"width: 400px;\">\n    <img src=\"/images/vue_router/vue_router1-1.gif\" alt=\"\" style=\"width: 400px;\">\n</div>\n\n```html\n<div id='app'>\n        <router-link to=\"/home\">首页</router-link>\n        <router-view></router-view>\n    </div>\n    <template id=\"home\">\n        <div>\n            <h3>Home</h3>\n            <router-link to=\"/home/son\">Son</router-link>\n            <router-view></router-view>\n        </div>\n    </template>\n    <template id=\"son\">\n        <div>\n            <h4>I am Son</h4>\n            <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nesciunt in voluptatibus expedita repudiandae. Soluta distinctio quod quos dolorem blanditiis magni molestiae, minima dolores ipsum! Minima possimus sunt eius quis debitis!</p>\n        </div>\n    </template>\n```\n\n```javasc\nvar home = {\n            template: '#home'\n        }\n        var son = {\n            template: '#son'\n        }\n        var router = new VueRouter({\n            routes: [\n                {\n                    path: '/home',\n                    component: home,\n                    children: [\n                        {path: 'son', component: son}\n                    ]\n                },\n            ],\n            linkActiveClass: 'myActive'\n        })\n        var app = new Vue({\n            el: '#app',\n            router: router,\n        })\n```\n\n","source":"_posts/vue-router1.md","raw":"---\n\ntitle: Vue路由嵌套\ndate: 2020-03-25 09:46:43\ntags: Vue\ncategories: Vue.js\n\n---\n\n**必须注意的两个点**\n\n1. 子路由的**router-link**中的path必须是完整的path（带父级path），例如父级是/parent，子级是/son，那么子路由的router-link中的path必须为/parent/son；\n2. routes里的children中的子路由的path前面不能带 <span style='color: red'>/</span>，例如：\n\n```javascript\nroutes: [\n    {\n        path: '/parent',\n        component: parent,\n        children: [\n            {\n                path: 'son',//这里就没有前面的 /\n                component: son\n            }\n        ]\n    }\n]\n```\n\n点击<span style='color: red'>阅读更多</span>查看代码\n\n<!--more-->\n<div align='center'>\n    <img src=\"/images/vue_router/vue_router1.gif\" alt=\"\" style=\"width: 400px;\">\n    <img src=\"/images/vue_router/vue_router1-1.gif\" alt=\"\" style=\"width: 400px;\">\n</div>\n\n```html\n<div id='app'>\n        <router-link to=\"/home\">首页</router-link>\n        <router-view></router-view>\n    </div>\n    <template id=\"home\">\n        <div>\n            <h3>Home</h3>\n            <router-link to=\"/home/son\">Son</router-link>\n            <router-view></router-view>\n        </div>\n    </template>\n    <template id=\"son\">\n        <div>\n            <h4>I am Son</h4>\n            <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nesciunt in voluptatibus expedita repudiandae. Soluta distinctio quod quos dolorem blanditiis magni molestiae, minima dolores ipsum! Minima possimus sunt eius quis debitis!</p>\n        </div>\n    </template>\n```\n\n```javasc\nvar home = {\n            template: '#home'\n        }\n        var son = {\n            template: '#son'\n        }\n        var router = new VueRouter({\n            routes: [\n                {\n                    path: '/home',\n                    component: home,\n                    children: [\n                        {path: 'son', component: son}\n                    ]\n                },\n            ],\n            linkActiveClass: 'myActive'\n        })\n        var app = new Vue({\n            el: '#app',\n            router: router,\n        })\n```\n\n","slug":"vue-router1","published":1,"updated":"2020-08-27T08:22:17.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgm003fr0u28u3c6zo3","content":"<p><strong>必须注意的两个点</strong></p>\n<ol>\n<li>子路由的<strong>router-link</strong>中的path必须是完整的path（带父级path），例如父级是/parent，子级是/son，那么子路由的router-link中的path必须为/parent/son；</li>\n<li>routes里的children中的子路由的path前面不能带 <span style='color: red'>/</span>，例如：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/parent'</span>,</span><br><span class=\"line\">        component: parent,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                path: <span class=\"string\">'son'</span>,<span class=\"comment\">//这里就没有前面的 /</span></span><br><span class=\"line\">                component: son</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>点击<span style='color: red'>阅读更多</span>查看代码</p>\n<a id=\"more\"></a>\n<div align='center'>\n    <img src=\"/images/vue_router/vue_router1.gif\" alt=\"\" style=\"width: 400px;\">\n    <img src=\"/images/vue_router/vue_router1-1.gif\" alt=\"\" style=\"width: 400px;\">\n</div>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/home\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"home\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/home/son\"</span>&gt;</span>Son<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"son\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>I am Son<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nesciunt in voluptatibus expedita repudiandae. Soluta distinctio quod quos dolorem blanditiis magni molestiae, minima dolores ipsum! Minima possimus sunt eius quis debitis!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var home &#x3D; &#123;</span><br><span class=\"line\">            template: &#39;#home&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var son &#x3D; &#123;</span><br><span class=\"line\">            template: &#39;#son&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">            routes: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    path: &#39;&#x2F;home&#39;,</span><br><span class=\"line\">                    component: home,</span><br><span class=\"line\">                    children: [</span><br><span class=\"line\">                        &#123;path: &#39;son&#39;, component: son&#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            linkActiveClass: &#39;myActive&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">            el: &#39;#app&#39;,</span><br><span class=\"line\">            router: router,</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><strong>必须注意的两个点</strong></p>\n<ol>\n<li>子路由的<strong>router-link</strong>中的path必须是完整的path（带父级path），例如父级是/parent，子级是/son，那么子路由的router-link中的path必须为/parent/son；</li>\n<li>routes里的children中的子路由的path前面不能带 <span style='color: red'>/</span>，例如：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/parent'</span>,</span><br><span class=\"line\">        component: parent,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                path: <span class=\"string\">'son'</span>,<span class=\"comment\">//这里就没有前面的 /</span></span><br><span class=\"line\">                component: son</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>点击<span style='color: red'>阅读更多</span>查看代码</p>","more":"<div align='center'>\n    <img src=\"/images/vue_router/vue_router1.gif\" alt=\"\" style=\"width: 400px;\">\n    <img src=\"/images/vue_router/vue_router1-1.gif\" alt=\"\" style=\"width: 400px;\">\n</div>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/home\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"home\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/home/son\"</span>&gt;</span>Son<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"son\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>I am Son<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nesciunt in voluptatibus expedita repudiandae. Soluta distinctio quod quos dolorem blanditiis magni molestiae, minima dolores ipsum! Minima possimus sunt eius quis debitis!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var home &#x3D; &#123;</span><br><span class=\"line\">            template: &#39;#home&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var son &#x3D; &#123;</span><br><span class=\"line\">            template: &#39;#son&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">            routes: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    path: &#39;&#x2F;home&#39;,</span><br><span class=\"line\">                    component: home,</span><br><span class=\"line\">                    children: [</span><br><span class=\"line\">                        &#123;path: &#39;son&#39;, component: son&#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            linkActiveClass: &#39;myActive&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">            el: &#39;#app&#39;,</span><br><span class=\"line\">            router: router,</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>"},{"title":"Vue-基础 购物车小组件","date":"2020-02-10T02:44:18.000Z","_content":"\n<center>一个基于Vue基础指令的简单的购物车</center>\n<!--more-->\n\n**Demo**\n\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/demo_shop.gif'/>\n</div>\n\n\n\n<center>index.html</center>\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Shop</title>\n\t\t<link rel=\"stylesheet\" href=\"style.css\">\n\t</head>\n\t<body>\n\t\t<div id=\"app\" v-cloak>\n\t\t\t<template v-if=\"list.length\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t<th>商品名称</th>\n\t\t\t\t\t\t\t<th>商品单价</th>\n\t\t\t\t\t\t\t<th>购买数量</th>\n\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr v-for=\"(item, index) in list\">\n\t\t\t\t\t\t\t<td>{{ index + 1 }}</td>\n\t\t\t\t\t\t\t<td>{{ item.name }}</td>\n\t\t\t\t\t\t\t<td>{{ item.price }}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<button class='fun' type=\"button\" @click=\"handleReduce(index)\":disabled=\"item.count === 1\">-</button>\n\t\t\t\t\t\t\t\t{{ item.count }}\n\t\t\t\t\t\t\t\t<button class='fun' type=\"button\" @click=\"handleAdd(index)\">+</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<button @click=\"handleRemove(index)\">移除</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<div>总价：￥ {{ totalPrice }}</div>\n\t\t\t</template>\n\t\t\t<div v-else>购物车为空</div>\n\t\t</div>\n\t\t<script src=\"../lib/vue.js\"></script>\n\t\t<script src=\"index.js\"></script>\n\t</body>\n</html>\n\n```\n<center>index.js</center>\n```javascript\nvar app = new Vue({\n\tel: '#app',\n\tdata: {\n\t\tlist: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'iPhone 7',\n\t\t\t\tprice: 6188,\n\t\t\t\tcount: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'iPad Pro',\n\t\t\t\tprice: 2888,\n\t\t\t\tcount: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'MacBook Pro',\n\t\t\t\tprice: 21488,\n\t\t\t\tcount: 1\n\t\t\t}\n\t\t],\n\t\ttext: 'ss'\n\t},\n\tcomputed: {\n\t\ttotalPrice: function (){\n\t\t\tvar total = 0;\n\t\t\tfor(var i = 0; i < this.list.length; i++){\n\t\t\t\tvar item = this.list[i];\n\t\t\t\ttotal += item.price * item.count;\n\t\t\t}\n\t\t\treturn total.toString().replace(/\\B(?=(\\d{3})+$)/g, ',');\n\t\t}\n\t},\n\tmethods: {\n\t\thandleReduce: function (index){\n\t\t\tif(this.list[index].count === 1) return;\n\t\t\tthis.list[index].count--;\n\t\t},\n\t\thandleAdd: function (index){\n\t\t\tthis.list[index].count++;\n\t\t},\n\t\thandleRemove: function (index){\n\t\t\tthis.list.splice(index, 1);\n\t\t}\n\t}\n});\n```\n<center>style.css</center>\n```css\n*{\n\tmargin: 0;\n\tpadding: 0;\n\tfont-family: 'XHei';\n}\n#app{\n\twidth: 500px;\n\theight: 500px;\n\tpadding: 20px;\n\tborder-radius: 10px;\n\tbox-shadow: 0 0 30px rgba(0,0,0,.1);\n\tmargin: 20px;\n}\ntable{\n\twidth: 500px;\n\theight: 200px;\n\tborder: #0000FF solid 1px;\n\tborder-collapse: collapse;\n\tmargin-bottom: 20px;\n}\nth{\n\tborder: 1px solid #0000FF;\n\ttext-align: center;\n}\nth:hover{\n\tbackground-color: #c4e4ff;\n}\ntbody{\n\tvertical-align: middle;\n}\ntd{\n\tborder:solid #3190E8 1px;\n\ttext-align: center;\n}\ntd:hover{\n\tbackground-color: #F5F5F5;\n}\nbutton.fun{\n\twidth: 20px;\n}\n```","source":"_posts/vue-shop.md","raw":"---\ntitle: Vue-基础 购物车小组件\ndate: 2020-02-10 10:44:18\ncategories: Vue.js\ntags: Vue\n---\n\n<center>一个基于Vue基础指令的简单的购物车</center>\n<!--more-->\n\n**Demo**\n\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/demo_shop.gif'/>\n</div>\n\n\n\n<center>index.html</center>\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Shop</title>\n\t\t<link rel=\"stylesheet\" href=\"style.css\">\n\t</head>\n\t<body>\n\t\t<div id=\"app\" v-cloak>\n\t\t\t<template v-if=\"list.length\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t<th>商品名称</th>\n\t\t\t\t\t\t\t<th>商品单价</th>\n\t\t\t\t\t\t\t<th>购买数量</th>\n\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr v-for=\"(item, index) in list\">\n\t\t\t\t\t\t\t<td>{{ index + 1 }}</td>\n\t\t\t\t\t\t\t<td>{{ item.name }}</td>\n\t\t\t\t\t\t\t<td>{{ item.price }}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<button class='fun' type=\"button\" @click=\"handleReduce(index)\":disabled=\"item.count === 1\">-</button>\n\t\t\t\t\t\t\t\t{{ item.count }}\n\t\t\t\t\t\t\t\t<button class='fun' type=\"button\" @click=\"handleAdd(index)\">+</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<button @click=\"handleRemove(index)\">移除</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<div>总价：￥ {{ totalPrice }}</div>\n\t\t\t</template>\n\t\t\t<div v-else>购物车为空</div>\n\t\t</div>\n\t\t<script src=\"../lib/vue.js\"></script>\n\t\t<script src=\"index.js\"></script>\n\t</body>\n</html>\n\n```\n<center>index.js</center>\n```javascript\nvar app = new Vue({\n\tel: '#app',\n\tdata: {\n\t\tlist: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'iPhone 7',\n\t\t\t\tprice: 6188,\n\t\t\t\tcount: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'iPad Pro',\n\t\t\t\tprice: 2888,\n\t\t\t\tcount: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'MacBook Pro',\n\t\t\t\tprice: 21488,\n\t\t\t\tcount: 1\n\t\t\t}\n\t\t],\n\t\ttext: 'ss'\n\t},\n\tcomputed: {\n\t\ttotalPrice: function (){\n\t\t\tvar total = 0;\n\t\t\tfor(var i = 0; i < this.list.length; i++){\n\t\t\t\tvar item = this.list[i];\n\t\t\t\ttotal += item.price * item.count;\n\t\t\t}\n\t\t\treturn total.toString().replace(/\\B(?=(\\d{3})+$)/g, ',');\n\t\t}\n\t},\n\tmethods: {\n\t\thandleReduce: function (index){\n\t\t\tif(this.list[index].count === 1) return;\n\t\t\tthis.list[index].count--;\n\t\t},\n\t\thandleAdd: function (index){\n\t\t\tthis.list[index].count++;\n\t\t},\n\t\thandleRemove: function (index){\n\t\t\tthis.list.splice(index, 1);\n\t\t}\n\t}\n});\n```\n<center>style.css</center>\n```css\n*{\n\tmargin: 0;\n\tpadding: 0;\n\tfont-family: 'XHei';\n}\n#app{\n\twidth: 500px;\n\theight: 500px;\n\tpadding: 20px;\n\tborder-radius: 10px;\n\tbox-shadow: 0 0 30px rgba(0,0,0,.1);\n\tmargin: 20px;\n}\ntable{\n\twidth: 500px;\n\theight: 200px;\n\tborder: #0000FF solid 1px;\n\tborder-collapse: collapse;\n\tmargin-bottom: 20px;\n}\nth{\n\tborder: 1px solid #0000FF;\n\ttext-align: center;\n}\nth:hover{\n\tbackground-color: #c4e4ff;\n}\ntbody{\n\tvertical-align: middle;\n}\ntd{\n\tborder:solid #3190E8 1px;\n\ttext-align: center;\n}\ntd:hover{\n\tbackground-color: #F5F5F5;\n}\nbutton.fun{\n\twidth: 20px;\n}\n```","slug":"vue-shop","published":1,"updated":"2020-08-27T08:22:17.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgo003kr0u22fzvbg4t","content":"<center>一个基于Vue基础指令的简单的购物车</center>\n<a id=\"more\"></a>\n\n<p><strong>Demo</strong></p>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/demo_shop.gif'/>\n</div>\n\n\n\n<center>index.html</center>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Shop<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"list.length\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>商品单价<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>购买数量<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">'fun'</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleReduce(index)\"</span><span class=\"attr\">:disabled</span>=<span class=\"string\">\"item.count === 1\"</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#123;&#123; item.count &#125;&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">'fun'</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleAdd(index)\"</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleRemove(index)\"</span>&gt;</span>移除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>总价：￥ &#123;&#123; totalPrice &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>购物车为空<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<center>index.js</center>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">\t\tlist: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'iPhone 7'</span>,</span><br><span class=\"line\">\t\t\t\tprice: <span class=\"number\">6188</span>,</span><br><span class=\"line\">\t\t\t\tcount: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'iPad Pro'</span>,</span><br><span class=\"line\">\t\t\t\tprice: <span class=\"number\">2888</span>,</span><br><span class=\"line\">\t\t\t\tcount: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'MacBook Pro'</span>,</span><br><span class=\"line\">\t\t\t\tprice: <span class=\"number\">21488</span>,</span><br><span class=\"line\">\t\t\t\tcount: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\ttext: <span class=\"string\">'ss'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcomputed: &#123;</span><br><span class=\"line\">\t\ttotalPrice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.list.length; i++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> item = <span class=\"keyword\">this</span>.list[i];</span><br><span class=\"line\">\t\t\t\ttotal += item.price * item.count;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> total.toString().replace(<span class=\"regexp\">/\\B(?=(\\d&#123;3&#125;)+$)/g</span>, <span class=\"string\">','</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods: &#123;</span><br><span class=\"line\">\t\thandleReduce: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.list[index].count === <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.list[index].count--;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\thandleAdd: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.list[index].count++;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\thandleRemove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.list.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<center>style.css</center>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">'XHei'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#app</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">#0000FF</span> solid <span class=\"number\">1px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">th</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0000FF</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">th</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#c4e4ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">tbody</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>:solid <span class=\"number\">#3190E8</span> <span class=\"number\">1px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">td</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#F5F5F5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-class\">.fun</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<center>一个基于Vue基础指令的简单的购物车</center>","more":"<p><strong>Demo</strong></p>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/demo_shop.gif'/>\n</div>\n\n\n\n<center>index.html</center>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Shop<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"list.length\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>商品单价<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>购买数量<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">'fun'</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleReduce(index)\"</span><span class=\"attr\">:disabled</span>=<span class=\"string\">\"item.count === 1\"</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#123;&#123; item.count &#125;&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">'fun'</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleAdd(index)\"</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"handleRemove(index)\"</span>&gt;</span>移除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>总价：￥ &#123;&#123; totalPrice &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>购物车为空<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<center>index.js</center>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">\t\tlist: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'iPhone 7'</span>,</span><br><span class=\"line\">\t\t\t\tprice: <span class=\"number\">6188</span>,</span><br><span class=\"line\">\t\t\t\tcount: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'iPad Pro'</span>,</span><br><span class=\"line\">\t\t\t\tprice: <span class=\"number\">2888</span>,</span><br><span class=\"line\">\t\t\t\tcount: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'MacBook Pro'</span>,</span><br><span class=\"line\">\t\t\t\tprice: <span class=\"number\">21488</span>,</span><br><span class=\"line\">\t\t\t\tcount: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\ttext: <span class=\"string\">'ss'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcomputed: &#123;</span><br><span class=\"line\">\t\ttotalPrice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.list.length; i++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> item = <span class=\"keyword\">this</span>.list[i];</span><br><span class=\"line\">\t\t\t\ttotal += item.price * item.count;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> total.toString().replace(<span class=\"regexp\">/\\B(?=(\\d&#123;3&#125;)+$)/g</span>, <span class=\"string\">','</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods: &#123;</span><br><span class=\"line\">\t\thandleReduce: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.list[index].count === <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.list[index].count--;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\thandleAdd: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.list[index].count++;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\thandleRemove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.list.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<center>style.css</center>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">'XHei'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#app</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">#0000FF</span> solid <span class=\"number\">1px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">th</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0000FF</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">th</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#c4e4ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">tbody</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>:solid <span class=\"number\">#3190E8</span> <span class=\"number\">1px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">td</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#F5F5F5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-class\">.fun</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue slot的使用","date":"2020-02-29T09:03:11.000Z","_content":"<h4 align=\"left\">个人理解</h4>\n<p align=\"left\">slot是一个插槽，和vue使用data的数据{{ data }}一样，也和input的placeholder一样，一个占位符，父组件内没有东西的时候，就会显示slot的默认内容，父组件有内容就会覆盖slot的默认内容</p>\n<p align=\"left\">可以在组件模板内给每个slot一个name，当使用组件时，就可以通过slot的name来动态更新组件内容。</p>\n<!--more-->\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n\t<style>\n\t\t.panel{\n\t\t\tborder: 1px solid #000;\n\t\t\tborder-radius: .2em;\n\t\t}\n\t\t.panel > *{\n\t\t\tpadding: 15px;\n\t\t}\n\t\t.title{\n\t\t\tborder-bottom: 1px solid #000;\n\t\t}\n\t\t.content{\n\t\t\tborder-bottom: 1px solid #000;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<panel>\n\t\t\t<div slot=\"title\">This is title</div>\n\t\t\t<div slot=\"content\">\n\t\t\t\tLorem ipsum, dolor sit amet consectetur adipisicing elit. Illum ex blanditiis, delectus ab, placeat deserunt fuga at suscipit numquam pariatur quia perferendis optio ea repudiandae voluptatum, nobis omnis eos tempora?\n\t\t\t</div>\n\t\t\t<div slot=\"footer\">This is footer</div>\n\t\t</panel>\n\t</div>\n\t<template id=\"panel\">\n\t\t<div id=\"app\" class=\"panel\">\n\t\t\t<div class=\"title\">\n\t\t\t\t<slot name=\"title\">title</slot>\n\t\t\t</div>\n\t\t\t<div class=\"content\">\n\t\t\t\t<slot name=\"content\">Content</slot>\n\t\t\t</div>\n\t\t\t<div class=\"footer\">\n\t\t\t\t<slot name=\"footer\">Footer</slot>\n\t\t\t</div>\n\t\t</div>\n\t</template>\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\tVue.component('panel', {\n\t\t\ttemplate: '#panel',\n\n\t\t})\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\n\t\t})\n\t</script>\n</body>\n</html>\n```","source":"_posts/vue-slot.md","raw":"---\ntitle: Vue slot的使用\ndate: 2020-02-29 17:03:11\ntags: Vue\ncategories: Vue.js\n---\n<h4 align=\"left\">个人理解</h4>\n<p align=\"left\">slot是一个插槽，和vue使用data的数据{{ data }}一样，也和input的placeholder一样，一个占位符，父组件内没有东西的时候，就会显示slot的默认内容，父组件有内容就会覆盖slot的默认内容</p>\n<p align=\"left\">可以在组件模板内给每个slot一个name，当使用组件时，就可以通过slot的name来动态更新组件内容。</p>\n<!--more-->\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n\t<style>\n\t\t.panel{\n\t\t\tborder: 1px solid #000;\n\t\t\tborder-radius: .2em;\n\t\t}\n\t\t.panel > *{\n\t\t\tpadding: 15px;\n\t\t}\n\t\t.title{\n\t\t\tborder-bottom: 1px solid #000;\n\t\t}\n\t\t.content{\n\t\t\tborder-bottom: 1px solid #000;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<panel>\n\t\t\t<div slot=\"title\">This is title</div>\n\t\t\t<div slot=\"content\">\n\t\t\t\tLorem ipsum, dolor sit amet consectetur adipisicing elit. Illum ex blanditiis, delectus ab, placeat deserunt fuga at suscipit numquam pariatur quia perferendis optio ea repudiandae voluptatum, nobis omnis eos tempora?\n\t\t\t</div>\n\t\t\t<div slot=\"footer\">This is footer</div>\n\t\t</panel>\n\t</div>\n\t<template id=\"panel\">\n\t\t<div id=\"app\" class=\"panel\">\n\t\t\t<div class=\"title\">\n\t\t\t\t<slot name=\"title\">title</slot>\n\t\t\t</div>\n\t\t\t<div class=\"content\">\n\t\t\t\t<slot name=\"content\">Content</slot>\n\t\t\t</div>\n\t\t\t<div class=\"footer\">\n\t\t\t\t<slot name=\"footer\">Footer</slot>\n\t\t\t</div>\n\t\t</div>\n\t</template>\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\tVue.component('panel', {\n\t\t\ttemplate: '#panel',\n\n\t\t})\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\n\t\t})\n\t</script>\n</body>\n</html>\n```","slug":"vue-slot","published":1,"updated":"2020-08-27T08:22:17.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgo003nr0u2g7cd0r5j","content":"<h4 align=\"left\">个人理解</h4>\n<p align=\"left\">slot是一个插槽，和vue使用data的数据一样，也和input的placeholder一样，一个占位符，父组件内没有东西的时候，就会显示slot的默认内容，父组件有内容就会覆盖slot的默认内容</p>\n<p align=\"left\">可以在组件模板内给每个slot一个name，当使用组件时，就可以通过slot的name来动态更新组件内容。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.panel</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border-radius</span>: <span class=\"selector-class\">.2em</span>;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.panel</span> &gt; *&#123;</span></span><br><span class=\"line\">\t\t\tpadding: 15px;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.title</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.content</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">panel</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"title\"</span>&gt;</span>This is title<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\tLorem ipsum, dolor sit amet consectetur adipisicing elit. Illum ex blanditiis, delectus ab, placeat deserunt fuga at suscipit numquam pariatur quia perferendis optio ea repudiandae voluptatum, nobis omnis eos tempora?</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span>This is footer<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">panel</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span>&gt;</span>Content<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span>Footer<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'panel'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\ttemplate: <span class=\"string\">'#panel'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 align=\"left\">个人理解</h4>\n<p align=\"left\">slot是一个插槽，和vue使用data的数据一样，也和input的placeholder一样，一个占位符，父组件内没有东西的时候，就会显示slot的默认内容，父组件有内容就会覆盖slot的默认内容</p>\n<p align=\"left\">可以在组件模板内给每个slot一个name，当使用组件时，就可以通过slot的name来动态更新组件内容。</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.panel</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border-radius</span>: <span class=\"selector-class\">.2em</span>;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.panel</span> &gt; *&#123;</span></span><br><span class=\"line\">\t\t\tpadding: 15px;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.title</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.content</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">panel</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"title\"</span>&gt;</span>This is title<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\tLorem ipsum, dolor sit amet consectetur adipisicing elit. Illum ex blanditiis, delectus ab, placeat deserunt fuga at suscipit numquam pariatur quia perferendis optio ea repudiandae voluptatum, nobis omnis eos tempora?</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span>This is footer<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">panel</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span>&gt;</span>Content<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span>Footer<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'panel'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\ttemplate: <span class=\"string\">'#panel'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue 组件通信 | 练习","date":"2020-02-27T02:02:46.000Z","_content":"<p align=\"left\">\n\t这个练习目的是比较使用语法糖和不使用语法糖的效果，发现使用v-model绑定元素之后，通过组件去改变就容易很多，代码量可以少一点\n</p>\n<!--more-->\n<div align=\"center\">\n\t<img src=\"/images/vue-practice3.gif\" alt=\"效果演示\" align=\"center\">\n</div>\n\n---\n<h4 align=\"center\">未使用语法糖</h4>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<p>total:{{ total }}</p>\n\t\t<!--使用v-on(这里使用了语法糖 @ )添加了两个事件监听器-->\n\t\t<!--两个事件会触发handleGetTotal事件-->>\n\t\t<my-item @increase=\"handleGetTotal\" @reduce=\"handleGetTotal\"></my-item>\n\t</div>\t\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\tVue.component('my-item', {\n\t\t\ttemplate: `\n\t\t\t\t<div>\n\t\t\t\t\t<button @click=\"increase()\">+1</button>\n\t\t\t\t\t<button @click=\"reduce()\">-1</button>\n\t\t\t\t</div>\n\t\t\t`,\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tcounter: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\t//点击+1按钮，触发此事件，counter加1，随后将更新的counter通过监听的increase监听器发送出去\n\t\t\t\tincrease: function (){\n\t\t\t\t\tthis.counter++;\n\t\t\t\t\tthis.$emit('increase', this.counter);\n\t\t\t\t},\n\t\t\t\t//点击-1按钮，触发此事件，counter减1，随后将更新的counter通过监听的increase监听器发送出去\n\t\t\t\treduce: function (){\n\t\t\t\t\tthis.counter--;\n\t\t\t\t\tthis.$emit('reduce', this.counter);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tdata: {\n\t\t\t\ttotal: 0\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\t//这个函数有一个参数，参数是组件按钮通过$emit()发出传过来的数据\n\t\t\t\t//得到数据后，再把数据绑定到total，这样就是动态的\n\t\t\t\thandleGetTotal: function (data){\n\t\t\t\t\tthis.total = data;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t</script>\n</body>\n</html>\n```\n<h4 align='center'>使用了语法糖</h4>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<p>总数： <span style=\"color: red; font-size: 30px;\">{{ total }}</span></p>\t\n\t\t<!-- 使用了v-model绑定了total -->\n                <!--可以使用语法糖-->\n\t\t<my-item v-model=\"total\"></my-item>\n\t</div>\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\tVue.component('my-item', {\n\t\t\ttemplate: `\n\t\t\t\t<div>\n\t\t\t\t\t<button @click='increase()'>+1</button>\n\t\t\t\t\t<button @click='reduce()'>-1</button>\n\t\t\t\t</div>\n\t\t\t`,\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tcounter: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tincrease: function(){\n\t\t\t\t\tthis.counter++;\n\t\t\t\t\t// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据\n\t\t\t\t\tthis.$emit('input', this.counter);\n\t\t\t\t},\n\t\t\t\treduce: function (){\n\t\t\t\t\tthis.counter--;\n\t\t\t\t\t// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据\n\t\t\t\t\tthis.$emit('input', this.counter);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tdata: {\n\t\t\t\ttotal: 0\n\t\t\t}\n\t\t})\n\t</script>\n</body>\n</html>\n```","source":"_posts/vue-practice3.md","raw":"---\ntitle: Vue 组件通信 | 练习\ndate: 2020-02-27 10:02:46\ntags: Vue\ncategories: Vue.js\n---\n<p align=\"left\">\n\t这个练习目的是比较使用语法糖和不使用语法糖的效果，发现使用v-model绑定元素之后，通过组件去改变就容易很多，代码量可以少一点\n</p>\n<!--more-->\n<div align=\"center\">\n\t<img src=\"/images/vue-practice3.gif\" alt=\"效果演示\" align=\"center\">\n</div>\n\n---\n<h4 align=\"center\">未使用语法糖</h4>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<p>total:{{ total }}</p>\n\t\t<!--使用v-on(这里使用了语法糖 @ )添加了两个事件监听器-->\n\t\t<!--两个事件会触发handleGetTotal事件-->>\n\t\t<my-item @increase=\"handleGetTotal\" @reduce=\"handleGetTotal\"></my-item>\n\t</div>\t\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\tVue.component('my-item', {\n\t\t\ttemplate: `\n\t\t\t\t<div>\n\t\t\t\t\t<button @click=\"increase()\">+1</button>\n\t\t\t\t\t<button @click=\"reduce()\">-1</button>\n\t\t\t\t</div>\n\t\t\t`,\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tcounter: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\t//点击+1按钮，触发此事件，counter加1，随后将更新的counter通过监听的increase监听器发送出去\n\t\t\t\tincrease: function (){\n\t\t\t\t\tthis.counter++;\n\t\t\t\t\tthis.$emit('increase', this.counter);\n\t\t\t\t},\n\t\t\t\t//点击-1按钮，触发此事件，counter减1，随后将更新的counter通过监听的increase监听器发送出去\n\t\t\t\treduce: function (){\n\t\t\t\t\tthis.counter--;\n\t\t\t\t\tthis.$emit('reduce', this.counter);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tdata: {\n\t\t\t\ttotal: 0\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\t//这个函数有一个参数，参数是组件按钮通过$emit()发出传过来的数据\n\t\t\t\t//得到数据后，再把数据绑定到total，这样就是动态的\n\t\t\t\thandleGetTotal: function (data){\n\t\t\t\t\tthis.total = data;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t</script>\n</body>\n</html>\n```\n<h4 align='center'>使用了语法糖</h4>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<div id=\"app\">\n\t\t<p>总数： <span style=\"color: red; font-size: 30px;\">{{ total }}</span></p>\t\n\t\t<!-- 使用了v-model绑定了total -->\n                <!--可以使用语法糖-->\n\t\t<my-item v-model=\"total\"></my-item>\n\t</div>\n\t<script src=\"lib/vue.js\"></script>\n\t<script>\n\t\tVue.component('my-item', {\n\t\t\ttemplate: `\n\t\t\t\t<div>\n\t\t\t\t\t<button @click='increase()'>+1</button>\n\t\t\t\t\t<button @click='reduce()'>-1</button>\n\t\t\t\t</div>\n\t\t\t`,\n\t\t\tdata: function (){\n\t\t\t\treturn {\n\t\t\t\t\tcounter: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tincrease: function(){\n\t\t\t\t\tthis.counter++;\n\t\t\t\t\t// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据\n\t\t\t\t\tthis.$emit('input', this.counter);\n\t\t\t\t},\n\t\t\t\treduce: function (){\n\t\t\t\t\tthis.counter--;\n\t\t\t\t\t// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据\n\t\t\t\t\tthis.$emit('input', this.counter);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tvar app = new Vue({\n\t\t\tel: '#app',\n\t\t\tdata: {\n\t\t\t\ttotal: 0\n\t\t\t}\n\t\t})\n\t</script>\n</body>\n</html>\n```","slug":"vue-practice3","published":1,"updated":"2020-08-27T08:22:17.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgr003rr0u2fhn68u63","content":"<p align=\"left\">\n    这个练习目的是比较使用语法糖和不使用语法糖的效果，发现使用v-model绑定元素之后，通过组件去改变就容易很多，代码量可以少一点\n</p>\n<a id=\"more\"></a>\n<div align=\"center\">\n    <img src=\"/images/vue-practice3.gif\" alt=\"效果演示\" align=\"center\">\n</div>\n\n<hr>\n<h4 align=\"center\">未使用语法糖</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>total:&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--使用v-on(这里使用了语法糖 @ )添加了两个事件监听器--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--两个事件会触发handleGetTotal事件--&gt;</span>&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">my-item</span> @<span class=\"attr\">increase</span>=<span class=\"string\">\"handleGetTotal\"</span> @<span class=\"attr\">reduce</span>=<span class=\"string\">\"handleGetTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-item</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'my-item'</span>, &#123;</span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increase()\"</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"reduce()\"</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tcounter: 0</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//点击+1按钮，触发此事件，counter加1，随后将更新的counter通过监听的increase监听器发送出去</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tincrease: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.counter++;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'increase'</span>, <span class=\"keyword\">this</span>.counter);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//点击-1按钮，触发此事件，counter减1，随后将更新的counter通过监听的increase监听器发送出去</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\treduce: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.counter--;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'reduce'</span>, <span class=\"keyword\">this</span>.counter);</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\ttotal: 0</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//这个函数有一个参数，参数是组件按钮通过$emit()发出传过来的数据</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//得到数据后，再把数据绑定到total，这样就是动态的</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\thandleGetTotal: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.total = data;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 align='center'>使用了语法糖</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>总数： <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red; font-size: 30px;\"</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 使用了v-model绑定了total --&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--可以使用语法糖--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">my-item</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"total\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-item</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'my-item'</span>, &#123;</span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">'increase()'</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">'reduce()'</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tcounter: 0</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tincrease: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.counter++;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"keyword\">this</span>.counter);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\treduce: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.counter--;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"keyword\">this</span>.counter);</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\ttotal: 0</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p align=\"left\">\n    这个练习目的是比较使用语法糖和不使用语法糖的效果，发现使用v-model绑定元素之后，通过组件去改变就容易很多，代码量可以少一点\n</p>","more":"<div align=\"center\">\n    <img src=\"/images/vue-practice3.gif\" alt=\"效果演示\" align=\"center\">\n</div>\n\n<hr>\n<h4 align=\"center\">未使用语法糖</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>total:&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--使用v-on(这里使用了语法糖 @ )添加了两个事件监听器--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--两个事件会触发handleGetTotal事件--&gt;</span>&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">my-item</span> @<span class=\"attr\">increase</span>=<span class=\"string\">\"handleGetTotal\"</span> @<span class=\"attr\">reduce</span>=<span class=\"string\">\"handleGetTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-item</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'my-item'</span>, &#123;</span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"increase()\"</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"reduce()\"</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tcounter: 0</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//点击+1按钮，触发此事件，counter加1，随后将更新的counter通过监听的increase监听器发送出去</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tincrease: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.counter++;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'increase'</span>, <span class=\"keyword\">this</span>.counter);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//点击-1按钮，触发此事件，counter减1，随后将更新的counter通过监听的increase监听器发送出去</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\treduce: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.counter--;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'reduce'</span>, <span class=\"keyword\">this</span>.counter);</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\ttotal: 0</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//这个函数有一个参数，参数是组件按钮通过$emit()发出传过来的数据</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//得到数据后，再把数据绑定到total，这样就是动态的</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\thandleGetTotal: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.total = data;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 align='center'>使用了语法糖</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>总数： <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red; font-size: 30px;\"</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 使用了v-model绑定了total --&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--可以使用语法糖--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">my-item</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"total\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-item</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tVue.component(<span class=\"string\">'my-item'</span>, &#123;</span></span><br><span class=\"line\">\t\t\ttemplate: `</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">'increase()'</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">'reduce()'</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">\t\t\t`,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdata: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">\t\t\t\t\tcounter: 0</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmethods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tincrease: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.counter++;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"keyword\">this</span>.counter);</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\treduce: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.counter--;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">// 由于上面使用了v-model，这里就可以使用语法糖，直接用$emit绑定input，再传递数据</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"keyword\">this</span>.counter);</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tel: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\ttotal: 0</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue中监听数据变化的两种方式","date":"2020-03-25T03:52:30.000Z","_content":"当vue中的数据有变化，例如用户输入新的数据之后，如何处理更新后的数据？这就提供了针对这种情况的两种方式。\n<!--more-->\n1. 使用keyup\n```html\n\t<div id=\"app\">\n\n    <!-- 分析： -->\n    <!-- 1. 我们要监听到 文本框数据的改变，这样才能知道 什么时候去拼接 出一个 fullname -->\n    <!-- 2. 如何监听到 文本框的数据改变呢？？？ -->\n\n    <input type=\"text\" v-model=\"firstname\" @keyup=\"getFullname\"> +\n    <input type=\"text\" v-model=\"lastname\" @keyup=\"getFullname\"> =\n    <input type=\"text\" v-model=\"fullname\">\n\n  </div>\n```\n```javascript\n\t<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstname: '',\n        lastname: '',\n        fullname: ''\n      },\n      methods: {\n        getFullname() {\n          this.fullname = this.firstname + '-' + this.lastname\n        }\n      }\n    });\n  </script>\n```\n2. 使用watch, watch中监听添加的需要被监听的组件，用一个带有两个参数的函数处理更新后的数据\n```html\n<div id=\"app\">\n\n    <input type=\"text\" v-model=\"firstname\"> +\n    <input type=\"text\" v-model=\"lastname\"> =\n    <input type=\"text\" v-model=\"fullname\">\n\n  </div>\n```\n```javascript\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstname: '',\n        lastname: '',\n        fullname: ''\n      },\n      methods: {},\n      watch: { // 使用这个 属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数\n        'firstname': function (newVal, oldVal) {\n          // console.log('监视到了 firstname 的变化')\n          // this.fullname = this.firstname + '-' + this.lastname\n\n          // console.log(newVal + ' --- ' + oldVal)\n\n          this.fullname = newVal + '-' + this.lastname\n        },\n        'lastname': function (newVal) {\n          this.fullname = this.firstname + '-' + newVal\n        }\n      }\n    });\n  </script>\n```","source":"_posts/vue-twoWayToUpdateDate.md","raw":"---\n\ntitle: Vue中监听数据变化的两种方式\ndate: 2020-03-25 11:52:30\ntags: Vue\ncategories: Vue.js\n\n---\n当vue中的数据有变化，例如用户输入新的数据之后，如何处理更新后的数据？这就提供了针对这种情况的两种方式。\n<!--more-->\n1. 使用keyup\n```html\n\t<div id=\"app\">\n\n    <!-- 分析： -->\n    <!-- 1. 我们要监听到 文本框数据的改变，这样才能知道 什么时候去拼接 出一个 fullname -->\n    <!-- 2. 如何监听到 文本框的数据改变呢？？？ -->\n\n    <input type=\"text\" v-model=\"firstname\" @keyup=\"getFullname\"> +\n    <input type=\"text\" v-model=\"lastname\" @keyup=\"getFullname\"> =\n    <input type=\"text\" v-model=\"fullname\">\n\n  </div>\n```\n```javascript\n\t<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstname: '',\n        lastname: '',\n        fullname: ''\n      },\n      methods: {\n        getFullname() {\n          this.fullname = this.firstname + '-' + this.lastname\n        }\n      }\n    });\n  </script>\n```\n2. 使用watch, watch中监听添加的需要被监听的组件，用一个带有两个参数的函数处理更新后的数据\n```html\n<div id=\"app\">\n\n    <input type=\"text\" v-model=\"firstname\"> +\n    <input type=\"text\" v-model=\"lastname\"> =\n    <input type=\"text\" v-model=\"fullname\">\n\n  </div>\n```\n```javascript\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstname: '',\n        lastname: '',\n        fullname: ''\n      },\n      methods: {},\n      watch: { // 使用这个 属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数\n        'firstname': function (newVal, oldVal) {\n          // console.log('监视到了 firstname 的变化')\n          // this.fullname = this.firstname + '-' + this.lastname\n\n          // console.log(newVal + ' --- ' + oldVal)\n\n          this.fullname = newVal + '-' + this.lastname\n        },\n        'lastname': function (newVal) {\n          this.fullname = this.firstname + '-' + newVal\n        }\n      }\n    });\n  </script>\n```","slug":"vue-twoWayToUpdateDate","published":1,"updated":"2020-08-27T08:22:17.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgr003vr0u28e73ar9s","content":"<p>当vue中的数据有变化，例如用户输入新的数据之后，如何处理更新后的数据？这就提供了针对这种情况的两种方式。</p>\n<a id=\"more\"></a>\n<ol>\n<li>使用keyup<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 分析： --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 1. 我们要监听到 文本框数据的改变，这样才能知道 什么时候去拼接 出一个 fullname --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 2. 如何监听到 文本框的数据改变呢？？？ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"firstname\"</span> @<span class=\"attr\">keyup</span>=<span class=\"string\">\"getFullname\"</span>&gt;</span> +</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastname\"</span> @<span class=\"attr\">keyup</span>=<span class=\"string\">\"getFullname\"</span>&gt;</span> =</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fullname\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   <span class=\"comment\">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">       firstname: <span class=\"string\">''</span>,</span><br><span class=\"line\">       lastname: <span class=\"string\">''</span>,</span><br><span class=\"line\">       fullname: <span class=\"string\">''</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\">       getFullname() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.fullname = <span class=\"keyword\">this</span>.firstname + <span class=\"string\">'-'</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>使用watch, watch中监听添加的需要被监听的组件，用一个带有两个参数的函数处理更新后的数据<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"firstname\"</span>&gt;</span> +</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastname\"</span>&gt;</span> =</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fullname\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstname: <span class=\"string\">''</span>,</span><br><span class=\"line\">        lastname: <span class=\"string\">''</span>,</span><br><span class=\"line\">        fullname: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123; <span class=\"comment\">// 使用这个 属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数</span></span><br><span class=\"line\">        <span class=\"string\">'firstname'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log('监视到了 firstname 的变化')</span></span><br><span class=\"line\">          <span class=\"comment\">// this.fullname = this.firstname + '-' + this.lastname</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// console.log(newVal + ' --- ' + oldVal)</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.fullname = newVal + <span class=\"string\">'-'</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'lastname'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.fullname = <span class=\"keyword\">this</span>.firstname + <span class=\"string\">'-'</span> + newVal</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>当vue中的数据有变化，例如用户输入新的数据之后，如何处理更新后的数据？这就提供了针对这种情况的两种方式。</p>","more":"<ol>\n<li>使用keyup<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 分析： --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 1. 我们要监听到 文本框数据的改变，这样才能知道 什么时候去拼接 出一个 fullname --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 2. 如何监听到 文本框的数据改变呢？？？ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"firstname\"</span> @<span class=\"attr\">keyup</span>=<span class=\"string\">\"getFullname\"</span>&gt;</span> +</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastname\"</span> @<span class=\"attr\">keyup</span>=<span class=\"string\">\"getFullname\"</span>&gt;</span> =</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fullname\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   <span class=\"comment\">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">       firstname: <span class=\"string\">''</span>,</span><br><span class=\"line\">       lastname: <span class=\"string\">''</span>,</span><br><span class=\"line\">       fullname: <span class=\"string\">''</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\">       getFullname() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.fullname = <span class=\"keyword\">this</span>.firstname + <span class=\"string\">'-'</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>使用watch, watch中监听添加的需要被监听的组件，用一个带有两个参数的函数处理更新后的数据<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"firstname\"</span>&gt;</span> +</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastname\"</span>&gt;</span> =</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fullname\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstname: <span class=\"string\">''</span>,</span><br><span class=\"line\">        lastname: <span class=\"string\">''</span>,</span><br><span class=\"line\">        fullname: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123; <span class=\"comment\">// 使用这个 属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数</span></span><br><span class=\"line\">        <span class=\"string\">'firstname'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log('监视到了 firstname 的变化')</span></span><br><span class=\"line\">          <span class=\"comment\">// this.fullname = this.firstname + '-' + this.lastname</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// console.log(newVal + ' --- ' + oldVal)</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.fullname = newVal + <span class=\"string\">'-'</span> + <span class=\"keyword\">this</span>.lastname</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'lastname'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.fullname = <span class=\"keyword\">this</span>.firstname + <span class=\"string\">'-'</span> + newVal</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"Vue实战 | 输入框组件","date":"2020-03-04T05:47:44.000Z","_content":"<p align=\"left\"><span style=\"color: hotpink\">笔记：</span>在index-number.js中Vue组件内的watch里，每个成员的方法自带两个参数，前面是新的值，后面是旧的值，如下图所示</p>\n<div align=\"center\">\n\t<img src=\"/images/vue-note/watch_note1.png\" alt=\"示例\">\n</div>\n<p align=\"left\"><span style=\"color: hotpink\">收获：</span>组件内的数据是用props里定义的变量来传递，相当于一个中间人。</p>\n<p>点击下面<span style=\"color: red\">阅读更多</span>查看代码</p>\n<!--more-->\n<center>index.html</center>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"app\">\n        <input-number v-model='value' :max='10' :min='0'></input-number>\n    </div>\n    <script src=\"../../../lib/vue.js\"></script>\n    <script src=\"index-number.js\"></script>\n    <script src=\"index.js\"></script>\n</body>\n</html>\n```\n<center>index.js</center>\n\n```javascript\nnew Vue({\n    el: '#app',\n    data: {\n        value: 5\n    }\n})\n```\n<center>index-number.js</center>\n\n```javascript\nfunction isValueNumber(value){\n    return (/(^-?[0-9]+\\.{1}\\d+$) | (^-?[1-9][0-9]*$) | (^-?0{1}$)/).test(value + '');\n};\nVue.component('input-number', {\n    template: `\n        <div class='input-number'>\n            <input type='text' :value='currentValue' @change='handleChange'/>\n            <button @click='handleDown' :disable='currentValue <= min'>-</button>\n            <button @click='handleUp' :disable='currentValue >= min'>+</button>\n        </div>\n    `,\n    props: {\n        max: {\n            type: Number,\n            default: Infinity\n        },\n        min: {\n            type: Number,\n            default: -Infinity\n        },\n        value: {\n            type: Number,\n            default: 0\n        }\n    },\n    data: function (){\n        return {\n            currentValue: this.value\n        }\n    },\n    watch: {\n        currentValue: function (val, oldVal){\n            this.$emit('input', val);\n            this.$emit('on-change', val);\n            this.$emit('old', oldVal);\n        },\n        value: function(val){\n            this.updateValue(val);\n        }\n    },\n    methods: {\n        updateValue: function (val){\n            if (val > this.max) val = this.max;\n            if (val < this.min) val = this.min;\n            this.currentValue = val; \n        },\n        handleDown: function (){\n            if (this.currentValue <= this.min) return;\n            this.currentValue -= 1;\n        },\n        handleUp: function(){\n            if (this.currentValue >= this.max) return;\n            this.currentValue += 1;\n        },\n        handleChange: function (event){\n            var val = event.target.value.trim();\n            var max = this.max;\n            var min = this.min;\n\n            if(isValueNumber(val)){\n                val = Number(val);\n                this.currentValue = val;\n\n                if(val > max){\n                    this.currentValue = max;\n                }else if(val < min){\n                    this.currentValue = min;\n                }\n            }else{\n                event.target.value = this.currentValue;\n            }\n        }\n    },\n    mounted: function (){\n        this.updateValue(this.value);\n        this.$on('old', function (val){\n            console.log(val);\n        })\n    }\n})\n```","source":"_posts/vue-practice4.md","raw":"---\ntitle: Vue实战 | 输入框组件\ndate: 2020-03-04 13:47:44\ntags: Vue\t\ncategories:\tVue.js\n---\n<p align=\"left\"><span style=\"color: hotpink\">笔记：</span>在index-number.js中Vue组件内的watch里，每个成员的方法自带两个参数，前面是新的值，后面是旧的值，如下图所示</p>\n<div align=\"center\">\n\t<img src=\"/images/vue-note/watch_note1.png\" alt=\"示例\">\n</div>\n<p align=\"left\"><span style=\"color: hotpink\">收获：</span>组件内的数据是用props里定义的变量来传递，相当于一个中间人。</p>\n<p>点击下面<span style=\"color: red\">阅读更多</span>查看代码</p>\n<!--more-->\n<center>index.html</center>\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"app\">\n        <input-number v-model='value' :max='10' :min='0'></input-number>\n    </div>\n    <script src=\"../../../lib/vue.js\"></script>\n    <script src=\"index-number.js\"></script>\n    <script src=\"index.js\"></script>\n</body>\n</html>\n```\n<center>index.js</center>\n\n```javascript\nnew Vue({\n    el: '#app',\n    data: {\n        value: 5\n    }\n})\n```\n<center>index-number.js</center>\n\n```javascript\nfunction isValueNumber(value){\n    return (/(^-?[0-9]+\\.{1}\\d+$) | (^-?[1-9][0-9]*$) | (^-?0{1}$)/).test(value + '');\n};\nVue.component('input-number', {\n    template: `\n        <div class='input-number'>\n            <input type='text' :value='currentValue' @change='handleChange'/>\n            <button @click='handleDown' :disable='currentValue <= min'>-</button>\n            <button @click='handleUp' :disable='currentValue >= min'>+</button>\n        </div>\n    `,\n    props: {\n        max: {\n            type: Number,\n            default: Infinity\n        },\n        min: {\n            type: Number,\n            default: -Infinity\n        },\n        value: {\n            type: Number,\n            default: 0\n        }\n    },\n    data: function (){\n        return {\n            currentValue: this.value\n        }\n    },\n    watch: {\n        currentValue: function (val, oldVal){\n            this.$emit('input', val);\n            this.$emit('on-change', val);\n            this.$emit('old', oldVal);\n        },\n        value: function(val){\n            this.updateValue(val);\n        }\n    },\n    methods: {\n        updateValue: function (val){\n            if (val > this.max) val = this.max;\n            if (val < this.min) val = this.min;\n            this.currentValue = val; \n        },\n        handleDown: function (){\n            if (this.currentValue <= this.min) return;\n            this.currentValue -= 1;\n        },\n        handleUp: function(){\n            if (this.currentValue >= this.max) return;\n            this.currentValue += 1;\n        },\n        handleChange: function (event){\n            var val = event.target.value.trim();\n            var max = this.max;\n            var min = this.min;\n\n            if(isValueNumber(val)){\n                val = Number(val);\n                this.currentValue = val;\n\n                if(val > max){\n                    this.currentValue = max;\n                }else if(val < min){\n                    this.currentValue = min;\n                }\n            }else{\n                event.target.value = this.currentValue;\n            }\n        }\n    },\n    mounted: function (){\n        this.updateValue(this.value);\n        this.$on('old', function (val){\n            console.log(val);\n        })\n    }\n})\n```","slug":"vue-practice4","published":1,"updated":"2020-08-27T08:22:17.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgs003zr0u282uwg3f0","content":"<p align=\"left\"><span style=\"color: hotpink\">笔记：</span>在index-number.js中Vue组件内的watch里，每个成员的方法自带两个参数，前面是新的值，后面是旧的值，如下图所示</p>\n<div align=\"center\">\n    <img src=\"/images/vue-note/watch_note1.png\" alt=\"示例\">\n</div>\n<p align=\"left\"><span style=\"color: hotpink\">收获：</span>组件内的数据是用props里定义的变量来传递，相当于一个中间人。</p>\n<p>点击下面<span style=\"color: red\">阅读更多</span>查看代码</p>\n<a id=\"more\"></a>\n<center>index.html</center>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input-number</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'value'</span> <span class=\"attr\">:max</span>=<span class=\"string\">'10'</span> <span class=\"attr\">:min</span>=<span class=\"string\">'0'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input-number</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../../lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index-number.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<center>index.js</center>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        value: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<center>index-number.js</center>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValueNumber</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"regexp\">/(^-?[0-9]+\\.&#123;1&#125;\\d+$) | (^-?[1-9][0-9]*$) | (^-?0&#123;1&#125;$)/</span>).test(value + <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Vue.component(<span class=\"string\">'input-number'</span>, &#123;</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class='input-number'&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;input type='text' :value='currentValue' @change='handleChange'/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button @click='handleDown' :disable='currentValue &lt;= min'&gt;-&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button @click='handleUp' :disable='currentValue &gt;= min'&gt;+&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        max: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">Infinity</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        min: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: -<span class=\"literal\">Infinity</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        value: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            currentValue: <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">        currentValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, val);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'on-change'</span>, val);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'old'</span>, oldVal);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.updateValue(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val &gt; <span class=\"keyword\">this</span>.max) val = <span class=\"keyword\">this</span>.max;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val &lt; <span class=\"keyword\">this</span>.min) val = <span class=\"keyword\">this</span>.min;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentValue = val; </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleDown: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentValue &lt;= <span class=\"keyword\">this</span>.min) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentValue -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleUp: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentValue &gt;= <span class=\"keyword\">this</span>.max) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentValue += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleChange: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> val = event.target.value.trim();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> max = <span class=\"keyword\">this</span>.max;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> min = <span class=\"keyword\">this</span>.min;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isValueNumber(val))&#123;</span><br><span class=\"line\">                val = <span class=\"built_in\">Number</span>(val);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.currentValue = val;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(val &gt; max)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.currentValue = max;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val &lt; min)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.currentValue = min;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                event.target.value = <span class=\"keyword\">this</span>.currentValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.updateValue(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$on(<span class=\"string\">'old'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p align=\"left\"><span style=\"color: hotpink\">笔记：</span>在index-number.js中Vue组件内的watch里，每个成员的方法自带两个参数，前面是新的值，后面是旧的值，如下图所示</p>\n<div align=\"center\">\n    <img src=\"/images/vue-note/watch_note1.png\" alt=\"示例\">\n</div>\n<p align=\"left\"><span style=\"color: hotpink\">收获：</span>组件内的数据是用props里定义的变量来传递，相当于一个中间人。</p>\n<p>点击下面<span style=\"color: red\">阅读更多</span>查看代码</p>","more":"<center>index.html</center>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input-number</span> <span class=\"attr\">v-model</span>=<span class=\"string\">'value'</span> <span class=\"attr\">:max</span>=<span class=\"string\">'10'</span> <span class=\"attr\">:min</span>=<span class=\"string\">'0'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input-number</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../../lib/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index-number.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<center>index.js</center>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        value: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<center>index-number.js</center>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValueNumber</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"regexp\">/(^-?[0-9]+\\.&#123;1&#125;\\d+$) | (^-?[1-9][0-9]*$) | (^-?0&#123;1&#125;$)/</span>).test(value + <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Vue.component(<span class=\"string\">'input-number'</span>, &#123;</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class='input-number'&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;input type='text' :value='currentValue' @change='handleChange'/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button @click='handleDown' :disable='currentValue &lt;= min'&gt;-&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button @click='handleUp' :disable='currentValue &gt;= min'&gt;+&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>,</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        max: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">Infinity</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        min: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: -<span class=\"literal\">Infinity</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        value: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            currentValue: <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">        currentValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, val);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'on-change'</span>, val);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'old'</span>, oldVal);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.updateValue(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val &gt; <span class=\"keyword\">this</span>.max) val = <span class=\"keyword\">this</span>.max;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val &lt; <span class=\"keyword\">this</span>.min) val = <span class=\"keyword\">this</span>.min;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentValue = val; </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleDown: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentValue &lt;= <span class=\"keyword\">this</span>.min) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentValue -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleUp: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentValue &gt;= <span class=\"keyword\">this</span>.max) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentValue += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleChange: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> val = event.target.value.trim();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> max = <span class=\"keyword\">this</span>.max;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> min = <span class=\"keyword\">this</span>.min;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isValueNumber(val))&#123;</span><br><span class=\"line\">                val = <span class=\"built_in\">Number</span>(val);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.currentValue = val;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(val &gt; max)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.currentValue = max;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val &lt; min)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.currentValue = min;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                event.target.value = <span class=\"keyword\">this</span>.currentValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.updateValue(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$on(<span class=\"string\">'old'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"开始学习webpack啦！ 使用webpack处理一个简易的项目","date":"2020-03-27T10:38:50.000Z","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack.jpg","_content":"这只是开始学习webpack的第一步，确是我人生的一大步。\n**介绍：**webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；Webpack是基于整个项目进行构建的；借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。\n<!--more-->\n\n### **准备工作**\n1. 新建一个项目文件夹\n2. 在这个项目文件夹下新建名为dist、src的文件夹\n3. 在src文件夹下新建名为css、images、js的三个文件夹\n4. 在src文件夹下新建名为index.html和main.js的文件\n5. 上述步骤完成之后，在编辑器终端中进入这个项目文件夹，依次执行以下命令\n- `npm init` //初始化\n- `npm install webpack --save-dev` // 安装webpack\n\n---\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_demo.jpg' alt='项目结构'>\n</div>\n\n---\n\n#### **项目实例**\n##### index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Document</title>\n    <script src=\"../src/main.js\"></script>\n</head>\n<body>\n    <ul>\n        <li>Hello Vue 1</li>\n        <li>Hello Vue 2</li>\n        <li>Hello Vue 3</li>\n        <li>Hello Vue 4</li>\n    </ul>\n</body>\n</html>\n```\n##### main.js\n```javascript\n// 这个例子是安装了jquery之后\nimport $ from 'jquery'\n$(function (){\n    $('li:odd').css('backgroundColor', 'lightred')\n    $('li:even').css('backgroundColor', 'lightpink')\n})\n```\n当index.html和main.js写好之后，直接打开index.html是看不到效果的，srcipt标签引用的main.js不能直接被浏览器解析，第一行**`import $ from 'jquery'`**就属于es6的高级语法，浏览器不能解析。\n这样就开始webpack的第一次使用，在终端运行**`webpack ./src/main.js -o ./dist/bundle.js --mode=none`**,等待执行完毕\n\n---\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_rezult1.jpg' alt='执行成功'>\n</div>\n\n- - -\n\nAsset就为webpack处理后的js文件，这样一来，修改script标签中的src为`src='../dist/bundle.js'`就可以看到页面成功渲染为main.js中的样式\n\n**问题来了：**每次编译都要输入`webpack ./src/main.js -o ./dist/bundle.js --mode=none`很麻烦，怎么变简单一点？\n**解决：** 配置webpack配置文件，在项目根目录新建一个名为`webpack.config.js`的文件,设置简易配置:\n`entry: 入口文件，要被webpack处理的文件`\n`output: 出口，webpack处理后的放置文件的目录和文件名（默认为bundle.js）`\n\n---\n```javascript\n\tconst path = require('path')\n    module.exports = {\n    \tmode: 'none',\n        entry: path.join(__dirname, './src/main.js'),\n        output: {\n        \tpath: path.join(__dirname, './dist'),\n            filename: 'bundle.js'\n        }\n    }\n```\n\n---\n\n这样一来，直接在终端运行webpack即可使用webpack处理\n\n有新的问题： 开发中修改代码是常事，每次修改了都要输入webpack命令然后打开网页刷新，很麻烦，怎么修改之后自动编译并且刷新页面\n**解决：**使用webpack-dev-server来自动化处理\n**如果运行npm run dev出现can't find moudle**这种错误，删除掉项目中的node_modules目录重新在终端执行`npm install`即可\n\n- 安装：`npm install webpack-dev-server -D`\n- 设置项目的package.json，在scripts中添加一条：`\"dev\": \"webpack-dev-server\"`并保存\n- 项目终端运行`npm run dev`就可以运行,输出的log中的http://localhost:8080/即为项目的本地服务器地址\n- 修改script标签中的src为`src='/bundle.js'`，再点击本地服务器地址，点击页面中的src即可看见index.html并且已被正确渲染\n- 现在只要main.js被修改并且保存了就会触发更新，自动刷新页面\n\n- - -\n\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_dev_server.jpg' alt='运行成功'>\n</div>\n\n- - -\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/webpack-create.md","raw":"---\ntitle: 开始学习webpack啦！ 使用webpack处理一个简易的项目\ndate: 2020-03-27 18:38:50\ntags: webpack\ncategories: webpack\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack.jpg\n\n---\n这只是开始学习webpack的第一步，确是我人生的一大步。\n**介绍：**webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；Webpack是基于整个项目进行构建的；借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。\n<!--more-->\n\n### **准备工作**\n1. 新建一个项目文件夹\n2. 在这个项目文件夹下新建名为dist、src的文件夹\n3. 在src文件夹下新建名为css、images、js的三个文件夹\n4. 在src文件夹下新建名为index.html和main.js的文件\n5. 上述步骤完成之后，在编辑器终端中进入这个项目文件夹，依次执行以下命令\n- `npm init` //初始化\n- `npm install webpack --save-dev` // 安装webpack\n\n---\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_demo.jpg' alt='项目结构'>\n</div>\n\n---\n\n#### **项目实例**\n##### index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Document</title>\n    <script src=\"../src/main.js\"></script>\n</head>\n<body>\n    <ul>\n        <li>Hello Vue 1</li>\n        <li>Hello Vue 2</li>\n        <li>Hello Vue 3</li>\n        <li>Hello Vue 4</li>\n    </ul>\n</body>\n</html>\n```\n##### main.js\n```javascript\n// 这个例子是安装了jquery之后\nimport $ from 'jquery'\n$(function (){\n    $('li:odd').css('backgroundColor', 'lightred')\n    $('li:even').css('backgroundColor', 'lightpink')\n})\n```\n当index.html和main.js写好之后，直接打开index.html是看不到效果的，srcipt标签引用的main.js不能直接被浏览器解析，第一行**`import $ from 'jquery'`**就属于es6的高级语法，浏览器不能解析。\n这样就开始webpack的第一次使用，在终端运行**`webpack ./src/main.js -o ./dist/bundle.js --mode=none`**,等待执行完毕\n\n---\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_rezult1.jpg' alt='执行成功'>\n</div>\n\n- - -\n\nAsset就为webpack处理后的js文件，这样一来，修改script标签中的src为`src='../dist/bundle.js'`就可以看到页面成功渲染为main.js中的样式\n\n**问题来了：**每次编译都要输入`webpack ./src/main.js -o ./dist/bundle.js --mode=none`很麻烦，怎么变简单一点？\n**解决：** 配置webpack配置文件，在项目根目录新建一个名为`webpack.config.js`的文件,设置简易配置:\n`entry: 入口文件，要被webpack处理的文件`\n`output: 出口，webpack处理后的放置文件的目录和文件名（默认为bundle.js）`\n\n---\n```javascript\n\tconst path = require('path')\n    module.exports = {\n    \tmode: 'none',\n        entry: path.join(__dirname, './src/main.js'),\n        output: {\n        \tpath: path.join(__dirname, './dist'),\n            filename: 'bundle.js'\n        }\n    }\n```\n\n---\n\n这样一来，直接在终端运行webpack即可使用webpack处理\n\n有新的问题： 开发中修改代码是常事，每次修改了都要输入webpack命令然后打开网页刷新，很麻烦，怎么修改之后自动编译并且刷新页面\n**解决：**使用webpack-dev-server来自动化处理\n**如果运行npm run dev出现can't find moudle**这种错误，删除掉项目中的node_modules目录重新在终端执行`npm install`即可\n\n- 安装：`npm install webpack-dev-server -D`\n- 设置项目的package.json，在scripts中添加一条：`\"dev\": \"webpack-dev-server\"`并保存\n- 项目终端运行`npm run dev`就可以运行,输出的log中的http://localhost:8080/即为项目的本地服务器地址\n- 修改script标签中的src为`src='/bundle.js'`，再点击本地服务器地址，点击页面中的src即可看见index.html并且已被正确渲染\n- 现在只要main.js被修改并且保存了就会触发更新，自动刷新页面\n\n- - -\n\n<div align='center'>\n\t<img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_dev_server.jpg' alt='运行成功'>\n</div>\n\n- - -\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"webpack-create","published":1,"updated":"2020-08-27T08:22:17.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgt0043r0u27jk875j6","content":"<p>这只是开始学习webpack的第一步，确是我人生的一大步。<br><strong>介绍：</strong>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；Webpack是基于整个项目进行构建的；借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a><strong>准备工作</strong></h3><ol>\n<li>新建一个项目文件夹</li>\n<li>在这个项目文件夹下新建名为dist、src的文件夹</li>\n<li>在src文件夹下新建名为css、images、js的三个文件夹</li>\n<li>在src文件夹下新建名为index.html和main.js的文件</li>\n<li>上述步骤完成之后，在编辑器终端中进入这个项目文件夹，依次执行以下命令</li>\n</ol>\n<ul>\n<li><code>npm init</code> //初始化</li>\n<li><code>npm install webpack --save-dev</code> // 安装webpack</li>\n</ul>\n<hr>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_demo.jpg' alt='项目结构'>\n</div>\n\n<hr>\n<h4 id=\"项目实例\"><a href=\"#项目实例\" class=\"headerlink\" title=\"项目实例\"></a><strong>项目实例</strong></h4><h5 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../src/main.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello Vue 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello Vue 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello Vue 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello Vue 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个例子是安装了jquery之后</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'li:odd'</span>).css(<span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'lightred'</span>)</span><br><span class=\"line\">    $(<span class=\"string\">'li:even'</span>).css(<span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'lightpink'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当index.html和main.js写好之后，直接打开index.html是看不到效果的，srcipt标签引用的main.js不能直接被浏览器解析，第一行<strong><code>import $ from &#39;jquery&#39;</code></strong>就属于es6的高级语法，浏览器不能解析。<br>这样就开始webpack的第一次使用，在终端运行<strong><code>webpack ./src/main.js -o ./dist/bundle.js --mode=none</code></strong>,等待执行完毕</p>\n<hr>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_rezult1.jpg' alt='执行成功'>\n</div>\n\n<hr>\n<p>Asset就为webpack处理后的js文件，这样一来，修改script标签中的src为<code>src=&#39;../dist/bundle.js&#39;</code>就可以看到页面成功渲染为main.js中的样式</p>\n<p><strong>问题来了：</strong>每次编译都要输入<code>webpack ./src/main.js -o ./dist/bundle.js --mode=none</code>很麻烦，怎么变简单一点？<br><strong>解决：</strong> 配置webpack配置文件，在项目根目录新建一个名为<code>webpack.config.js</code>的文件,设置简易配置:<br><code>entry: 入口文件，要被webpack处理的文件</code><br><code>output: 出口，webpack处理后的放置文件的目录和文件名（默认为bundle.js）</code></p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\">   <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   \tmode: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">       entry: path.join(__dirname, <span class=\"string\">'./src/main.js'</span>),</span><br><span class=\"line\">       output: &#123;</span><br><span class=\"line\">       \tpath: path.join(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">           filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>这样一来，直接在终端运行webpack即可使用webpack处理</p>\n<p>有新的问题： 开发中修改代码是常事，每次修改了都要输入webpack命令然后打开网页刷新，很麻烦，怎么修改之后自动编译并且刷新页面<br><strong>解决：</strong>使用webpack-dev-server来自动化处理<br><strong>如果运行npm run dev出现can’t find moudle</strong>这种错误，删除掉项目中的node_modules目录重新在终端执行<code>npm install</code>即可</p>\n<ul>\n<li>安装：<code>npm install webpack-dev-server -D</code></li>\n<li>设置项目的package.json，在scripts中添加一条：<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>并保存</li>\n<li>项目终端运行<code>npm run dev</code>就可以运行,输出的log中的<a href=\"http://localhost:8080/即为项目的本地服务器地址\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/即为项目的本地服务器地址</a></li>\n<li>修改script标签中的src为<code>src=&#39;/bundle.js&#39;</code>，再点击本地服务器地址，点击页面中的src即可看见index.html并且已被正确渲染</li>\n<li>现在只要main.js被修改并且保存了就会触发更新，自动刷新页面</li>\n</ul>\n<hr>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_dev_server.jpg' alt='运行成功'>\n</div>\n\n<hr>\n","site":{"data":{}},"excerpt":"<p>这只是开始学习webpack的第一步，确是我人生的一大步。<br><strong>介绍：</strong>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；Webpack是基于整个项目进行构建的；借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</p>","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a><strong>准备工作</strong></h3><ol>\n<li>新建一个项目文件夹</li>\n<li>在这个项目文件夹下新建名为dist、src的文件夹</li>\n<li>在src文件夹下新建名为css、images、js的三个文件夹</li>\n<li>在src文件夹下新建名为index.html和main.js的文件</li>\n<li>上述步骤完成之后，在编辑器终端中进入这个项目文件夹，依次执行以下命令</li>\n</ol>\n<ul>\n<li><code>npm init</code> //初始化</li>\n<li><code>npm install webpack --save-dev</code> // 安装webpack</li>\n</ul>\n<hr>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_demo.jpg' alt='项目结构'>\n</div>\n\n<hr>\n<h4 id=\"项目实例\"><a href=\"#项目实例\" class=\"headerlink\" title=\"项目实例\"></a><strong>项目实例</strong></h4><h5 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../src/main.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello Vue 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello Vue 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello Vue 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello Vue 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个例子是安装了jquery之后</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'li:odd'</span>).css(<span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'lightred'</span>)</span><br><span class=\"line\">    $(<span class=\"string\">'li:even'</span>).css(<span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'lightpink'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当index.html和main.js写好之后，直接打开index.html是看不到效果的，srcipt标签引用的main.js不能直接被浏览器解析，第一行<strong><code>import $ from &#39;jquery&#39;</code></strong>就属于es6的高级语法，浏览器不能解析。<br>这样就开始webpack的第一次使用，在终端运行<strong><code>webpack ./src/main.js -o ./dist/bundle.js --mode=none</code></strong>,等待执行完毕</p>\n<hr>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_rezult1.jpg' alt='执行成功'>\n</div>\n\n<hr>\n<p>Asset就为webpack处理后的js文件，这样一来，修改script标签中的src为<code>src=&#39;../dist/bundle.js&#39;</code>就可以看到页面成功渲染为main.js中的样式</p>\n<p><strong>问题来了：</strong>每次编译都要输入<code>webpack ./src/main.js -o ./dist/bundle.js --mode=none</code>很麻烦，怎么变简单一点？<br><strong>解决：</strong> 配置webpack配置文件，在项目根目录新建一个名为<code>webpack.config.js</code>的文件,设置简易配置:<br><code>entry: 入口文件，要被webpack处理的文件</code><br><code>output: 出口，webpack处理后的放置文件的目录和文件名（默认为bundle.js）</code></p>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\">   <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   \tmode: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">       entry: path.join(__dirname, <span class=\"string\">'./src/main.js'</span>),</span><br><span class=\"line\">       output: &#123;</span><br><span class=\"line\">       \tpath: path.join(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">           filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>这样一来，直接在终端运行webpack即可使用webpack处理</p>\n<p>有新的问题： 开发中修改代码是常事，每次修改了都要输入webpack命令然后打开网页刷新，很麻烦，怎么修改之后自动编译并且刷新页面<br><strong>解决：</strong>使用webpack-dev-server来自动化处理<br><strong>如果运行npm run dev出现can’t find moudle</strong>这种错误，删除掉项目中的node_modules目录重新在终端执行<code>npm install</code>即可</p>\n<ul>\n<li>安装：<code>npm install webpack-dev-server -D</code></li>\n<li>设置项目的package.json，在scripts中添加一条：<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>并保存</li>\n<li>项目终端运行<code>npm run dev</code>就可以运行,输出的log中的<a href=\"http://localhost:8080/即为项目的本地服务器地址\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/即为项目的本地服务器地址</a></li>\n<li>修改script标签中的src为<code>src=&#39;/bundle.js&#39;</code>，再点击本地服务器地址，点击页面中的src即可看见index.html并且已被正确渲染</li>\n<li>现在只要main.js被修改并且保存了就会触发更新，自动刷新页面</li>\n</ul>\n<hr>\n<div align='center'>\n    <img src='https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/webpack_dev_server.jpg' alt='运行成功'>\n</div>\n\n<hr>"},{"title":"webpack项目的创建及初始化(优化版)","date":"2020-04-26T17:33:11.000Z","toc":true,"_content":"<div class=\"post-summary\">\n    这个webpack项目的创建是在之前的那篇基础之上优化而来，之前因为刚接触，逻辑不清晰。在做了一个小项目之后对webpack的创建以及工作原理有了更深的认识，便有了这篇博客。\n</div>\n\n\n\n<!--more-->\n\n### **步骤：**\n\n<article class=\"message is-danger\">\n   \t<div class=\"message-body\">\n        <ol>\n            <li>创建项目根目录Demo</li>\n            <li>在Demo目录下创建dist、src目录</li>\n            <li>在src目录下创建css、images、js文件夹</li>\n            <li>在src目录下创建main.js、index.html文件</li>\n            <li>在Demo根目录下创建webpack.config.js文件</li>\n        </ol>\n    </div>\n</article>\n\n### **文件结构图**\n\n```\n|-- Demo\n    |-- webpack.config.js // webpack配置文件，配置各种loader和plugin等\n    |-- .babelrc  // babel配置\n    |-- dist // 打包后的存放目录\n    |-- src // 资源文件夹吧\n        |-- index.html   // 项目入口\n        |-- main.js \t // 导入各种包的文件\n        |-- css \t // 存放样式的目录\n        |-- images\t // 存放图片资源的目录\n        |-- js           // 存放其他脚本文件\n```\n\n### **准备工作完了，开始创建**\n\n<article class=\"message is-success\">\n   \t<div class=\"message-body\">\n        <ul>\n            <li>使用`npm install webpack --save-dev`以依赖方式安装webpack</li>\n            <li>使用`npm install webpack-cli --save-dev `安装webpack脚手架</li>\n            <li>使用`npm install webpack-dev-server --save-dev`安装webpack工具，这样可以自动打包项目并更新</li>\n        </ul>\n    </div>\n</article>\n\n### **测试**\n\n编辑`webpack.config.js`配置文件如下：\n\n``````javascript\nconst path = require('path'); \nmodule.exports = {\n    entry: './src/man.js', // 入口，需要被webpack编译打包的文件\n    output: { \t// 出口\n        path: path.resolve(__dirname, './dist'), // 打包出口路径\n        filename: 'bundle.js' // 打包后的文件名\n    }\n}\n``````\n\n在`package.json`文件中的scripts下新建一条规则：\n\n``````json\n\"dev\": \"webpack-dev-server --open --contentBase src --hot\"\n\n--open 是自动打开项目地址\n--contentBase 参数是src，默认打开项目地址中的src，\n也就是启动项目会自动打开index.html这个项目入口\n--hot 热更新，在代码中更改了页面中的某些样式的时候，\n页面不用刷新也能看到样式的改变\n``````\n\n+ 使用`npm install jquery --save-dev`安装jquery做一下测试\n\n安装完成jQuery之后，在`main.js`写几条语句测试：\n\n```javascript\nimport $ from 'jquery';\n\n$(function(){\n    $('#app').css('color','red');\n})\n```\n\n在`index.html`中添加一个id为app的div，并引入bundle.js\n\n```html\n<script src='/bundlr.js'></script>\n\n<div id='app'>\n</div>\n```\n\n\n\n<div class=\"notification is-info\">现在所有基本工作已结束，使用`npm run dev`运行项目，运行成功没有报错的话会在默认浏览器中自动打开项目的src中的index.html并且已经成功看到id为app的div中的字体颜色为<span class='warning'>红色</span>了。</div>\n\n### **完善项目配置**\n\n在上述步骤中，其实还没发挥webpack的真正实力，现在通过对webpack.config.js进行配置，逐步来实现webpack更强大的功能。\n\n借参考资料上面的说明：在webpack的世界里，每个文件都是一个模块，比如.css、.js、.html、.less等。对于不同的模块，webpack不能直接识别，所以就需要不同的`加载器(loader)`来处理，而`加载器`就是webpack最重要的功能。通过安装不同的加载器可以对各种后缀名的文件进行处理。接下来就是一些loader的使用\n\n### 配置loader\n\n#### 针对css\n\n```npm install css-loader style-loader  ```\n\n安装完成在`webpack.config.js`中的module的rules中新增一条规则如下：\n\n```javascript\n{\n    test: /\\.css$/,\n    use: ['style-loader', 'css-loader']\n}\n```\n\n#### 针对vue\n\n```npm install vue-loader``` \n\n安装完成在`webpack.config.js`中的module的rules中新增一条规则如下：\n\n```javascript\n{\n    test: /\\.vue$/,\n    use: 'vue-loader'\n}\n```\n\n同时`vue`需要和`VueLoaderPlugin`配合使用才能生效，所以还需要配置`webpack.config.js`:\n\n```javascript\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\n// 然后在增加一条plugins\n\nmodule.exports = {\n    ...,\n    plugins: [\n    \tnew VueLoaderPlugin()\n    ]\n}\n```\n\n<style type='text/css'>\n    .post-summary{\n        display: none;\n    }\n    .warning{\n        background-color: red;\n        color: #fff;\n        padding: 4px;\n        font-weight: bolder;\n        border-radius: 5px;\n    }\n</style>","source":"_posts/webpack-dev-server_create.md","raw":"---\ntitle: webpack项目的创建及初始化(优化版)\ndate: 2020-04-27 1:33:11\ntags: webpack\ntoc: true\ncategories: webpack\n---\n<div class=\"post-summary\">\n    这个webpack项目的创建是在之前的那篇基础之上优化而来，之前因为刚接触，逻辑不清晰。在做了一个小项目之后对webpack的创建以及工作原理有了更深的认识，便有了这篇博客。\n</div>\n\n\n\n<!--more-->\n\n### **步骤：**\n\n<article class=\"message is-danger\">\n   \t<div class=\"message-body\">\n        <ol>\n            <li>创建项目根目录Demo</li>\n            <li>在Demo目录下创建dist、src目录</li>\n            <li>在src目录下创建css、images、js文件夹</li>\n            <li>在src目录下创建main.js、index.html文件</li>\n            <li>在Demo根目录下创建webpack.config.js文件</li>\n        </ol>\n    </div>\n</article>\n\n### **文件结构图**\n\n```\n|-- Demo\n    |-- webpack.config.js // webpack配置文件，配置各种loader和plugin等\n    |-- .babelrc  // babel配置\n    |-- dist // 打包后的存放目录\n    |-- src // 资源文件夹吧\n        |-- index.html   // 项目入口\n        |-- main.js \t // 导入各种包的文件\n        |-- css \t // 存放样式的目录\n        |-- images\t // 存放图片资源的目录\n        |-- js           // 存放其他脚本文件\n```\n\n### **准备工作完了，开始创建**\n\n<article class=\"message is-success\">\n   \t<div class=\"message-body\">\n        <ul>\n            <li>使用`npm install webpack --save-dev`以依赖方式安装webpack</li>\n            <li>使用`npm install webpack-cli --save-dev `安装webpack脚手架</li>\n            <li>使用`npm install webpack-dev-server --save-dev`安装webpack工具，这样可以自动打包项目并更新</li>\n        </ul>\n    </div>\n</article>\n\n### **测试**\n\n编辑`webpack.config.js`配置文件如下：\n\n``````javascript\nconst path = require('path'); \nmodule.exports = {\n    entry: './src/man.js', // 入口，需要被webpack编译打包的文件\n    output: { \t// 出口\n        path: path.resolve(__dirname, './dist'), // 打包出口路径\n        filename: 'bundle.js' // 打包后的文件名\n    }\n}\n``````\n\n在`package.json`文件中的scripts下新建一条规则：\n\n``````json\n\"dev\": \"webpack-dev-server --open --contentBase src --hot\"\n\n--open 是自动打开项目地址\n--contentBase 参数是src，默认打开项目地址中的src，\n也就是启动项目会自动打开index.html这个项目入口\n--hot 热更新，在代码中更改了页面中的某些样式的时候，\n页面不用刷新也能看到样式的改变\n``````\n\n+ 使用`npm install jquery --save-dev`安装jquery做一下测试\n\n安装完成jQuery之后，在`main.js`写几条语句测试：\n\n```javascript\nimport $ from 'jquery';\n\n$(function(){\n    $('#app').css('color','red');\n})\n```\n\n在`index.html`中添加一个id为app的div，并引入bundle.js\n\n```html\n<script src='/bundlr.js'></script>\n\n<div id='app'>\n</div>\n```\n\n\n\n<div class=\"notification is-info\">现在所有基本工作已结束，使用`npm run dev`运行项目，运行成功没有报错的话会在默认浏览器中自动打开项目的src中的index.html并且已经成功看到id为app的div中的字体颜色为<span class='warning'>红色</span>了。</div>\n\n### **完善项目配置**\n\n在上述步骤中，其实还没发挥webpack的真正实力，现在通过对webpack.config.js进行配置，逐步来实现webpack更强大的功能。\n\n借参考资料上面的说明：在webpack的世界里，每个文件都是一个模块，比如.css、.js、.html、.less等。对于不同的模块，webpack不能直接识别，所以就需要不同的`加载器(loader)`来处理，而`加载器`就是webpack最重要的功能。通过安装不同的加载器可以对各种后缀名的文件进行处理。接下来就是一些loader的使用\n\n### 配置loader\n\n#### 针对css\n\n```npm install css-loader style-loader  ```\n\n安装完成在`webpack.config.js`中的module的rules中新增一条规则如下：\n\n```javascript\n{\n    test: /\\.css$/,\n    use: ['style-loader', 'css-loader']\n}\n```\n\n#### 针对vue\n\n```npm install vue-loader``` \n\n安装完成在`webpack.config.js`中的module的rules中新增一条规则如下：\n\n```javascript\n{\n    test: /\\.vue$/,\n    use: 'vue-loader'\n}\n```\n\n同时`vue`需要和`VueLoaderPlugin`配合使用才能生效，所以还需要配置`webpack.config.js`:\n\n```javascript\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\n// 然后在增加一条plugins\n\nmodule.exports = {\n    ...,\n    plugins: [\n    \tnew VueLoaderPlugin()\n    ]\n}\n```\n\n<style type='text/css'>\n    .post-summary{\n        display: none;\n    }\n    .warning{\n        background-color: red;\n        color: #fff;\n        padding: 4px;\n        font-weight: bolder;\n        border-radius: 5px;\n    }\n</style>","slug":"webpack-dev-server_create","published":1,"updated":"2020-08-27T08:22:17.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgu0047r0u227ush4et","content":"<div class=\"post-summary\">\n    这个webpack项目的创建是在之前的那篇基础之上优化而来，之前因为刚接触，逻辑不清晰。在做了一个小项目之后对webpack的创建以及工作原理有了更深的认识，便有了这篇博客。\n</div>\n\n\n\n<a id=\"more\"></a>\n\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a><strong>步骤：</strong></h3><article class=\"message is-danger\">\n       <div class=\"message-body\">\n        <ol>\n            <li>创建项目根目录Demo</li>\n            <li>在Demo目录下创建dist、src目录</li>\n            <li>在src目录下创建css、images、js文件夹</li>\n            <li>在src目录下创建main.js、index.html文件</li>\n            <li>在Demo根目录下创建webpack.config.js文件</li>\n        </ol>\n    </div>\n</article>\n\n<h3 id=\"文件结构图\"><a href=\"#文件结构图\" class=\"headerlink\" title=\"文件结构图\"></a><strong>文件结构图</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- Demo</span><br><span class=\"line\">    |-- webpack.config.js &#x2F;&#x2F; webpack配置文件，配置各种loader和plugin等</span><br><span class=\"line\">    |-- .babelrc  &#x2F;&#x2F; babel配置</span><br><span class=\"line\">    |-- dist &#x2F;&#x2F; 打包后的存放目录</span><br><span class=\"line\">    |-- src &#x2F;&#x2F; 资源文件夹吧</span><br><span class=\"line\">        |-- index.html   &#x2F;&#x2F; 项目入口</span><br><span class=\"line\">        |-- main.js \t &#x2F;&#x2F; 导入各种包的文件</span><br><span class=\"line\">        |-- css \t &#x2F;&#x2F; 存放样式的目录</span><br><span class=\"line\">        |-- images\t &#x2F;&#x2F; 存放图片资源的目录</span><br><span class=\"line\">        |-- js           &#x2F;&#x2F; 存放其他脚本文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"准备工作完了，开始创建\"><a href=\"#准备工作完了，开始创建\" class=\"headerlink\" title=\"准备工作完了，开始创建\"></a><strong>准备工作完了，开始创建</strong></h3><article class=\"message is-success\">\n       <div class=\"message-body\">\n        <ul>\n            <li>使用`npm install webpack --save-dev`以依赖方式安装webpack</li>\n            <li>使用`npm install webpack-cli --save-dev `安装webpack脚手架</li>\n            <li>使用`npm install webpack-dev-server --save-dev`安装webpack工具，这样可以自动打包项目并更新</li>\n        </ul>\n    </div>\n</article>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a><strong>测试</strong></h3><p>编辑<code>webpack.config.js</code>配置文件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/man.js'</span>, <span class=\"comment\">// 入口，需要被webpack编译打包的文件</span></span><br><span class=\"line\">    output: &#123; \t<span class=\"comment\">// 出口</span></span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">// 打包出口路径</span></span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span> <span class=\"comment\">// 打包后的文件名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>package.json</code>文件中的scripts下新建一条规则：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"webpack-dev-server --open --contentBase src --hot\"</span><br><span class=\"line\"></span><br><span class=\"line\">--open 是自动打开项目地址</span><br><span class=\"line\">--contentBase 参数是src，默认打开项目地址中的src，</span><br><span class=\"line\">也就是启动项目会自动打开index.html这个项目入口</span><br><span class=\"line\">--hot 热更新，在代码中更改了页面中的某些样式的时候，</span><br><span class=\"line\">页面不用刷新也能看到样式的改变</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>npm install jquery --save-dev</code>安装jquery做一下测试</li>\n</ul>\n<p>安装完成jQuery之后，在<code>main.js</code>写几条语句测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#app'</span>).css(<span class=\"string\">'color'</span>,<span class=\"string\">'red'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在<code>index.html</code>中添加一个id为app的div，并引入bundle.js</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'/bundlr.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<div class=\"notification is-info\">现在所有基本工作已结束，使用`npm run dev`运行项目，运行成功没有报错的话会在默认浏览器中自动打开项目的src中的index.html并且已经成功看到id为app的div中的字体颜色为<span class='warning'>红色</span>了。</div>\n\n<h3 id=\"完善项目配置\"><a href=\"#完善项目配置\" class=\"headerlink\" title=\"完善项目配置\"></a><strong>完善项目配置</strong></h3><p>在上述步骤中，其实还没发挥webpack的真正实力，现在通过对webpack.config.js进行配置，逐步来实现webpack更强大的功能。</p>\n<p>借参考资料上面的说明：在webpack的世界里，每个文件都是一个模块，比如.css、.js、.html、.less等。对于不同的模块，webpack不能直接识别，所以就需要不同的<code>加载器(loader)</code>来处理，而<code>加载器</code>就是webpack最重要的功能。通过安装不同的加载器可以对各种后缀名的文件进行处理。接下来就是一些loader的使用</p>\n<h3 id=\"配置loader\"><a href=\"#配置loader\" class=\"headerlink\" title=\"配置loader\"></a>配置loader</h3><h4 id=\"针对css\"><a href=\"#针对css\" class=\"headerlink\" title=\"针对css\"></a>针对css</h4><figure class=\"highlight plain\"><figcaption><span>install css-loader style-loader  ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">安装完成在&#96;webpack.config.js&#96;中的module的rules中新增一条规则如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;javascript</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">    use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"针对vue\"><a href=\"#针对vue\" class=\"headerlink\" title=\"针对vue\"></a>针对vue</h4><figure class=\"highlight plain\"><figcaption><span>install vue-loader``` </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">安装完成在&#96;webpack.config.js&#96;中的module的rules中新增一条规则如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;javascript</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.vue$&#x2F;,</span><br><span class=\"line\">    use: &#39;vue-loader&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时<code>vue</code>需要和<code>VueLoaderPlugin</code>配合使用才能生效，所以还需要配置<code>webpack.config.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后在增加一条plugins</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    \t<span class=\"keyword\">new</span> VueLoaderPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<style type='text/css'>\n    .post-summary{\n        display: none;\n    }\n    .warning{\n        background-color: red;\n        color: #fff;\n        padding: 4px;\n        font-weight: bolder;\n        border-radius: 5px;\n    }\n</style>","site":{"data":{}},"excerpt":"<div class=\"post-summary\">\n    这个webpack项目的创建是在之前的那篇基础之上优化而来，之前因为刚接触，逻辑不清晰。在做了一个小项目之后对webpack的创建以及工作原理有了更深的认识，便有了这篇博客。\n</div>","more":"<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a><strong>步骤：</strong></h3><article class=\"message is-danger\">\n       <div class=\"message-body\">\n        <ol>\n            <li>创建项目根目录Demo</li>\n            <li>在Demo目录下创建dist、src目录</li>\n            <li>在src目录下创建css、images、js文件夹</li>\n            <li>在src目录下创建main.js、index.html文件</li>\n            <li>在Demo根目录下创建webpack.config.js文件</li>\n        </ol>\n    </div>\n</article>\n\n<h3 id=\"文件结构图\"><a href=\"#文件结构图\" class=\"headerlink\" title=\"文件结构图\"></a><strong>文件结构图</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- Demo</span><br><span class=\"line\">    |-- webpack.config.js &#x2F;&#x2F; webpack配置文件，配置各种loader和plugin等</span><br><span class=\"line\">    |-- .babelrc  &#x2F;&#x2F; babel配置</span><br><span class=\"line\">    |-- dist &#x2F;&#x2F; 打包后的存放目录</span><br><span class=\"line\">    |-- src &#x2F;&#x2F; 资源文件夹吧</span><br><span class=\"line\">        |-- index.html   &#x2F;&#x2F; 项目入口</span><br><span class=\"line\">        |-- main.js \t &#x2F;&#x2F; 导入各种包的文件</span><br><span class=\"line\">        |-- css \t &#x2F;&#x2F; 存放样式的目录</span><br><span class=\"line\">        |-- images\t &#x2F;&#x2F; 存放图片资源的目录</span><br><span class=\"line\">        |-- js           &#x2F;&#x2F; 存放其他脚本文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"准备工作完了，开始创建\"><a href=\"#准备工作完了，开始创建\" class=\"headerlink\" title=\"准备工作完了，开始创建\"></a><strong>准备工作完了，开始创建</strong></h3><article class=\"message is-success\">\n       <div class=\"message-body\">\n        <ul>\n            <li>使用`npm install webpack --save-dev`以依赖方式安装webpack</li>\n            <li>使用`npm install webpack-cli --save-dev `安装webpack脚手架</li>\n            <li>使用`npm install webpack-dev-server --save-dev`安装webpack工具，这样可以自动打包项目并更新</li>\n        </ul>\n    </div>\n</article>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a><strong>测试</strong></h3><p>编辑<code>webpack.config.js</code>配置文件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/man.js'</span>, <span class=\"comment\">// 入口，需要被webpack编译打包的文件</span></span><br><span class=\"line\">    output: &#123; \t<span class=\"comment\">// 出口</span></span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">// 打包出口路径</span></span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span> <span class=\"comment\">// 打包后的文件名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>package.json</code>文件中的scripts下新建一条规则：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"webpack-dev-server --open --contentBase src --hot\"</span><br><span class=\"line\"></span><br><span class=\"line\">--open 是自动打开项目地址</span><br><span class=\"line\">--contentBase 参数是src，默认打开项目地址中的src，</span><br><span class=\"line\">也就是启动项目会自动打开index.html这个项目入口</span><br><span class=\"line\">--hot 热更新，在代码中更改了页面中的某些样式的时候，</span><br><span class=\"line\">页面不用刷新也能看到样式的改变</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>npm install jquery --save-dev</code>安装jquery做一下测试</li>\n</ul>\n<p>安装完成jQuery之后，在<code>main.js</code>写几条语句测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#app'</span>).css(<span class=\"string\">'color'</span>,<span class=\"string\">'red'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在<code>index.html</code>中添加一个id为app的div，并引入bundle.js</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'/bundlr.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<div class=\"notification is-info\">现在所有基本工作已结束，使用`npm run dev`运行项目，运行成功没有报错的话会在默认浏览器中自动打开项目的src中的index.html并且已经成功看到id为app的div中的字体颜色为<span class='warning'>红色</span>了。</div>\n\n<h3 id=\"完善项目配置\"><a href=\"#完善项目配置\" class=\"headerlink\" title=\"完善项目配置\"></a><strong>完善项目配置</strong></h3><p>在上述步骤中，其实还没发挥webpack的真正实力，现在通过对webpack.config.js进行配置，逐步来实现webpack更强大的功能。</p>\n<p>借参考资料上面的说明：在webpack的世界里，每个文件都是一个模块，比如.css、.js、.html、.less等。对于不同的模块，webpack不能直接识别，所以就需要不同的<code>加载器(loader)</code>来处理，而<code>加载器</code>就是webpack最重要的功能。通过安装不同的加载器可以对各种后缀名的文件进行处理。接下来就是一些loader的使用</p>\n<h3 id=\"配置loader\"><a href=\"#配置loader\" class=\"headerlink\" title=\"配置loader\"></a>配置loader</h3><h4 id=\"针对css\"><a href=\"#针对css\" class=\"headerlink\" title=\"针对css\"></a>针对css</h4><figure class=\"highlight plain\"><figcaption><span>install css-loader style-loader  ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">安装完成在&#96;webpack.config.js&#96;中的module的rules中新增一条规则如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;javascript</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">    use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"针对vue\"><a href=\"#针对vue\" class=\"headerlink\" title=\"针对vue\"></a>针对vue</h4><figure class=\"highlight plain\"><figcaption><span>install vue-loader``` </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">安装完成在&#96;webpack.config.js&#96;中的module的rules中新增一条规则如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;javascript</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.vue$&#x2F;,</span><br><span class=\"line\">    use: &#39;vue-loader&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时<code>vue</code>需要和<code>VueLoaderPlugin</code>配合使用才能生效，所以还需要配置<code>webpack.config.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后在增加一条plugins</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    \t<span class=\"keyword\">new</span> VueLoaderPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<style type='text/css'>\n    .post-summary{\n        display: none;\n    }\n    .warning{\n        background-color: red;\n        color: #fff;\n        padding: 4px;\n        font-weight: bolder;\n        border-radius: 5px;\n    }\n</style>"},{"title":"webpack中的各种loader的安装及使用案例","thumbnail":"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/howtouninstall.png","date":"2020-03-29T07:14:46.000Z","_content":"webpack在不使用loader的情况下很多语句都不能被解析，所以需要不同的第三方loader来解析不能被webpack解析的语句。\n<!--more-->\n\n## **css loader**\n安装： \n> npm install style-loader css-loader\n\n配置（在`webpack.config.js`的`module`中新建一条rules）：\n> test: /\\.css$/, use: ['style-loader', 'css-loader']\n\n## **url loader**\n安装（file-loader为url-loader的内部依赖，在规则里可以不用写url-loader）： \n> npm install url-loader file-loader \n\n配置（在`webpack.config.js`的`module`中新建一条rules,这里以图片举例）：\n> test: /\\.(jpg|png|gif|bmp|jpeg)$/, use: ['url-loader?limit=7000']  //针对图片\n> test: /\\.(ttf|eot|svg|woff|woff2)$/, use: ['url-loader']   //针对字体\n\n给url-loader添加参数，不让所有的图片都被解析为Base64格式，上面的`?limit=7000`意思是如果图片大小等于或者大于7000字节则图片不会被转为Base64编码格式（limit单位为byte），如果小于，则会被转为Base64格式。\n\n## **在webpack中使用 vue 开发**\n> npm install vue -D\n\n配置webpack.config.js（在resolve中的alias中添加一条规则）：\n```javascript\nresolve: {\n\talias: {\n    \t\"vue\": \"vue/dist/vue.js\"\n    }\n}\n```\n在main.js中添加一条语句\n```javascript\nimport Vue from \"vue\"\n```\n\n## **vue-loader**\n在webpack中，推荐使用 `.vue` 这个组件模板文件定义组件，所以需要安装 `vue-loader` \n> npm install vue-loader vue-template-compiler -D\n\n## 上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上\n1. 在js目录中新建一个login.vue文件，内容如下（vue模板，包含三部分）：\n```\n<template>\n\t<div>\n    \t<h1>这是登录组件</h1>\n    </div>\n</template>\n<script>\n</script>\n<style>\n</style>\n```\n\n2. 在main.js中导入这个组件，导入vue，并且new一个vue实例，并注册从login.vue导入的组件\n```javascipt\nimport Vue from 'vue'\nimport login from './src/js/login.vue'\nvar app = new Vue({\n\tel:'#app',\n    components: {\n    \t'login': login\n    },\n    //原始版：\n    render: function(createElement){\n    \treturn createElement(login)\n    }\n    //简写版：\n    render: c => c(login)\n})\n```\n\n3. 最后在index.html中创建一个id为app的div元素，作为app的实例要控制的区域\n```html\n<div id='app'>\n\t<login></login>\n</div>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/webpack-loaders.md","raw":"---\ntitle: webpack中的各种loader的安装及使用案例\nthumbnail: https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/howtouninstall.png\ndate: 2020-03-29 15:14:46\ntags: webpack\ncategories: webpack\n\n---\nwebpack在不使用loader的情况下很多语句都不能被解析，所以需要不同的第三方loader来解析不能被webpack解析的语句。\n<!--more-->\n\n## **css loader**\n安装： \n> npm install style-loader css-loader\n\n配置（在`webpack.config.js`的`module`中新建一条rules）：\n> test: /\\.css$/, use: ['style-loader', 'css-loader']\n\n## **url loader**\n安装（file-loader为url-loader的内部依赖，在规则里可以不用写url-loader）： \n> npm install url-loader file-loader \n\n配置（在`webpack.config.js`的`module`中新建一条rules,这里以图片举例）：\n> test: /\\.(jpg|png|gif|bmp|jpeg)$/, use: ['url-loader?limit=7000']  //针对图片\n> test: /\\.(ttf|eot|svg|woff|woff2)$/, use: ['url-loader']   //针对字体\n\n给url-loader添加参数，不让所有的图片都被解析为Base64格式，上面的`?limit=7000`意思是如果图片大小等于或者大于7000字节则图片不会被转为Base64编码格式（limit单位为byte），如果小于，则会被转为Base64格式。\n\n## **在webpack中使用 vue 开发**\n> npm install vue -D\n\n配置webpack.config.js（在resolve中的alias中添加一条规则）：\n```javascript\nresolve: {\n\talias: {\n    \t\"vue\": \"vue/dist/vue.js\"\n    }\n}\n```\n在main.js中添加一条语句\n```javascript\nimport Vue from \"vue\"\n```\n\n## **vue-loader**\n在webpack中，推荐使用 `.vue` 这个组件模板文件定义组件，所以需要安装 `vue-loader` \n> npm install vue-loader vue-template-compiler -D\n\n## 上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上\n1. 在js目录中新建一个login.vue文件，内容如下（vue模板，包含三部分）：\n```\n<template>\n\t<div>\n    \t<h1>这是登录组件</h1>\n    </div>\n</template>\n<script>\n</script>\n<style>\n</style>\n```\n\n2. 在main.js中导入这个组件，导入vue，并且new一个vue实例，并注册从login.vue导入的组件\n```javascipt\nimport Vue from 'vue'\nimport login from './src/js/login.vue'\nvar app = new Vue({\n\tel:'#app',\n    components: {\n    \t'login': login\n    },\n    //原始版：\n    render: function(createElement){\n    \treturn createElement(login)\n    }\n    //简写版：\n    render: c => c(login)\n})\n```\n\n3. 最后在index.html中创建一个id为app的div元素，作为app的实例要控制的区域\n```html\n<div id='app'>\n\t<login></login>\n</div>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"webpack-loaders","published":1,"updated":"2020-08-27T08:22:17.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrgv004br0u27mrh7si1","content":"<p>webpack在不使用loader的情况下很多语句都不能被解析，所以需要不同的第三方loader来解析不能被webpack解析的语句。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css loader\"></a><strong>css loader</strong></h2><p>安装： </p>\n<blockquote>\n<p>npm install style-loader css-loader</p>\n</blockquote>\n<p>配置（在<code>webpack.config.js</code>的<code>module</code>中新建一条rules）：</p>\n<blockquote>\n<p>test: /.css$/, use: [‘style-loader’, ‘css-loader’]</p>\n</blockquote>\n<h2 id=\"url-loader\"><a href=\"#url-loader\" class=\"headerlink\" title=\"url loader\"></a><strong>url loader</strong></h2><p>安装（file-loader为url-loader的内部依赖，在规则里可以不用写url-loader）： </p>\n<blockquote>\n<p>npm install url-loader file-loader </p>\n</blockquote>\n<p>配置（在<code>webpack.config.js</code>的<code>module</code>中新建一条rules,这里以图片举例）：</p>\n<blockquote>\n<p>test: /.(jpg|png|gif|bmp|jpeg)$/, use: [‘url-loader?limit=7000’]  //针对图片<br>test: /.(ttf|eot|svg|woff|woff2)$/, use: [‘url-loader’]   //针对字体</p>\n</blockquote>\n<p>给url-loader添加参数，不让所有的图片都被解析为Base64格式，上面的<code>?limit=7000</code>意思是如果图片大小等于或者大于7000字节则图片不会被转为Base64编码格式（limit单位为byte），如果小于，则会被转为Base64格式。</p>\n<h2 id=\"在webpack中使用-vue-开发\"><a href=\"#在webpack中使用-vue-开发\" class=\"headerlink\" title=\"在webpack中使用 vue 开发\"></a><strong>在webpack中使用 vue 开发</strong></h2><blockquote>\n<p>npm install vue -D</p>\n</blockquote>\n<p>配置webpack.config.js（在resolve中的alias中添加一条规则）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">\talias: &#123;</span><br><span class=\"line\">    \t<span class=\"string\">\"vue\"</span>: <span class=\"string\">\"vue/dist/vue.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在main.js中添加一条语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue-loader\"><a href=\"#vue-loader\" class=\"headerlink\" title=\"vue-loader\"></a><strong>vue-loader</strong></h2><p>在webpack中，推荐使用 <code>.vue</code> 这个组件模板文件定义组件，所以需要安装 <code>vue-loader</code> </p>\n<blockquote>\n<p>npm install vue-loader vue-template-compiler -D</p>\n</blockquote>\n<h2 id=\"上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上\"><a href=\"#上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上\" class=\"headerlink\" title=\"上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上\"></a>上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上</h2><ol>\n<li><p>在js目录中新建一个login.vue文件，内容如下（vue模板，包含三部分）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">    \t&lt;h1&gt;这是登录组件&lt;&#x2F;h1&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js中导入这个组件，导入vue，并且new一个vue实例，并注册从login.vue导入的组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import login from &#39;.&#x2F;src&#x2F;js&#x2F;login.vue&#39;</span><br><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel:&#39;#app&#39;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">    \t&#39;login&#39;: login</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F;原始版：</span><br><span class=\"line\">    render: function(createElement)&#123;</span><br><span class=\"line\">    \treturn createElement(login)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;简写版：</span><br><span class=\"line\">    render: c &#x3D;&gt; c(login)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后在index.html中创建一个id为app的div元素，作为app的实例要控制的区域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">login</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>webpack在不使用loader的情况下很多语句都不能被解析，所以需要不同的第三方loader来解析不能被webpack解析的语句。</p>","more":"<h2 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css loader\"></a><strong>css loader</strong></h2><p>安装： </p>\n<blockquote>\n<p>npm install style-loader css-loader</p>\n</blockquote>\n<p>配置（在<code>webpack.config.js</code>的<code>module</code>中新建一条rules）：</p>\n<blockquote>\n<p>test: /.css$/, use: [‘style-loader’, ‘css-loader’]</p>\n</blockquote>\n<h2 id=\"url-loader\"><a href=\"#url-loader\" class=\"headerlink\" title=\"url loader\"></a><strong>url loader</strong></h2><p>安装（file-loader为url-loader的内部依赖，在规则里可以不用写url-loader）： </p>\n<blockquote>\n<p>npm install url-loader file-loader </p>\n</blockquote>\n<p>配置（在<code>webpack.config.js</code>的<code>module</code>中新建一条rules,这里以图片举例）：</p>\n<blockquote>\n<p>test: /.(jpg|png|gif|bmp|jpeg)$/, use: [‘url-loader?limit=7000’]  //针对图片<br>test: /.(ttf|eot|svg|woff|woff2)$/, use: [‘url-loader’]   //针对字体</p>\n</blockquote>\n<p>给url-loader添加参数，不让所有的图片都被解析为Base64格式，上面的<code>?limit=7000</code>意思是如果图片大小等于或者大于7000字节则图片不会被转为Base64编码格式（limit单位为byte），如果小于，则会被转为Base64格式。</p>\n<h2 id=\"在webpack中使用-vue-开发\"><a href=\"#在webpack中使用-vue-开发\" class=\"headerlink\" title=\"在webpack中使用 vue 开发\"></a><strong>在webpack中使用 vue 开发</strong></h2><blockquote>\n<p>npm install vue -D</p>\n</blockquote>\n<p>配置webpack.config.js（在resolve中的alias中添加一条规则）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">\talias: &#123;</span><br><span class=\"line\">    \t<span class=\"string\">\"vue\"</span>: <span class=\"string\">\"vue/dist/vue.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在main.js中添加一条语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue-loader\"><a href=\"#vue-loader\" class=\"headerlink\" title=\"vue-loader\"></a><strong>vue-loader</strong></h2><p>在webpack中，推荐使用 <code>.vue</code> 这个组件模板文件定义组件，所以需要安装 <code>vue-loader</code> </p>\n<blockquote>\n<p>npm install vue-loader vue-template-compiler -D</p>\n</blockquote>\n<h2 id=\"上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上\"><a href=\"#上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上\" class=\"headerlink\" title=\"上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上\"></a>上述vue-loader安装完成后，就可以使用webpack来创建一个组件并用render函数来渲染到页面上</h2><ol>\n<li><p>在js目录中新建一个login.vue文件，内容如下（vue模板，包含三部分）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">    \t&lt;h1&gt;这是登录组件&lt;&#x2F;h1&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js中导入这个组件，导入vue，并且new一个vue实例，并注册从login.vue导入的组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import login from &#39;.&#x2F;src&#x2F;js&#x2F;login.vue&#39;</span><br><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel:&#39;#app&#39;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">    \t&#39;login&#39;: login</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F;原始版：</span><br><span class=\"line\">    render: function(createElement)&#123;</span><br><span class=\"line\">    \treturn createElement(login)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;简写版：</span><br><span class=\"line\">    render: c &#x3D;&gt; c(login)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后在index.html中创建一个id为app的div元素，作为app的实例要控制的区域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">login</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ol>"},{"title":"Node笔记","date":"2020-05-10T03:25:48.000Z","toc":true,"_content":"\n<div class='notification is-warning post-primary'>\n    Node的学习笔记\n</div>\n\n\n\n<!--more-->\n\n## 为什么要学习Node.js\n\n- 企业需求\n  - 具有服务端开发经验更改\n  - front-end\n  - back-end\n  - 全栈开发工程师\n  - 基本的网站开发能力\n    - 服务端\n    - 前端\n    - 运维部署\n  - 多人社区\n\n## Node.js是什么\n\n- Node.js是JavaScript 运行时\n- 通俗易懂的讲，Node.js是JavaScript的运行平台\n- Node.js既不是语言，也不是框架，它是一个平台\n- 浏览器中的JavaScript\n  - EcmaScript\n    - 基本语法\n    - if\n    - var\n    - function\n    - Object\n    - Array\n  - Bom\n  - Dom\n- Node.js中的JavaScript\n  - 没有Bom，Dom\n  - EcmaScript\n  - 在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API\n    - 例如文件的读写\n    - 网络服务的构建\n    - 网络通信\n    - http服务器\n- 构建与Chrome的V8引擎之上\n  - 代码只是具有特定格式的字符串\n  - 引擎可以认识它，帮你解析和执行\n  - Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的\n  - Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境\n- Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.\n  -  envent-driven\t事件驱动\n  -  non-blocking I/O mode   非阻塞I/O模型（异步）\n  -  ightweight and efficent.   轻量和高效\n- Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world\n  - npm 是世界上最大的开源生态系统\n  - 绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用\n  - npm install jquery\n\n## Node能做什么\n\n- web服务器后台\n- 命令行工具\n  - npm(node)\n  - git(c语言)\n  - hexo（node）\n  - ...\n- 对于前端工程师来讲，接触最多的是它的命令行工具\n  - 自己写的很少，主要是用别人第三方的\n  - webpack\n  - gulp\n  - npm\n\n# 起步\n\n## 安装Node环境\n\n- 查看Node环境的版本号\n- 下载：https://nodejs.org/en/\n- 安装：\n  - 傻瓜式安装，一路`next`\n  - 安装过再次安装会升级\n- 确认Node环境是否安装成功\n  - 查看node的版本号：`node --version`\n  - 或者`node -v`\n- 配置环境变量\n\n## 解析执行JavaScript\n\n1. 创建编写JavaScript脚本文件\n2. 打开终端，定位脚本文件的所属目录\n3. 输入`node  文件名`执行对应的文件\n\n注意：文件名不要用`node.js`来命名，也就是说除了`node`这个名字随便起，最好不要使用中文。\n\n## 文件的读写\n\n文件读取:\n\n```javascript\n//浏览器中的JavaScript是没有文件操作能力的\n//但是Node中的JavaScript具有文件操作能力\n//fs是file-system的简写，就是文件系统的意思\n//在Node中如果想要进行文件的操作就必须引用fs这个核心模块\n//在fs这个和兴模块中，就提供了人所有文件操作相关的API\n//例如 fs.readFile就是用来读取文件的\n\n//  1.使用fs核心模块\nvar fs = require('fs');\n\n// 2.读取文件\nfs.readFile('./data/a.txt',function(err,data){\n   if(err){\n        console.log('文件读取失败');\n   }\n    else{\n         console.log(data.toString());\n    }\n})\n```\n\n文件写入：\n\n```javascript\n//  1.使用fs核心模块\nvar fs = require('fs');\n\n// 2.将数据写入文件\nfs.writeFile('./data/a.txt','我是文件写入的信息',function(err,data){\n   if(err){\n        console.log('文件写入失败');\n   }\n    else{\n         console.log(data.toString());\n    }\n})\n```\n\n## http\n\n服务器：\n\n```javascript\n// 1.加载http核心模块\nvar http = require('http');\n\n// 2.使用http.createServer()创建一个web服务器\nvar server = http.createServer();\n\n// 3.服务器要做的事儿\n// 提供服务：对数据服务\n// 发请求\n//\t接收请求\n//\t处理请求\n//\t反馈（发送响应）\n//\t当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数\nserver.on('request',function(){\n    console.log('收到客户的请求了')\n})\n\n// 4.绑定端口号，启动服务\nserver.listen(3000,function(){\n    console.log('runing...')\n})\n\n```\n\n# Node中的模块系统\n\n使用Node编写应用程序主要就是在使用：\n\n- EcmaScript语言\n  - 和浏览器一样，在Node中没有Bom和Dom\n\n- 核心模块\n  - 文件操作的fs\n  - http服务操作的http\n  - url路径操作模块\n  - path路径处理模块\n  - os操作系统信息\n- 第三方模块\n  - art-template\n  - 必须通过npm来下载才可以使用\n- 自己写的模块\n  - 自己创建的文件\n\n\n\n## 什么是模块化\n\n- 文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】\n- 通信规则\n  - 加载require\n  - 导出exports\n\n## CommonJS模块规范\n\n在Node中的JavaScript还有一个重要的概念，模块系统。\n\n- 模块作用域\n\n- 使用require方法来加载模块\n\n- 使用exports接口对象来导出模板中的成员\n\n  ### 加载`require`\n\n  语法：\n\n  ~~~java\n  var 自定义变量名 = require('模块')\n  ~~~\n\n  作用：\n\n  - 执行被加载模块中的代码\n  - 得到被加载模块中的`exports`导出接口对象\n\n  ### 导出`exports`\n\n  - Node中是模块作用域，默认文件中所有的成员只在当前模块有效\n\n  - 对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到`exports`接口对象中就可以了\n\n    导出多个成员（必须在对象中）：\n\n    ```javascript\n    exports.a = 123;\n    exports.b = function(){\n        console.log('bbb')\n    };\n    exports.c = {\n        foo:\"bar\"\n    };\n    exports.d = 'hello';\n    ```\n\n    \n\n    导出单个成员（拿到的就是函数，字符串）：\n\n    ```javascript\n    module.exports = 'hello';\n    ```\n\n    以下情况会覆盖：\n\n    ```javascript\n    module.exports = 'hello';\n    //后者会覆盖前者\n    module.exports = function add(x,y) {\n        return x+y;\n    }\n    ```\n\n    也可以通过以下方法来导出多个成员：\n\n    ```javascript\n    module.exports = {\n        foo = 'hello',\n        add:function(){\n            return x+y;\n        }\n    };\n    ```\n\n## 模块原理\n\nexports和`module.exports`的一个引用：\n\n```javascript\nconsole.log(exports === module.exports);\t//true\n\nexports.foo = 'bar';\n\n//等价于\nmodule.exports.foo = 'bar';\n```\n\n`当给exports重新赋值后，exports！= module.exports.`\n\n`最终return的是module.exports,无论exports中的成员是什么都没用。`\n\n```javascript\n真正去使用的时候：\n\t导出单个成员：exports.xxx = xxx;\n\t导出多个成员：module.exports 或者 modeule.exports = {};\n```\n\n## 总结\n\n```javascript\n// 引用服务\nvar http = require('http');\nvar fs = require('fs');\n// 引用模板\nvar template = require('art-template');\n// 创建服务\nvar server = http.createServer();\n// 公共路径\nvar wwwDir = 'D:/app/www';\nserver.on('request', function (req, res) {\n    var url = req.url;\n    // 读取文件\n    fs.readFile('./template-apche.html', function (err, data) {\n        if (err) {\n            return res.end('404 Not Found');\n        }\n        fs.readdir(wwwDir, function (err, files) {\n            if (err) {\n                return res.end('Can not find www Dir.')\n            }\n            // 使用模板引擎解析替换data中的模板字符串\n            // 去xmpTempleteList.html中编写模板语法\n            var htmlStr = template.render(data.toString(), { \n                title: 'D:/app/www/ 的索引',\n                files:files \n            });\n            // 发送响应数据\n            res.end(htmlStr);\n        })\n    })\n});\nserver.listen(3000, function () {\n    console.log('running....');\n})\n```\n\n```javascript\n1.jQuery中的each 和 原生JavaScript方法forEach的区别：\n\t提供源头：\n    \t原生js是es5提供的（不兼容IE8）,\n        jQuery的each是jQuery第三方库提供的（如果要使用需要用2以下的版本也就是1.版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用\n2.模块中导出多个成员和导出单个成员\n3.301和302的区别：\n\t301永久重定向,浏览器会记住\n    302临时重定向\n4.exports和module.exports的区别:\n\t每个模块中都有一个module对象\n    module对象中有一个exports对象\n    我们可以把需要导出的成员都挂载到module.exports接口对象中\n\t也就是`module.exports.xxx = xxx`的方式\n    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫`exports`\n    `exports === module.exports`结果为true,所以完全可以`exports.xxx = xxx`\n    当一个模块需要导出单个成员的时候必须使用`module.exports = xxx`的方式，=,使用`exports = xxx`不管用,因为每个模块最终return的是module.exports,而exports只是module.exports的一个引用,所以`exports`即使重新赋值,也不会影响`module.exports`。\n    有一种赋值方式比较特殊：`exports = module.exports`这个用来新建立引用关系的。\n    \n```\n\n# require的加载规则\n\n- 核心模块\n\n  - 模块名\n\n- 第三方模块\n\n  - 模块名\n\n- 用户自己写的\n\n  - 路径\n\n\n\n\n## require的加载规则：\n\n- 优先从缓存加载\n\n- 判断模块标识符\n\n  - 核心模块\n  - 自己写的模块（路径形式的模块）\n  - 第三方模块（node_modules）\n    - 第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）\n    - npm\n      - 开发人员可以把写好的框架库发布到npm上\n      - 使用者通过npm命令来下载\n    - 使用方式：`var 名称 = require('npm install【下载包】 的包名')`\n      - node_modules/express/package.json main\n      - 如果package.json或者main不成立，则查找被选择项：index.js\n      - 如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错\n\n\n\n```javascript\n// 如果非路径形式的标识\n// 路径形式的标识：\n    // ./  当前目录 不可省略\n    // ../  上一级目录  不可省略\n    //  /xxx也就是D:/xxx\n    // 带有绝对路径几乎不用（D:/a/foo.js）\n// 首位表示的是当前文件模块所属磁盘根目录\n// require('./a'); \n\n\n// 核心模块\n// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了\nrequire('fs'); \n\n// 第三方模块\n// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用\n// 第三方包的名字不可能和核心模块的名字是一样的\n// 既不是核心模块，也不是路径形式的模块\n//      先找到当前文所述目录的node_modules\n//      然后找node_modules/art-template目录\n//      node_modules/art-template/package.json\n//      node_modules/art-template/package.json中的main属性\n//      main属性记录了art-template的入口模块\n//      然后加载使用这个第三方包\n//      实际上最终加载的还是文件\n\n//      如果package.json不存在或者mian指定的入口模块不存在\n//      则node会自动找该目录下的index.js\n//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件\n//      \n        // 如果条件都不满足则会进入上一级目录进行查找\n// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件\nvar template = require('art-template');\n\n```\n\n## 模块标识符中的`/`和文件操作路径中的`/`\n\n文件操作路径：\n\n```javascript\n// 咱们所使用的所有文件操作的API都是异步的\n// 就像ajax请求一样\n// 读取文件\n// 文件操作中 ./ 相当于当前模块所处磁盘根目录\n// ./index.txt    相对于当前目录\n// /index.txt    相对于当前目录\n// /index.txt   绝对路径,当前文件模块所处根目录\n// d:express/index.txt   绝对路径\nfs.readFile('./index.txt',function(err,data){\n    if(err){\n       return  console.log('读取失败');\n    }\n    console.log(data.toString());\n})\n```\n\n模块操作路径：\n\n```javascript\n// 在模块加载中，相对路径中的./不能省略\n// 这里省略了.也是磁盘根目录\nrequire('./index')('hello')\n```\n\n\n\n# npm\n\n- node package manage(node包管理器)\n- 通过npm命令安装jQuery包（npm install --save jquery），在安装时加上--save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）\n\n### npm网站\n\n> ​\tnpmjs.com\t网站   是用来搜索npm包的\n\n### npm命令行工具\n\nnpm是一个命令行工具，只要安装了node就已经安装了npm。\n\nnpm也有版本概念，可以通过`npm --version`来查看npm的版本\n\n升级npm(自己升级自己)：\n\n```javascript\nnpm install --global npm\n```\n\n### 常用命令\n\n- npm init(生成package.json说明书文件)\n  - npm init -y(可以跳过向导，快速生成)\n- npm install\n  - 一次性把dependencies选项中的依赖项全部安装\n  - 简写（npm i）\n- npm install 包名\n  - 只下载\n  - 简写（npm i 包名）\n- npm install --save 包名\n  - 下载并且保存依赖项（package.json文件中的dependencies选项）\n  - 简写（npm i  包名）\n- npm uninstall 包名\n  - 只删除，如果有依赖项会依然保存\n  - 简写（npm un 包名）\n- npm uninstall --save 包名\n  - 删除的同时也会把依赖信息全部删除\n  - 简写（npm un 包名）\n- npm help\n  - 查看使用帮助\n- npm 命令 --help\n  - 查看具体命令的使用帮助（npm uninstall --help）\n\n### 解决npm被墙问题\n\nnpm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。\n\n> https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。\n\n安装淘宝的cnpm：\n\n```javascript\nnpm install -g cnpm --registry=https://registry.npm.taobao.org;\n```\n\n\n\n```shell\n#在任意目录执行都可以\n#--global表示安装到全局，而非当前目录\n#--global不能省略，否则不管用\nnpm install --global cnpm\n```\n\n安装包的时候把以前的`npm`替换成`cnpm`。\n\n```shell\n#走国外的npm服务器下载jQuery包，速度比较慢\nnpm install jQuery;\n\n#使用cnpm就会通过淘宝的服务器来下载jQuery\ncnpm install jQuery;\n```\n\n如果不想安装`cnpm`又想使用淘宝的服务器来下载：\n\n```shell\nnpm install jquery --registry=https://npm.taobao.org;\n```\n\n但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：\n\n```shell\nnpm config set registry https://npm.taobao.org;\n\n#查看npm配置信息\nnpm config list;\n```\n\n只要经过上面的配置命令，则以后所有的`npm install`都会通过淘宝的服务器来下载\n\n# package.json\n\n每一个项目都要有一个`package.json`文件（包描述文件，就像产品的说明书一样）\n\n这个文件可以通过`npm init`自动初始化出来\n\n```javascript\nD:\\code\\node中的模块系统>npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (node中的模块系统)\nSorry, name can only contain URL-friendly characters.\npackage name: (node中的模块系统) cls\nversion: (1.0.0)\ndescription: 这是一个测试项目\nentry point: (main.js)\ntest command:\ngit repository:\nkeywords:\nauthor: xiaochen\nlicense: (ISC)\nAbout to write to D:\\code\\node中的模块系统\\package.json:\n\n{\n  \"name\": \"cls\",\n  \"version\": \"1.0.0\",\n  \"description\": \"这是一个测试项目\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"xiaochen\",\n  \"license\": \"ISC\"\n}\n\n\nIs this OK? (yes) yes\n```\n\n对于目前来讲，最有用的是`dependencies`选项，可以用来帮助我们保存第三方包的依赖信息。\n\n如果`node_modules`删除了也不用担心，只需要在控制面板中`npm install`就会自动把`package.json`中的`dependencies`中所有的依赖项全部都下载回来。\n\n- 建议每个项目的根目录下都有一个`package.json`文件\n- 建议执行`npm install 包名`的时候都加上`--save`选项，目的是用来保存依赖信息\n\n## package.json和package-lock.json\n\nnpm 5以前是不会有`package-lock.json`这个文件\n\nnpm5以后才加入这个文件\n\n当你安装包的时候，npm都会生成或者更新`package-lock.json`这个文件\n\n- npm5以后的版本安装都不要加`--save`参数，它会自动保存依赖信息\n- 当你安装包的时候，会自动创建或者更新`package-lock.json`文件\n- `package-lock.json`这个文件会包含`node_modules`中所有包的信息（版本，下载地址。。。）\n  - 这样的话重新`npm install`的时候速度就可以提升\n- 从文件来看，有一个`lock`称之为锁\n  - 这个`lock`使用来锁版本的\n  - 如果项目依赖了`1.1.1`版本\n  - 如果你重新install其实会下载最细版本，而不是`1.1.1`\n  - ``package-lock.json``的另外一个作用就是锁定版本号，防止自动升级\n\n## path路径操作模块\n\n> 参考文档：https://nodejs.org/docs/latest-v13.x/api/path.html\n\n- path.basename：获取路径的文件名，默认包含扩展名\n- path.dirname：获取路径中的目录部分\n- path.extname：获取一个路径中的扩展名部分\n- path.parse：把路径转换为对象\n  - root：根路径\n  - dir：目录\n  - base：包含后缀名的文件名\n  - ext：后缀名\n  - name：不包含后缀名的文件名\n- path.join：拼接路径\n- path.isAbsolute：判断一个路径是否为绝对路径\n\n# Node中的其它成员(__dirname,__filename)\n\n在每个模块中，除了`require`,`exports`等模块相关的API之外，还有两个特殊的成员：\n\n- `__dirname`，是一个成员，可以用来**动态**获取当前文件模块所属目录的绝对路径\n\n- `__filename`，可以用来**动态**获取当前文件的绝对路径（包含文件名）\n\n- `__dirname`和`filename`是不受执行node命令所属路径影响的\n\n在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。\n\n所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。\n\n就可以使用`__dirname`或者`__filename`来帮助我们解决这个问题\n\n在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用`path.join()`来辅助拼接\n\n```javascript\nvar fs = require('fs');\nvar path = require('path');\n\n// console.log(__dirname + 'a.txt');\n// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径\nfs.readFile(path.join(__dirname + '/a.txt'),'utf8',function(err,data){\n\tif(err){\n\t\tthrow err\n\t}\n\tconsole.log(data);\n});\n```\n\n> 补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）\n\n> **注意：**\n>\n> **模块中的路径标识和文件操作中的相对路径标识不一致**\n>\n> **模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响**\n\n\n\n# Express（快速的）\n\n作者：Tj\n\n原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。\n\n在node中有很多web开发框架。主要学习express\n\n- `http://expressjs.com/`,其中主要封装的是http。\n\n- ```javascript\n  // 1 安装\n  // 2 引包\n  var express = require('express');\n  // 3 创建服务器应用程序\n  //      也就是原来的http.createServer();\n  var app = express();\n  \n  // 公开指定目录\n  // 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源\n  // 在Express中开放资源就是一个API的事\n  app.use('/public/',express.static('/public/'));\n  \n  //模板引擎在Express中开放模板也是一个API的事\n  \n  // 当服务器收到get请求 / 的时候，执行回调处理函数\n  app.get('/',function(req,res){\n      res.send('hello express');\n  })\n  \n  // 相当于server.listen\n  app.listen(3000,function(){\n      console.log('app is runing at port 3000');\n  })\n  ```\n\n\n### 学习Express\n\n#### 起步\n\n##### 安装：\n\n```javascript\ncnpm install express\n```\n\n##### hello world:\n\n```javascript\n// 引入express\nvar express = require('express');\n\n// 1. 创建app\nvar app = express();\n\n//  2. \napp.get('/',function(req,res){\n    // 1\n    // res.write('Hello');\n    // res.write('World');\n    // res.end()\n\n    // 2\n    // res.end('hello world');\n\n    // 3\n    res.send('hello world');\n})\n\napp.listen(3000,function(){\n    console.log('express app is runing...');\n})\n```\n\n##### 基本路由\n\n路由：\n\n- 请求方法\n\n- 请求路径\n- 请求处理函数\n\nget:\n\n```javascript\n//当你以get方法请求/的时候，执行对应的处理函数\napp.get('/',function(req,res){\n    res.send('hello world');\n})\n```\n\npost:\n\n```javascript\n//当你以post方法请求/的时候，执行对应的处理函数\napp.post('/',function(req,res){\n    res.send('hello world');\n})\n```\n\n##### Express静态服务API\n\n```javascript\n// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)\napp.use(express.static('public'));\n// 这种方式可以省略请求路径前缀\napp.use(express.static('files'));\n\n// 这种方式相当于static为public目录的别名\napp.use('/stataic',express.static('public'));\n```\n\n```javascript\n// 引入express\nvar express = require('express');\n\n// 创建app\nvar app = express();\n\n// 开放静态资源\n// 1.当以/public/开头的时候，去./public/目录中找对应资源\n// 访问：http://127.0.0.1:3000/public/login.html\napp.use('/public/',express.static('./public/')); \n\n// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问\n// 访问：http://127.0.0.1:3000/login.html\n// app.use(express.static('./public/'));   \n\n// 3.访问：http://127.0.0.1:3000/a/login.html\n// a相当于public的别名\n// app.use('/a/',express.static('./public/')); \n\n//  \napp.get('/',function(req,res){\n    res.end('hello world');\n});\n\napp.listen(3000,function(){\n    console.log('express app is runing...');\n});\n```\n\n##### 在Express中配置使用`art-templete`模板引擎\n\n- [art-template官方文档](https://aui.github.io/art-template/)\n- 在node中，有很多第三方模板引擎都可以使用，不是只有`art-template`\n  - 还有ejs，jade（pug），handlebars，nunjucks\n\n安装：\n\n```shell\nnpm install --save art-template\nnpm install --save express-art-template\n\n//两个一起安装\nnpm i --save art-template express-art-template\n```\n\n配置：\n\n```javascript\napp.engine('html', require('express-art-template'));\n```\n\n使用：\n\n```javascript\napp.get('/',function(req,res){\n    // express默认会去views目录找index.html\n    res.render('index.html',{\n           title:'hello world'     \n    });\n})\n```\n\n如果希望修改默认的`views`视图渲染存储目录，可以：\n\n```javascript\n// 第一个参数views千万不要写错\napp.set('views',目录路径);\n```\n\n##### 在Express中获取表单请求数据\n\n###### 获取get请求数据：\n\nExpress内置了一个api，可以直接通过`req.query`来获取数据\n\n```javascript\n// 通过requery方法获取用户输入的数据\n// req.query只能拿到get请求的数据\n var comment = req.query;\n```\n\n###### 获取post请求数据：\n\n在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包`body-parser`来获取数据。\n\n安装：\n\n```javascript\nnpm install --save body-parser;\n```\n\n配置：\n\n// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）\n\n```javascript\nvar express = require('express')\n// 引包\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// 配置body-parser\n// 只要加入这个配置，则在req请求对象上会多出来一个属性：body\n// 也就是说可以直接通过req.body来获取表单post请求数据\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n```\n\n使用：\n\n```javascript\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  // 可以通过req.body来获取表单请求数据\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```\n\n### 在Express中配置使用`express-session`插件操作\n\n> 参考文档：https://github.com/expressjs/session\n\n安装：\n\n```javascript\nnpm install express-session\n```\n\n配置：\n\n```javascript\n//该插件会为req请求对象添加一个成员:req.session默认是一个对象\n//这是最简单的配置方式\n//Session是基于Cookie实现的\napp.use(session({\n  //配置加密字符串，他会在原有的基础上和字符串拼接起来去加密\n  //目的是为了增加安全性，防止客户端恶意伪造\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true,//无论是否适用Session，都默认直接分配一把钥匙\n  cookie: { secure: true }\n}))\n```\n\n使用：\n\n```javascript\n// 读\n//添加Session数据\n//session就是一个对象\nreq.session.foo = 'bar';\n\n//写\n//获取session数据\nreq.session.foo\n\n//删\nreq.session.foo = null;\ndelete req.session.foo\n```\n\n提示：\n\n默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。\n\n### 利用Express实现ADUS项目\n\n#### 模块化思想\n\n模块如何划分:\n\n- 模块职责要单一\n\njavascript模块化：\n\n- Node 中的 CommonJS\n- 浏览器中的：\n  - AMD\trequire.js\n  - CMD     sea.js\n- es6中增加了官方支持\n\n#### 起步\n\n- 初始化\n- 模板处理\n\n#### 路由设计\n\n| 请求方法 | 请求路径         | get参数 | post参数                   | 备注             |\n| -------- | :--------------- | :------ | -------------------------- | :--------------- |\n| GET      | /students        |         |                            | 渲染首页         |\n| GET      | /students/new    |         |                            | 渲染添加学生页面 |\n| POST     | /students/new    |         | name,age,gender,hobbies    | 处理添加学生请求 |\n| GET      | /students/edit   | id      |                            | 渲染编辑页面     |\n| POST     | /students/edit   |         | id,name,age,gender,hobbies | 处理编辑请求     |\n| GET      | /students/delete | id      |                            | 处理删除请求     |\n\n#### 提取路由模块\n\nrouter.js:\n\n```javascript\n/**\n * router.js路由模块\n * 职责：\n *      处理路由\n *      根据不同的请求方法+请求路径设置具体的请求函数\n * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率\n */\nvar fs = require('fs');\n\n// Express专门提供了一种更好的方式\n// 专门用来提供路由的\nvar express = require('express');\n// 1 创建一个路由容器\nvar router = express.Router();\n// 2 把路由都挂载到路由容器中\n\nrouter.get('/students', function(req, res) {\n    // res.send('hello world');\n    // readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符\n    // 除了这样来转换，也可以通过data.toString（）来转换\n    fs.readFile('./db.json', 'utf8', function(err, data) {\n        if (err) {\n            return res.status(500).send('Server error.')\n        }\n        // 读取到的文件数据是string类型的数据\n        // console.log(data);\n        // 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象\n        var students = JSON.parse(data).students;\n        res.render('index.html', {\n            // 读取文件数据\n            students:students\n        })\n    })\n});\n\nrouter.get('/students/new',function(req,res){\n    res.render('new.html')\n});\n\nrouter.get('/students/edit',function(req,res){\n    \n});\n\nrouter.post('/students/edit',function(req,res){\n    \n});\n\nrouter.get('/students/delete',function(req,res){\n    \n});\n\n// 3 把router导出\nmodule.exports = router;\n\n```\n\napp.js:\n\n```javascript\nvar router = require('./router');\n\n// router(app);\n// 把路由容器挂载到app服务中\n// 挂载路由\napp.use(router);\n```\n\n\n\n#### 设计操作数据的API文件模块\n\nes6中的find和findIndex：\n\nfind接受一个方法作为参数，方法内部返回一个条件\n\nfind会便利所有的元素，执行你给定的带有条件返回值的函数\n\n符合该条件的元素会作为find方法的返回值\n\n如果遍历结束还没有符合该条件的元素，则返回undefined![image-20200313103810731](C:\\Users\\A\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200313103810731.png)\n\n```javascript\n/**\n * student.js\n * 数据操作文件模块\n * 职责：操作文件中的数据，只处理数据，不关心业务\n */\nvar fs = require('fs');\n /**\n  * 获取所有学生列表\n  * return []\n  */\nexports.find = function(){\n    \n}\n\n\n /**\n  * 获取添加保存学生\n  */\nexports.save = function(){\n        \n}\n\n/**\n * 更新学生\n */\nexports.update = function(){\n        \n}\n\n /**\n * 删除学生\n */\nexports.delete = function(){\n        \n}\n```\n\n#### 步骤\n\n- 处理模板\n- 配置静态开放资源\n- 配置模板引擎\n- 简单的路由，/studens渲染静态页出来\n- 路由设计\n- 提取路由模块\n- 由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js'\n- 先写好student.js文件结构\n  - 查询所有学生列别哦的API\n  - findById\n  - save\n  - updateById\n  - deleteById\n- 实现具体功能\n  - 通过路由收到请求\n  - 接受请求中的参数（get，post）\n    - req.query\n    - req.body\n  - 调用数据操作API处理数据\n  - 根据操作结果给客户端发送请求\n\n- 业务功能顺序\n  - 列表\n  - 添加\n  - 编辑\n  - 删除\n\n#### 子模板和模板的继承（模板引擎高级语法）【include，extend，block】\n\n注意:\n\n模板页：\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t<title>模板页</title>\n\t<link rel=\"stylesheet\" href=\"/node_modules/bootstrap/dist/css/bootstrap.css\"/>\n\t{{ block 'head' }}{{ /block }}\n</head>\n<body>\n\t<!-- 通过include导入公共部分 -->\n\t{{include './header.html'}}\n\t\n\t<!-- 留一个位置 让别的内容去填充 -->\n\t{{ block  'content' }}\n\t\t<h1>默认内容</h1>\n\t{{ /block }}\n\t\n\t<!-- 通过include导入公共部分 -->\n\t{{include './footer.html'}}\n\t\n\t<!-- 公共样式 -->\n\t<script src=\"/node_modules/jquery/dist/jquery.js\" ></script>\n\t<script src=\"/node_modules/bootstrap/dist/js/bootstrap.js\" ></script>\n\t{{ block 'script' }}{{ /block }}\n</body>\n</html>\n```\n\n模板的继承：\n\n​\theader页面：\n\n```javascript\n<div id=\"\">\n\t<h1>公共的头部</h1>\n</div>\n```\n\n​\tfooter页面：\n\n```javascript\n<div id=\"\">\n\t<h1>公共的底部</h1>\n</div>\n```\n\n模板页的使用：\n\n```javascript\n<!-- 继承(extend:延伸，扩展)模板也layout.html -->\n<!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 -->\n{{extend './layout.html'}}\n\n<!-- 向模板页面填充新的数据 -->\n<!-- 填充后就会替换掉layout页面content中的数据 -->\n<!-- style样式方面的内容 -->\n{{ block 'head' }}\n\t<style type=\"text/css\">\n\t\tbody{\n\t\t\tbackground-color: skyblue;\n\t\t}\n\t</style>\n{{ /block }}\n{{ block 'content' }}\n\t<div id=\"\">\n\t\t<h1>Index页面的内容</h1>\n\t</div>\n{{ /block }}\n<!-- js部分的内容 -->\n{{ block 'script' }}\n\t<script type=\"text/javascript\">\n\t\t\n\t</script>\n{{ /block }}\n```\n\n最终的显示效果：\n\n# MongoDB\n\n## 关系型和非关系型数据库\n\n### 关系型数据库（表就是关系，或者说表与表之间存在关系）。\n\n- 所有的关系型数据库都需要通过`sql`语言来操作\n- 所有的关系型数据库在操作之前都需要设计表结构\n- 而且数据表还支持约束\n  - 唯一的\n  - 主键\n  - 默认值\n  - 非空\n\n### 非关系型数据库\n\n- 非关系型数据库非常的灵活\n- 有的关系型数据库就是key-value对儿\n- 但MongDB是长得最像关系型数据库的非关系型数据库\n  - 数据库 -》 数据库\n  - 数据表 -》 集合（数组）\n  - 表记录 -》文档对象\n\n一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）\n\n```javascript\n{\n    qq:{\n       user:[\n           {},{},{}...\n       ]\n    }\n}\n```\n\n\n\n- 也就是说你可以任意的往里面存数据，没有结构性这么一说\n\n## 安装\n\n- 下载\n\n  - 下载地址：https://www.mongodb.com/download-center/community\n\n- 安装\n\n  ```javascript\n  npm i mongoose\n  ```\n\n- 配置环境变量\n\n- 最后输入`mongod --version`测试是否安装成功\n\n## 启动和关闭数据库\n\n启动：\n\n```shell\n# mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录\n# 所以在第一次执行该命令之前先自己手动新建一个 /data/db\nmongod\n```\n\n如果想要修改默认的数据存储目录，可以：\n\n```javascript\nmongod --dbpath = 数据存储目录路径\n```\n\n停止：\n\n```javascript\n在开启服务的控制台，直接Ctrl+C;\n或者直接关闭开启服务的控制台。\n```\n\n\n\n## 连接数据库\n\n连接：\n\n```javascript\n# 该命令默认连接本机的 MongoDB 服务\nmongo\n```\n\n退出：\n\n```javascript\n# 在连接状态输入 exit 退出连接\nexit\n```\n\n\n\n\n\n## 基本命令\n\n- `show dbs`\n  - 查看数据库列表(数据库中的所有数据库)\n- `db`\n  - 查看当前连接的数据库\n- `use 数据库名称`\n  - 切换到指定的数据库，（如果没有会新建）\n- `show collections`\n  - 查看当前目录下的所有数据表\n- `db.表名.find()`\n  - 查看表中的详细信息\n\n## 在Node中如何操作MongoDB数据库\n\n### 使用官方的`MongoDB`包来操作\n\n> ​\thttp://mongodb.github.io/node-mongodb-native/\n\n### 使用第三方包`mongoose`来操作MongoDB数据库\n\n​\t第三方包：`mongoose`基于MongoDB官方的`mongodb`包再一次做了封装，名字叫`mongoose`，是WordPress项目团队开发的。\n\n \n\n> ​\thttps://mongoosejs.com/\n\n\n\n## 学习指南（步骤）\n\n官方学习文档：https://mongoosejs.com/docs/index.html\n\n### 设计Scheme 发布Model (创建表)\n\n```javascript\n// 1.引包\n// 注意：按照后才能require使用\nvar mongoose = require('mongoose');\n\n// 拿到schema图表\nvar Schema = mongoose.Schema;\n\n// 2.连接数据库\n// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库\nmongoose.connect('mongodb://localhost/test');\n\n// 3.设计集合结构（表结构）\n// 用户表\nvar userSchema = new Schema({\n\tusername: { //姓名\n\t\ttype: String,\n\t\trequire: true //添加约束，保证数据的完整性，让数据按规矩统一\n\t},\n\tpassword: {\n\t\ttype: String,\n\t\trequire: true\n\t},\n\temail: {\n\t\ttype: String\n\t}\n});\n\n// 4.将文档结构发布为模型\n// mongoose.model方法就是用来将一个架构发布为 model\n// \t\t第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称\n// \t\t\t\t\tmongoose 会自动将大写名词的字符串生成 小写复数 的集合名称\n// \t\t\t\t\t例如 这里会变成users集合名称\n// \t\t第二个参数：架构\n// \t返回值：模型构造函数\nvar User = mongoose.model('User', userSchema);\n```\n\n### 添加数据（增）\n\n```javascript\n// 5.通过模型构造函数对User中的数据进行操作\nvar user = new User({\n\tusername: 'admin',\n\tpassword: '123456',\n\temail: 'xiaochen@qq.com'\n});\n\nuser.save(function(err, ret) {\n\tif (err) {\n\t\tconsole.log('保存失败');\n\t} else {\n\t\tconsole.log('保存成功');\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n### 删除（删）\n\n根据条件删除所有：\n\n```javascript\nUser.remove({\n\tusername: 'xiaoxiao'\n}, function(err, ret) {\n\tif (err) {\n\t\tconsole.log('删除失败');\n\t} else {\n\t\tconsole.log('删除成功');\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n根据条件删除一个：\n\n```javascript\nModel.findOneAndRemove(conditions,[options],[callback]);\n```\n\n根据id删除一个：\n\n```javascript\nUser.findByIdAndRemove(id,[options],[callback]);\n```\n\n\n\n### 更新（改）\n\n更新所有：\n\n```javascript\nUser.remove(conditions,doc,[options],[callback]);\n```\n\n根据指定条件更新一个：\n\n```javascript\nUser.FindOneAndUpdate([conditions],[update],[options],[callback]);\n```\n\n根据id更新一个：\n\n```javascript\n// 更新\t根据id来修改表数据\nUser.findByIdAndUpdate('5e6c5264fada77438c45dfcd', {\n\tusername: 'junjun'\n}, function(err, ret) {\n\tif (err) {\n\t\tconsole.log('更新失败');\n\t} else {\n\t\tconsole.log('更新成功');\n\t}\n});\n```\n\n\n\n### 查询（查）\n\n查询所有：\n\n```javascript\n// 查询所有\nUser.find(function(err,ret){\n\tif(err){\n\t\tconsole.log('查询失败');\n\t}else{\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n条件查询所有：\n\n```javascript\n// 根据条件查询\nUser.find({ username:'xiaoxiao' },function(err,ret){\n\tif(err){\n\t\tconsole.log('查询失败');\n\t}else{\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n条件查询单个：\n\n```javascript\n// 按照条件查询单个，查询出来的数据是一个对象（{}）\n// 没有条件查询使用findOne方法，查询的是表中的第一条数据\nUser.findOne({\n\tusername: 'xiaoxiao'\n}, function(err, ret) {\n\tif (err) {\n\t\tconsole.log('查询失败');\n\t} else {\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n# 使用Node操作MySQL数据库\n\n文档：https://www.npmjs.com/package/mysql\n\n安装：\n\n```shell\nnpm install --save  mysql\n```\n\n```javascript\n// 引入mysql包\nvar mysql      = require('mysql');\n\n// 创建连接\nvar connection = mysql.createConnection({\n  host     : 'localhost',\t//本机\n  user     : 'me',\t\t//账号root\n  password : 'secret',\t//密码12345\n  database : 'my_db'\t//数据库名\n});\n \n// 连接数据库\t（打开冰箱门）\nconnection.connect();\n \n//执行数据操作\t（把大象放到冰箱）\nconnection.query('SELECT * FROM `users` ', function (error, results, fields) {\n  if (error) throw error;//抛出异常阻止代码往下执行\n  // 没有异常打印输出结果\n  console.log('The solution is: ',results);\n});\n\n//关闭连接\t（关闭冰箱门）\nconnection.end();\n```\n\n\n\n\n\n# 异步编程\n\n## 回调函数\n\n不成立的情况下：\n\n```javascript\nfunction add(x,y){\n    console.log(1);\n    setTimeout(function(){\n        console.log(2);\n        var ret = x + y;\n        return ret;\n    },1000);\n    console.log(3);\n    //到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined\n}\n\nconsole.log(add(2,2));\n// 结果是 1 3 undefined 4\n```\n\n\n\n使用回调函数解决：\n\n回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）\n\n```javascript\nvar ret;\nfunction add(x,y,callback){\n    // callback就是回调函数\n    // var x = 10;\n    // var y = 20;\n    // var callback = function(ret){console.log(ret);}\n    console.log(1);\n    setTimeout(function(){\n        var ret = x + y;\n        callback(ret);\n    },1000);\n    console.log(3);\n}\nadd(10,20,function(ret){\n    console.log(ret);\n});\n```\n\n\n\n注意：\n\n​\t凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）\n\n​\t这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)\n\najax:\n\n基于原生XMLHttpRequest封装get方法：\n\n```javascript\nvar oReq = new XMLHttpRequest();\n// 当请求加载成功要调用指定的函数\noReq.onload = function(){\n    console.log(oReq.responseText);\n}\noReq.open(\"GET\", \"请求路径\",true);\noReq.send();\n```\n\n```javascript\nfunction get(url,callback){\n    var oReq = new XMLHttpRequest();\n    // 当请求加载成功要调用指定的函数\n    oReq.onload = function(){\n        //console.log(oReq.responseText);\n        callback(oReq.responseText);\n    }\n    oReq.open(\"GET\", url,true);\n    oReq.send();\n}\nget('data.json',function(data){\n    console.log(data);\n});\n```\n\n## Promise\n\ncallback  hell（回调地狱）:\n\n\n\n文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('./data/a.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n});\n\nfs.readFile('./data/b.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n});\n```\n\n通过回调嵌套的方式来保证顺序：\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('./data/a.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n\tfs.readFile('./data/b.text','utf8',function(err,data){\n\t\tif(err){\n\t\t\t// 1 读取失败直接打印输出读取失败\n\t\t\treturn console.log('读取失败');\n\t\t\t// 2 抛出异常\n\t\t\t// \t\t阻止程序的执行\n\t\t\t// \t\t把错误信息打印到控制台\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(data);\n\t\tfs.readFile('./data/a.text','utf8',function(err,data){\n\t\t\tif(err){\n\t\t\t\t// 1 读取失败直接打印输出读取失败\n\t\t\t\treturn console.log('读取失败');\n\t\t\t\t// 2 抛出异常\n\t\t\t\t// \t\t阻止程序的执行\n\t\t\t\t// \t\t把错误信息打印到控制台\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log(data);\n\t\t});\n\t});\n});\n```\n\n为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:`Promise`。\n\n- Promise：承诺，保证\n- Promise本身不是异步的，但往往都是内部封装一个异步任务\n\n\n\n基本语法：\n\n```javascript\n// 在EcmaScript 6中新增了一个API Promise\n// Promise 是一个构造函数\n\nvar fs = require('fs');\n// 1 创建Promise容器\t\tresolve:解决   reject：失败\nvar p1 = new Promise(function(resolve, reject) {\n\tfs.readFile('./a.text', 'utf8', function(err, data) {\n\t\tif (err) {\n\t\t\t// console.log(err);\n\t\t\t// 把容器的Pending状态变为rejected\n\t\t\treject(err);\n\t\t} else {\n\t\t\t// console.log(data);\n\t\t\t// 把容器的Pending状态变为resolve\n\t\t\tresolve(1234);\n\t\t}\n\t});\n});\n\n// 当p1成功了，然后就（then）做指定的操作\n// then方法接收的function就是容器中的resolve函数\np1\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t}, function(err) {\n\t\tconsole.log('读取文件失败了', err);\n\t});\n\n```\n\n\n\n链式循环：\n\n封装Promise的`readFile`：\n\n```javascript\nvar fs = require('fs');\n\nfunction pReadFile(filePath) {\n\treturn new Promise(function(resolve, reject) {\n\t\tfs.readFile(filePath, 'utf8', function(err, data) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(data);\n\t\t\t}\n\t\t});\n\t});\n}\n\npReadFile('./a.txt')\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t\treturn pReadFile('./b.txt');\n\t})\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t\treturn pReadFile('./a.txt');\n\t})\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t})\n\n```\n\nmongoose所有的API都支持Promise：\n\n```javascript\n// 查询所有\nUser.find()\n\t.then(function(data){\n        console.log(data)\n    })\n```\n\n注册：\n\n```javascript\nUser.findOne({username:'admin'},function(user){\n    if(user){\n        console.log('用户已存在')\n    } else {\n        new User({\n             username:'aaa',\n             password:'123',\n             email:'fffff'\n        }).save(function(){\n            console.log('注册成功');\n        })\n    }\n})\n```\n\n\n\n```javascript\nUser.findOne({\n    username:'admin'\n})\n    .then(function(user){\n        if(user){\n            // 用户已经存在不能注册\n            console.log('用户已存在');\n        }\n        else{\n            // 用户不存在可以注册\n            return new User({\n                username:'aaa',\n                password:'123',\n                email:'fffff'\n            }).save();\n        }\n    })\n    .then(funciton(ret){\n\t\tconsole.log('注册成功');\n    })\n```\n\n\n\n## Generator\n\nasync函数\n\n\n\n# 其他\n\n## 修改完代码自动重启\n\n我们在这里可以使用一个第三方命名行工具：`nodemon`来帮助我们解决频繁修改代码重启服务器的问题。\n\n`nodemon`是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：\n\n```javascript\n#在任意目录执行该命令都可以\n#也就是说，所有需要 --global安装的包都可以在任意目录执行\nnpm install --global nodemon\nnpm install -g nodemon\n\n#如果安装不成功的话，可以使用cnpm安装\ncnpm install -g nodemon\n```\n\n安装完毕之后使用：\n\n```javascript\nnode app.js\n\n#使用nodemon\nnodemon app.js\n```\n\n只要是通过`nodemon`启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。\n\n## 封装异步API\n\n回调函数：获取异步操作的结果\n\n```javascript\nfunction fn(callback){\n    // var callback = funtion(data){ console.log(data); }\n\tsetTimeout(function(){\n        var data = 'hello';\n        callback(data);\n    },1000);\n}\n// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取\nfn(function(data){\n    console.log(data);\n})\n```\n\n## 数组的遍历方法，都是对函数作为一种参数\n\n\n\n## EcmaScript 6\n\n> 参考文档：https://es6.ruanyifeng.com/\n\n# 项目案例\n\n## 目录结构\n\n```javascript\n.\napp.js\t项目的入口文件\ncontrollers\nmodels\t存储使用mongoose设计的数据模型\nnode_modules\t第三方包\npackage.json\t包描述文件\npackage-lock.json\t第三方包版本锁定文件（npm5之后才有）\npublic\t公共静态资源\nroutes\nviews\t存储视图目录\n```\n\n## 模板页\n\n- 子模板\n- 模板继承\n\n## 路由设计\n\n| 路由            | 方法 | get参数 | post参数                | 是否需要登录 | 备注         |\n| --------------- | ---- | ------- | ----------------------- | ------------ | ------------ |\n| /               | get  |         |                         |              | 渲染首页     |\n| /register(登录) | get  |         |                         |              | 渲染注册页面 |\n| /register       | post |         | email,nickname,password |              | 处理注册请求 |\n| /login          | get  |         |                         |              | 渲染登陆界面 |\n| /login          | post |         | email,password          |              | 处理登录请求 |\n| /loginout       | get  |         |                         |              | 处理退出请求 |\n|                 |      |         |                         |              |              |\n\n## 模型设计\n\n## 功能实现\n\n## 步骤\n\n- 创建目录结构\n- 整合静态也-模板页\n  - include\n  - block\n  - extend\n- 设计用户登陆，退出，注册的路由\n- 用户注册\n  - 先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）\n  - 服务端\n    - 获取从客户端收到的数据\n    - 操作数据库\n      - 如果有错，发送500告诉客户端服务器错了‘\n      - 其他的根据业务发送不同的响应数据\n- 登录\n- 退出\n\n# Express中间件\n\n## 中间件的概念\n\n> 参考文档：http://expressjs.com/en/guide/using-middleware.html\n\n\n\n中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。\n\n说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。\n\n把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。\n\n```javascript\nvar http = require('http');\nvar url = require('url');\n\nvar cookie = require('./expressPtoject/cookie');\nvar query = require('./expressPtoject/query');\nvar postBody = require('./expressPtoject/post-body');\n\nvar server = http.createServer(function(){\n\t// 解析请求地址中的get参数\n\t// var obj = url.parse(req.url,true);\n\t// req.query = obj.query;\n\tquery(req,res);\t//中间件\n\t\n\t// 解析请求地址中的post参数\n\treq.body = {\n\t\tfoo:'bar'\n\t}\n});\n\nif(req.url === 'xxx'){\n\t// 处理请求\n\t...\n}\n\nserver.listen(3000,function(){\n\tconsole.log('3000 runing...');\n});\n```\n\n同一个请求对象所经过的中间件都是同一个请求对象和响应对象。\n\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/abc',function(req,res,next){\n\t// 同一个请求的req和res是一样的，\n\t// 可以前面存储下面调用\n\tconsole.log('/abc');\n\t// req.foo = 'bar';\n\treq.body = {\n\t\tname:'xiaoxiao',\n\t\tage:18\n\t}\n\tnext();\n});\napp.get('/abc',function(req,res,next){\n\t// console.log(req.foo);\n\tconsole.log(req.body);\n\tconsole.log('/abc');\n});\napp.listen(3000, function() {\n\tconsole.log('app is running at port 3000.');\n});\n\n```\n\n\n\n## 中间件的分类:\n\n### 应用程序级别的中间件\n\n万能匹配（不关心任何请求路径和请求方法的中间件）：\n\n```javascript\napp.use(function(req,res,next){\n    console.log('Time',Date.now());\n    next();\n});\n```\n\n关心请求路径和请求方法的中间件：\n\n```javascript\napp.use('/a',function(req,res,next){\n    console.log('Time',Date.now());\n    next();\n});\n```\n\n### 路由级别的中间件\n\n严格匹配请求路径和请求方法的中间件\n\nget:\n\n```javascript\napp.get('/',function(req,res){\n\tres.send('get');\n});\n```\n\npost：\n\n```javascript\napp.post('/a',function(req,res){\n\tres.send('post');\n});\n```\n\nput:\n\n```javascript\napp.put('/user',function(req,res){\n\tres.send('put');\n});\n```\n\ndelete:\n\n```javascript\napp.delete('/delete',function(req,res){\n\tres.send('delete');\n});\n```\n\n### 总\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// 中间件：处理请求，本质就是个函数\n// 在express中，对中间件有几种分类\n\n// 1 不关心任何请求路径和请求方法的中间件\n// 也就是说任何请求都会进入这个中间件\n// 中间件本身是一个方法，该方法接收三个参数\n// Request 请求对象\n// Response 响应对象\n// next 下一个中间件\n// // 全局匹配中间件\n// app.use(function(req, res, next) {\n// \tconsole.log('1');\n// \t// 当一个请求进入中间件后\n// \t// 如果需要请求另外一个方法则需要使用next（）方法\n// \tnext();\n// \t// next是一个方法，用来调用下一个中间件\n//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）\n// });\n// app.use(function(req, res, next) {\n// \tconsole.log('2');\n// });\n\n// // 2 关心请求路径的中间件\n// // 以/xxx开头的中间件\n// app.use('/a',function(req, res, next) {\n// \tconsole.log(req.url);\n// });\n\n// 3 严格匹配请求方法和请求路径的中间件\napp.get('/',function(){\n\tconsole.log('/');\n});\napp.post('/a',function(){\n\tconsole.log('/a');\n});\n\napp.listen(3000, function() {\n\tconsole.log('app is running at port 3000.');\n});\n\n```\n\n## 错误处理中间件\n\n```javascript\napp.use(function(err,req,res,next){\n    console.error(err,stack);\n    res.status(500).send('Something broke');\n});\n```\n\n配置使用404中间件：\n\n```javascript\napp.use(function(req,res){\n    res.render('404.html');\n});\n```\n\n配置全局错误处理中间件:\n\n```javascript\napp.get('/a', function(req, res, next) {\n\tfs.readFile('.a/bc', funtion() {\n\t\tif (err) {\n        \t// 当调用next()传参后，则直接进入到全局错误处理中间件方法中\n        \t// 当发生全局错误的时候，我们可以调用next传递错误对象\n        \t// 然后被全局错误处理中间件匹配到并进行处理\n\t\t\tnext(err);\n\t\t}\n\t})\n});\n//全局错误处理中间件\napp.use(function(err,req,res,next){\n    res.status(500).json({\n        err_code:500,\n        message:err.message\n    });\n});\n```\n\n\n\n\n\n## 内置中间件\n\n- express.static(提供静态文件)\n  - http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express\n\n## 第三方中间件\n\n> 参考文档：http://expressjs.com/en/resources/middleware.html\n\n- body-parser\n- compression\n- cookie-parser\n- mogran\n- response-time\n- server-static\n- session\n\n<style>\n    .post-primary{\n        display: none;\n    }\n</style>\n\n","source":"_posts/node-note.md","raw":"---\ntitle: Node笔记\ndate: 2020-05-10 11:25:48\ntags: 笔记\ntoc: true\ncategories: node\n---\n\n<div class='notification is-warning post-primary'>\n    Node的学习笔记\n</div>\n\n\n\n<!--more-->\n\n## 为什么要学习Node.js\n\n- 企业需求\n  - 具有服务端开发经验更改\n  - front-end\n  - back-end\n  - 全栈开发工程师\n  - 基本的网站开发能力\n    - 服务端\n    - 前端\n    - 运维部署\n  - 多人社区\n\n## Node.js是什么\n\n- Node.js是JavaScript 运行时\n- 通俗易懂的讲，Node.js是JavaScript的运行平台\n- Node.js既不是语言，也不是框架，它是一个平台\n- 浏览器中的JavaScript\n  - EcmaScript\n    - 基本语法\n    - if\n    - var\n    - function\n    - Object\n    - Array\n  - Bom\n  - Dom\n- Node.js中的JavaScript\n  - 没有Bom，Dom\n  - EcmaScript\n  - 在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API\n    - 例如文件的读写\n    - 网络服务的构建\n    - 网络通信\n    - http服务器\n- 构建与Chrome的V8引擎之上\n  - 代码只是具有特定格式的字符串\n  - 引擎可以认识它，帮你解析和执行\n  - Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的\n  - Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境\n- Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.\n  -  envent-driven\t事件驱动\n  -  non-blocking I/O mode   非阻塞I/O模型（异步）\n  -  ightweight and efficent.   轻量和高效\n- Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world\n  - npm 是世界上最大的开源生态系统\n  - 绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用\n  - npm install jquery\n\n## Node能做什么\n\n- web服务器后台\n- 命令行工具\n  - npm(node)\n  - git(c语言)\n  - hexo（node）\n  - ...\n- 对于前端工程师来讲，接触最多的是它的命令行工具\n  - 自己写的很少，主要是用别人第三方的\n  - webpack\n  - gulp\n  - npm\n\n# 起步\n\n## 安装Node环境\n\n- 查看Node环境的版本号\n- 下载：https://nodejs.org/en/\n- 安装：\n  - 傻瓜式安装，一路`next`\n  - 安装过再次安装会升级\n- 确认Node环境是否安装成功\n  - 查看node的版本号：`node --version`\n  - 或者`node -v`\n- 配置环境变量\n\n## 解析执行JavaScript\n\n1. 创建编写JavaScript脚本文件\n2. 打开终端，定位脚本文件的所属目录\n3. 输入`node  文件名`执行对应的文件\n\n注意：文件名不要用`node.js`来命名，也就是说除了`node`这个名字随便起，最好不要使用中文。\n\n## 文件的读写\n\n文件读取:\n\n```javascript\n//浏览器中的JavaScript是没有文件操作能力的\n//但是Node中的JavaScript具有文件操作能力\n//fs是file-system的简写，就是文件系统的意思\n//在Node中如果想要进行文件的操作就必须引用fs这个核心模块\n//在fs这个和兴模块中，就提供了人所有文件操作相关的API\n//例如 fs.readFile就是用来读取文件的\n\n//  1.使用fs核心模块\nvar fs = require('fs');\n\n// 2.读取文件\nfs.readFile('./data/a.txt',function(err,data){\n   if(err){\n        console.log('文件读取失败');\n   }\n    else{\n         console.log(data.toString());\n    }\n})\n```\n\n文件写入：\n\n```javascript\n//  1.使用fs核心模块\nvar fs = require('fs');\n\n// 2.将数据写入文件\nfs.writeFile('./data/a.txt','我是文件写入的信息',function(err,data){\n   if(err){\n        console.log('文件写入失败');\n   }\n    else{\n         console.log(data.toString());\n    }\n})\n```\n\n## http\n\n服务器：\n\n```javascript\n// 1.加载http核心模块\nvar http = require('http');\n\n// 2.使用http.createServer()创建一个web服务器\nvar server = http.createServer();\n\n// 3.服务器要做的事儿\n// 提供服务：对数据服务\n// 发请求\n//\t接收请求\n//\t处理请求\n//\t反馈（发送响应）\n//\t当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数\nserver.on('request',function(){\n    console.log('收到客户的请求了')\n})\n\n// 4.绑定端口号，启动服务\nserver.listen(3000,function(){\n    console.log('runing...')\n})\n\n```\n\n# Node中的模块系统\n\n使用Node编写应用程序主要就是在使用：\n\n- EcmaScript语言\n  - 和浏览器一样，在Node中没有Bom和Dom\n\n- 核心模块\n  - 文件操作的fs\n  - http服务操作的http\n  - url路径操作模块\n  - path路径处理模块\n  - os操作系统信息\n- 第三方模块\n  - art-template\n  - 必须通过npm来下载才可以使用\n- 自己写的模块\n  - 自己创建的文件\n\n\n\n## 什么是模块化\n\n- 文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】\n- 通信规则\n  - 加载require\n  - 导出exports\n\n## CommonJS模块规范\n\n在Node中的JavaScript还有一个重要的概念，模块系统。\n\n- 模块作用域\n\n- 使用require方法来加载模块\n\n- 使用exports接口对象来导出模板中的成员\n\n  ### 加载`require`\n\n  语法：\n\n  ~~~java\n  var 自定义变量名 = require('模块')\n  ~~~\n\n  作用：\n\n  - 执行被加载模块中的代码\n  - 得到被加载模块中的`exports`导出接口对象\n\n  ### 导出`exports`\n\n  - Node中是模块作用域，默认文件中所有的成员只在当前模块有效\n\n  - 对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到`exports`接口对象中就可以了\n\n    导出多个成员（必须在对象中）：\n\n    ```javascript\n    exports.a = 123;\n    exports.b = function(){\n        console.log('bbb')\n    };\n    exports.c = {\n        foo:\"bar\"\n    };\n    exports.d = 'hello';\n    ```\n\n    \n\n    导出单个成员（拿到的就是函数，字符串）：\n\n    ```javascript\n    module.exports = 'hello';\n    ```\n\n    以下情况会覆盖：\n\n    ```javascript\n    module.exports = 'hello';\n    //后者会覆盖前者\n    module.exports = function add(x,y) {\n        return x+y;\n    }\n    ```\n\n    也可以通过以下方法来导出多个成员：\n\n    ```javascript\n    module.exports = {\n        foo = 'hello',\n        add:function(){\n            return x+y;\n        }\n    };\n    ```\n\n## 模块原理\n\nexports和`module.exports`的一个引用：\n\n```javascript\nconsole.log(exports === module.exports);\t//true\n\nexports.foo = 'bar';\n\n//等价于\nmodule.exports.foo = 'bar';\n```\n\n`当给exports重新赋值后，exports！= module.exports.`\n\n`最终return的是module.exports,无论exports中的成员是什么都没用。`\n\n```javascript\n真正去使用的时候：\n\t导出单个成员：exports.xxx = xxx;\n\t导出多个成员：module.exports 或者 modeule.exports = {};\n```\n\n## 总结\n\n```javascript\n// 引用服务\nvar http = require('http');\nvar fs = require('fs');\n// 引用模板\nvar template = require('art-template');\n// 创建服务\nvar server = http.createServer();\n// 公共路径\nvar wwwDir = 'D:/app/www';\nserver.on('request', function (req, res) {\n    var url = req.url;\n    // 读取文件\n    fs.readFile('./template-apche.html', function (err, data) {\n        if (err) {\n            return res.end('404 Not Found');\n        }\n        fs.readdir(wwwDir, function (err, files) {\n            if (err) {\n                return res.end('Can not find www Dir.')\n            }\n            // 使用模板引擎解析替换data中的模板字符串\n            // 去xmpTempleteList.html中编写模板语法\n            var htmlStr = template.render(data.toString(), { \n                title: 'D:/app/www/ 的索引',\n                files:files \n            });\n            // 发送响应数据\n            res.end(htmlStr);\n        })\n    })\n});\nserver.listen(3000, function () {\n    console.log('running....');\n})\n```\n\n```javascript\n1.jQuery中的each 和 原生JavaScript方法forEach的区别：\n\t提供源头：\n    \t原生js是es5提供的（不兼容IE8）,\n        jQuery的each是jQuery第三方库提供的（如果要使用需要用2以下的版本也就是1.版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用\n2.模块中导出多个成员和导出单个成员\n3.301和302的区别：\n\t301永久重定向,浏览器会记住\n    302临时重定向\n4.exports和module.exports的区别:\n\t每个模块中都有一个module对象\n    module对象中有一个exports对象\n    我们可以把需要导出的成员都挂载到module.exports接口对象中\n\t也就是`module.exports.xxx = xxx`的方式\n    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫`exports`\n    `exports === module.exports`结果为true,所以完全可以`exports.xxx = xxx`\n    当一个模块需要导出单个成员的时候必须使用`module.exports = xxx`的方式，=,使用`exports = xxx`不管用,因为每个模块最终return的是module.exports,而exports只是module.exports的一个引用,所以`exports`即使重新赋值,也不会影响`module.exports`。\n    有一种赋值方式比较特殊：`exports = module.exports`这个用来新建立引用关系的。\n    \n```\n\n# require的加载规则\n\n- 核心模块\n\n  - 模块名\n\n- 第三方模块\n\n  - 模块名\n\n- 用户自己写的\n\n  - 路径\n\n\n\n\n## require的加载规则：\n\n- 优先从缓存加载\n\n- 判断模块标识符\n\n  - 核心模块\n  - 自己写的模块（路径形式的模块）\n  - 第三方模块（node_modules）\n    - 第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）\n    - npm\n      - 开发人员可以把写好的框架库发布到npm上\n      - 使用者通过npm命令来下载\n    - 使用方式：`var 名称 = require('npm install【下载包】 的包名')`\n      - node_modules/express/package.json main\n      - 如果package.json或者main不成立，则查找被选择项：index.js\n      - 如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错\n\n\n\n```javascript\n// 如果非路径形式的标识\n// 路径形式的标识：\n    // ./  当前目录 不可省略\n    // ../  上一级目录  不可省略\n    //  /xxx也就是D:/xxx\n    // 带有绝对路径几乎不用（D:/a/foo.js）\n// 首位表示的是当前文件模块所属磁盘根目录\n// require('./a'); \n\n\n// 核心模块\n// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了\nrequire('fs'); \n\n// 第三方模块\n// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用\n// 第三方包的名字不可能和核心模块的名字是一样的\n// 既不是核心模块，也不是路径形式的模块\n//      先找到当前文所述目录的node_modules\n//      然后找node_modules/art-template目录\n//      node_modules/art-template/package.json\n//      node_modules/art-template/package.json中的main属性\n//      main属性记录了art-template的入口模块\n//      然后加载使用这个第三方包\n//      实际上最终加载的还是文件\n\n//      如果package.json不存在或者mian指定的入口模块不存在\n//      则node会自动找该目录下的index.js\n//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件\n//      \n        // 如果条件都不满足则会进入上一级目录进行查找\n// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件\nvar template = require('art-template');\n\n```\n\n## 模块标识符中的`/`和文件操作路径中的`/`\n\n文件操作路径：\n\n```javascript\n// 咱们所使用的所有文件操作的API都是异步的\n// 就像ajax请求一样\n// 读取文件\n// 文件操作中 ./ 相当于当前模块所处磁盘根目录\n// ./index.txt    相对于当前目录\n// /index.txt    相对于当前目录\n// /index.txt   绝对路径,当前文件模块所处根目录\n// d:express/index.txt   绝对路径\nfs.readFile('./index.txt',function(err,data){\n    if(err){\n       return  console.log('读取失败');\n    }\n    console.log(data.toString());\n})\n```\n\n模块操作路径：\n\n```javascript\n// 在模块加载中，相对路径中的./不能省略\n// 这里省略了.也是磁盘根目录\nrequire('./index')('hello')\n```\n\n\n\n# npm\n\n- node package manage(node包管理器)\n- 通过npm命令安装jQuery包（npm install --save jquery），在安装时加上--save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）\n\n### npm网站\n\n> ​\tnpmjs.com\t网站   是用来搜索npm包的\n\n### npm命令行工具\n\nnpm是一个命令行工具，只要安装了node就已经安装了npm。\n\nnpm也有版本概念，可以通过`npm --version`来查看npm的版本\n\n升级npm(自己升级自己)：\n\n```javascript\nnpm install --global npm\n```\n\n### 常用命令\n\n- npm init(生成package.json说明书文件)\n  - npm init -y(可以跳过向导，快速生成)\n- npm install\n  - 一次性把dependencies选项中的依赖项全部安装\n  - 简写（npm i）\n- npm install 包名\n  - 只下载\n  - 简写（npm i 包名）\n- npm install --save 包名\n  - 下载并且保存依赖项（package.json文件中的dependencies选项）\n  - 简写（npm i  包名）\n- npm uninstall 包名\n  - 只删除，如果有依赖项会依然保存\n  - 简写（npm un 包名）\n- npm uninstall --save 包名\n  - 删除的同时也会把依赖信息全部删除\n  - 简写（npm un 包名）\n- npm help\n  - 查看使用帮助\n- npm 命令 --help\n  - 查看具体命令的使用帮助（npm uninstall --help）\n\n### 解决npm被墙问题\n\nnpm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。\n\n> https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。\n\n安装淘宝的cnpm：\n\n```javascript\nnpm install -g cnpm --registry=https://registry.npm.taobao.org;\n```\n\n\n\n```shell\n#在任意目录执行都可以\n#--global表示安装到全局，而非当前目录\n#--global不能省略，否则不管用\nnpm install --global cnpm\n```\n\n安装包的时候把以前的`npm`替换成`cnpm`。\n\n```shell\n#走国外的npm服务器下载jQuery包，速度比较慢\nnpm install jQuery;\n\n#使用cnpm就会通过淘宝的服务器来下载jQuery\ncnpm install jQuery;\n```\n\n如果不想安装`cnpm`又想使用淘宝的服务器来下载：\n\n```shell\nnpm install jquery --registry=https://npm.taobao.org;\n```\n\n但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：\n\n```shell\nnpm config set registry https://npm.taobao.org;\n\n#查看npm配置信息\nnpm config list;\n```\n\n只要经过上面的配置命令，则以后所有的`npm install`都会通过淘宝的服务器来下载\n\n# package.json\n\n每一个项目都要有一个`package.json`文件（包描述文件，就像产品的说明书一样）\n\n这个文件可以通过`npm init`自动初始化出来\n\n```javascript\nD:\\code\\node中的模块系统>npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (node中的模块系统)\nSorry, name can only contain URL-friendly characters.\npackage name: (node中的模块系统) cls\nversion: (1.0.0)\ndescription: 这是一个测试项目\nentry point: (main.js)\ntest command:\ngit repository:\nkeywords:\nauthor: xiaochen\nlicense: (ISC)\nAbout to write to D:\\code\\node中的模块系统\\package.json:\n\n{\n  \"name\": \"cls\",\n  \"version\": \"1.0.0\",\n  \"description\": \"这是一个测试项目\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"xiaochen\",\n  \"license\": \"ISC\"\n}\n\n\nIs this OK? (yes) yes\n```\n\n对于目前来讲，最有用的是`dependencies`选项，可以用来帮助我们保存第三方包的依赖信息。\n\n如果`node_modules`删除了也不用担心，只需要在控制面板中`npm install`就会自动把`package.json`中的`dependencies`中所有的依赖项全部都下载回来。\n\n- 建议每个项目的根目录下都有一个`package.json`文件\n- 建议执行`npm install 包名`的时候都加上`--save`选项，目的是用来保存依赖信息\n\n## package.json和package-lock.json\n\nnpm 5以前是不会有`package-lock.json`这个文件\n\nnpm5以后才加入这个文件\n\n当你安装包的时候，npm都会生成或者更新`package-lock.json`这个文件\n\n- npm5以后的版本安装都不要加`--save`参数，它会自动保存依赖信息\n- 当你安装包的时候，会自动创建或者更新`package-lock.json`文件\n- `package-lock.json`这个文件会包含`node_modules`中所有包的信息（版本，下载地址。。。）\n  - 这样的话重新`npm install`的时候速度就可以提升\n- 从文件来看，有一个`lock`称之为锁\n  - 这个`lock`使用来锁版本的\n  - 如果项目依赖了`1.1.1`版本\n  - 如果你重新install其实会下载最细版本，而不是`1.1.1`\n  - ``package-lock.json``的另外一个作用就是锁定版本号，防止自动升级\n\n## path路径操作模块\n\n> 参考文档：https://nodejs.org/docs/latest-v13.x/api/path.html\n\n- path.basename：获取路径的文件名，默认包含扩展名\n- path.dirname：获取路径中的目录部分\n- path.extname：获取一个路径中的扩展名部分\n- path.parse：把路径转换为对象\n  - root：根路径\n  - dir：目录\n  - base：包含后缀名的文件名\n  - ext：后缀名\n  - name：不包含后缀名的文件名\n- path.join：拼接路径\n- path.isAbsolute：判断一个路径是否为绝对路径\n\n# Node中的其它成员(__dirname,__filename)\n\n在每个模块中，除了`require`,`exports`等模块相关的API之外，还有两个特殊的成员：\n\n- `__dirname`，是一个成员，可以用来**动态**获取当前文件模块所属目录的绝对路径\n\n- `__filename`，可以用来**动态**获取当前文件的绝对路径（包含文件名）\n\n- `__dirname`和`filename`是不受执行node命令所属路径影响的\n\n在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。\n\n所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。\n\n就可以使用`__dirname`或者`__filename`来帮助我们解决这个问题\n\n在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用`path.join()`来辅助拼接\n\n```javascript\nvar fs = require('fs');\nvar path = require('path');\n\n// console.log(__dirname + 'a.txt');\n// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径\nfs.readFile(path.join(__dirname + '/a.txt'),'utf8',function(err,data){\n\tif(err){\n\t\tthrow err\n\t}\n\tconsole.log(data);\n});\n```\n\n> 补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）\n\n> **注意：**\n>\n> **模块中的路径标识和文件操作中的相对路径标识不一致**\n>\n> **模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响**\n\n\n\n# Express（快速的）\n\n作者：Tj\n\n原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。\n\n在node中有很多web开发框架。主要学习express\n\n- `http://expressjs.com/`,其中主要封装的是http。\n\n- ```javascript\n  // 1 安装\n  // 2 引包\n  var express = require('express');\n  // 3 创建服务器应用程序\n  //      也就是原来的http.createServer();\n  var app = express();\n  \n  // 公开指定目录\n  // 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源\n  // 在Express中开放资源就是一个API的事\n  app.use('/public/',express.static('/public/'));\n  \n  //模板引擎在Express中开放模板也是一个API的事\n  \n  // 当服务器收到get请求 / 的时候，执行回调处理函数\n  app.get('/',function(req,res){\n      res.send('hello express');\n  })\n  \n  // 相当于server.listen\n  app.listen(3000,function(){\n      console.log('app is runing at port 3000');\n  })\n  ```\n\n\n### 学习Express\n\n#### 起步\n\n##### 安装：\n\n```javascript\ncnpm install express\n```\n\n##### hello world:\n\n```javascript\n// 引入express\nvar express = require('express');\n\n// 1. 创建app\nvar app = express();\n\n//  2. \napp.get('/',function(req,res){\n    // 1\n    // res.write('Hello');\n    // res.write('World');\n    // res.end()\n\n    // 2\n    // res.end('hello world');\n\n    // 3\n    res.send('hello world');\n})\n\napp.listen(3000,function(){\n    console.log('express app is runing...');\n})\n```\n\n##### 基本路由\n\n路由：\n\n- 请求方法\n\n- 请求路径\n- 请求处理函数\n\nget:\n\n```javascript\n//当你以get方法请求/的时候，执行对应的处理函数\napp.get('/',function(req,res){\n    res.send('hello world');\n})\n```\n\npost:\n\n```javascript\n//当你以post方法请求/的时候，执行对应的处理函数\napp.post('/',function(req,res){\n    res.send('hello world');\n})\n```\n\n##### Express静态服务API\n\n```javascript\n// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)\napp.use(express.static('public'));\n// 这种方式可以省略请求路径前缀\napp.use(express.static('files'));\n\n// 这种方式相当于static为public目录的别名\napp.use('/stataic',express.static('public'));\n```\n\n```javascript\n// 引入express\nvar express = require('express');\n\n// 创建app\nvar app = express();\n\n// 开放静态资源\n// 1.当以/public/开头的时候，去./public/目录中找对应资源\n// 访问：http://127.0.0.1:3000/public/login.html\napp.use('/public/',express.static('./public/')); \n\n// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问\n// 访问：http://127.0.0.1:3000/login.html\n// app.use(express.static('./public/'));   \n\n// 3.访问：http://127.0.0.1:3000/a/login.html\n// a相当于public的别名\n// app.use('/a/',express.static('./public/')); \n\n//  \napp.get('/',function(req,res){\n    res.end('hello world');\n});\n\napp.listen(3000,function(){\n    console.log('express app is runing...');\n});\n```\n\n##### 在Express中配置使用`art-templete`模板引擎\n\n- [art-template官方文档](https://aui.github.io/art-template/)\n- 在node中，有很多第三方模板引擎都可以使用，不是只有`art-template`\n  - 还有ejs，jade（pug），handlebars，nunjucks\n\n安装：\n\n```shell\nnpm install --save art-template\nnpm install --save express-art-template\n\n//两个一起安装\nnpm i --save art-template express-art-template\n```\n\n配置：\n\n```javascript\napp.engine('html', require('express-art-template'));\n```\n\n使用：\n\n```javascript\napp.get('/',function(req,res){\n    // express默认会去views目录找index.html\n    res.render('index.html',{\n           title:'hello world'     \n    });\n})\n```\n\n如果希望修改默认的`views`视图渲染存储目录，可以：\n\n```javascript\n// 第一个参数views千万不要写错\napp.set('views',目录路径);\n```\n\n##### 在Express中获取表单请求数据\n\n###### 获取get请求数据：\n\nExpress内置了一个api，可以直接通过`req.query`来获取数据\n\n```javascript\n// 通过requery方法获取用户输入的数据\n// req.query只能拿到get请求的数据\n var comment = req.query;\n```\n\n###### 获取post请求数据：\n\n在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包`body-parser`来获取数据。\n\n安装：\n\n```javascript\nnpm install --save body-parser;\n```\n\n配置：\n\n// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）\n\n```javascript\nvar express = require('express')\n// 引包\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// 配置body-parser\n// 只要加入这个配置，则在req请求对象上会多出来一个属性：body\n// 也就是说可以直接通过req.body来获取表单post请求数据\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n```\n\n使用：\n\n```javascript\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  // 可以通过req.body来获取表单请求数据\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```\n\n### 在Express中配置使用`express-session`插件操作\n\n> 参考文档：https://github.com/expressjs/session\n\n安装：\n\n```javascript\nnpm install express-session\n```\n\n配置：\n\n```javascript\n//该插件会为req请求对象添加一个成员:req.session默认是一个对象\n//这是最简单的配置方式\n//Session是基于Cookie实现的\napp.use(session({\n  //配置加密字符串，他会在原有的基础上和字符串拼接起来去加密\n  //目的是为了增加安全性，防止客户端恶意伪造\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true,//无论是否适用Session，都默认直接分配一把钥匙\n  cookie: { secure: true }\n}))\n```\n\n使用：\n\n```javascript\n// 读\n//添加Session数据\n//session就是一个对象\nreq.session.foo = 'bar';\n\n//写\n//获取session数据\nreq.session.foo\n\n//删\nreq.session.foo = null;\ndelete req.session.foo\n```\n\n提示：\n\n默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。\n\n### 利用Express实现ADUS项目\n\n#### 模块化思想\n\n模块如何划分:\n\n- 模块职责要单一\n\njavascript模块化：\n\n- Node 中的 CommonJS\n- 浏览器中的：\n  - AMD\trequire.js\n  - CMD     sea.js\n- es6中增加了官方支持\n\n#### 起步\n\n- 初始化\n- 模板处理\n\n#### 路由设计\n\n| 请求方法 | 请求路径         | get参数 | post参数                   | 备注             |\n| -------- | :--------------- | :------ | -------------------------- | :--------------- |\n| GET      | /students        |         |                            | 渲染首页         |\n| GET      | /students/new    |         |                            | 渲染添加学生页面 |\n| POST     | /students/new    |         | name,age,gender,hobbies    | 处理添加学生请求 |\n| GET      | /students/edit   | id      |                            | 渲染编辑页面     |\n| POST     | /students/edit   |         | id,name,age,gender,hobbies | 处理编辑请求     |\n| GET      | /students/delete | id      |                            | 处理删除请求     |\n\n#### 提取路由模块\n\nrouter.js:\n\n```javascript\n/**\n * router.js路由模块\n * 职责：\n *      处理路由\n *      根据不同的请求方法+请求路径设置具体的请求函数\n * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率\n */\nvar fs = require('fs');\n\n// Express专门提供了一种更好的方式\n// 专门用来提供路由的\nvar express = require('express');\n// 1 创建一个路由容器\nvar router = express.Router();\n// 2 把路由都挂载到路由容器中\n\nrouter.get('/students', function(req, res) {\n    // res.send('hello world');\n    // readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符\n    // 除了这样来转换，也可以通过data.toString（）来转换\n    fs.readFile('./db.json', 'utf8', function(err, data) {\n        if (err) {\n            return res.status(500).send('Server error.')\n        }\n        // 读取到的文件数据是string类型的数据\n        // console.log(data);\n        // 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象\n        var students = JSON.parse(data).students;\n        res.render('index.html', {\n            // 读取文件数据\n            students:students\n        })\n    })\n});\n\nrouter.get('/students/new',function(req,res){\n    res.render('new.html')\n});\n\nrouter.get('/students/edit',function(req,res){\n    \n});\n\nrouter.post('/students/edit',function(req,res){\n    \n});\n\nrouter.get('/students/delete',function(req,res){\n    \n});\n\n// 3 把router导出\nmodule.exports = router;\n\n```\n\napp.js:\n\n```javascript\nvar router = require('./router');\n\n// router(app);\n// 把路由容器挂载到app服务中\n// 挂载路由\napp.use(router);\n```\n\n\n\n#### 设计操作数据的API文件模块\n\nes6中的find和findIndex：\n\nfind接受一个方法作为参数，方法内部返回一个条件\n\nfind会便利所有的元素，执行你给定的带有条件返回值的函数\n\n符合该条件的元素会作为find方法的返回值\n\n如果遍历结束还没有符合该条件的元素，则返回undefined![image-20200313103810731](C:\\Users\\A\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200313103810731.png)\n\n```javascript\n/**\n * student.js\n * 数据操作文件模块\n * 职责：操作文件中的数据，只处理数据，不关心业务\n */\nvar fs = require('fs');\n /**\n  * 获取所有学生列表\n  * return []\n  */\nexports.find = function(){\n    \n}\n\n\n /**\n  * 获取添加保存学生\n  */\nexports.save = function(){\n        \n}\n\n/**\n * 更新学生\n */\nexports.update = function(){\n        \n}\n\n /**\n * 删除学生\n */\nexports.delete = function(){\n        \n}\n```\n\n#### 步骤\n\n- 处理模板\n- 配置静态开放资源\n- 配置模板引擎\n- 简单的路由，/studens渲染静态页出来\n- 路由设计\n- 提取路由模块\n- 由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js'\n- 先写好student.js文件结构\n  - 查询所有学生列别哦的API\n  - findById\n  - save\n  - updateById\n  - deleteById\n- 实现具体功能\n  - 通过路由收到请求\n  - 接受请求中的参数（get，post）\n    - req.query\n    - req.body\n  - 调用数据操作API处理数据\n  - 根据操作结果给客户端发送请求\n\n- 业务功能顺序\n  - 列表\n  - 添加\n  - 编辑\n  - 删除\n\n#### 子模板和模板的继承（模板引擎高级语法）【include，extend，block】\n\n注意:\n\n模板页：\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t<title>模板页</title>\n\t<link rel=\"stylesheet\" href=\"/node_modules/bootstrap/dist/css/bootstrap.css\"/>\n\t{{ block 'head' }}{{ /block }}\n</head>\n<body>\n\t<!-- 通过include导入公共部分 -->\n\t{{include './header.html'}}\n\t\n\t<!-- 留一个位置 让别的内容去填充 -->\n\t{{ block  'content' }}\n\t\t<h1>默认内容</h1>\n\t{{ /block }}\n\t\n\t<!-- 通过include导入公共部分 -->\n\t{{include './footer.html'}}\n\t\n\t<!-- 公共样式 -->\n\t<script src=\"/node_modules/jquery/dist/jquery.js\" ></script>\n\t<script src=\"/node_modules/bootstrap/dist/js/bootstrap.js\" ></script>\n\t{{ block 'script' }}{{ /block }}\n</body>\n</html>\n```\n\n模板的继承：\n\n​\theader页面：\n\n```javascript\n<div id=\"\">\n\t<h1>公共的头部</h1>\n</div>\n```\n\n​\tfooter页面：\n\n```javascript\n<div id=\"\">\n\t<h1>公共的底部</h1>\n</div>\n```\n\n模板页的使用：\n\n```javascript\n<!-- 继承(extend:延伸，扩展)模板也layout.html -->\n<!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 -->\n{{extend './layout.html'}}\n\n<!-- 向模板页面填充新的数据 -->\n<!-- 填充后就会替换掉layout页面content中的数据 -->\n<!-- style样式方面的内容 -->\n{{ block 'head' }}\n\t<style type=\"text/css\">\n\t\tbody{\n\t\t\tbackground-color: skyblue;\n\t\t}\n\t</style>\n{{ /block }}\n{{ block 'content' }}\n\t<div id=\"\">\n\t\t<h1>Index页面的内容</h1>\n\t</div>\n{{ /block }}\n<!-- js部分的内容 -->\n{{ block 'script' }}\n\t<script type=\"text/javascript\">\n\t\t\n\t</script>\n{{ /block }}\n```\n\n最终的显示效果：\n\n# MongoDB\n\n## 关系型和非关系型数据库\n\n### 关系型数据库（表就是关系，或者说表与表之间存在关系）。\n\n- 所有的关系型数据库都需要通过`sql`语言来操作\n- 所有的关系型数据库在操作之前都需要设计表结构\n- 而且数据表还支持约束\n  - 唯一的\n  - 主键\n  - 默认值\n  - 非空\n\n### 非关系型数据库\n\n- 非关系型数据库非常的灵活\n- 有的关系型数据库就是key-value对儿\n- 但MongDB是长得最像关系型数据库的非关系型数据库\n  - 数据库 -》 数据库\n  - 数据表 -》 集合（数组）\n  - 表记录 -》文档对象\n\n一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）\n\n```javascript\n{\n    qq:{\n       user:[\n           {},{},{}...\n       ]\n    }\n}\n```\n\n\n\n- 也就是说你可以任意的往里面存数据，没有结构性这么一说\n\n## 安装\n\n- 下载\n\n  - 下载地址：https://www.mongodb.com/download-center/community\n\n- 安装\n\n  ```javascript\n  npm i mongoose\n  ```\n\n- 配置环境变量\n\n- 最后输入`mongod --version`测试是否安装成功\n\n## 启动和关闭数据库\n\n启动：\n\n```shell\n# mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录\n# 所以在第一次执行该命令之前先自己手动新建一个 /data/db\nmongod\n```\n\n如果想要修改默认的数据存储目录，可以：\n\n```javascript\nmongod --dbpath = 数据存储目录路径\n```\n\n停止：\n\n```javascript\n在开启服务的控制台，直接Ctrl+C;\n或者直接关闭开启服务的控制台。\n```\n\n\n\n## 连接数据库\n\n连接：\n\n```javascript\n# 该命令默认连接本机的 MongoDB 服务\nmongo\n```\n\n退出：\n\n```javascript\n# 在连接状态输入 exit 退出连接\nexit\n```\n\n\n\n\n\n## 基本命令\n\n- `show dbs`\n  - 查看数据库列表(数据库中的所有数据库)\n- `db`\n  - 查看当前连接的数据库\n- `use 数据库名称`\n  - 切换到指定的数据库，（如果没有会新建）\n- `show collections`\n  - 查看当前目录下的所有数据表\n- `db.表名.find()`\n  - 查看表中的详细信息\n\n## 在Node中如何操作MongoDB数据库\n\n### 使用官方的`MongoDB`包来操作\n\n> ​\thttp://mongodb.github.io/node-mongodb-native/\n\n### 使用第三方包`mongoose`来操作MongoDB数据库\n\n​\t第三方包：`mongoose`基于MongoDB官方的`mongodb`包再一次做了封装，名字叫`mongoose`，是WordPress项目团队开发的。\n\n \n\n> ​\thttps://mongoosejs.com/\n\n\n\n## 学习指南（步骤）\n\n官方学习文档：https://mongoosejs.com/docs/index.html\n\n### 设计Scheme 发布Model (创建表)\n\n```javascript\n// 1.引包\n// 注意：按照后才能require使用\nvar mongoose = require('mongoose');\n\n// 拿到schema图表\nvar Schema = mongoose.Schema;\n\n// 2.连接数据库\n// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库\nmongoose.connect('mongodb://localhost/test');\n\n// 3.设计集合结构（表结构）\n// 用户表\nvar userSchema = new Schema({\n\tusername: { //姓名\n\t\ttype: String,\n\t\trequire: true //添加约束，保证数据的完整性，让数据按规矩统一\n\t},\n\tpassword: {\n\t\ttype: String,\n\t\trequire: true\n\t},\n\temail: {\n\t\ttype: String\n\t}\n});\n\n// 4.将文档结构发布为模型\n// mongoose.model方法就是用来将一个架构发布为 model\n// \t\t第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称\n// \t\t\t\t\tmongoose 会自动将大写名词的字符串生成 小写复数 的集合名称\n// \t\t\t\t\t例如 这里会变成users集合名称\n// \t\t第二个参数：架构\n// \t返回值：模型构造函数\nvar User = mongoose.model('User', userSchema);\n```\n\n### 添加数据（增）\n\n```javascript\n// 5.通过模型构造函数对User中的数据进行操作\nvar user = new User({\n\tusername: 'admin',\n\tpassword: '123456',\n\temail: 'xiaochen@qq.com'\n});\n\nuser.save(function(err, ret) {\n\tif (err) {\n\t\tconsole.log('保存失败');\n\t} else {\n\t\tconsole.log('保存成功');\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n### 删除（删）\n\n根据条件删除所有：\n\n```javascript\nUser.remove({\n\tusername: 'xiaoxiao'\n}, function(err, ret) {\n\tif (err) {\n\t\tconsole.log('删除失败');\n\t} else {\n\t\tconsole.log('删除成功');\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n根据条件删除一个：\n\n```javascript\nModel.findOneAndRemove(conditions,[options],[callback]);\n```\n\n根据id删除一个：\n\n```javascript\nUser.findByIdAndRemove(id,[options],[callback]);\n```\n\n\n\n### 更新（改）\n\n更新所有：\n\n```javascript\nUser.remove(conditions,doc,[options],[callback]);\n```\n\n根据指定条件更新一个：\n\n```javascript\nUser.FindOneAndUpdate([conditions],[update],[options],[callback]);\n```\n\n根据id更新一个：\n\n```javascript\n// 更新\t根据id来修改表数据\nUser.findByIdAndUpdate('5e6c5264fada77438c45dfcd', {\n\tusername: 'junjun'\n}, function(err, ret) {\n\tif (err) {\n\t\tconsole.log('更新失败');\n\t} else {\n\t\tconsole.log('更新成功');\n\t}\n});\n```\n\n\n\n### 查询（查）\n\n查询所有：\n\n```javascript\n// 查询所有\nUser.find(function(err,ret){\n\tif(err){\n\t\tconsole.log('查询失败');\n\t}else{\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n条件查询所有：\n\n```javascript\n// 根据条件查询\nUser.find({ username:'xiaoxiao' },function(err,ret){\n\tif(err){\n\t\tconsole.log('查询失败');\n\t}else{\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n条件查询单个：\n\n```javascript\n// 按照条件查询单个，查询出来的数据是一个对象（{}）\n// 没有条件查询使用findOne方法，查询的是表中的第一条数据\nUser.findOne({\n\tusername: 'xiaoxiao'\n}, function(err, ret) {\n\tif (err) {\n\t\tconsole.log('查询失败');\n\t} else {\n\t\tconsole.log(ret);\n\t}\n});\n```\n\n# 使用Node操作MySQL数据库\n\n文档：https://www.npmjs.com/package/mysql\n\n安装：\n\n```shell\nnpm install --save  mysql\n```\n\n```javascript\n// 引入mysql包\nvar mysql      = require('mysql');\n\n// 创建连接\nvar connection = mysql.createConnection({\n  host     : 'localhost',\t//本机\n  user     : 'me',\t\t//账号root\n  password : 'secret',\t//密码12345\n  database : 'my_db'\t//数据库名\n});\n \n// 连接数据库\t（打开冰箱门）\nconnection.connect();\n \n//执行数据操作\t（把大象放到冰箱）\nconnection.query('SELECT * FROM `users` ', function (error, results, fields) {\n  if (error) throw error;//抛出异常阻止代码往下执行\n  // 没有异常打印输出结果\n  console.log('The solution is: ',results);\n});\n\n//关闭连接\t（关闭冰箱门）\nconnection.end();\n```\n\n\n\n\n\n# 异步编程\n\n## 回调函数\n\n不成立的情况下：\n\n```javascript\nfunction add(x,y){\n    console.log(1);\n    setTimeout(function(){\n        console.log(2);\n        var ret = x + y;\n        return ret;\n    },1000);\n    console.log(3);\n    //到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined\n}\n\nconsole.log(add(2,2));\n// 结果是 1 3 undefined 4\n```\n\n\n\n使用回调函数解决：\n\n回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）\n\n```javascript\nvar ret;\nfunction add(x,y,callback){\n    // callback就是回调函数\n    // var x = 10;\n    // var y = 20;\n    // var callback = function(ret){console.log(ret);}\n    console.log(1);\n    setTimeout(function(){\n        var ret = x + y;\n        callback(ret);\n    },1000);\n    console.log(3);\n}\nadd(10,20,function(ret){\n    console.log(ret);\n});\n```\n\n\n\n注意：\n\n​\t凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）\n\n​\t这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)\n\najax:\n\n基于原生XMLHttpRequest封装get方法：\n\n```javascript\nvar oReq = new XMLHttpRequest();\n// 当请求加载成功要调用指定的函数\noReq.onload = function(){\n    console.log(oReq.responseText);\n}\noReq.open(\"GET\", \"请求路径\",true);\noReq.send();\n```\n\n```javascript\nfunction get(url,callback){\n    var oReq = new XMLHttpRequest();\n    // 当请求加载成功要调用指定的函数\n    oReq.onload = function(){\n        //console.log(oReq.responseText);\n        callback(oReq.responseText);\n    }\n    oReq.open(\"GET\", url,true);\n    oReq.send();\n}\nget('data.json',function(data){\n    console.log(data);\n});\n```\n\n## Promise\n\ncallback  hell（回调地狱）:\n\n\n\n文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('./data/a.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n});\n\nfs.readFile('./data/b.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n});\n```\n\n通过回调嵌套的方式来保证顺序：\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('./data/a.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n\tfs.readFile('./data/b.text','utf8',function(err,data){\n\t\tif(err){\n\t\t\t// 1 读取失败直接打印输出读取失败\n\t\t\treturn console.log('读取失败');\n\t\t\t// 2 抛出异常\n\t\t\t// \t\t阻止程序的执行\n\t\t\t// \t\t把错误信息打印到控制台\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(data);\n\t\tfs.readFile('./data/a.text','utf8',function(err,data){\n\t\t\tif(err){\n\t\t\t\t// 1 读取失败直接打印输出读取失败\n\t\t\t\treturn console.log('读取失败');\n\t\t\t\t// 2 抛出异常\n\t\t\t\t// \t\t阻止程序的执行\n\t\t\t\t// \t\t把错误信息打印到控制台\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log(data);\n\t\t});\n\t});\n});\n```\n\n为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:`Promise`。\n\n- Promise：承诺，保证\n- Promise本身不是异步的，但往往都是内部封装一个异步任务\n\n\n\n基本语法：\n\n```javascript\n// 在EcmaScript 6中新增了一个API Promise\n// Promise 是一个构造函数\n\nvar fs = require('fs');\n// 1 创建Promise容器\t\tresolve:解决   reject：失败\nvar p1 = new Promise(function(resolve, reject) {\n\tfs.readFile('./a.text', 'utf8', function(err, data) {\n\t\tif (err) {\n\t\t\t// console.log(err);\n\t\t\t// 把容器的Pending状态变为rejected\n\t\t\treject(err);\n\t\t} else {\n\t\t\t// console.log(data);\n\t\t\t// 把容器的Pending状态变为resolve\n\t\t\tresolve(1234);\n\t\t}\n\t});\n});\n\n// 当p1成功了，然后就（then）做指定的操作\n// then方法接收的function就是容器中的resolve函数\np1\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t}, function(err) {\n\t\tconsole.log('读取文件失败了', err);\n\t});\n\n```\n\n\n\n链式循环：\n\n封装Promise的`readFile`：\n\n```javascript\nvar fs = require('fs');\n\nfunction pReadFile(filePath) {\n\treturn new Promise(function(resolve, reject) {\n\t\tfs.readFile(filePath, 'utf8', function(err, data) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(data);\n\t\t\t}\n\t\t});\n\t});\n}\n\npReadFile('./a.txt')\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t\treturn pReadFile('./b.txt');\n\t})\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t\treturn pReadFile('./a.txt');\n\t})\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t})\n\n```\n\nmongoose所有的API都支持Promise：\n\n```javascript\n// 查询所有\nUser.find()\n\t.then(function(data){\n        console.log(data)\n    })\n```\n\n注册：\n\n```javascript\nUser.findOne({username:'admin'},function(user){\n    if(user){\n        console.log('用户已存在')\n    } else {\n        new User({\n             username:'aaa',\n             password:'123',\n             email:'fffff'\n        }).save(function(){\n            console.log('注册成功');\n        })\n    }\n})\n```\n\n\n\n```javascript\nUser.findOne({\n    username:'admin'\n})\n    .then(function(user){\n        if(user){\n            // 用户已经存在不能注册\n            console.log('用户已存在');\n        }\n        else{\n            // 用户不存在可以注册\n            return new User({\n                username:'aaa',\n                password:'123',\n                email:'fffff'\n            }).save();\n        }\n    })\n    .then(funciton(ret){\n\t\tconsole.log('注册成功');\n    })\n```\n\n\n\n## Generator\n\nasync函数\n\n\n\n# 其他\n\n## 修改完代码自动重启\n\n我们在这里可以使用一个第三方命名行工具：`nodemon`来帮助我们解决频繁修改代码重启服务器的问题。\n\n`nodemon`是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：\n\n```javascript\n#在任意目录执行该命令都可以\n#也就是说，所有需要 --global安装的包都可以在任意目录执行\nnpm install --global nodemon\nnpm install -g nodemon\n\n#如果安装不成功的话，可以使用cnpm安装\ncnpm install -g nodemon\n```\n\n安装完毕之后使用：\n\n```javascript\nnode app.js\n\n#使用nodemon\nnodemon app.js\n```\n\n只要是通过`nodemon`启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。\n\n## 封装异步API\n\n回调函数：获取异步操作的结果\n\n```javascript\nfunction fn(callback){\n    // var callback = funtion(data){ console.log(data); }\n\tsetTimeout(function(){\n        var data = 'hello';\n        callback(data);\n    },1000);\n}\n// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取\nfn(function(data){\n    console.log(data);\n})\n```\n\n## 数组的遍历方法，都是对函数作为一种参数\n\n\n\n## EcmaScript 6\n\n> 参考文档：https://es6.ruanyifeng.com/\n\n# 项目案例\n\n## 目录结构\n\n```javascript\n.\napp.js\t项目的入口文件\ncontrollers\nmodels\t存储使用mongoose设计的数据模型\nnode_modules\t第三方包\npackage.json\t包描述文件\npackage-lock.json\t第三方包版本锁定文件（npm5之后才有）\npublic\t公共静态资源\nroutes\nviews\t存储视图目录\n```\n\n## 模板页\n\n- 子模板\n- 模板继承\n\n## 路由设计\n\n| 路由            | 方法 | get参数 | post参数                | 是否需要登录 | 备注         |\n| --------------- | ---- | ------- | ----------------------- | ------------ | ------------ |\n| /               | get  |         |                         |              | 渲染首页     |\n| /register(登录) | get  |         |                         |              | 渲染注册页面 |\n| /register       | post |         | email,nickname,password |              | 处理注册请求 |\n| /login          | get  |         |                         |              | 渲染登陆界面 |\n| /login          | post |         | email,password          |              | 处理登录请求 |\n| /loginout       | get  |         |                         |              | 处理退出请求 |\n|                 |      |         |                         |              |              |\n\n## 模型设计\n\n## 功能实现\n\n## 步骤\n\n- 创建目录结构\n- 整合静态也-模板页\n  - include\n  - block\n  - extend\n- 设计用户登陆，退出，注册的路由\n- 用户注册\n  - 先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）\n  - 服务端\n    - 获取从客户端收到的数据\n    - 操作数据库\n      - 如果有错，发送500告诉客户端服务器错了‘\n      - 其他的根据业务发送不同的响应数据\n- 登录\n- 退出\n\n# Express中间件\n\n## 中间件的概念\n\n> 参考文档：http://expressjs.com/en/guide/using-middleware.html\n\n\n\n中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。\n\n说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。\n\n把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。\n\n```javascript\nvar http = require('http');\nvar url = require('url');\n\nvar cookie = require('./expressPtoject/cookie');\nvar query = require('./expressPtoject/query');\nvar postBody = require('./expressPtoject/post-body');\n\nvar server = http.createServer(function(){\n\t// 解析请求地址中的get参数\n\t// var obj = url.parse(req.url,true);\n\t// req.query = obj.query;\n\tquery(req,res);\t//中间件\n\t\n\t// 解析请求地址中的post参数\n\treq.body = {\n\t\tfoo:'bar'\n\t}\n});\n\nif(req.url === 'xxx'){\n\t// 处理请求\n\t...\n}\n\nserver.listen(3000,function(){\n\tconsole.log('3000 runing...');\n});\n```\n\n同一个请求对象所经过的中间件都是同一个请求对象和响应对象。\n\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/abc',function(req,res,next){\n\t// 同一个请求的req和res是一样的，\n\t// 可以前面存储下面调用\n\tconsole.log('/abc');\n\t// req.foo = 'bar';\n\treq.body = {\n\t\tname:'xiaoxiao',\n\t\tage:18\n\t}\n\tnext();\n});\napp.get('/abc',function(req,res,next){\n\t// console.log(req.foo);\n\tconsole.log(req.body);\n\tconsole.log('/abc');\n});\napp.listen(3000, function() {\n\tconsole.log('app is running at port 3000.');\n});\n\n```\n\n\n\n## 中间件的分类:\n\n### 应用程序级别的中间件\n\n万能匹配（不关心任何请求路径和请求方法的中间件）：\n\n```javascript\napp.use(function(req,res,next){\n    console.log('Time',Date.now());\n    next();\n});\n```\n\n关心请求路径和请求方法的中间件：\n\n```javascript\napp.use('/a',function(req,res,next){\n    console.log('Time',Date.now());\n    next();\n});\n```\n\n### 路由级别的中间件\n\n严格匹配请求路径和请求方法的中间件\n\nget:\n\n```javascript\napp.get('/',function(req,res){\n\tres.send('get');\n});\n```\n\npost：\n\n```javascript\napp.post('/a',function(req,res){\n\tres.send('post');\n});\n```\n\nput:\n\n```javascript\napp.put('/user',function(req,res){\n\tres.send('put');\n});\n```\n\ndelete:\n\n```javascript\napp.delete('/delete',function(req,res){\n\tres.send('delete');\n});\n```\n\n### 总\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// 中间件：处理请求，本质就是个函数\n// 在express中，对中间件有几种分类\n\n// 1 不关心任何请求路径和请求方法的中间件\n// 也就是说任何请求都会进入这个中间件\n// 中间件本身是一个方法，该方法接收三个参数\n// Request 请求对象\n// Response 响应对象\n// next 下一个中间件\n// // 全局匹配中间件\n// app.use(function(req, res, next) {\n// \tconsole.log('1');\n// \t// 当一个请求进入中间件后\n// \t// 如果需要请求另外一个方法则需要使用next（）方法\n// \tnext();\n// \t// next是一个方法，用来调用下一个中间件\n//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）\n// });\n// app.use(function(req, res, next) {\n// \tconsole.log('2');\n// });\n\n// // 2 关心请求路径的中间件\n// // 以/xxx开头的中间件\n// app.use('/a',function(req, res, next) {\n// \tconsole.log(req.url);\n// });\n\n// 3 严格匹配请求方法和请求路径的中间件\napp.get('/',function(){\n\tconsole.log('/');\n});\napp.post('/a',function(){\n\tconsole.log('/a');\n});\n\napp.listen(3000, function() {\n\tconsole.log('app is running at port 3000.');\n});\n\n```\n\n## 错误处理中间件\n\n```javascript\napp.use(function(err,req,res,next){\n    console.error(err,stack);\n    res.status(500).send('Something broke');\n});\n```\n\n配置使用404中间件：\n\n```javascript\napp.use(function(req,res){\n    res.render('404.html');\n});\n```\n\n配置全局错误处理中间件:\n\n```javascript\napp.get('/a', function(req, res, next) {\n\tfs.readFile('.a/bc', funtion() {\n\t\tif (err) {\n        \t// 当调用next()传参后，则直接进入到全局错误处理中间件方法中\n        \t// 当发生全局错误的时候，我们可以调用next传递错误对象\n        \t// 然后被全局错误处理中间件匹配到并进行处理\n\t\t\tnext(err);\n\t\t}\n\t})\n});\n//全局错误处理中间件\napp.use(function(err,req,res,next){\n    res.status(500).json({\n        err_code:500,\n        message:err.message\n    });\n});\n```\n\n\n\n\n\n## 内置中间件\n\n- express.static(提供静态文件)\n  - http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express\n\n## 第三方中间件\n\n> 参考文档：http://expressjs.com/en/resources/middleware.html\n\n- body-parser\n- compression\n- cookie-parser\n- mogran\n- response-time\n- server-static\n- session\n\n<style>\n    .post-primary{\n        display: none;\n    }\n</style>\n\n","slug":"node-note","published":1,"updated":"2020-08-27T08:22:17.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrh7005ur0u28u9l1ote","content":"<div class='notification is-warning post-primary'>\n    Node的学习笔记\n</div>\n\n\n\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要学习Node-js\"><a href=\"#为什么要学习Node-js\" class=\"headerlink\" title=\"为什么要学习Node.js\"></a>为什么要学习Node.js</h2><ul>\n<li>企业需求<ul>\n<li>具有服务端开发经验更改</li>\n<li>front-end</li>\n<li>back-end</li>\n<li>全栈开发工程师</li>\n<li>基本的网站开发能力<ul>\n<li>服务端</li>\n<li>前端</li>\n<li>运维部署</li>\n</ul>\n</li>\n<li>多人社区</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node-js是什么\"><a href=\"#Node-js是什么\" class=\"headerlink\" title=\"Node.js是什么\"></a>Node.js是什么</h2><ul>\n<li>Node.js是JavaScript 运行时</li>\n<li>通俗易懂的讲，Node.js是JavaScript的运行平台</li>\n<li>Node.js既不是语言，也不是框架，它是一个平台</li>\n<li>浏览器中的JavaScript<ul>\n<li>EcmaScript<ul>\n<li>基本语法</li>\n<li>if</li>\n<li>var</li>\n<li>function</li>\n<li>Object</li>\n<li>Array</li>\n</ul>\n</li>\n<li>Bom</li>\n<li>Dom</li>\n</ul>\n</li>\n<li>Node.js中的JavaScript<ul>\n<li>没有Bom，Dom</li>\n<li>EcmaScript</li>\n<li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul>\n<li>例如文件的读写</li>\n<li>网络服务的构建</li>\n<li>网络通信</li>\n<li>http服务器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构建与Chrome的V8引擎之上<ul>\n<li>代码只是具有特定格式的字符串</li>\n<li>引擎可以认识它，帮你解析和执行</li>\n<li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li>\n<li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li>\n</ul>\n</li>\n<li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul>\n<li>envent-driven    事件驱动</li>\n<li>non-blocking I/O mode   非阻塞I/O模型（异步）</li>\n<li>ightweight and efficent.   轻量和高效</li>\n</ul>\n</li>\n<li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul>\n<li>npm 是世界上最大的开源生态系统</li>\n<li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li>\n<li>npm install jquery</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node能做什么\"><a href=\"#Node能做什么\" class=\"headerlink\" title=\"Node能做什么\"></a>Node能做什么</h2><ul>\n<li>web服务器后台</li>\n<li>命令行工具<ul>\n<li>npm(node)</li>\n<li>git(c语言)</li>\n<li>hexo（node）</li>\n<li>…</li>\n</ul>\n</li>\n<li>对于前端工程师来讲，接触最多的是它的命令行工具<ul>\n<li>自己写的很少，主要是用别人第三方的</li>\n<li>webpack</li>\n<li>gulp</li>\n<li>npm</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><h2 id=\"安装Node环境\"><a href=\"#安装Node环境\" class=\"headerlink\" title=\"安装Node环境\"></a>安装Node环境</h2><ul>\n<li>查看Node环境的版本号</li>\n<li>下载：<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></li>\n<li>安装：<ul>\n<li>傻瓜式安装，一路<code>next</code></li>\n<li>安装过再次安装会升级</li>\n</ul>\n</li>\n<li>确认Node环境是否安装成功<ul>\n<li>查看node的版本号：<code>node --version</code></li>\n<li>或者<code>node -v</code></li>\n</ul>\n</li>\n<li>配置环境变量</li>\n</ul>\n<h2 id=\"解析执行JavaScript\"><a href=\"#解析执行JavaScript\" class=\"headerlink\" title=\"解析执行JavaScript\"></a>解析执行JavaScript</h2><ol>\n<li>创建编写JavaScript脚本文件</li>\n<li>打开终端，定位脚本文件的所属目录</li>\n<li>输入<code>node  文件名</code>执行对应的文件</li>\n</ol>\n<p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p>\n<h2 id=\"文件的读写\"><a href=\"#文件的读写\" class=\"headerlink\" title=\"文件的读写\"></a>文件的读写</h2><p>文件读取:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//浏览器中的JavaScript是没有文件操作能力的</span></span><br><span class=\"line\"><span class=\"comment\">//但是Node中的JavaScript具有文件操作能力</span></span><br><span class=\"line\"><span class=\"comment\">//fs是file-system的简写，就是文件系统的意思</span></span><br><span class=\"line\"><span class=\"comment\">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span></span><br><span class=\"line\"><span class=\"comment\">//在fs这个和兴模块中，就提供了人所有文件操作相关的API</span></span><br><span class=\"line\"><span class=\"comment\">//例如 fs.readFile就是用来读取文件的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  1.使用fs核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.读取文件</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.txt'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件读取失败'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>文件写入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  1.使用fs核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.将数据写入文件</span></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'./data/a.txt'</span>,<span class=\"string\">'我是文件写入的信息'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件写入失败'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><p>服务器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.加载http核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.使用http.createServer()创建一个web服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.服务器要做的事儿</span></span><br><span class=\"line\"><span class=\"comment\">// 提供服务：对数据服务</span></span><br><span class=\"line\"><span class=\"comment\">// 发请求</span></span><br><span class=\"line\"><span class=\"comment\">//\t接收请求</span></span><br><span class=\"line\"><span class=\"comment\">//\t处理请求</span></span><br><span class=\"line\"><span class=\"comment\">//\t反馈（发送响应）</span></span><br><span class=\"line\"><span class=\"comment\">//\t当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'收到客户的请求了'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.绑定端口号，启动服务</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'runing...'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Node中的模块系统\"><a href=\"#Node中的模块系统\" class=\"headerlink\" title=\"Node中的模块系统\"></a>Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p>\n<ul>\n<li><p>EcmaScript语言</p>\n<ul>\n<li>和浏览器一样，在Node中没有Bom和Dom</li>\n</ul>\n</li>\n<li><p>核心模块</p>\n<ul>\n<li>文件操作的fs</li>\n<li>http服务操作的http</li>\n<li>url路径操作模块</li>\n<li>path路径处理模块</li>\n<li>os操作系统信息</li>\n</ul>\n</li>\n<li><p>第三方模块</p>\n<ul>\n<li>art-template</li>\n<li>必须通过npm来下载才可以使用</li>\n</ul>\n</li>\n<li><p>自己写的模块</p>\n<ul>\n<li>自己创建的文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"什么是模块化\"><a href=\"#什么是模块化\" class=\"headerlink\" title=\"什么是模块化\"></a>什么是模块化</h2><ul>\n<li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li>\n<li>通信规则<ul>\n<li>加载require</li>\n<li>导出exports</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CommonJS模块规范\"><a href=\"#CommonJS模块规范\" class=\"headerlink\" title=\"CommonJS模块规范\"></a>CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p>\n<ul>\n<li><p>模块作用域</p>\n</li>\n<li><p>使用require方法来加载模块</p>\n</li>\n<li><p>使用exports接口对象来导出模板中的成员</p>\n<h3 id=\"加载require\"><a href=\"#加载require\" class=\"headerlink\" title=\"加载require\"></a>加载<code>require</code></h3><p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 自定义变量名 = require(<span class=\"string\">'模块'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>作用：</p>\n<ul>\n<li>执行被加载模块中的代码</li>\n<li>得到被加载模块中的<code>exports</code>导出接口对象</li>\n</ul>\n<h3 id=\"导出exports\"><a href=\"#导出exports\" class=\"headerlink\" title=\"导出exports\"></a>导出<code>exports</code></h3><ul>\n<li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p>\n</li>\n<li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p>\n<p>导出多个成员（必须在对象中）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.a = <span class=\"number\">123</span>;</span><br><span class=\"line\">exports.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bbb'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.c = &#123;</span><br><span class=\"line\">    foo:<span class=\"string\">\"bar\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.d = <span class=\"string\">'hello'</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>导出单个成员（拿到的就是函数，字符串）：\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'hello'</span>;</span><br></pre></td></tr></table></figure>\n\n以下情况会覆盖：\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"comment\">//后者会覆盖前者</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n也可以通过以下方法来导出多个成员：\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    foo = <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">    add:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></code></pre><h2 id=\"模块原理\"><a href=\"#模块原理\" class=\"headerlink\" title=\"模块原理\"></a>模块原理</h2><p>exports和<code>module.exports</code>的一个引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(exports === <span class=\"built_in\">module</span>.exports);\t<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.foo = <span class=\"string\">'bar'</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>当给exports重新赋值后，exports！= module.exports.</code></p>\n<p><code>最终return的是module.exports,无论exports中的成员是什么都没用。</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">真正去使用的时候：</span><br><span class=\"line\">\t导出单个成员：exports.xxx = xxx;</span><br><span class=\"line\">\t导出多个成员：<span class=\"built_in\">module</span>.exports 或者 modeule.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用服务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引用模板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">'art-template'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建服务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</span><br><span class=\"line\"><span class=\"comment\">// 公共路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wwwDir = <span class=\"string\">'D:/app/www'</span>;</span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = req.url;</span><br><span class=\"line\">    <span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./template-apche.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.end(<span class=\"string\">'404 Not Found'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fs.readdir(wwwDir, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, files</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res.end(<span class=\"string\">'Can not find www Dir.'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 使用模板引擎解析替换data中的模板字符串</span></span><br><span class=\"line\">            <span class=\"comment\">// 去xmpTempleteList.html中编写模板语法</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> htmlStr = template.render(data.toString(), &#123; </span><br><span class=\"line\">                title: <span class=\"string\">'D:/app/www/ 的索引'</span>,</span><br><span class=\"line\">                files:files </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// 发送响应数据</span></span><br><span class=\"line\">            res.end(htmlStr);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'running....'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>jQuery中的each 和 原生JavaScript方法forEach的区别：</span><br><span class=\"line\">\t提供源头：</span><br><span class=\"line\">    \t原生js是es5提供的（不兼容IE8）,</span><br><span class=\"line\">        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class=\"number\">2</span>以下的版本也就是<span class=\"number\">1.</span>版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用</span><br><span class=\"line\"><span class=\"number\">2.</span>模块中导出多个成员和导出单个成员</span><br><span class=\"line\"><span class=\"number\">3.301</span>和<span class=\"number\">302</span>的区别：</span><br><span class=\"line\">\t<span class=\"number\">301</span>永久重定向,浏览器会记住</span><br><span class=\"line\">    <span class=\"number\">302</span>临时重定向</span><br><span class=\"line\"><span class=\"number\">4.</span>exports和<span class=\"built_in\">module</span>.exports的区别:</span><br><span class=\"line\">\t每个模块中都有一个<span class=\"built_in\">module</span>对象</span><br><span class=\"line\">    <span class=\"built_in\">module</span>对象中有一个exports对象</span><br><span class=\"line\">    我们可以把需要导出的成员都挂载到<span class=\"built_in\">module</span>.exports接口对象中</span><br><span class=\"line\">\t也就是<span class=\"string\">`module.exports.xxx = xxx`</span>的方式</span><br><span class=\"line\">    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫<span class=\"string\">`exports`</span></span><br><span class=\"line\">    <span class=\"string\">`exports === module.exports`</span>结果为<span class=\"literal\">true</span>,所以完全可以<span class=\"string\">`exports.xxx = xxx`</span></span><br><span class=\"line\">    当一个模块需要导出单个成员的时候必须使用<span class=\"string\">`module.exports = xxx`</span>的方式，=,使用<span class=\"string\">`exports = xxx`</span>不管用,因为每个模块最终<span class=\"keyword\">return</span>的是<span class=\"built_in\">module</span>.exports,而exports只是<span class=\"built_in\">module</span>.exports的一个引用,所以<span class=\"string\">`exports`</span>即使重新赋值,也不会影响<span class=\"string\">`module.exports`</span>。</span><br><span class=\"line\">    有一种赋值方式比较特殊：<span class=\"string\">`exports = module.exports`</span>这个用来新建立引用关系的。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"require的加载规则\"><a href=\"#require的加载规则\" class=\"headerlink\" title=\"require的加载规则\"></a>require的加载规则</h1><ul>\n<li><p>核心模块</p>\n<ul>\n<li>模块名</li>\n</ul>\n</li>\n<li><p>第三方模块</p>\n<ul>\n<li>模块名</li>\n</ul>\n</li>\n<li><p>用户自己写的</p>\n<ul>\n<li>路径</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"require的加载规则：\"><a href=\"#require的加载规则：\" class=\"headerlink\" title=\"require的加载规则：\"></a>require的加载规则：</h2><ul>\n<li><p>优先从缓存加载</p>\n</li>\n<li><p>判断模块标识符</p>\n<ul>\n<li>核心模块</li>\n<li>自己写的模块（路径形式的模块）</li>\n<li>第三方模块（node_modules）<ul>\n<li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li>\n<li>npm<ul>\n<li>开发人员可以把写好的框架库发布到npm上</li>\n<li>使用者通过npm命令来下载</li>\n</ul>\n</li>\n<li>使用方式：<code>var 名称 = require(&#39;npm install【下载包】 的包名&#39;)</code><ul>\n<li>node_modules/express/package.json main</li>\n<li>如果package.json或者main不成立，则查找被选择项：index.js</li>\n<li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果非路径形式的标识</span></span><br><span class=\"line\"><span class=\"comment\">// 路径形式的标识：</span></span><br><span class=\"line\">    <span class=\"comment\">// ./  当前目录 不可省略</span></span><br><span class=\"line\">    <span class=\"comment\">// ../  上一级目录  不可省略</span></span><br><span class=\"line\">    <span class=\"comment\">//  /xxx也就是D:/xxx</span></span><br><span class=\"line\">    <span class=\"comment\">// 带有绝对路径几乎不用（D:/a/foo.js）</span></span><br><span class=\"line\"><span class=\"comment\">// 首位表示的是当前文件模块所属磁盘根目录</span></span><br><span class=\"line\"><span class=\"comment\">// require('./a'); </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 核心模块</span></span><br><span class=\"line\"><span class=\"comment\">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三方模块</span></span><br><span class=\"line\"><span class=\"comment\">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用</span></span><br><span class=\"line\"><span class=\"comment\">// 第三方包的名字不可能和核心模块的名字是一样的</span></span><br><span class=\"line\"><span class=\"comment\">// 既不是核心模块，也不是路径形式的模块</span></span><br><span class=\"line\"><span class=\"comment\">//      先找到当前文所述目录的node_modules</span></span><br><span class=\"line\"><span class=\"comment\">//      然后找node_modules/art-template目录</span></span><br><span class=\"line\"><span class=\"comment\">//      node_modules/art-template/package.json</span></span><br><span class=\"line\"><span class=\"comment\">//      node_modules/art-template/package.json中的main属性</span></span><br><span class=\"line\"><span class=\"comment\">//      main属性记录了art-template的入口模块</span></span><br><span class=\"line\"><span class=\"comment\">//      然后加载使用这个第三方包</span></span><br><span class=\"line\"><span class=\"comment\">//      实际上最终加载的还是文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      如果package.json不存在或者mian指定的入口模块不存在</span></span><br><span class=\"line\"><span class=\"comment\">//      则node会自动找该目录下的index.js</span></span><br><span class=\"line\"><span class=\"comment\">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span></span><br><span class=\"line\"><span class=\"comment\">//      </span></span><br><span class=\"line\">        <span class=\"comment\">// 如果条件都不满足则会进入上一级目录进行查找</span></span><br><span class=\"line\"><span class=\"comment\">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">'art-template'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模块标识符中的-和文件操作路径中的\"><a href=\"#模块标识符中的-和文件操作路径中的\" class=\"headerlink\" title=\"模块标识符中的/和文件操作路径中的/\"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 咱们所使用的所有文件操作的API都是异步的</span></span><br><span class=\"line\"><span class=\"comment\">// 就像ajax请求一样</span></span><br><span class=\"line\"><span class=\"comment\">// 读取文件</span></span><br><span class=\"line\"><span class=\"comment\">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span></span><br><span class=\"line\"><span class=\"comment\">// ./index.txt    相对于当前目录</span></span><br><span class=\"line\"><span class=\"comment\">// /index.txt    相对于当前目录</span></span><br><span class=\"line\"><span class=\"comment\">// /index.txt   绝对路径,当前文件模块所处根目录</span></span><br><span class=\"line\"><span class=\"comment\">// d:express/index.txt   绝对路径</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./index.txt'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>  <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>模块操作路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在模块加载中，相对路径中的./不能省略</span></span><br><span class=\"line\"><span class=\"comment\">// 这里省略了.也是磁盘根目录</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./index'</span>)(<span class=\"string\">'hello'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h1><ul>\n<li>node package manage(node包管理器)</li>\n<li>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</li>\n</ul>\n<h3 id=\"npm网站\"><a href=\"#npm网站\" class=\"headerlink\" title=\"npm网站\"></a>npm网站</h3><blockquote>\n<p>​    npmjs.com    网站   是用来搜索npm包的</p>\n</blockquote>\n<h3 id=\"npm命令行工具\"><a href=\"#npm命令行工具\" class=\"headerlink\" title=\"npm命令行工具\"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p>\n<p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p>\n<p>升级npm(自己升级自己)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global npm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>npm init(生成package.json说明书文件)<ul>\n<li>npm init -y(可以跳过向导，快速生成)</li>\n</ul>\n</li>\n<li>npm install<ul>\n<li>一次性把dependencies选项中的依赖项全部安装</li>\n<li>简写（npm i）</li>\n</ul>\n</li>\n<li>npm install 包名<ul>\n<li>只下载</li>\n<li>简写（npm i 包名）</li>\n</ul>\n</li>\n<li>npm install –save 包名<ul>\n<li>下载并且保存依赖项（package.json文件中的dependencies选项）</li>\n<li>简写（npm i  包名）</li>\n</ul>\n</li>\n<li>npm uninstall 包名<ul>\n<li>只删除，如果有依赖项会依然保存</li>\n<li>简写（npm un 包名）</li>\n</ul>\n</li>\n<li>npm uninstall –save 包名<ul>\n<li>删除的同时也会把依赖信息全部删除</li>\n<li>简写（npm un 包名）</li>\n</ul>\n</li>\n<li>npm help<ul>\n<li>查看使用帮助</li>\n</ul>\n</li>\n<li>npm 命令 –help<ul>\n<li>查看具体命令的使用帮助（npm uninstall –help）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解决npm被墙问题\"><a href=\"#解决npm被墙问题\" class=\"headerlink\" title=\"解决npm被墙问题\"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p>\n<blockquote>\n<p><a href=\"https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。\" target=\"_blank\" rel=\"noopener\">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p>\n</blockquote>\n<p>安装淘宝的cnpm：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在任意目录执行都可以</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">--global表示安装到全局，而非当前目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">--global不能省略，否则不管用</span></span><br><span class=\"line\">npm install --global cnpm</span><br></pre></td></tr></table></figure>\n\n<p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">走国外的npm服务器下载jQuery包，速度比较慢</span></span><br><span class=\"line\">npm install jQuery;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用cnpm就会通过淘宝的服务器来下载jQuery</span></span><br><span class=\"line\">cnpm install jQuery;</span><br></pre></td></tr></table></figure>\n\n<p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery --registry=https://npm.taobao.org;</span><br></pre></td></tr></table></figure>\n\n<p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://npm.taobao.org;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看npm配置信息</span></span><br><span class=\"line\">npm config list;</span><br></pre></td></tr></table></figure>\n\n<p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p>\n<h1 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p>\n<p>这个文件可以通过<code>npm init</code>自动初始化出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\code\\node中的模块系统&gt;npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See <span class=\"string\">`npm help json`</span> <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use <span class=\"string\">`npm install &lt;pkg&gt;`</span> afterwards to install a package and</span><br><span class=\"line\">save it <span class=\"keyword\">as</span> a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (node中的模块系统)</span><br><span class=\"line\">Sorry, name can only contain URL-friendly characters.</span><br><span class=\"line\">package name: (node中的模块系统) cls</span><br><span class=\"line\">version: (<span class=\"number\">1.0</span><span class=\"number\">.0</span>)</span><br><span class=\"line\">description: 这是一个测试项目</span><br><span class=\"line\">entry point: (main.js)</span><br><span class=\"line\">test command:</span><br><span class=\"line\">git repository:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: xiaochen</span><br><span class=\"line\">license: (ISC)</span><br><span class=\"line\">About to write to D:\\code\\node中的模块系统\\package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"cls\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"这是一个测试项目\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"main.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"xiaochen\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Is <span class=\"keyword\">this</span> OK? (yes) yes</span><br></pre></td></tr></table></figure>\n\n<p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p>\n<p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p>\n<ul>\n<li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li>\n<li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li>\n</ul>\n<h2 id=\"package-json和package-lock-json\"><a href=\"#package-json和package-lock-json\" class=\"headerlink\" title=\"package.json和package-lock.json\"></a>package.json和package-lock.json</h2><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p>\n<p>npm5以后才加入这个文件</p>\n<p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p>\n<ul>\n<li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li>\n<li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li>\n<li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul>\n<li>这样的话重新<code>npm install</code>的时候速度就可以提升</li>\n</ul>\n</li>\n<li>从文件来看，有一个<code>lock</code>称之为锁<ul>\n<li>这个<code>lock</code>使用来锁版本的</li>\n<li>如果项目依赖了<code>1.1.1</code>版本</li>\n<li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li>\n<li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"path路径操作模块\"><a href=\"#path路径操作模块\" class=\"headerlink\" title=\"path路径操作模块\"></a>path路径操作模块</h2><blockquote>\n<p>参考文档：<a href=\"https://nodejs.org/docs/latest-v13.x/api/path.html\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p>\n</blockquote>\n<ul>\n<li>path.basename：获取路径的文件名，默认包含扩展名</li>\n<li>path.dirname：获取路径中的目录部分</li>\n<li>path.extname：获取一个路径中的扩展名部分</li>\n<li>path.parse：把路径转换为对象<ul>\n<li>root：根路径</li>\n<li>dir：目录</li>\n<li>base：包含后缀名的文件名</li>\n<li>ext：后缀名</li>\n<li>name：不包含后缀名的文件名</li>\n</ul>\n</li>\n<li>path.join：拼接路径</li>\n<li>path.isAbsolute：判断一个路径是否为绝对路径</li>\n</ul>\n<h1 id=\"Node中的其它成员-dirname-filename\"><a href=\"#Node中的其它成员-dirname-filename\" class=\"headerlink\" title=\"Node中的其它成员(dirname,filename)\"></a>Node中的其它成员(<strong>dirname,</strong>filename)</h1><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p>\n<ul>\n<li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p>\n</li>\n<li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p>\n</li>\n<li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p>\n</li>\n</ul>\n<p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。</p>\n<p>所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。</p>\n<p>就可以使用<code>__dirname</code>或者<code>__filename</code>来帮助我们解决这个问题</p>\n<p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(__dirname + 'a.txt');</span></span><br><span class=\"line\"><span class=\"comment\">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span></span><br><span class=\"line\">fs.readFile(path.join(__dirname + <span class=\"string\">'/a.txt'</span>),<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p>\n</blockquote>\n<blockquote>\n<p><strong>注意：</strong></p>\n<p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p>\n<p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p>\n</blockquote>\n<h1 id=\"Express（快速的）\"><a href=\"#Express（快速的）\" class=\"headerlink\" title=\"Express（快速的）\"></a>Express（快速的）</h1><p>作者：Tj</p>\n<p>原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p>\n<p>在node中有很多web开发框架。主要学习express</p>\n<ul>\n<li><p><code>http://expressjs.com/</code>,其中主要封装的是http。</p>\n</li>\n<li><pre><code class=\"javascript\"><span class=\"comment\">// 1 安装</span>\n<span class=\"comment\">// 2 引包</span>\n<span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);\n<span class=\"comment\">// 3 创建服务器应用程序</span>\n<span class=\"comment\">//      也就是原来的http.createServer();</span>\n<span class=\"keyword\">var</span> app = express();\n\n<span class=\"comment\">// 公开指定目录</span>\n<span class=\"comment\">// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源</span>\n<span class=\"comment\">// 在Express中开放资源就是一个API的事</span>\napp.use(<span class=\"string\">'/public/'</span>,express.static(<span class=\"string\">'/public/'</span>));\n\n<span class=\"comment\">//模板引擎在Express中开放模板也是一个API的事</span>\n\n<span class=\"comment\">// 当服务器收到get请求 / 的时候，执行回调处理函数</span>\napp.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>{\n    res.send(<span class=\"string\">'hello express'</span>);\n})\n\n<span class=\"comment\">// 相当于server.listen</span>\napp.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'app is runing at port 3000'</span>);\n})\n&lt;!--￼<span class=\"number\">23</span>--&gt;\n</code></pre>\n</li>\n</ul>\n<h5 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world:\"></a>hello world:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建app</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  2. </span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"comment\">// res.write('Hello');</span></span><br><span class=\"line\">    <span class=\"comment\">// res.write('World');</span></span><br><span class=\"line\">    <span class=\"comment\">// res.end()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">// res.end('hello world');</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'express app is runing...'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"基本路由\"><a href=\"#基本路由\" class=\"headerlink\" title=\"基本路由\"></a>基本路由</h5><p>路由：</p>\n<ul>\n<li><p>请求方法</p>\n</li>\n<li><p>请求路径</p>\n</li>\n<li><p>请求处理函数</p>\n</li>\n</ul>\n<p>get:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当你以get方法请求/的时候，执行对应的处理函数</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>post:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当你以post方法请求/的时候，执行对应的处理函数</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Express静态服务API\"><a href=\"#Express静态服务API\" class=\"headerlink\" title=\"Express静态服务API\"></a>Express静态服务API</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</span><br><span class=\"line\"><span class=\"comment\">// 这种方式可以省略请求路径前缀</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'files'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这种方式相当于static为public目录的别名</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/stataic'</span>,express.static(<span class=\"string\">'public'</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建app</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开放静态资源</span></span><br><span class=\"line\"><span class=\"comment\">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span></span><br><span class=\"line\"><span class=\"comment\">// 访问：http://127.0.0.1:3000/public/login.html</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/public/'</span>,express.static(<span class=\"string\">'./public/'</span>)); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span></span><br><span class=\"line\"><span class=\"comment\">// 访问：http://127.0.0.1:3000/login.html</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(express.static('./public/'));   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.访问：http://127.0.0.1:3000/a/login.html</span></span><br><span class=\"line\"><span class=\"comment\">// a相当于public的别名</span></span><br><span class=\"line\"><span class=\"comment\">// app.use('/a/',express.static('./public/')); </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  </span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.end(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'express app is runing...'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在Express中配置使用art-templete模板引擎\"><a href=\"#在Express中配置使用art-templete模板引擎\" class=\"headerlink\" title=\"在Express中配置使用art-templete模板引擎\"></a>在Express中配置使用<code>art-templete</code>模板引擎</h5><ul>\n<li><a href=\"https://aui.github.io/art-template/\" target=\"_blank\" rel=\"noopener\">art-template官方文档</a></li>\n<li>在node中，有很多第三方模板引擎都可以使用，不是只有<code>art-template</code><ul>\n<li>还有ejs，jade（pug），handlebars，nunjucks</li>\n</ul>\n</li>\n</ul>\n<p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save art-template</span><br><span class=\"line\">npm install --save express-art-template</span><br><span class=\"line\"></span><br><span class=\"line\">//两个一起安装</span><br><span class=\"line\">npm i --save art-template express-art-template</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'html'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'express-art-template'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// express默认会去views目录找index.html</span></span><br><span class=\"line\">    res.render(<span class=\"string\">'index.html'</span>,&#123;</span><br><span class=\"line\">           title:<span class=\"string\">'hello world'</span>     </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数views千万不要写错</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>,目录路径);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在Express中获取表单请求数据\"><a href=\"#在Express中获取表单请求数据\" class=\"headerlink\" title=\"在Express中获取表单请求数据\"></a>在Express中获取表单请求数据</h5><h6 id=\"获取get请求数据：\"><a href=\"#获取get请求数据：\" class=\"headerlink\" title=\"获取get请求数据：\"></a>获取get请求数据：</h6><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过requery方法获取用户输入的数据</span></span><br><span class=\"line\"><span class=\"comment\">// req.query只能拿到get请求的数据</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> comment = req.query;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"获取post请求数据：\"><a href=\"#获取post请求数据：\" class=\"headerlink\" title=\"获取post请求数据：\"></a>获取post请求数据：</h6><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p>\n<p>安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save body-parser;</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 引包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置body-parser</span></span><br><span class=\"line\"><span class=\"comment\">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是说可以直接通过req.body来获取表单post请求数据</span></span><br><span class=\"line\"><span class=\"comment\">// parse application/x-www-form-urlencoded</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parse application/json</span></span><br><span class=\"line\">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)</span><br><span class=\"line\">  res.write(<span class=\"string\">'you posted:\\n'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 可以通过req.body来获取表单请求数据</span></span><br><span class=\"line\">  res.end(<span class=\"built_in\">JSON</span>.stringify(req.body, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在Express中配置使用express-session插件操作\"><a href=\"#在Express中配置使用express-session插件操作\" class=\"headerlink\" title=\"在Express中配置使用express-session插件操作\"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote>\n<p>参考文档：<a href=\"https://github.com/expressjs/session\" target=\"_blank\" rel=\"noopener\">https://github.com/expressjs/session</a></p>\n</blockquote>\n<p>安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express-session</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">//这是最简单的配置方式</span></span><br><span class=\"line\"><span class=\"comment\">//Session是基于Cookie实现的</span></span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span></span><br><span class=\"line\">  <span class=\"comment\">//目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class=\"line\">  secret: <span class=\"string\">'keyboard cat'</span>,</span><br><span class=\"line\">  resave: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  saveUninitialized: <span class=\"literal\">true</span>,<span class=\"comment\">//无论是否适用Session，都默认直接分配一把钥匙</span></span><br><span class=\"line\">  cookie: &#123; <span class=\"attr\">secure</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读</span></span><br><span class=\"line\"><span class=\"comment\">//添加Session数据</span></span><br><span class=\"line\"><span class=\"comment\">//session就是一个对象</span></span><br><span class=\"line\">req.session.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//写</span></span><br><span class=\"line\"><span class=\"comment\">//获取session数据</span></span><br><span class=\"line\">req.session.foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删</span></span><br><span class=\"line\">req.session.foo = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> req.session.foo</span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p>\n<h3 id=\"利用Express实现ADUS项目\"><a href=\"#利用Express实现ADUS项目\" class=\"headerlink\" title=\"利用Express实现ADUS项目\"></a>利用Express实现ADUS项目</h3><h4 id=\"模块化思想\"><a href=\"#模块化思想\" class=\"headerlink\" title=\"模块化思想\"></a>模块化思想</h4><p>模块如何划分:</p>\n<ul>\n<li>模块职责要单一</li>\n</ul>\n<p>javascript模块化：</p>\n<ul>\n<li>Node 中的 CommonJS</li>\n<li>浏览器中的：<ul>\n<li>AMD    require.js</li>\n<li>CMD     sea.js</li>\n</ul>\n</li>\n<li>es6中增加了官方支持</li>\n</ul>\n<h4 id=\"起步-1\"><a href=\"#起步-1\" class=\"headerlink\" title=\"起步\"></a>起步</h4><ul>\n<li>初始化</li>\n<li>模板处理</li>\n</ul>\n<h4 id=\"路由设计\"><a href=\"#路由设计\" class=\"headerlink\" title=\"路由设计\"></a>路由设计</h4><table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th align=\"left\">请求路径</th>\n<th align=\"left\">get参数</th>\n<th>post参数</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td align=\"left\">/students</td>\n<td align=\"left\"></td>\n<td></td>\n<td align=\"left\">渲染首页</td>\n</tr>\n<tr>\n<td>GET</td>\n<td align=\"left\">/students/new</td>\n<td align=\"left\"></td>\n<td></td>\n<td align=\"left\">渲染添加学生页面</td>\n</tr>\n<tr>\n<td>POST</td>\n<td align=\"left\">/students/new</td>\n<td align=\"left\"></td>\n<td>name,age,gender,hobbies</td>\n<td align=\"left\">处理添加学生请求</td>\n</tr>\n<tr>\n<td>GET</td>\n<td align=\"left\">/students/edit</td>\n<td align=\"left\">id</td>\n<td></td>\n<td align=\"left\">渲染编辑页面</td>\n</tr>\n<tr>\n<td>POST</td>\n<td align=\"left\">/students/edit</td>\n<td align=\"left\"></td>\n<td>id,name,age,gender,hobbies</td>\n<td align=\"left\">处理编辑请求</td>\n</tr>\n<tr>\n<td>GET</td>\n<td align=\"left\">/students/delete</td>\n<td align=\"left\">id</td>\n<td></td>\n<td align=\"left\">处理删除请求</td>\n</tr>\n</tbody></table>\n<h4 id=\"提取路由模块\"><a href=\"#提取路由模块\" class=\"headerlink\" title=\"提取路由模块\"></a>提取路由模块</h4><p>router.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * router.js路由模块</span></span><br><span class=\"line\"><span class=\"comment\"> * 职责：</span></span><br><span class=\"line\"><span class=\"comment\"> *      处理路由</span></span><br><span class=\"line\"><span class=\"comment\"> *      根据不同的请求方法+请求路径设置具体的请求函数</span></span><br><span class=\"line\"><span class=\"comment\"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Express专门提供了一种更好的方式</span></span><br><span class=\"line\"><span class=\"comment\">// 专门用来提供路由的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1 创建一个路由容器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"comment\">// 2 把路由都挂载到路由容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// res.send('hello world');</span></span><br><span class=\"line\">    <span class=\"comment\">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span></span><br><span class=\"line\">    <span class=\"comment\">// 除了这样来转换，也可以通过data.toString（）来转换</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./db.json'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Server error.'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 读取到的文件数据是string类型的数据</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(data);</span></span><br><span class=\"line\">        <span class=\"comment\">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> students = <span class=\"built_in\">JSON</span>.parse(data).students;</span><br><span class=\"line\">        res.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 读取文件数据</span></span><br><span class=\"line\">            students:students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/new'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">'new.html'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/edit'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/students/edit'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/delete'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3 把router导出</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// router(app);</span></span><br><span class=\"line\"><span class=\"comment\">// 把路由容器挂载到app服务中</span></span><br><span class=\"line\"><span class=\"comment\">// 挂载路由</span></span><br><span class=\"line\">app.use(router);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"设计操作数据的API文件模块\"><a href=\"#设计操作数据的API文件模块\" class=\"headerlink\" title=\"设计操作数据的API文件模块\"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p>\n<p>find接受一个方法作为参数，方法内部返回一个条件</p>\n<p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p>\n<p>符合该条件的元素会作为find方法的返回值</p>\n<p>如果遍历结束还没有符合该条件的元素，则返回undefined<img src=\"C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200313103810731.png\" alt=\"image-20200313103810731\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * student.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据操作文件模块</span></span><br><span class=\"line\"><span class=\"comment\"> * 职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 获取所有学生列表</span></span><br><span class=\"line\"><span class=\"comment\">  * return []</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 获取添加保存学生</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.save = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新学生</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.update = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除学生</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.delete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ul>\n<li><p>处理模板</p>\n</li>\n<li><p>配置静态开放资源</p>\n</li>\n<li><p>配置模板引擎</p>\n</li>\n<li><p>简单的路由，/studens渲染静态页出来</p>\n</li>\n<li><p>路由设计</p>\n</li>\n<li><p>提取路由模块</p>\n</li>\n<li><p>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js’</p>\n</li>\n<li><p>先写好student.js文件结构</p>\n<ul>\n<li>查询所有学生列别哦的API</li>\n<li>findById</li>\n<li>save</li>\n<li>updateById</li>\n<li>deleteById</li>\n</ul>\n</li>\n<li><p>实现具体功能</p>\n<ul>\n<li>通过路由收到请求</li>\n<li>接受请求中的参数（get，post）<ul>\n<li>req.query</li>\n<li>req.body</li>\n</ul>\n</li>\n<li>调用数据操作API处理数据</li>\n<li>根据操作结果给客户端发送请求</li>\n</ul>\n</li>\n<li><p>业务功能顺序</p>\n<ul>\n<li>列表</li>\n<li>添加</li>\n<li>编辑</li>\n<li>删除</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"子模板和模板的继承（模板引擎高级语法）【include，extend，block】\"><a href=\"#子模板和模板的继承（模板引擎高级语法）【include，extend，block】\" class=\"headerlink\" title=\"子模板和模板的继承（模板引擎高级语法）【include，extend，block】\"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p>\n<p>模板页：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"zh\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">\t&lt;meta http-equiv=<span class=\"string\">\"X-UA-Compatible\"</span> content=<span class=\"string\">\"ie=edge\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;模板页&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;link rel=\"stylesheet\" href=\"/</span>node_modules/bootstrap/dist/css/bootstrap.css<span class=\"string\">\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123; block 'head' &#125;&#125;&#123;&#123; /block &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;!-- 通过include导入公共部分 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123;include './header.html'&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;!-- 留一个位置 让别的内容去填充 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123; block  'content' &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;h1&gt;默认内容&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123; /block &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;!-- 通过include导入公共部分 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123;include './footer.html'&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;!-- 公共样式 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;script src=\"</span>/node_modules/jquery/dist/jquery.js<span class=\"string\">\" &gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;script src=\"</span>/node_modules/bootstrap/dist/js/bootstrap.js<span class=\"string\">\" &gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123; block 'script' &#125;&#125;&#123;&#123; /block &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>模板的继承：</p>\n<p>​    header页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">\t&lt;h1&gt;公共的头部&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​    footer页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">\t&lt;h1&gt;公共的底部&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>模板页的使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 继承(extend:延伸，扩展)模板也layout.html --&gt;</span><br><span class=\"line\">&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;</span><br><span class=\"line\">&#123;&#123;extend <span class=\"string\">'./layout.html'</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 向模板页面填充新的数据 --&gt;</span><br><span class=\"line\">&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;</span><br><span class=\"line\">&lt;!-- style样式方面的内容 --&gt;</span><br><span class=\"line\">&#123;&#123; block <span class=\"string\">'head'</span> &#125;&#125;</span><br><span class=\"line\">\t&lt;style type=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">\t\tbody&#123;</span><br><span class=\"line\">\t\t\tbackground-color: skyblue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;&#123; /</span>block &#125;&#125;</span><br><span class=\"line\">&#123;&#123; block <span class=\"string\">'content'</span> &#125;&#125;</span><br><span class=\"line\">\t&lt;div id=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;Index页面的内容&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>div&gt;</span><br><span class=\"line\">&#123;&#123; /block &#125;&#125;</span><br><span class=\"line\">&lt;!-- js部分的内容 --&gt;</span><br><span class=\"line\">&#123;&#123; block <span class=\"string\">'script'</span> &#125;&#125;</span><br><span class=\"line\">\t&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;&#123; /</span>block &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终的显示效果：</p>\n<h1 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h1><h2 id=\"关系型和非关系型数据库\"><a href=\"#关系型和非关系型数据库\" class=\"headerlink\" title=\"关系型和非关系型数据库\"></a>关系型和非关系型数据库</h2><h3 id=\"关系型数据库（表就是关系，或者说表与表之间存在关系）。\"><a href=\"#关系型数据库（表就是关系，或者说表与表之间存在关系）。\" class=\"headerlink\" title=\"关系型数据库（表就是关系，或者说表与表之间存在关系）。\"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul>\n<li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li>\n<li>所有的关系型数据库在操作之前都需要设计表结构</li>\n<li>而且数据表还支持约束<ul>\n<li>唯一的</li>\n<li>主键</li>\n<li>默认值</li>\n<li>非空</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"非关系型数据库\"><a href=\"#非关系型数据库\" class=\"headerlink\" title=\"非关系型数据库\"></a>非关系型数据库</h3><ul>\n<li>非关系型数据库非常的灵活</li>\n<li>有的关系型数据库就是key-value对儿</li>\n<li>但MongDB是长得最像关系型数据库的非关系型数据库<ul>\n<li>数据库 -》 数据库</li>\n<li>数据表 -》 集合（数组）</li>\n<li>表记录 -》文档对象</li>\n</ul>\n</li>\n</ul>\n<p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    qq:&#123;</span><br><span class=\"line\">       user:[</span><br><span class=\"line\">           &#123;&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class=\"line\">       ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>下载</p>\n<ul>\n<li>下载地址：<a href=\"https://www.mongodb.com/download-center/community\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center/community</a></li>\n</ul>\n</li>\n<li><p>安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mongoose</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量</p>\n</li>\n<li><p>最后输入<code>mongod --version</code>测试是否安装成功</p>\n</li>\n</ul>\n<h2 id=\"启动和关闭数据库\"><a href=\"#启动和关闭数据库\" class=\"headerlink\" title=\"启动和关闭数据库\"></a>启动和关闭数据库</h2><p>启动：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 所以在第一次执行该命令之前先自己手动新建一个 /data/db</span></span><br><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n\n<p>如果想要修改默认的数据存储目录，可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath = 数据存储目录路径</span><br></pre></td></tr></table></figure>\n\n<p>停止：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在开启服务的控制台，直接Ctrl+C;</span><br><span class=\"line\">或者直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><p>连接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 该命令默认连接本机的 MongoDB 服务</span><br><span class=\"line\">mongo</span><br></pre></td></tr></table></figure>\n\n<p>退出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在连接状态输入 exit 退出连接</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ul>\n<li><code>show dbs</code><ul>\n<li>查看数据库列表(数据库中的所有数据库)</li>\n</ul>\n</li>\n<li><code>db</code><ul>\n<li>查看当前连接的数据库</li>\n</ul>\n</li>\n<li><code>use 数据库名称</code><ul>\n<li>切换到指定的数据库，（如果没有会新建）</li>\n</ul>\n</li>\n<li><code>show collections</code><ul>\n<li>查看当前目录下的所有数据表</li>\n</ul>\n</li>\n<li><code>db.表名.find()</code><ul>\n<li>查看表中的详细信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"在Node中如何操作MongoDB数据库\"><a href=\"#在Node中如何操作MongoDB数据库\" class=\"headerlink\" title=\"在Node中如何操作MongoDB数据库\"></a>在Node中如何操作MongoDB数据库</h2><h3 id=\"使用官方的MongoDB包来操作\"><a href=\"#使用官方的MongoDB包来操作\" class=\"headerlink\" title=\"使用官方的MongoDB包来操作\"></a>使用官方的<code>MongoDB</code>包来操作</h3><blockquote>\n<p>​    <a href=\"http://mongodb.github.io/node-mongodb-native/\" target=\"_blank\" rel=\"noopener\">http://mongodb.github.io/node-mongodb-native/</a></p>\n</blockquote>\n<h3 id=\"使用第三方包mongoose来操作MongoDB数据库\"><a href=\"#使用第三方包mongoose来操作MongoDB数据库\" class=\"headerlink\" title=\"使用第三方包mongoose来操作MongoDB数据库\"></a>使用第三方包<code>mongoose</code>来操作MongoDB数据库</h3><p>​    第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装，名字叫<code>mongoose</code>，是WordPress项目团队开发的。</p>\n<blockquote>\n<p>​    <a href=\"https://mongoosejs.com/\" target=\"_blank\" rel=\"noopener\">https://mongoosejs.com/</a></p>\n</blockquote>\n<h2 id=\"学习指南（步骤）\"><a href=\"#学习指南（步骤）\" class=\"headerlink\" title=\"学习指南（步骤）\"></a>学习指南（步骤）</h2><p>官方学习文档：<a href=\"https://mongoosejs.com/docs/index.html\" target=\"_blank\" rel=\"noopener\">https://mongoosejs.com/docs/index.html</a></p>\n<h3 id=\"设计Scheme-发布Model-创建表\"><a href=\"#设计Scheme-发布Model-创建表\" class=\"headerlink\" title=\"设计Scheme 发布Model (创建表)\"></a>设计Scheme 发布Model (创建表)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.引包</span></span><br><span class=\"line\"><span class=\"comment\">// 注意：按照后才能require使用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拿到schema图表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.连接数据库</span></span><br><span class=\"line\"><span class=\"comment\">// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.设计集合结构（表结构）</span></span><br><span class=\"line\"><span class=\"comment\">// 用户表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">\tusername: &#123; <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t\ttype: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t\t<span class=\"built_in\">require</span>: <span class=\"literal\">true</span> <span class=\"comment\">//添加约束，保证数据的完整性，让数据按规矩统一</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tpassword: &#123;</span><br><span class=\"line\">\t\ttype: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t\t<span class=\"built_in\">require</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\temail: &#123;</span><br><span class=\"line\">\t\ttype: <span class=\"built_in\">String</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.将文档结构发布为模型</span></span><br><span class=\"line\"><span class=\"comment\">// mongoose.model方法就是用来将一个架构发布为 model</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t\t\t\tmongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t\t\t\t例如 这里会变成users集合名称</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t第二个参数：架构</span></span><br><span class=\"line\"><span class=\"comment\">// \t返回值：模型构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>, userSchema);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加数据（增）\"><a href=\"#添加数据（增）\" class=\"headerlink\" title=\"添加数据（增）\"></a>添加数据（增）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.通过模型构造函数对User中的数据进行操作</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">\tusername: <span class=\"string\">'admin'</span>,</span><br><span class=\"line\">\tpassword: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">\temail: <span class=\"string\">'xiaochen@qq.com'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ret</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'保存失败'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'保存成功'</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除（删）\"><a href=\"#删除（删）\" class=\"headerlink\" title=\"删除（删）\"></a>删除（删）</h3><p>根据条件删除所有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.remove(&#123;</span><br><span class=\"line\">\tusername: <span class=\"string\">'xiaoxiao'</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ret</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'删除失败'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'删除成功'</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>根据条件删除一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findOneAndRemove(conditions,[options],[callback]);</span><br></pre></td></tr></table></figure>\n\n<p>根据id删除一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findByIdAndRemove(id,[options],[callback]);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新（改）\"><a href=\"#更新（改）\" class=\"headerlink\" title=\"更新（改）\"></a>更新（改）</h3><p>更新所有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.remove(conditions,doc,[options],[callback]);</span><br></pre></td></tr></table></figure>\n\n<p>根据指定条件更新一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.FindOneAndUpdate([conditions],[update],[options],[callback]);</span><br></pre></td></tr></table></figure>\n\n<p>根据id更新一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新\t根据id来修改表数据</span></span><br><span class=\"line\">User.findByIdAndUpdate(<span class=\"string\">'5e6c5264fada77438c45dfcd'</span>, &#123;</span><br><span class=\"line\">\tusername: <span class=\"string\">'junjun'</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ret</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'更新失败'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'更新成功'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询（查）\"><a href=\"#查询（查）\" class=\"headerlink\" title=\"查询（查）\"></a>查询（查）</h3><p>查询所有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询所有</span></span><br><span class=\"line\">User.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,ret</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'查询失败'</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>条件查询所有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据条件查询</span></span><br><span class=\"line\">User.find(&#123; <span class=\"attr\">username</span>:<span class=\"string\">'xiaoxiao'</span> &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,ret</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'查询失败'</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>条件查询单个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按照条件查询单个，查询出来的数据是一个对象（&#123;&#125;）</span></span><br><span class=\"line\"><span class=\"comment\">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span></span><br><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">\tusername: <span class=\"string\">'xiaoxiao'</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ret</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'查询失败'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用Node操作MySQL数据库\"><a href=\"#使用Node操作MySQL数据库\" class=\"headerlink\" title=\"使用Node操作MySQL数据库\"></a>使用Node操作MySQL数据库</h1><p>文档：<a href=\"https://www.npmjs.com/package/mysql\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/mysql</a></p>\n<p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save  mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入mysql包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mysql      = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建连接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> connection = mysql.createConnection(&#123;</span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,\t<span class=\"comment\">//本机</span></span><br><span class=\"line\">  user     : <span class=\"string\">'me'</span>,\t\t<span class=\"comment\">//账号root</span></span><br><span class=\"line\">  password : <span class=\"string\">'secret'</span>,\t<span class=\"comment\">//密码12345</span></span><br><span class=\"line\">  database : <span class=\"string\">'my_db'</span>\t<span class=\"comment\">//数据库名</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 连接数据库\t（打开冰箱门）</span></span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//执行数据操作\t（把大象放到冰箱）</span></span><br><span class=\"line\">connection.query(<span class=\"string\">'SELECT * FROM `users` '</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, results, fields</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error;<span class=\"comment\">//抛出异常阻止代码往下执行</span></span><br><span class=\"line\">  <span class=\"comment\">// 没有异常打印输出结果</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'The solution is: '</span>,results);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关闭连接\t（关闭冰箱门）</span></span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h1><h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><p>不成立的情况下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">2</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 结果是 1 3 undefined 4</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用回调函数解决：</p>\n<p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ret;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x,y,callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// callback就是回调函数</span></span><br><span class=\"line\">    <span class=\"comment\">// var x = 10;</span></span><br><span class=\"line\">    <span class=\"comment\">// var y = 20;</span></span><br><span class=\"line\">    <span class=\"comment\">// var callback = function(ret)&#123;console.log(ret);&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y;</span><br><span class=\"line\">        callback(ret);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意：</p>\n<p>​    凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p>\n<p>​    这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)</p>\n<p>ajax:</p>\n<p>基于原生XMLHttpRequest封装get方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oReq = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">// 当请求加载成功要调用指定的函数</span></span><br><span class=\"line\">oReq.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(oReq.responseText);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oReq.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"请求路径\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">oReq.send();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url,callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oReq = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    <span class=\"comment\">// 当请求加载成功要调用指定的函数</span></span><br><span class=\"line\">    oReq.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//console.log(oReq.responseText);</span></span><br><span class=\"line\">        callback(oReq.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    oReq.open(<span class=\"string\">\"GET\"</span>, url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    oReq.send();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">get</span>('data.json',function(data)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>callback  hell（回调地狱）:</p>\n<p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/b.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>通过回调嵌套的方式来保证顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">'./data/b.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'./data/a.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:<code>Promise</code>。</p>\n<ul>\n<li>Promise：承诺，保证</li>\n<li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li>\n</ul>\n<p>基本语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在EcmaScript 6中新增了一个API Promise</span></span><br><span class=\"line\"><span class=\"comment\">// Promise 是一个构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1 创建Promise容器\t\tresolve:解决   reject：失败</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">'./a.text'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// console.log(err);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把容器的Pending状态变为rejected</span></span><br><span class=\"line\">\t\t\treject(err);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// console.log(data);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把容器的Pending状态变为resolve</span></span><br><span class=\"line\">\t\t\tresolve(<span class=\"number\">1234</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当p1成功了，然后就（then）做指定的操作</span></span><br><span class=\"line\"><span class=\"comment\">// then方法接收的function就是容器中的resolve函数</span></span><br><span class=\"line\">p1</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'读取文件失败了'</span>, err);</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>链式循环：</p>\n<p>封装Promise的<code>readFile</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\tfs.readFile(filePath, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tresolve(data);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pReadFile(<span class=\"string\">'./a.txt'</span>)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./b.txt'</span>);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./a.txt'</span>);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>mongoose所有的API都支持Promise：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询所有</span></span><br><span class=\"line\">User.find()</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注册：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123;<span class=\"attr\">username</span>:<span class=\"string\">'admin'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(user)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户已存在'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">             username:<span class=\"string\">'aaa'</span>,</span><br><span class=\"line\">             password:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">             email:<span class=\"string\">'fffff'</span></span><br><span class=\"line\">        &#125;).save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">    username:<span class=\"string\">'admin'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 用户已经存在不能注册</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户已存在'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 用户不存在可以注册</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">                username:<span class=\"string\">'aaa'</span>,</span><br><span class=\"line\">                password:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">                email:<span class=\"string\">'fffff'</span></span><br><span class=\"line\">            &#125;).save();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(funciton(ret)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><p>async函数</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"修改完代码自动重启\"><a href=\"#修改完代码自动重启\" class=\"headerlink\" title=\"修改完代码自动重启\"></a>修改完代码自动重启</h2><p>我们在这里可以使用一个第三方命名行工具：<code>nodemon</code>来帮助我们解决频繁修改代码重启服务器的问题。</p>\n<p><code>nodemon</code>是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在任意目录执行该命令都可以</span><br><span class=\"line\">#也就是说，所有需要 --global安装的包都可以在任意目录执行</span><br><span class=\"line\">npm install --global nodemon</span><br><span class=\"line\">npm install -g nodemon</span><br><span class=\"line\"></span><br><span class=\"line\">#如果安装不成功的话，可以使用cnpm安装</span><br><span class=\"line\">cnpm install -g nodemon</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕之后使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app.js</span><br><span class=\"line\"></span><br><span class=\"line\">#使用nodemon</span><br><span class=\"line\">nodemon app.js</span><br></pre></td></tr></table></figure>\n\n<p>只要是通过<code>nodemon</code>启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</p>\n<h2 id=\"封装异步API\"><a href=\"#封装异步API\" class=\"headerlink\" title=\"封装异步API\"></a>封装异步API</h2><p>回调函数：获取异步操作的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// var callback = funtion(data)&#123; console.log(data); &#125;</span></span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">        callback(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取</span></span><br><span class=\"line\">fn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组的遍历方法，都是对函数作为一种参数\"><a href=\"#数组的遍历方法，都是对函数作为一种参数\" class=\"headerlink\" title=\"数组的遍历方法，都是对函数作为一种参数\"></a>数组的遍历方法，都是对函数作为一种参数</h2><h2 id=\"EcmaScript-6\"><a href=\"#EcmaScript-6\" class=\"headerlink\" title=\"EcmaScript 6\"></a>EcmaScript 6</h2><blockquote>\n<p>参考文档：<a href=\"https://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">https://es6.ruanyifeng.com/</a></p>\n</blockquote>\n<h1 id=\"项目案例\"><a href=\"#项目案例\" class=\"headerlink\" title=\"项目案例\"></a>项目案例</h1><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">app.js\t项目的入口文件</span><br><span class=\"line\">controllers</span><br><span class=\"line\">models\t存储使用mongoose设计的数据模型</span><br><span class=\"line\">node_modules\t第三方包</span><br><span class=\"line\">package.json\t包描述文件</span><br><span class=\"line\">package-lock.json\t第三方包版本锁定文件（npm5之后才有）</span><br><span class=\"line\">public\t公共静态资源</span><br><span class=\"line\">routes</span><br><span class=\"line\">views\t存储视图目录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模板页\"><a href=\"#模板页\" class=\"headerlink\" title=\"模板页\"></a>模板页</h2><ul>\n<li>子模板</li>\n<li>模板继承</li>\n</ul>\n<h2 id=\"路由设计-1\"><a href=\"#路由设计-1\" class=\"headerlink\" title=\"路由设计\"></a>路由设计</h2><table>\n<thead>\n<tr>\n<th>路由</th>\n<th>方法</th>\n<th>get参数</th>\n<th>post参数</th>\n<th>是否需要登录</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td>渲染首页</td>\n</tr>\n<tr>\n<td>/register(登录)</td>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td>渲染注册页面</td>\n</tr>\n<tr>\n<td>/register</td>\n<td>post</td>\n<td></td>\n<td>email,nickname,password</td>\n<td></td>\n<td>处理注册请求</td>\n</tr>\n<tr>\n<td>/login</td>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td>渲染登陆界面</td>\n</tr>\n<tr>\n<td>/login</td>\n<td>post</td>\n<td></td>\n<td>email,password</td>\n<td></td>\n<td>处理登录请求</td>\n</tr>\n<tr>\n<td>/loginout</td>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td>处理退出请求</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"模型设计\"><a href=\"#模型设计\" class=\"headerlink\" title=\"模型设计\"></a>模型设计</h2><h2 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h2><h2 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>创建目录结构</li>\n<li>整合静态也-模板页<ul>\n<li>include</li>\n<li>block</li>\n<li>extend</li>\n</ul>\n</li>\n<li>设计用户登陆，退出，注册的路由</li>\n<li>用户注册<ul>\n<li>先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）</li>\n<li>服务端<ul>\n<li>获取从客户端收到的数据</li>\n<li>操作数据库<ul>\n<li>如果有错，发送500告诉客户端服务器错了‘</li>\n<li>其他的根据业务发送不同的响应数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>登录</li>\n<li>退出</li>\n</ul>\n<h1 id=\"Express中间件\"><a href=\"#Express中间件\" class=\"headerlink\" title=\"Express中间件\"></a>Express中间件</h1><h2 id=\"中间件的概念\"><a href=\"#中间件的概念\" class=\"headerlink\" title=\"中间件的概念\"></a>中间件的概念</h2><blockquote>\n<p>参考文档：<a href=\"http://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/guide/using-middleware.html</a></p>\n</blockquote>\n<p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p>\n<p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p>\n<p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cookie = <span class=\"built_in\">require</span>(<span class=\"string\">'./expressPtoject/cookie'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"built_in\">require</span>(<span class=\"string\">'./expressPtoject/query'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> postBody = <span class=\"built_in\">require</span>(<span class=\"string\">'./expressPtoject/post-body'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 解析请求地址中的get参数</span></span><br><span class=\"line\">\t<span class=\"comment\">// var obj = url.parse(req.url,true);</span></span><br><span class=\"line\">\t<span class=\"comment\">// req.query = obj.query;</span></span><br><span class=\"line\">\tquery(req,res);\t<span class=\"comment\">//中间件</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 解析请求地址中的post参数</span></span><br><span class=\"line\">\treq.body = &#123;</span><br><span class=\"line\">\t\tfoo:<span class=\"string\">'bar'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(req.url === <span class=\"string\">'xxx'</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理请求</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'3000 runing...'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.get(<span class=\"string\">'/abc'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 同一个请求的req和res是一样的，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 可以前面存储下面调用</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'/abc'</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// req.foo = 'bar';</span></span><br><span class=\"line\">\treq.body = &#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">'xiaoxiao'</span>,</span><br><span class=\"line\">\t\tage:<span class=\"number\">18</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnext();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/abc'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(req.foo);</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'/abc'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'app is running at port 3000.'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"中间件的分类\"><a href=\"#中间件的分类\" class=\"headerlink\" title=\"中间件的分类:\"></a>中间件的分类:</h2><h3 id=\"应用程序级别的中间件\"><a href=\"#应用程序级别的中间件\" class=\"headerlink\" title=\"应用程序级别的中间件\"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time'</span>,<span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>关心请求路径和请求方法的中间件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time'</span>,<span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由级别的中间件\"><a href=\"#路由级别的中间件\" class=\"headerlink\" title=\"路由级别的中间件\"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p>\n<p>get:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'get'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>post：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'post'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>put:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.put(<span class=\"string\">'/user'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'put'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>delete:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.delete(<span class=\"string\">'/delete'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'delete'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总\"><a href=\"#总\" class=\"headerlink\" title=\"总\"></a>总</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中间件：处理请求，本质就是个函数</span></span><br><span class=\"line\"><span class=\"comment\">// 在express中，对中间件有几种分类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 不关心任何请求路径和请求方法的中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是说任何请求都会进入这个中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 中间件本身是一个方法，该方法接收三个参数</span></span><br><span class=\"line\"><span class=\"comment\">// Request 请求对象</span></span><br><span class=\"line\"><span class=\"comment\">// Response 响应对象</span></span><br><span class=\"line\"><span class=\"comment\">// next 下一个中间件</span></span><br><span class=\"line\"><span class=\"comment\">// // 全局匹配中间件</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(function(req, res, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tconsole.log('1');</span></span><br><span class=\"line\"><span class=\"comment\">// \t// 当一个请求进入中间件后</span></span><br><span class=\"line\"><span class=\"comment\">// \t// 如果需要请求另外一个方法则需要使用next（）方法</span></span><br><span class=\"line\"><span class=\"comment\">// \tnext();</span></span><br><span class=\"line\"><span class=\"comment\">// \t// next是一个方法，用来调用下一个中间件</span></span><br><span class=\"line\"><span class=\"comment\">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(function(req, res, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tconsole.log('2');</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 2 关心请求路径的中间件</span></span><br><span class=\"line\"><span class=\"comment\">// // 以/xxx开头的中间件</span></span><br><span class=\"line\"><span class=\"comment\">// app.use('/a',function(req, res, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tconsole.log(req.url);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3 严格匹配请求方法和请求路径的中间件</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'/a'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'app is running at port 3000.'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误处理中间件\"><a href=\"#错误处理中间件\" class=\"headerlink\" title=\"错误处理中间件\"></a>错误处理中间件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err,stack);</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Something broke'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>配置使用404中间件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">'404.html'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>配置全局错误处理中间件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">'.a/bc'</span>, funtion() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span></span><br><span class=\"line\">        \t<span class=\"comment\">// 当发生全局错误的时候，我们可以调用next传递错误对象</span></span><br><span class=\"line\">        \t<span class=\"comment\">// 然后被全局错误处理中间件匹配到并进行处理</span></span><br><span class=\"line\">\t\t\tnext(err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//全局错误处理中间件</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).json(&#123;</span><br><span class=\"line\">        err_code:<span class=\"number\">500</span>,</span><br><span class=\"line\">        message:err.message</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"内置中间件\"><a href=\"#内置中间件\" class=\"headerlink\" title=\"内置中间件\"></a>内置中间件</h2><ul>\n<li>express.static(提供静态文件)<ul>\n<li><a href=\"http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三方中间件\"><a href=\"#第三方中间件\" class=\"headerlink\" title=\"第三方中间件\"></a>第三方中间件</h2><blockquote>\n<p>参考文档：<a href=\"http://expressjs.com/en/resources/middleware.html\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/resources/middleware.html</a></p>\n</blockquote>\n<ul>\n<li>body-parser</li>\n<li>compression</li>\n<li>cookie-parser</li>\n<li>mogran</li>\n<li>response-time</li>\n<li>server-static</li>\n<li>session</li>\n</ul>\n<style>\n    .post-primary{\n        display: none;\n    }\n</style>\n\n","site":{"data":{}},"excerpt":"<div class='notification is-warning post-primary'>\n    Node的学习笔记\n</div>","more":"<h2 id=\"为什么要学习Node-js\"><a href=\"#为什么要学习Node-js\" class=\"headerlink\" title=\"为什么要学习Node.js\"></a>为什么要学习Node.js</h2><ul>\n<li>企业需求<ul>\n<li>具有服务端开发经验更改</li>\n<li>front-end</li>\n<li>back-end</li>\n<li>全栈开发工程师</li>\n<li>基本的网站开发能力<ul>\n<li>服务端</li>\n<li>前端</li>\n<li>运维部署</li>\n</ul>\n</li>\n<li>多人社区</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node-js是什么\"><a href=\"#Node-js是什么\" class=\"headerlink\" title=\"Node.js是什么\"></a>Node.js是什么</h2><ul>\n<li>Node.js是JavaScript 运行时</li>\n<li>通俗易懂的讲，Node.js是JavaScript的运行平台</li>\n<li>Node.js既不是语言，也不是框架，它是一个平台</li>\n<li>浏览器中的JavaScript<ul>\n<li>EcmaScript<ul>\n<li>基本语法</li>\n<li>if</li>\n<li>var</li>\n<li>function</li>\n<li>Object</li>\n<li>Array</li>\n</ul>\n</li>\n<li>Bom</li>\n<li>Dom</li>\n</ul>\n</li>\n<li>Node.js中的JavaScript<ul>\n<li>没有Bom，Dom</li>\n<li>EcmaScript</li>\n<li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul>\n<li>例如文件的读写</li>\n<li>网络服务的构建</li>\n<li>网络通信</li>\n<li>http服务器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构建与Chrome的V8引擎之上<ul>\n<li>代码只是具有特定格式的字符串</li>\n<li>引擎可以认识它，帮你解析和执行</li>\n<li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li>\n<li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li>\n</ul>\n</li>\n<li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul>\n<li>envent-driven    事件驱动</li>\n<li>non-blocking I/O mode   非阻塞I/O模型（异步）</li>\n<li>ightweight and efficent.   轻量和高效</li>\n</ul>\n</li>\n<li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul>\n<li>npm 是世界上最大的开源生态系统</li>\n<li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li>\n<li>npm install jquery</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node能做什么\"><a href=\"#Node能做什么\" class=\"headerlink\" title=\"Node能做什么\"></a>Node能做什么</h2><ul>\n<li>web服务器后台</li>\n<li>命令行工具<ul>\n<li>npm(node)</li>\n<li>git(c语言)</li>\n<li>hexo（node）</li>\n<li>…</li>\n</ul>\n</li>\n<li>对于前端工程师来讲，接触最多的是它的命令行工具<ul>\n<li>自己写的很少，主要是用别人第三方的</li>\n<li>webpack</li>\n<li>gulp</li>\n<li>npm</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><h2 id=\"安装Node环境\"><a href=\"#安装Node环境\" class=\"headerlink\" title=\"安装Node环境\"></a>安装Node环境</h2><ul>\n<li>查看Node环境的版本号</li>\n<li>下载：<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></li>\n<li>安装：<ul>\n<li>傻瓜式安装，一路<code>next</code></li>\n<li>安装过再次安装会升级</li>\n</ul>\n</li>\n<li>确认Node环境是否安装成功<ul>\n<li>查看node的版本号：<code>node --version</code></li>\n<li>或者<code>node -v</code></li>\n</ul>\n</li>\n<li>配置环境变量</li>\n</ul>\n<h2 id=\"解析执行JavaScript\"><a href=\"#解析执行JavaScript\" class=\"headerlink\" title=\"解析执行JavaScript\"></a>解析执行JavaScript</h2><ol>\n<li>创建编写JavaScript脚本文件</li>\n<li>打开终端，定位脚本文件的所属目录</li>\n<li>输入<code>node  文件名</code>执行对应的文件</li>\n</ol>\n<p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p>\n<h2 id=\"文件的读写\"><a href=\"#文件的读写\" class=\"headerlink\" title=\"文件的读写\"></a>文件的读写</h2><p>文件读取:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//浏览器中的JavaScript是没有文件操作能力的</span></span><br><span class=\"line\"><span class=\"comment\">//但是Node中的JavaScript具有文件操作能力</span></span><br><span class=\"line\"><span class=\"comment\">//fs是file-system的简写，就是文件系统的意思</span></span><br><span class=\"line\"><span class=\"comment\">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span></span><br><span class=\"line\"><span class=\"comment\">//在fs这个和兴模块中，就提供了人所有文件操作相关的API</span></span><br><span class=\"line\"><span class=\"comment\">//例如 fs.readFile就是用来读取文件的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  1.使用fs核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.读取文件</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.txt'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件读取失败'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>文件写入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  1.使用fs核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.将数据写入文件</span></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'./data/a.txt'</span>,<span class=\"string\">'我是文件写入的信息'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件写入失败'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><p>服务器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.加载http核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.使用http.createServer()创建一个web服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.服务器要做的事儿</span></span><br><span class=\"line\"><span class=\"comment\">// 提供服务：对数据服务</span></span><br><span class=\"line\"><span class=\"comment\">// 发请求</span></span><br><span class=\"line\"><span class=\"comment\">//\t接收请求</span></span><br><span class=\"line\"><span class=\"comment\">//\t处理请求</span></span><br><span class=\"line\"><span class=\"comment\">//\t反馈（发送响应）</span></span><br><span class=\"line\"><span class=\"comment\">//\t当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'收到客户的请求了'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.绑定端口号，启动服务</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'runing...'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Node中的模块系统\"><a href=\"#Node中的模块系统\" class=\"headerlink\" title=\"Node中的模块系统\"></a>Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p>\n<ul>\n<li><p>EcmaScript语言</p>\n<ul>\n<li>和浏览器一样，在Node中没有Bom和Dom</li>\n</ul>\n</li>\n<li><p>核心模块</p>\n<ul>\n<li>文件操作的fs</li>\n<li>http服务操作的http</li>\n<li>url路径操作模块</li>\n<li>path路径处理模块</li>\n<li>os操作系统信息</li>\n</ul>\n</li>\n<li><p>第三方模块</p>\n<ul>\n<li>art-template</li>\n<li>必须通过npm来下载才可以使用</li>\n</ul>\n</li>\n<li><p>自己写的模块</p>\n<ul>\n<li>自己创建的文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"什么是模块化\"><a href=\"#什么是模块化\" class=\"headerlink\" title=\"什么是模块化\"></a>什么是模块化</h2><ul>\n<li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li>\n<li>通信规则<ul>\n<li>加载require</li>\n<li>导出exports</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CommonJS模块规范\"><a href=\"#CommonJS模块规范\" class=\"headerlink\" title=\"CommonJS模块规范\"></a>CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p>\n<ul>\n<li><p>模块作用域</p>\n</li>\n<li><p>使用require方法来加载模块</p>\n</li>\n<li><p>使用exports接口对象来导出模板中的成员</p>\n<h3 id=\"加载require\"><a href=\"#加载require\" class=\"headerlink\" title=\"加载require\"></a>加载<code>require</code></h3><p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 自定义变量名 = require(<span class=\"string\">'模块'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>作用：</p>\n<ul>\n<li>执行被加载模块中的代码</li>\n<li>得到被加载模块中的<code>exports</code>导出接口对象</li>\n</ul>\n<h3 id=\"导出exports\"><a href=\"#导出exports\" class=\"headerlink\" title=\"导出exports\"></a>导出<code>exports</code></h3><ul>\n<li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p>\n</li>\n<li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p>\n<p>导出多个成员（必须在对象中）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.a = <span class=\"number\">123</span>;</span><br><span class=\"line\">exports.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bbb'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.c = &#123;</span><br><span class=\"line\">    foo:<span class=\"string\">\"bar\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.d = <span class=\"string\">'hello'</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>导出单个成员（拿到的就是函数，字符串）：\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'hello'</span>;</span><br></pre></td></tr></table></figure>\n\n以下情况会覆盖：\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"comment\">//后者会覆盖前者</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n也可以通过以下方法来导出多个成员：\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    foo = <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">    add:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></code></pre><h2 id=\"模块原理\"><a href=\"#模块原理\" class=\"headerlink\" title=\"模块原理\"></a>模块原理</h2><p>exports和<code>module.exports</code>的一个引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(exports === <span class=\"built_in\">module</span>.exports);\t<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.foo = <span class=\"string\">'bar'</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>当给exports重新赋值后，exports！= module.exports.</code></p>\n<p><code>最终return的是module.exports,无论exports中的成员是什么都没用。</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">真正去使用的时候：</span><br><span class=\"line\">\t导出单个成员：exports.xxx = xxx;</span><br><span class=\"line\">\t导出多个成员：<span class=\"built_in\">module</span>.exports 或者 modeule.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用服务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引用模板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">'art-template'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建服务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</span><br><span class=\"line\"><span class=\"comment\">// 公共路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wwwDir = <span class=\"string\">'D:/app/www'</span>;</span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = req.url;</span><br><span class=\"line\">    <span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./template-apche.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.end(<span class=\"string\">'404 Not Found'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fs.readdir(wwwDir, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, files</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res.end(<span class=\"string\">'Can not find www Dir.'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 使用模板引擎解析替换data中的模板字符串</span></span><br><span class=\"line\">            <span class=\"comment\">// 去xmpTempleteList.html中编写模板语法</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> htmlStr = template.render(data.toString(), &#123; </span><br><span class=\"line\">                title: <span class=\"string\">'D:/app/www/ 的索引'</span>,</span><br><span class=\"line\">                files:files </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// 发送响应数据</span></span><br><span class=\"line\">            res.end(htmlStr);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'running....'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>jQuery中的each 和 原生JavaScript方法forEach的区别：</span><br><span class=\"line\">\t提供源头：</span><br><span class=\"line\">    \t原生js是es5提供的（不兼容IE8）,</span><br><span class=\"line\">        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class=\"number\">2</span>以下的版本也就是<span class=\"number\">1.</span>版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用</span><br><span class=\"line\"><span class=\"number\">2.</span>模块中导出多个成员和导出单个成员</span><br><span class=\"line\"><span class=\"number\">3.301</span>和<span class=\"number\">302</span>的区别：</span><br><span class=\"line\">\t<span class=\"number\">301</span>永久重定向,浏览器会记住</span><br><span class=\"line\">    <span class=\"number\">302</span>临时重定向</span><br><span class=\"line\"><span class=\"number\">4.</span>exports和<span class=\"built_in\">module</span>.exports的区别:</span><br><span class=\"line\">\t每个模块中都有一个<span class=\"built_in\">module</span>对象</span><br><span class=\"line\">    <span class=\"built_in\">module</span>对象中有一个exports对象</span><br><span class=\"line\">    我们可以把需要导出的成员都挂载到<span class=\"built_in\">module</span>.exports接口对象中</span><br><span class=\"line\">\t也就是<span class=\"string\">`module.exports.xxx = xxx`</span>的方式</span><br><span class=\"line\">    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫<span class=\"string\">`exports`</span></span><br><span class=\"line\">    <span class=\"string\">`exports === module.exports`</span>结果为<span class=\"literal\">true</span>,所以完全可以<span class=\"string\">`exports.xxx = xxx`</span></span><br><span class=\"line\">    当一个模块需要导出单个成员的时候必须使用<span class=\"string\">`module.exports = xxx`</span>的方式，=,使用<span class=\"string\">`exports = xxx`</span>不管用,因为每个模块最终<span class=\"keyword\">return</span>的是<span class=\"built_in\">module</span>.exports,而exports只是<span class=\"built_in\">module</span>.exports的一个引用,所以<span class=\"string\">`exports`</span>即使重新赋值,也不会影响<span class=\"string\">`module.exports`</span>。</span><br><span class=\"line\">    有一种赋值方式比较特殊：<span class=\"string\">`exports = module.exports`</span>这个用来新建立引用关系的。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"require的加载规则\"><a href=\"#require的加载规则\" class=\"headerlink\" title=\"require的加载规则\"></a>require的加载规则</h1><ul>\n<li><p>核心模块</p>\n<ul>\n<li>模块名</li>\n</ul>\n</li>\n<li><p>第三方模块</p>\n<ul>\n<li>模块名</li>\n</ul>\n</li>\n<li><p>用户自己写的</p>\n<ul>\n<li>路径</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"require的加载规则：\"><a href=\"#require的加载规则：\" class=\"headerlink\" title=\"require的加载规则：\"></a>require的加载规则：</h2><ul>\n<li><p>优先从缓存加载</p>\n</li>\n<li><p>判断模块标识符</p>\n<ul>\n<li>核心模块</li>\n<li>自己写的模块（路径形式的模块）</li>\n<li>第三方模块（node_modules）<ul>\n<li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li>\n<li>npm<ul>\n<li>开发人员可以把写好的框架库发布到npm上</li>\n<li>使用者通过npm命令来下载</li>\n</ul>\n</li>\n<li>使用方式：<code>var 名称 = require(&#39;npm install【下载包】 的包名&#39;)</code><ul>\n<li>node_modules/express/package.json main</li>\n<li>如果package.json或者main不成立，则查找被选择项：index.js</li>\n<li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果非路径形式的标识</span></span><br><span class=\"line\"><span class=\"comment\">// 路径形式的标识：</span></span><br><span class=\"line\">    <span class=\"comment\">// ./  当前目录 不可省略</span></span><br><span class=\"line\">    <span class=\"comment\">// ../  上一级目录  不可省略</span></span><br><span class=\"line\">    <span class=\"comment\">//  /xxx也就是D:/xxx</span></span><br><span class=\"line\">    <span class=\"comment\">// 带有绝对路径几乎不用（D:/a/foo.js）</span></span><br><span class=\"line\"><span class=\"comment\">// 首位表示的是当前文件模块所属磁盘根目录</span></span><br><span class=\"line\"><span class=\"comment\">// require('./a'); </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 核心模块</span></span><br><span class=\"line\"><span class=\"comment\">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三方模块</span></span><br><span class=\"line\"><span class=\"comment\">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用</span></span><br><span class=\"line\"><span class=\"comment\">// 第三方包的名字不可能和核心模块的名字是一样的</span></span><br><span class=\"line\"><span class=\"comment\">// 既不是核心模块，也不是路径形式的模块</span></span><br><span class=\"line\"><span class=\"comment\">//      先找到当前文所述目录的node_modules</span></span><br><span class=\"line\"><span class=\"comment\">//      然后找node_modules/art-template目录</span></span><br><span class=\"line\"><span class=\"comment\">//      node_modules/art-template/package.json</span></span><br><span class=\"line\"><span class=\"comment\">//      node_modules/art-template/package.json中的main属性</span></span><br><span class=\"line\"><span class=\"comment\">//      main属性记录了art-template的入口模块</span></span><br><span class=\"line\"><span class=\"comment\">//      然后加载使用这个第三方包</span></span><br><span class=\"line\"><span class=\"comment\">//      实际上最终加载的还是文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      如果package.json不存在或者mian指定的入口模块不存在</span></span><br><span class=\"line\"><span class=\"comment\">//      则node会自动找该目录下的index.js</span></span><br><span class=\"line\"><span class=\"comment\">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span></span><br><span class=\"line\"><span class=\"comment\">//      </span></span><br><span class=\"line\">        <span class=\"comment\">// 如果条件都不满足则会进入上一级目录进行查找</span></span><br><span class=\"line\"><span class=\"comment\">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">'art-template'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模块标识符中的-和文件操作路径中的\"><a href=\"#模块标识符中的-和文件操作路径中的\" class=\"headerlink\" title=\"模块标识符中的/和文件操作路径中的/\"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 咱们所使用的所有文件操作的API都是异步的</span></span><br><span class=\"line\"><span class=\"comment\">// 就像ajax请求一样</span></span><br><span class=\"line\"><span class=\"comment\">// 读取文件</span></span><br><span class=\"line\"><span class=\"comment\">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span></span><br><span class=\"line\"><span class=\"comment\">// ./index.txt    相对于当前目录</span></span><br><span class=\"line\"><span class=\"comment\">// /index.txt    相对于当前目录</span></span><br><span class=\"line\"><span class=\"comment\">// /index.txt   绝对路径,当前文件模块所处根目录</span></span><br><span class=\"line\"><span class=\"comment\">// d:express/index.txt   绝对路径</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./index.txt'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>  <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>模块操作路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在模块加载中，相对路径中的./不能省略</span></span><br><span class=\"line\"><span class=\"comment\">// 这里省略了.也是磁盘根目录</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./index'</span>)(<span class=\"string\">'hello'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h1><ul>\n<li>node package manage(node包管理器)</li>\n<li>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</li>\n</ul>\n<h3 id=\"npm网站\"><a href=\"#npm网站\" class=\"headerlink\" title=\"npm网站\"></a>npm网站</h3><blockquote>\n<p>​    npmjs.com    网站   是用来搜索npm包的</p>\n</blockquote>\n<h3 id=\"npm命令行工具\"><a href=\"#npm命令行工具\" class=\"headerlink\" title=\"npm命令行工具\"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p>\n<p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p>\n<p>升级npm(自己升级自己)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global npm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>npm init(生成package.json说明书文件)<ul>\n<li>npm init -y(可以跳过向导，快速生成)</li>\n</ul>\n</li>\n<li>npm install<ul>\n<li>一次性把dependencies选项中的依赖项全部安装</li>\n<li>简写（npm i）</li>\n</ul>\n</li>\n<li>npm install 包名<ul>\n<li>只下载</li>\n<li>简写（npm i 包名）</li>\n</ul>\n</li>\n<li>npm install –save 包名<ul>\n<li>下载并且保存依赖项（package.json文件中的dependencies选项）</li>\n<li>简写（npm i  包名）</li>\n</ul>\n</li>\n<li>npm uninstall 包名<ul>\n<li>只删除，如果有依赖项会依然保存</li>\n<li>简写（npm un 包名）</li>\n</ul>\n</li>\n<li>npm uninstall –save 包名<ul>\n<li>删除的同时也会把依赖信息全部删除</li>\n<li>简写（npm un 包名）</li>\n</ul>\n</li>\n<li>npm help<ul>\n<li>查看使用帮助</li>\n</ul>\n</li>\n<li>npm 命令 –help<ul>\n<li>查看具体命令的使用帮助（npm uninstall –help）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解决npm被墙问题\"><a href=\"#解决npm被墙问题\" class=\"headerlink\" title=\"解决npm被墙问题\"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p>\n<blockquote>\n<p><a href=\"https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。\" target=\"_blank\" rel=\"noopener\">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p>\n</blockquote>\n<p>安装淘宝的cnpm：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在任意目录执行都可以</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">--global表示安装到全局，而非当前目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">--global不能省略，否则不管用</span></span><br><span class=\"line\">npm install --global cnpm</span><br></pre></td></tr></table></figure>\n\n<p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">走国外的npm服务器下载jQuery包，速度比较慢</span></span><br><span class=\"line\">npm install jQuery;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用cnpm就会通过淘宝的服务器来下载jQuery</span></span><br><span class=\"line\">cnpm install jQuery;</span><br></pre></td></tr></table></figure>\n\n<p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery --registry=https://npm.taobao.org;</span><br></pre></td></tr></table></figure>\n\n<p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://npm.taobao.org;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看npm配置信息</span></span><br><span class=\"line\">npm config list;</span><br></pre></td></tr></table></figure>\n\n<p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p>\n<h1 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p>\n<p>这个文件可以通过<code>npm init</code>自动初始化出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\code\\node中的模块系统&gt;npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See <span class=\"string\">`npm help json`</span> <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use <span class=\"string\">`npm install &lt;pkg&gt;`</span> afterwards to install a package and</span><br><span class=\"line\">save it <span class=\"keyword\">as</span> a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (node中的模块系统)</span><br><span class=\"line\">Sorry, name can only contain URL-friendly characters.</span><br><span class=\"line\">package name: (node中的模块系统) cls</span><br><span class=\"line\">version: (<span class=\"number\">1.0</span><span class=\"number\">.0</span>)</span><br><span class=\"line\">description: 这是一个测试项目</span><br><span class=\"line\">entry point: (main.js)</span><br><span class=\"line\">test command:</span><br><span class=\"line\">git repository:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: xiaochen</span><br><span class=\"line\">license: (ISC)</span><br><span class=\"line\">About to write to D:\\code\\node中的模块系统\\package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"cls\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"这是一个测试项目\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"main.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"xiaochen\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Is <span class=\"keyword\">this</span> OK? (yes) yes</span><br></pre></td></tr></table></figure>\n\n<p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p>\n<p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p>\n<ul>\n<li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li>\n<li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li>\n</ul>\n<h2 id=\"package-json和package-lock-json\"><a href=\"#package-json和package-lock-json\" class=\"headerlink\" title=\"package.json和package-lock.json\"></a>package.json和package-lock.json</h2><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p>\n<p>npm5以后才加入这个文件</p>\n<p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p>\n<ul>\n<li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li>\n<li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li>\n<li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul>\n<li>这样的话重新<code>npm install</code>的时候速度就可以提升</li>\n</ul>\n</li>\n<li>从文件来看，有一个<code>lock</code>称之为锁<ul>\n<li>这个<code>lock</code>使用来锁版本的</li>\n<li>如果项目依赖了<code>1.1.1</code>版本</li>\n<li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li>\n<li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"path路径操作模块\"><a href=\"#path路径操作模块\" class=\"headerlink\" title=\"path路径操作模块\"></a>path路径操作模块</h2><blockquote>\n<p>参考文档：<a href=\"https://nodejs.org/docs/latest-v13.x/api/path.html\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p>\n</blockquote>\n<ul>\n<li>path.basename：获取路径的文件名，默认包含扩展名</li>\n<li>path.dirname：获取路径中的目录部分</li>\n<li>path.extname：获取一个路径中的扩展名部分</li>\n<li>path.parse：把路径转换为对象<ul>\n<li>root：根路径</li>\n<li>dir：目录</li>\n<li>base：包含后缀名的文件名</li>\n<li>ext：后缀名</li>\n<li>name：不包含后缀名的文件名</li>\n</ul>\n</li>\n<li>path.join：拼接路径</li>\n<li>path.isAbsolute：判断一个路径是否为绝对路径</li>\n</ul>\n<h1 id=\"Node中的其它成员-dirname-filename\"><a href=\"#Node中的其它成员-dirname-filename\" class=\"headerlink\" title=\"Node中的其它成员(dirname,filename)\"></a>Node中的其它成员(<strong>dirname,</strong>filename)</h1><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p>\n<ul>\n<li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p>\n</li>\n<li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p>\n</li>\n<li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p>\n</li>\n</ul>\n<p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。</p>\n<p>所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。</p>\n<p>就可以使用<code>__dirname</code>或者<code>__filename</code>来帮助我们解决这个问题</p>\n<p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(__dirname + 'a.txt');</span></span><br><span class=\"line\"><span class=\"comment\">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span></span><br><span class=\"line\">fs.readFile(path.join(__dirname + <span class=\"string\">'/a.txt'</span>),<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p>\n</blockquote>\n<blockquote>\n<p><strong>注意：</strong></p>\n<p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p>\n<p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p>\n</blockquote>\n<h1 id=\"Express（快速的）\"><a href=\"#Express（快速的）\" class=\"headerlink\" title=\"Express（快速的）\"></a>Express（快速的）</h1><p>作者：Tj</p>\n<p>原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p>\n<p>在node中有很多web开发框架。主要学习express</p>\n<ul>\n<li><p><code>http://expressjs.com/</code>,其中主要封装的是http。</p>\n</li>\n<li><pre><code class=\"javascript\"><span class=\"comment\">// 1 安装</span>\n<span class=\"comment\">// 2 引包</span>\n<span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);\n<span class=\"comment\">// 3 创建服务器应用程序</span>\n<span class=\"comment\">//      也就是原来的http.createServer();</span>\n<span class=\"keyword\">var</span> app = express();\n\n<span class=\"comment\">// 公开指定目录</span>\n<span class=\"comment\">// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源</span>\n<span class=\"comment\">// 在Express中开放资源就是一个API的事</span>\napp.use(<span class=\"string\">'/public/'</span>,express.static(<span class=\"string\">'/public/'</span>));\n\n<span class=\"comment\">//模板引擎在Express中开放模板也是一个API的事</span>\n\n<span class=\"comment\">// 当服务器收到get请求 / 的时候，执行回调处理函数</span>\napp.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>{\n    res.send(<span class=\"string\">'hello express'</span>);\n})\n\n<span class=\"comment\">// 相当于server.listen</span>\napp.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'app is runing at port 3000'</span>);\n})\n&lt;!--￼<span class=\"number\">23</span>--&gt;\n</code></pre>\n</li>\n</ul>\n<h5 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world:\"></a>hello world:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建app</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  2. </span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"comment\">// res.write('Hello');</span></span><br><span class=\"line\">    <span class=\"comment\">// res.write('World');</span></span><br><span class=\"line\">    <span class=\"comment\">// res.end()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">// res.end('hello world');</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'express app is runing...'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"基本路由\"><a href=\"#基本路由\" class=\"headerlink\" title=\"基本路由\"></a>基本路由</h5><p>路由：</p>\n<ul>\n<li><p>请求方法</p>\n</li>\n<li><p>请求路径</p>\n</li>\n<li><p>请求处理函数</p>\n</li>\n</ul>\n<p>get:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当你以get方法请求/的时候，执行对应的处理函数</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>post:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当你以post方法请求/的时候，执行对应的处理函数</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Express静态服务API\"><a href=\"#Express静态服务API\" class=\"headerlink\" title=\"Express静态服务API\"></a>Express静态服务API</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</span><br><span class=\"line\"><span class=\"comment\">// 这种方式可以省略请求路径前缀</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'files'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这种方式相当于static为public目录的别名</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/stataic'</span>,express.static(<span class=\"string\">'public'</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建app</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开放静态资源</span></span><br><span class=\"line\"><span class=\"comment\">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span></span><br><span class=\"line\"><span class=\"comment\">// 访问：http://127.0.0.1:3000/public/login.html</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/public/'</span>,express.static(<span class=\"string\">'./public/'</span>)); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span></span><br><span class=\"line\"><span class=\"comment\">// 访问：http://127.0.0.1:3000/login.html</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(express.static('./public/'));   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.访问：http://127.0.0.1:3000/a/login.html</span></span><br><span class=\"line\"><span class=\"comment\">// a相当于public的别名</span></span><br><span class=\"line\"><span class=\"comment\">// app.use('/a/',express.static('./public/')); </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  </span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.end(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'express app is runing...'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在Express中配置使用art-templete模板引擎\"><a href=\"#在Express中配置使用art-templete模板引擎\" class=\"headerlink\" title=\"在Express中配置使用art-templete模板引擎\"></a>在Express中配置使用<code>art-templete</code>模板引擎</h5><ul>\n<li><a href=\"https://aui.github.io/art-template/\" target=\"_blank\" rel=\"noopener\">art-template官方文档</a></li>\n<li>在node中，有很多第三方模板引擎都可以使用，不是只有<code>art-template</code><ul>\n<li>还有ejs，jade（pug），handlebars，nunjucks</li>\n</ul>\n</li>\n</ul>\n<p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save art-template</span><br><span class=\"line\">npm install --save express-art-template</span><br><span class=\"line\"></span><br><span class=\"line\">//两个一起安装</span><br><span class=\"line\">npm i --save art-template express-art-template</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'html'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'express-art-template'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// express默认会去views目录找index.html</span></span><br><span class=\"line\">    res.render(<span class=\"string\">'index.html'</span>,&#123;</span><br><span class=\"line\">           title:<span class=\"string\">'hello world'</span>     </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数views千万不要写错</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>,目录路径);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在Express中获取表单请求数据\"><a href=\"#在Express中获取表单请求数据\" class=\"headerlink\" title=\"在Express中获取表单请求数据\"></a>在Express中获取表单请求数据</h5><h6 id=\"获取get请求数据：\"><a href=\"#获取get请求数据：\" class=\"headerlink\" title=\"获取get请求数据：\"></a>获取get请求数据：</h6><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过requery方法获取用户输入的数据</span></span><br><span class=\"line\"><span class=\"comment\">// req.query只能拿到get请求的数据</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> comment = req.query;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"获取post请求数据：\"><a href=\"#获取post请求数据：\" class=\"headerlink\" title=\"获取post请求数据：\"></a>获取post请求数据：</h6><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p>\n<p>安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save body-parser;</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 引包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置body-parser</span></span><br><span class=\"line\"><span class=\"comment\">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是说可以直接通过req.body来获取表单post请求数据</span></span><br><span class=\"line\"><span class=\"comment\">// parse application/x-www-form-urlencoded</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parse application/json</span></span><br><span class=\"line\">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)</span><br><span class=\"line\">  res.write(<span class=\"string\">'you posted:\\n'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 可以通过req.body来获取表单请求数据</span></span><br><span class=\"line\">  res.end(<span class=\"built_in\">JSON</span>.stringify(req.body, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在Express中配置使用express-session插件操作\"><a href=\"#在Express中配置使用express-session插件操作\" class=\"headerlink\" title=\"在Express中配置使用express-session插件操作\"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote>\n<p>参考文档：<a href=\"https://github.com/expressjs/session\" target=\"_blank\" rel=\"noopener\">https://github.com/expressjs/session</a></p>\n</blockquote>\n<p>安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express-session</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">//这是最简单的配置方式</span></span><br><span class=\"line\"><span class=\"comment\">//Session是基于Cookie实现的</span></span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span></span><br><span class=\"line\">  <span class=\"comment\">//目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class=\"line\">  secret: <span class=\"string\">'keyboard cat'</span>,</span><br><span class=\"line\">  resave: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  saveUninitialized: <span class=\"literal\">true</span>,<span class=\"comment\">//无论是否适用Session，都默认直接分配一把钥匙</span></span><br><span class=\"line\">  cookie: &#123; <span class=\"attr\">secure</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读</span></span><br><span class=\"line\"><span class=\"comment\">//添加Session数据</span></span><br><span class=\"line\"><span class=\"comment\">//session就是一个对象</span></span><br><span class=\"line\">req.session.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//写</span></span><br><span class=\"line\"><span class=\"comment\">//获取session数据</span></span><br><span class=\"line\">req.session.foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删</span></span><br><span class=\"line\">req.session.foo = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> req.session.foo</span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p>\n<h3 id=\"利用Express实现ADUS项目\"><a href=\"#利用Express实现ADUS项目\" class=\"headerlink\" title=\"利用Express实现ADUS项目\"></a>利用Express实现ADUS项目</h3><h4 id=\"模块化思想\"><a href=\"#模块化思想\" class=\"headerlink\" title=\"模块化思想\"></a>模块化思想</h4><p>模块如何划分:</p>\n<ul>\n<li>模块职责要单一</li>\n</ul>\n<p>javascript模块化：</p>\n<ul>\n<li>Node 中的 CommonJS</li>\n<li>浏览器中的：<ul>\n<li>AMD    require.js</li>\n<li>CMD     sea.js</li>\n</ul>\n</li>\n<li>es6中增加了官方支持</li>\n</ul>\n<h4 id=\"起步-1\"><a href=\"#起步-1\" class=\"headerlink\" title=\"起步\"></a>起步</h4><ul>\n<li>初始化</li>\n<li>模板处理</li>\n</ul>\n<h4 id=\"路由设计\"><a href=\"#路由设计\" class=\"headerlink\" title=\"路由设计\"></a>路由设计</h4><table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th align=\"left\">请求路径</th>\n<th align=\"left\">get参数</th>\n<th>post参数</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td align=\"left\">/students</td>\n<td align=\"left\"></td>\n<td></td>\n<td align=\"left\">渲染首页</td>\n</tr>\n<tr>\n<td>GET</td>\n<td align=\"left\">/students/new</td>\n<td align=\"left\"></td>\n<td></td>\n<td align=\"left\">渲染添加学生页面</td>\n</tr>\n<tr>\n<td>POST</td>\n<td align=\"left\">/students/new</td>\n<td align=\"left\"></td>\n<td>name,age,gender,hobbies</td>\n<td align=\"left\">处理添加学生请求</td>\n</tr>\n<tr>\n<td>GET</td>\n<td align=\"left\">/students/edit</td>\n<td align=\"left\">id</td>\n<td></td>\n<td align=\"left\">渲染编辑页面</td>\n</tr>\n<tr>\n<td>POST</td>\n<td align=\"left\">/students/edit</td>\n<td align=\"left\"></td>\n<td>id,name,age,gender,hobbies</td>\n<td align=\"left\">处理编辑请求</td>\n</tr>\n<tr>\n<td>GET</td>\n<td align=\"left\">/students/delete</td>\n<td align=\"left\">id</td>\n<td></td>\n<td align=\"left\">处理删除请求</td>\n</tr>\n</tbody></table>\n<h4 id=\"提取路由模块\"><a href=\"#提取路由模块\" class=\"headerlink\" title=\"提取路由模块\"></a>提取路由模块</h4><p>router.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * router.js路由模块</span></span><br><span class=\"line\"><span class=\"comment\"> * 职责：</span></span><br><span class=\"line\"><span class=\"comment\"> *      处理路由</span></span><br><span class=\"line\"><span class=\"comment\"> *      根据不同的请求方法+请求路径设置具体的请求函数</span></span><br><span class=\"line\"><span class=\"comment\"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Express专门提供了一种更好的方式</span></span><br><span class=\"line\"><span class=\"comment\">// 专门用来提供路由的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1 创建一个路由容器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"comment\">// 2 把路由都挂载到路由容器中</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// res.send('hello world');</span></span><br><span class=\"line\">    <span class=\"comment\">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span></span><br><span class=\"line\">    <span class=\"comment\">// 除了这样来转换，也可以通过data.toString（）来转换</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./db.json'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Server error.'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 读取到的文件数据是string类型的数据</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(data);</span></span><br><span class=\"line\">        <span class=\"comment\">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> students = <span class=\"built_in\">JSON</span>.parse(data).students;</span><br><span class=\"line\">        res.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 读取文件数据</span></span><br><span class=\"line\">            students:students</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/new'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">'new.html'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/edit'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/students/edit'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/students/delete'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3 把router导出</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// router(app);</span></span><br><span class=\"line\"><span class=\"comment\">// 把路由容器挂载到app服务中</span></span><br><span class=\"line\"><span class=\"comment\">// 挂载路由</span></span><br><span class=\"line\">app.use(router);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"设计操作数据的API文件模块\"><a href=\"#设计操作数据的API文件模块\" class=\"headerlink\" title=\"设计操作数据的API文件模块\"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p>\n<p>find接受一个方法作为参数，方法内部返回一个条件</p>\n<p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p>\n<p>符合该条件的元素会作为find方法的返回值</p>\n<p>如果遍历结束还没有符合该条件的元素，则返回undefined<img src=\"C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200313103810731.png\" alt=\"image-20200313103810731\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * student.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据操作文件模块</span></span><br><span class=\"line\"><span class=\"comment\"> * 职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 获取所有学生列表</span></span><br><span class=\"line\"><span class=\"comment\">  * return []</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 获取添加保存学生</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.save = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新学生</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.update = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除学生</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.delete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ul>\n<li><p>处理模板</p>\n</li>\n<li><p>配置静态开放资源</p>\n</li>\n<li><p>配置模板引擎</p>\n</li>\n<li><p>简单的路由，/studens渲染静态页出来</p>\n</li>\n<li><p>路由设计</p>\n</li>\n<li><p>提取路由模块</p>\n</li>\n<li><p>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js’</p>\n</li>\n<li><p>先写好student.js文件结构</p>\n<ul>\n<li>查询所有学生列别哦的API</li>\n<li>findById</li>\n<li>save</li>\n<li>updateById</li>\n<li>deleteById</li>\n</ul>\n</li>\n<li><p>实现具体功能</p>\n<ul>\n<li>通过路由收到请求</li>\n<li>接受请求中的参数（get，post）<ul>\n<li>req.query</li>\n<li>req.body</li>\n</ul>\n</li>\n<li>调用数据操作API处理数据</li>\n<li>根据操作结果给客户端发送请求</li>\n</ul>\n</li>\n<li><p>业务功能顺序</p>\n<ul>\n<li>列表</li>\n<li>添加</li>\n<li>编辑</li>\n<li>删除</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"子模板和模板的继承（模板引擎高级语法）【include，extend，block】\"><a href=\"#子模板和模板的继承（模板引擎高级语法）【include，extend，block】\" class=\"headerlink\" title=\"子模板和模板的继承（模板引擎高级语法）【include，extend，block】\"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p>\n<p>模板页：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"zh\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">\t&lt;meta http-equiv=<span class=\"string\">\"X-UA-Compatible\"</span> content=<span class=\"string\">\"ie=edge\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;模板页&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;link rel=\"stylesheet\" href=\"/</span>node_modules/bootstrap/dist/css/bootstrap.css<span class=\"string\">\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123; block 'head' &#125;&#125;&#123;&#123; /block &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;!-- 通过include导入公共部分 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123;include './header.html'&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;!-- 留一个位置 让别的内容去填充 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123; block  'content' &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;h1&gt;默认内容&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123; /block &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;!-- 通过include导入公共部分 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123;include './footer.html'&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;!-- 公共样式 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;script src=\"</span>/node_modules/jquery/dist/jquery.js<span class=\"string\">\" &gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;script src=\"</span>/node_modules/bootstrap/dist/js/bootstrap.js<span class=\"string\">\" &gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&#123;&#123; block 'script' &#125;&#125;&#123;&#123; /block &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>模板的继承：</p>\n<p>​    header页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">\t&lt;h1&gt;公共的头部&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​    footer页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">\t&lt;h1&gt;公共的底部&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>模板页的使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 继承(extend:延伸，扩展)模板也layout.html --&gt;</span><br><span class=\"line\">&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;</span><br><span class=\"line\">&#123;&#123;extend <span class=\"string\">'./layout.html'</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 向模板页面填充新的数据 --&gt;</span><br><span class=\"line\">&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;</span><br><span class=\"line\">&lt;!-- style样式方面的内容 --&gt;</span><br><span class=\"line\">&#123;&#123; block <span class=\"string\">'head'</span> &#125;&#125;</span><br><span class=\"line\">\t&lt;style type=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">\t\tbody&#123;</span><br><span class=\"line\">\t\t\tbackground-color: skyblue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;&#123; /</span>block &#125;&#125;</span><br><span class=\"line\">&#123;&#123; block <span class=\"string\">'content'</span> &#125;&#125;</span><br><span class=\"line\">\t&lt;div id=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;Index页面的内容&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>div&gt;</span><br><span class=\"line\">&#123;&#123; /block &#125;&#125;</span><br><span class=\"line\">&lt;!-- js部分的内容 --&gt;</span><br><span class=\"line\">&#123;&#123; block <span class=\"string\">'script'</span> &#125;&#125;</span><br><span class=\"line\">\t&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;&#123; /</span>block &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终的显示效果：</p>\n<h1 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h1><h2 id=\"关系型和非关系型数据库\"><a href=\"#关系型和非关系型数据库\" class=\"headerlink\" title=\"关系型和非关系型数据库\"></a>关系型和非关系型数据库</h2><h3 id=\"关系型数据库（表就是关系，或者说表与表之间存在关系）。\"><a href=\"#关系型数据库（表就是关系，或者说表与表之间存在关系）。\" class=\"headerlink\" title=\"关系型数据库（表就是关系，或者说表与表之间存在关系）。\"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul>\n<li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li>\n<li>所有的关系型数据库在操作之前都需要设计表结构</li>\n<li>而且数据表还支持约束<ul>\n<li>唯一的</li>\n<li>主键</li>\n<li>默认值</li>\n<li>非空</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"非关系型数据库\"><a href=\"#非关系型数据库\" class=\"headerlink\" title=\"非关系型数据库\"></a>非关系型数据库</h3><ul>\n<li>非关系型数据库非常的灵活</li>\n<li>有的关系型数据库就是key-value对儿</li>\n<li>但MongDB是长得最像关系型数据库的非关系型数据库<ul>\n<li>数据库 -》 数据库</li>\n<li>数据表 -》 集合（数组）</li>\n<li>表记录 -》文档对象</li>\n</ul>\n</li>\n</ul>\n<p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    qq:&#123;</span><br><span class=\"line\">       user:[</span><br><span class=\"line\">           &#123;&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class=\"line\">       ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>下载</p>\n<ul>\n<li>下载地址：<a href=\"https://www.mongodb.com/download-center/community\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center/community</a></li>\n</ul>\n</li>\n<li><p>安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mongoose</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量</p>\n</li>\n<li><p>最后输入<code>mongod --version</code>测试是否安装成功</p>\n</li>\n</ul>\n<h2 id=\"启动和关闭数据库\"><a href=\"#启动和关闭数据库\" class=\"headerlink\" title=\"启动和关闭数据库\"></a>启动和关闭数据库</h2><p>启动：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 所以在第一次执行该命令之前先自己手动新建一个 /data/db</span></span><br><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n\n<p>如果想要修改默认的数据存储目录，可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath = 数据存储目录路径</span><br></pre></td></tr></table></figure>\n\n<p>停止：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在开启服务的控制台，直接Ctrl+C;</span><br><span class=\"line\">或者直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><p>连接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 该命令默认连接本机的 MongoDB 服务</span><br><span class=\"line\">mongo</span><br></pre></td></tr></table></figure>\n\n<p>退出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在连接状态输入 exit 退出连接</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ul>\n<li><code>show dbs</code><ul>\n<li>查看数据库列表(数据库中的所有数据库)</li>\n</ul>\n</li>\n<li><code>db</code><ul>\n<li>查看当前连接的数据库</li>\n</ul>\n</li>\n<li><code>use 数据库名称</code><ul>\n<li>切换到指定的数据库，（如果没有会新建）</li>\n</ul>\n</li>\n<li><code>show collections</code><ul>\n<li>查看当前目录下的所有数据表</li>\n</ul>\n</li>\n<li><code>db.表名.find()</code><ul>\n<li>查看表中的详细信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"在Node中如何操作MongoDB数据库\"><a href=\"#在Node中如何操作MongoDB数据库\" class=\"headerlink\" title=\"在Node中如何操作MongoDB数据库\"></a>在Node中如何操作MongoDB数据库</h2><h3 id=\"使用官方的MongoDB包来操作\"><a href=\"#使用官方的MongoDB包来操作\" class=\"headerlink\" title=\"使用官方的MongoDB包来操作\"></a>使用官方的<code>MongoDB</code>包来操作</h3><blockquote>\n<p>​    <a href=\"http://mongodb.github.io/node-mongodb-native/\" target=\"_blank\" rel=\"noopener\">http://mongodb.github.io/node-mongodb-native/</a></p>\n</blockquote>\n<h3 id=\"使用第三方包mongoose来操作MongoDB数据库\"><a href=\"#使用第三方包mongoose来操作MongoDB数据库\" class=\"headerlink\" title=\"使用第三方包mongoose来操作MongoDB数据库\"></a>使用第三方包<code>mongoose</code>来操作MongoDB数据库</h3><p>​    第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装，名字叫<code>mongoose</code>，是WordPress项目团队开发的。</p>\n<blockquote>\n<p>​    <a href=\"https://mongoosejs.com/\" target=\"_blank\" rel=\"noopener\">https://mongoosejs.com/</a></p>\n</blockquote>\n<h2 id=\"学习指南（步骤）\"><a href=\"#学习指南（步骤）\" class=\"headerlink\" title=\"学习指南（步骤）\"></a>学习指南（步骤）</h2><p>官方学习文档：<a href=\"https://mongoosejs.com/docs/index.html\" target=\"_blank\" rel=\"noopener\">https://mongoosejs.com/docs/index.html</a></p>\n<h3 id=\"设计Scheme-发布Model-创建表\"><a href=\"#设计Scheme-发布Model-创建表\" class=\"headerlink\" title=\"设计Scheme 发布Model (创建表)\"></a>设计Scheme 发布Model (创建表)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.引包</span></span><br><span class=\"line\"><span class=\"comment\">// 注意：按照后才能require使用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拿到schema图表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.连接数据库</span></span><br><span class=\"line\"><span class=\"comment\">// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.设计集合结构（表结构）</span></span><br><span class=\"line\"><span class=\"comment\">// 用户表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">\tusername: &#123; <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t\ttype: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t\t<span class=\"built_in\">require</span>: <span class=\"literal\">true</span> <span class=\"comment\">//添加约束，保证数据的完整性，让数据按规矩统一</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tpassword: &#123;</span><br><span class=\"line\">\t\ttype: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t\t<span class=\"built_in\">require</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\temail: &#123;</span><br><span class=\"line\">\t\ttype: <span class=\"built_in\">String</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.将文档结构发布为模型</span></span><br><span class=\"line\"><span class=\"comment\">// mongoose.model方法就是用来将一个架构发布为 model</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t\t\t\tmongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t\t\t\t例如 这里会变成users集合名称</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t第二个参数：架构</span></span><br><span class=\"line\"><span class=\"comment\">// \t返回值：模型构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>, userSchema);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加数据（增）\"><a href=\"#添加数据（增）\" class=\"headerlink\" title=\"添加数据（增）\"></a>添加数据（增）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.通过模型构造函数对User中的数据进行操作</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">\tusername: <span class=\"string\">'admin'</span>,</span><br><span class=\"line\">\tpassword: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">\temail: <span class=\"string\">'xiaochen@qq.com'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ret</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'保存失败'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'保存成功'</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除（删）\"><a href=\"#删除（删）\" class=\"headerlink\" title=\"删除（删）\"></a>删除（删）</h3><p>根据条件删除所有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.remove(&#123;</span><br><span class=\"line\">\tusername: <span class=\"string\">'xiaoxiao'</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ret</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'删除失败'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'删除成功'</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>根据条件删除一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findOneAndRemove(conditions,[options],[callback]);</span><br></pre></td></tr></table></figure>\n\n<p>根据id删除一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findByIdAndRemove(id,[options],[callback]);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新（改）\"><a href=\"#更新（改）\" class=\"headerlink\" title=\"更新（改）\"></a>更新（改）</h3><p>更新所有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.remove(conditions,doc,[options],[callback]);</span><br></pre></td></tr></table></figure>\n\n<p>根据指定条件更新一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.FindOneAndUpdate([conditions],[update],[options],[callback]);</span><br></pre></td></tr></table></figure>\n\n<p>根据id更新一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新\t根据id来修改表数据</span></span><br><span class=\"line\">User.findByIdAndUpdate(<span class=\"string\">'5e6c5264fada77438c45dfcd'</span>, &#123;</span><br><span class=\"line\">\tusername: <span class=\"string\">'junjun'</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ret</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'更新失败'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'更新成功'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询（查）\"><a href=\"#查询（查）\" class=\"headerlink\" title=\"查询（查）\"></a>查询（查）</h3><p>查询所有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询所有</span></span><br><span class=\"line\">User.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,ret</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'查询失败'</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>条件查询所有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据条件查询</span></span><br><span class=\"line\">User.find(&#123; <span class=\"attr\">username</span>:<span class=\"string\">'xiaoxiao'</span> &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,ret</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'查询失败'</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>条件查询单个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按照条件查询单个，查询出来的数据是一个对象（&#123;&#125;）</span></span><br><span class=\"line\"><span class=\"comment\">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span></span><br><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">\tusername: <span class=\"string\">'xiaoxiao'</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ret</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'查询失败'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用Node操作MySQL数据库\"><a href=\"#使用Node操作MySQL数据库\" class=\"headerlink\" title=\"使用Node操作MySQL数据库\"></a>使用Node操作MySQL数据库</h1><p>文档：<a href=\"https://www.npmjs.com/package/mysql\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/mysql</a></p>\n<p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save  mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入mysql包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mysql      = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建连接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> connection = mysql.createConnection(&#123;</span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,\t<span class=\"comment\">//本机</span></span><br><span class=\"line\">  user     : <span class=\"string\">'me'</span>,\t\t<span class=\"comment\">//账号root</span></span><br><span class=\"line\">  password : <span class=\"string\">'secret'</span>,\t<span class=\"comment\">//密码12345</span></span><br><span class=\"line\">  database : <span class=\"string\">'my_db'</span>\t<span class=\"comment\">//数据库名</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 连接数据库\t（打开冰箱门）</span></span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//执行数据操作\t（把大象放到冰箱）</span></span><br><span class=\"line\">connection.query(<span class=\"string\">'SELECT * FROM `users` '</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, results, fields</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error;<span class=\"comment\">//抛出异常阻止代码往下执行</span></span><br><span class=\"line\">  <span class=\"comment\">// 没有异常打印输出结果</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'The solution is: '</span>,results);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关闭连接\t（关闭冰箱门）</span></span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h1><h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><p>不成立的情况下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">2</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 结果是 1 3 undefined 4</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用回调函数解决：</p>\n<p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ret;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x,y,callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// callback就是回调函数</span></span><br><span class=\"line\">    <span class=\"comment\">// var x = 10;</span></span><br><span class=\"line\">    <span class=\"comment\">// var y = 20;</span></span><br><span class=\"line\">    <span class=\"comment\">// var callback = function(ret)&#123;console.log(ret);&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y;</span><br><span class=\"line\">        callback(ret);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意：</p>\n<p>​    凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p>\n<p>​    这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)</p>\n<p>ajax:</p>\n<p>基于原生XMLHttpRequest封装get方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oReq = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">// 当请求加载成功要调用指定的函数</span></span><br><span class=\"line\">oReq.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(oReq.responseText);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oReq.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"请求路径\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">oReq.send();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url,callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oReq = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    <span class=\"comment\">// 当请求加载成功要调用指定的函数</span></span><br><span class=\"line\">    oReq.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//console.log(oReq.responseText);</span></span><br><span class=\"line\">        callback(oReq.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    oReq.open(<span class=\"string\">\"GET\"</span>, url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    oReq.send();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">get</span>('data.json',function(data)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>callback  hell（回调地狱）:</p>\n<p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/b.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>通过回调嵌套的方式来保证顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">'./data/b.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'./data/a.text'</span>,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 1 读取失败直接打印输出读取失败</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取失败'</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 2 抛出异常</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// \t\t阻止程序的执行</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// \t\t把错误信息打印到控制台</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:<code>Promise</code>。</p>\n<ul>\n<li>Promise：承诺，保证</li>\n<li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li>\n</ul>\n<p>基本语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在EcmaScript 6中新增了一个API Promise</span></span><br><span class=\"line\"><span class=\"comment\">// Promise 是一个构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1 创建Promise容器\t\tresolve:解决   reject：失败</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">'./a.text'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// console.log(err);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把容器的Pending状态变为rejected</span></span><br><span class=\"line\">\t\t\treject(err);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// console.log(data);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把容器的Pending状态变为resolve</span></span><br><span class=\"line\">\t\t\tresolve(<span class=\"number\">1234</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当p1成功了，然后就（then）做指定的操作</span></span><br><span class=\"line\"><span class=\"comment\">// then方法接收的function就是容器中的resolve函数</span></span><br><span class=\"line\">p1</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'读取文件失败了'</span>, err);</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>链式循环：</p>\n<p>封装Promise的<code>readFile</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\tfs.readFile(filePath, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tresolve(data);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pReadFile(<span class=\"string\">'./a.txt'</span>)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./b.txt'</span>);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./a.txt'</span>);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>mongoose所有的API都支持Promise：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询所有</span></span><br><span class=\"line\">User.find()</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注册：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123;<span class=\"attr\">username</span>:<span class=\"string\">'admin'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(user)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户已存在'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">             username:<span class=\"string\">'aaa'</span>,</span><br><span class=\"line\">             password:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">             email:<span class=\"string\">'fffff'</span></span><br><span class=\"line\">        &#125;).save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">    username:<span class=\"string\">'admin'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 用户已经存在不能注册</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户已存在'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 用户不存在可以注册</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">                username:<span class=\"string\">'aaa'</span>,</span><br><span class=\"line\">                password:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">                email:<span class=\"string\">'fffff'</span></span><br><span class=\"line\">            &#125;).save();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(funciton(ret)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><p>async函数</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"修改完代码自动重启\"><a href=\"#修改完代码自动重启\" class=\"headerlink\" title=\"修改完代码自动重启\"></a>修改完代码自动重启</h2><p>我们在这里可以使用一个第三方命名行工具：<code>nodemon</code>来帮助我们解决频繁修改代码重启服务器的问题。</p>\n<p><code>nodemon</code>是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在任意目录执行该命令都可以</span><br><span class=\"line\">#也就是说，所有需要 --global安装的包都可以在任意目录执行</span><br><span class=\"line\">npm install --global nodemon</span><br><span class=\"line\">npm install -g nodemon</span><br><span class=\"line\"></span><br><span class=\"line\">#如果安装不成功的话，可以使用cnpm安装</span><br><span class=\"line\">cnpm install -g nodemon</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕之后使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app.js</span><br><span class=\"line\"></span><br><span class=\"line\">#使用nodemon</span><br><span class=\"line\">nodemon app.js</span><br></pre></td></tr></table></figure>\n\n<p>只要是通过<code>nodemon</code>启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</p>\n<h2 id=\"封装异步API\"><a href=\"#封装异步API\" class=\"headerlink\" title=\"封装异步API\"></a>封装异步API</h2><p>回调函数：获取异步操作的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// var callback = funtion(data)&#123; console.log(data); &#125;</span></span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">        callback(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取</span></span><br><span class=\"line\">fn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组的遍历方法，都是对函数作为一种参数\"><a href=\"#数组的遍历方法，都是对函数作为一种参数\" class=\"headerlink\" title=\"数组的遍历方法，都是对函数作为一种参数\"></a>数组的遍历方法，都是对函数作为一种参数</h2><h2 id=\"EcmaScript-6\"><a href=\"#EcmaScript-6\" class=\"headerlink\" title=\"EcmaScript 6\"></a>EcmaScript 6</h2><blockquote>\n<p>参考文档：<a href=\"https://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">https://es6.ruanyifeng.com/</a></p>\n</blockquote>\n<h1 id=\"项目案例\"><a href=\"#项目案例\" class=\"headerlink\" title=\"项目案例\"></a>项目案例</h1><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">app.js\t项目的入口文件</span><br><span class=\"line\">controllers</span><br><span class=\"line\">models\t存储使用mongoose设计的数据模型</span><br><span class=\"line\">node_modules\t第三方包</span><br><span class=\"line\">package.json\t包描述文件</span><br><span class=\"line\">package-lock.json\t第三方包版本锁定文件（npm5之后才有）</span><br><span class=\"line\">public\t公共静态资源</span><br><span class=\"line\">routes</span><br><span class=\"line\">views\t存储视图目录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模板页\"><a href=\"#模板页\" class=\"headerlink\" title=\"模板页\"></a>模板页</h2><ul>\n<li>子模板</li>\n<li>模板继承</li>\n</ul>\n<h2 id=\"路由设计-1\"><a href=\"#路由设计-1\" class=\"headerlink\" title=\"路由设计\"></a>路由设计</h2><table>\n<thead>\n<tr>\n<th>路由</th>\n<th>方法</th>\n<th>get参数</th>\n<th>post参数</th>\n<th>是否需要登录</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td>渲染首页</td>\n</tr>\n<tr>\n<td>/register(登录)</td>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td>渲染注册页面</td>\n</tr>\n<tr>\n<td>/register</td>\n<td>post</td>\n<td></td>\n<td>email,nickname,password</td>\n<td></td>\n<td>处理注册请求</td>\n</tr>\n<tr>\n<td>/login</td>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td>渲染登陆界面</td>\n</tr>\n<tr>\n<td>/login</td>\n<td>post</td>\n<td></td>\n<td>email,password</td>\n<td></td>\n<td>处理登录请求</td>\n</tr>\n<tr>\n<td>/loginout</td>\n<td>get</td>\n<td></td>\n<td></td>\n<td></td>\n<td>处理退出请求</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"模型设计\"><a href=\"#模型设计\" class=\"headerlink\" title=\"模型设计\"></a>模型设计</h2><h2 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h2><h2 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>创建目录结构</li>\n<li>整合静态也-模板页<ul>\n<li>include</li>\n<li>block</li>\n<li>extend</li>\n</ul>\n</li>\n<li>设计用户登陆，退出，注册的路由</li>\n<li>用户注册<ul>\n<li>先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）</li>\n<li>服务端<ul>\n<li>获取从客户端收到的数据</li>\n<li>操作数据库<ul>\n<li>如果有错，发送500告诉客户端服务器错了‘</li>\n<li>其他的根据业务发送不同的响应数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>登录</li>\n<li>退出</li>\n</ul>\n<h1 id=\"Express中间件\"><a href=\"#Express中间件\" class=\"headerlink\" title=\"Express中间件\"></a>Express中间件</h1><h2 id=\"中间件的概念\"><a href=\"#中间件的概念\" class=\"headerlink\" title=\"中间件的概念\"></a>中间件的概念</h2><blockquote>\n<p>参考文档：<a href=\"http://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/guide/using-middleware.html</a></p>\n</blockquote>\n<p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p>\n<p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p>\n<p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cookie = <span class=\"built_in\">require</span>(<span class=\"string\">'./expressPtoject/cookie'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"built_in\">require</span>(<span class=\"string\">'./expressPtoject/query'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> postBody = <span class=\"built_in\">require</span>(<span class=\"string\">'./expressPtoject/post-body'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 解析请求地址中的get参数</span></span><br><span class=\"line\">\t<span class=\"comment\">// var obj = url.parse(req.url,true);</span></span><br><span class=\"line\">\t<span class=\"comment\">// req.query = obj.query;</span></span><br><span class=\"line\">\tquery(req,res);\t<span class=\"comment\">//中间件</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 解析请求地址中的post参数</span></span><br><span class=\"line\">\treq.body = &#123;</span><br><span class=\"line\">\t\tfoo:<span class=\"string\">'bar'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(req.url === <span class=\"string\">'xxx'</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理请求</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'3000 runing...'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.get(<span class=\"string\">'/abc'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 同一个请求的req和res是一样的，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 可以前面存储下面调用</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'/abc'</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// req.foo = 'bar';</span></span><br><span class=\"line\">\treq.body = &#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">'xiaoxiao'</span>,</span><br><span class=\"line\">\t\tage:<span class=\"number\">18</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnext();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/abc'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(req.foo);</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'/abc'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'app is running at port 3000.'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"中间件的分类\"><a href=\"#中间件的分类\" class=\"headerlink\" title=\"中间件的分类:\"></a>中间件的分类:</h2><h3 id=\"应用程序级别的中间件\"><a href=\"#应用程序级别的中间件\" class=\"headerlink\" title=\"应用程序级别的中间件\"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time'</span>,<span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>关心请求路径和请求方法的中间件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time'</span>,<span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由级别的中间件\"><a href=\"#路由级别的中间件\" class=\"headerlink\" title=\"路由级别的中间件\"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p>\n<p>get:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'get'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>post：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'post'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>put:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.put(<span class=\"string\">'/user'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'put'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>delete:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.delete(<span class=\"string\">'/delete'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'delete'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总\"><a href=\"#总\" class=\"headerlink\" title=\"总\"></a>总</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中间件：处理请求，本质就是个函数</span></span><br><span class=\"line\"><span class=\"comment\">// 在express中，对中间件有几种分类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 不关心任何请求路径和请求方法的中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是说任何请求都会进入这个中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 中间件本身是一个方法，该方法接收三个参数</span></span><br><span class=\"line\"><span class=\"comment\">// Request 请求对象</span></span><br><span class=\"line\"><span class=\"comment\">// Response 响应对象</span></span><br><span class=\"line\"><span class=\"comment\">// next 下一个中间件</span></span><br><span class=\"line\"><span class=\"comment\">// // 全局匹配中间件</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(function(req, res, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tconsole.log('1');</span></span><br><span class=\"line\"><span class=\"comment\">// \t// 当一个请求进入中间件后</span></span><br><span class=\"line\"><span class=\"comment\">// \t// 如果需要请求另外一个方法则需要使用next（）方法</span></span><br><span class=\"line\"><span class=\"comment\">// \tnext();</span></span><br><span class=\"line\"><span class=\"comment\">// \t// next是一个方法，用来调用下一个中间件</span></span><br><span class=\"line\"><span class=\"comment\">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(function(req, res, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tconsole.log('2');</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 2 关心请求路径的中间件</span></span><br><span class=\"line\"><span class=\"comment\">// // 以/xxx开头的中间件</span></span><br><span class=\"line\"><span class=\"comment\">// app.use('/a',function(req, res, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tconsole.log(req.url);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3 严格匹配请求方法和请求路径的中间件</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'/a'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'app is running at port 3000.'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误处理中间件\"><a href=\"#错误处理中间件\" class=\"headerlink\" title=\"错误处理中间件\"></a>错误处理中间件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err,stack);</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Something broke'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>配置使用404中间件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">'404.html'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>配置全局错误处理中间件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">'.a/bc'</span>, funtion() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span></span><br><span class=\"line\">        \t<span class=\"comment\">// 当发生全局错误的时候，我们可以调用next传递错误对象</span></span><br><span class=\"line\">        \t<span class=\"comment\">// 然后被全局错误处理中间件匹配到并进行处理</span></span><br><span class=\"line\">\t\t\tnext(err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//全局错误处理中间件</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).json(&#123;</span><br><span class=\"line\">        err_code:<span class=\"number\">500</span>,</span><br><span class=\"line\">        message:err.message</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"内置中间件\"><a href=\"#内置中间件\" class=\"headerlink\" title=\"内置中间件\"></a>内置中间件</h2><ul>\n<li>express.static(提供静态文件)<ul>\n<li><a href=\"http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三方中间件\"><a href=\"#第三方中间件\" class=\"headerlink\" title=\"第三方中间件\"></a>第三方中间件</h2><blockquote>\n<p>参考文档：<a href=\"http://expressjs.com/en/resources/middleware.html\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/resources/middleware.html</a></p>\n</blockquote>\n<ul>\n<li>body-parser</li>\n<li>compression</li>\n<li>cookie-parser</li>\n<li>mogran</li>\n<li>response-time</li>\n<li>server-static</li>\n<li>session</li>\n</ul>\n<style>\n    .post-primary{\n        display: none;\n    }\n</style>"},{"title":"Vue 笔记 Day1","date":"2020-03-13T04:11:46.000Z","_content":"<p>黑马的课堂笔记总结，总共五天。附上Vue生命周期图</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/lifecycle.png\" alt=\"生命周期\">\n</div>\n\n<!--more-->\n<h1 align=\"center\" style=\"color: red;\">Day1</h1>\n# Vue.js - Day1\n\n## 课程介绍\n前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp\n后5天： 以项目驱动教学；\n\n\n### 什么是Vue.js\n\n+ Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）\n\n+ Vue.js 是前端的**主流框架之一**，和Angular.js、React.js 一起，并成为前端三大主流框架！\n\n+ Vue.js 是一套构建用户界面的框架，**只关注视图层**，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）\n\n+ 前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；\n\n\n\n\n\n## 为什么要学习流行框架\n + 企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；\n  - 企业中，使用框架，能够提高开发的效率；\n\n\n\n + 提高开发效率的发展历程：原生JS -> Jquery之类的类库 -> 前端模板引擎 -> Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）\n + 在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；\n\n\n\n + 增强自己就业时候的竞争力\n  - 人无我有，人有我优\n  - 你平时不忙的时候，都在干嘛？\n\n## 框架和库的区别\n\n\n\n + 框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。\n\n  - node 中的 express；\n\n\n\n + 库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。\n  - 1. 从Jquery 切换到 Zepto\n  - 2. 从 EJS 切换到 art-template\n\n\n\n\n\n\n\n## Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\n\n + MVC 是后端的分层开发概念；\n + MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel\n\n + 为什么有了MVC还要有MVVM\n\n\n\n## Vue.js 基本代码 和 MVVM 之间的对应关系\n\n\n## Vue之 - `基本的代码结构`和`插值表达式`、`v-cloak`\n\n\n## Vue指令之`v-text`和`v-html`\n\n\n## Vue指令之`v-bind`的三种用法\n\n1. 直接使用指令`v-bind`\n\n2. 使用简化指令`:`\n\n3. 在绑定的时候，拼接绑定内容：`:title=\"btnTitle + ', 这是追加的内容'\"`\n\n\n## Vue指令之`v-on`和`跑马灯效果`\n\n\n\n### 跑马灯效果\n\n1. HTML结构：\n\n```\n\n<div id=\"app\">\n\n    <p>{{info}}</p>\n\n    <input type=\"button\" value=\"开启\" v-on:click=\"go\">\n\n    <input type=\"button\" value=\"停止\" v-on:click=\"stop\">\n\n  </div>\n\n```\n\n2. Vue实例：\n\n```\n\n\t// 创建 Vue 实例，得到 ViewModel\n\n    var vm = new Vue({\n\n      el: '#app',\n\n      data: {\n\n        info: '猥琐发育，别浪~！',\n\n        intervalId: null\n\n      },\n\n      methods: {\n\n        go() {\n\n          // 如果当前有定时器在运行，则直接return\n\n          if (this.intervalId != null) {\n\n            return;\n\n          }\n\n          // 开始定时器\n\n          this.intervalId = setInterval(() => {\n\n            this.info = this.info.substring(1) + this.info.substring(0, 1);\n\n          }, 500);\n\n        },\n\n        stop() {\n\n          clearInterval(this.intervalId);\n\n        }\n\n      }\n\n    });\n\n```\n\n\n\n\n\n\n\n## Vue指令之`v-on的缩写`和`事件修饰符`\n\n\n\n### 事件修饰符：\n\n+ .stop       阻止冒泡\n\n+ .prevent    阻止默认事件\n\n+ .capture    添加事件侦听器时使用事件捕获模式\n\n+ .self       只当事件在该元素本身（比如不是子元素）触发时触发回调\n\n+ .once       事件只触发一次\n\n\n\n\n\n\n\n## Vue指令之`v-model`和`双向数据绑定`\n\n\n\n\n\n\n\n## 简易计算器案例\n\n1. HTML 代码结构\n\n```\n\n  <div id=\"app\">\n\n    <input type=\"text\" v-model=\"n1\">\n\n    <select v-model=\"opt\">\n\n      <option value=\"0\">+</option>\n\n      <option value=\"1\">-</option>\n\n      <option value=\"2\">*</option>\n\n      <option value=\"3\">÷</option>\n\n    </select>\n\n    <input type=\"text\" v-model=\"n2\">\n\n    <input type=\"button\" value=\"=\" v-on:click=\"getResult\">\n\n    <input type=\"text\" v-model=\"result\">\n\n  </div>\n\n```\n\n2. Vue实例代码：\n\n```\n\n\t// 创建 Vue 实例，得到 ViewModel\n\n    var vm = new Vue({\n\n      el: '#app',\n\n      data: {\n\n        n1: 0,\n\n        n2: 0,\n\n        result: 0,\n\n        opt: '0'\n\n      },\n\n      methods: {\n\n        getResult() {\n\n          switch (this.opt) {\n\n            case '0':\n\n              this.result = parseInt(this.n1) + parseInt(this.n2);\n\n              break;\n\n            case '1':\n\n              this.result = parseInt(this.n1) - parseInt(this.n2);\n\n              break;\n\n            case '2':\n\n              this.result = parseInt(this.n1) * parseInt(this.n2);\n\n              break;\n\n            case '3':\n\n              this.result = parseInt(this.n1) / parseInt(this.n2);\n\n              break;\n\n          }\n\n        }\n\n      }\n\n    });\n\n```\n\n\n\n\n\n\n\n\n\n## 在Vue中使用样式\n\n\n\n### 使用class样式\n\n1. 数组\n```\n<h1 :class=\"['red', 'thin']\">这是一个邪恶的H1</h1>\n```\n\n2. 数组中使用三元表达式\n```\n<h1 :class=\"['red', 'thin', isactive?'active':'']\">这是一个邪恶的H1</h1>\n```\n\n3. 数组中嵌套对象\n```\n<h1 :class=\"['red', 'thin', {'active': isactive}]\">这是一个邪恶的H1</h1>\n```\n\n4. 直接使用对象\n```\n<h1 :class=\"{red:true, italic:true, active:true, thin:true}\">这是一个邪恶的H1</h1>\n```\n\n\n\n### 使用内联样式\n\n1. 直接在元素上通过 `:style` 的形式，书写样式对象\n```\n<h1 :style=\"{color: 'red', 'font-size': '40px'}\">这是一个善良的H1</h1>\n```\n\n2. 将样式对象，定义到 `data` 中，并直接引用到 `:style` 中\n + 在data上定义样式：\n```\ndata: {\n        h1StyleObj: { color: 'red', 'font-size': '40px', 'font-weight': '200' }\n}\n```\n + 在元素中，通过属性绑定的形式，将样式对象应用到元素中：\n```\n<h1 :style=\"h1StyleObj\">这是一个善良的H1</h1>\n```\n\n3. 在 `:style` 中通过数组，引用多个 `data` 上的样式对象\n + 在data上定义样式：\n```\ndata: {\n        h1StyleObj: { color: 'red', 'font-size': '40px', 'font-weight': '200' },\n        h1StyleObj2: { fontStyle: 'italic' }\n}\n```\n + 在元素中，通过属性绑定的形式，将样式对象应用到元素中：\n```\n<h1 :style=\"[h1StyleObj, h1StyleObj2]\">这是一个善良的H1</h1>\n```\n\n\n\n## Vue指令之`v-for`和`key`属性\n\n1. 迭代数组\n\n```\n<ul>\n  <li v-for=\"(item, i) in list\">索引：{{i}} --- 姓名：{{item.name}} --- 年龄：{{item.age}}</li>\n</ul>\n```\n\n2. 迭代对象中的属性\n\n```\n\n\t<!-- 循环遍历对象身上的属性 -->\n\n    <div v-for=\"(val, key, i) in userInfo\">{{val}} --- {{key}} --- {{i}}</div>\n\n```\n\n3. 迭代数字\n\n```\n\n<p v-for=\"i in 10\">这是第 {{i}} 个P标签</p>\n\n```\n\n\n\n> 2.2.0+ 的版本里，**当在组件中使用** v-for 时，key 现在是必须的。\n\n\n\n当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “**就地复用**” 策略。如果数据项的顺序被改变，Vue将**不是移动 DOM 元素来匹配数据项的顺序**， 而是**简单复用此处每个元素**，并且确保它在特定索引下显示已被渲染过的每个元素。\n\n\n\n为了给 Vue 一个提示，**以便它能跟踪每个节点的身份，从而重用和重新排序现有元素**，你需要为每项提供一个唯一 key 属性。\n\n\n\n\n\n\n\n## Vue指令之`v-if`和`v-show`\n\n\n\n\n\n\n\n> 一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。\n\n\n\n\n\n\n\n## 品牌管理案例\n\n\n\n### 添加新品牌\n\n\n\n### 删除品牌\n\n\n\n### 根据条件筛选品牌\n\n1. 1.x 版本中的filterBy指令，在2.x中已经被废除：\n\n[filterBy - 指令](https://v1-cn.vuejs.org/api/#filterBy)\n\n```\n\n<tr v-for=\"item in list | filterBy searchName in 'name'\">\n\n  <td>{{item.id}}</td>\n\n  <td>{{item.name}}</td>\n\n  <td>{{item.ctime}}</td>\n\n  <td>\n\n    <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n  </td>\n\n</tr>\n\n```\n\n2. 在2.x版本中[手动实现筛选的方式](https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果)：\n\n+ 筛选框绑定到 VM 实例中的 `searchName` 属性：\n\n```\n\n<hr> 输入筛选名称：\n\n<input type=\"text\" v-model=\"searchName\">\n\n```\n\n+ 在使用 `v-for` 指令循环每一行数据的时候，不再直接 `item in list`，而是 `in` 一个 过滤的methods 方法，同时，把过滤条件`searchName`传递进去：\n\n```\n\n<tbody>\n\n      <tr v-for=\"item in search(searchName)\">\n\n        <td>{{item.id}}</td>\n\n        <td>{{item.name}}</td>\n\n        <td>{{item.ctime}}</td>\n\n        <td>\n\n          <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n        </td>\n\n      </tr>\n\n    </tbody>\n\n```\n\n+ `search` 过滤方法中，使用 数组的 `filter` 方法进行过滤：\n\n```\n\nsearch(name) {\n\n  return this.list.filter(x => {\n\n    return x.name.indexOf(name) != -1;\n\n  });\n\n}\n\n```\n\n\n\n\n\n\n\n## Vue调试工具`vue-devtools`的安装步骤和使用\n\n[Vue.js devtools - 翻墙安装方式 - 推荐](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN)\n\n\n\n\n\n## 过滤器\n\n概念：Vue.js 允许你自定义过滤器，**可被用作一些常见的文本格式化**。过滤器可以用在两个地方：**mustache 插值和 v-bind 表达式**。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；\n\n### 私有过滤器\n\n1. HTML元素：\n\n```\n\n<td>{{item.ctime | dataFormat('yyyy-mm-dd')}}</td>\n\n```\n\n2. 私有 `filters` 定义方式：\n\n```\n\nfilters: { // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用\n\n    dataFormat(input, pattern = \"\") { // 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错\n\n      var dt = new Date(input);\n\n      // 获取年月日\n\n      var y = dt.getFullYear();\n\n      var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n      var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n      // 否则，就返回  年-月-日 时：分：秒\n\n      if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n        return `${y}-${m}-${d}`;\n\n      } else {\n\n        // 获取时分秒\n\n        var hh = dt.getHours().toString().padStart(2, '0');\n\n        var mm = dt.getMinutes().toString().padStart(2, '0');\n\n        var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n      }\n\n    }\n\n  }\n\n```\n\n\n\n> 使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString='') 或 String.prototype.padEnd(maxLength, fillString='')来填充字符串；\n\n\n\n\n\n### 全局过滤器\n\n```\n\n// 定义一个全局过滤器\n\nVue.filter('dataFormat', function (input, pattern = '') {\n\n  var dt = new Date(input);\n\n  // 获取年月日\n\n  var y = dt.getFullYear();\n\n  var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n  var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n  // 否则，就返回  年-月-日 时：分：秒\n\n  if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n    return `${y}-${m}-${d}`;\n\n  } else {\n\n    // 获取时分秒\n\n    var hh = dt.getHours().toString().padStart(2, '0');\n\n    var mm = dt.getMinutes().toString().padStart(2, '0');\n\n    var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n  }\n\n});\n\n```\n\n\n\n> 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！\n\n\n\n## 键盘修饰符以及自定义键盘修饰符\n\n### 1.x中自定义键盘修饰符【了解即可】\n\n```\n\nVue.directive('on').keyCodes.f2 = 113;\n\n```\n\n### [2.x中自定义键盘修饰符](https://cn.vuejs.org/v2/guide/events.html#键值修饰符)\n\n1. 通过`Vue.config.keyCodes.名称 = 按键值`来自定义案件修饰符的别名：\n\n```\n\nVue.config.keyCodes.f2 = 113;\n\n```\n\n2. 使用自定义的按键修饰符：\n\n```\n\n<input type=\"text\" v-model=\"name\" @keyup.f2=\"add\">\n\n```\n\n\n\n\n\n## [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n1. 自定义全局和局部的 自定义指令：\n\n```\n\n    // 自定义全局指令 v-focus，为绑定的元素自动获取焦点：\n\n    Vue.directive('focus', {\n\n      inserted: function (el) { // inserted 表示被绑定元素插入父节点时调用\n\n        el.focus();\n\n      }\n\n    });\n\n\n\n    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：\n\n      directives: {\n\n        color: { // 为元素设置指定的字体颜色\n\n          bind(el, binding) {\n\n            el.style.color = binding.value;\n\n          }\n\n        },\n\n        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数\n\n          el.style.fontWeight = binding2.value;\n\n        }\n\n      }\n\n```\n\n2. 自定义指令的使用方式：\n\n```\n\n<input type=\"text\" v-model=\"searchName\" v-focus v-color=\"'red'\" v-font-weight=\"900\">\n\n```\n\n\n\n## Vue 1.x 中 自定义元素指令【已废弃,了解即可】\n```\nVue.elementDirective('red-color', {\n  bind: function () {\n    this.el.style.color = 'red';\n  }\n});\n```\n使用方式：\n```\n<red-color>1232</red-color>\n```\n\n## 相关文章\n1. [vue.js 1.x 文档](https://v1-cn.vuejs.org/)\n2. [vue.js 2.x 文档](https://cn.vuejs.org/)\n3. [String.prototype.padStart(maxLength, fillString)](http://www.css88.com/archives/7715)\n4. [js 里面的键盘事件对应的键码](http://www.cnblogs.com/wuhua1/p/6686237.html)\n5. [Vue.js双向绑定的实现原理](http://www.cnblogs.com/kidney/p/6052935.html)\n\n<h1 align=\"center\" style=\"color: red;\">Day2</h1>\n# Vue.js - Day2\n\n## 品牌管理案例\n\n### 添加新品牌\n\n### 删除品牌\n\n### 根据条件筛选品牌\n\n1. 1.x 版本中的filterBy指令，在2.x中已经被废除：\n\n[filterBy - 指令](https://v1-cn.vuejs.org/api/#filterBy)\n\n```\n\n<tr v-for=\"item in list | filterBy searchName in 'name'\">\n\n  <td>{{item.id}}</td>\n\n  <td>{{item.name}}</td>\n\n  <td>{{item.ctime}}</td>\n\n  <td>\n\n    <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n  </td>\n\n</tr>\n\n```\n\n2. 在2.x版本中[手动实现筛选的方式](https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果)：\n\n+ 筛选框绑定到 VM 实例中的 `searchName` 属性：\n\n```\n\n<hr> 输入筛选名称：\n\n<input type=\"text\" v-model=\"searchName\">\n\n```\n\n+ 在使用 `v-for` 指令循环每一行数据的时候，不再直接 `item in list`，而是 `in` 一个 过滤的methods 方法，同时，把过滤条件`searchName`传递进去：\n\n```\n\n<tbody>\n\n      <tr v-for=\"item in search(searchName)\">\n\n        <td>{{item.id}}</td>\n\n        <td>{{item.name}}</td>\n\n        <td>{{item.ctime}}</td>\n\n        <td>\n\n          <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n        </td>\n\n      </tr>\n\n    </tbody>\n\n```\n\n+ `search` 过滤方法中，使用 数组的 `filter` 方法进行过滤：\n\n```\n\nsearch(name) {\n\n  return this.list.filter(x => {\n\n    return x.name.indexOf(name) != -1;\n\n  });\n\n}\n\n```\n\n## Vue调试工具`vue-devtools`的安装步骤和使用\n\n[Vue.js devtools - 翻墙安装方式 - 推荐](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN)\n\n## 过滤器\n\n概念：Vue.js 允许你自定义过滤器，**可被用作一些常见的文本格式化**。过滤器可以用在两个地方：**mustache 插值和 v-bind 表达式**。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；\n\n### 私有过滤器\n\n1. HTML元素：\n\n```\n\n<td>{{item.ctime | dataFormat('yyyy-mm-dd')}}</td>\n\n```\n\n2. 私有 `filters` 定义方式：\n\n```\n\nfilters: { // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用\n\n    dataFormat(input, pattern = \"\") { // 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错\n\n      var dt = new Date(input);\n\n      // 获取年月日\n\n      var y = dt.getFullYear();\n\n      var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n      var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n      // 否则，就返回  年-月-日 时：分：秒\n\n      if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n        return `${y}-${m}-${d}`;\n\n      } else {\n\n        // 获取时分秒\n\n        var hh = dt.getHours().toString().padStart(2, '0');\n\n        var mm = dt.getMinutes().toString().padStart(2, '0');\n\n        var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n      }\n\n    }\n\n  }\n\n```\n\n\n\n> 使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString='') 或 String.prototype.padEnd(maxLength, fillString='')来填充字符串；\n\n\n\n\n\n### 全局过滤器\n\n```\n\n// 定义一个全局过滤器\n\nVue.filter('dataFormat', function (input, pattern = '') {\n\n  var dt = new Date(input);\n\n  // 获取年月日\n\n  var y = dt.getFullYear();\n\n  var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n  var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n  // 否则，就返回  年-月-日 时：分：秒\n\n  if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n    return `${y}-${m}-${d}`;\n\n  } else {\n\n    // 获取时分秒\n\n    var hh = dt.getHours().toString().padStart(2, '0');\n\n    var mm = dt.getMinutes().toString().padStart(2, '0');\n\n    var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n  }\n\n});\n\n```\n\n\n\n> 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！\n\n\n\n## 键盘修饰符以及自定义键盘修饰符\n\n### 1.x中自定义键盘修饰符【了解即可】\n\n```\n\nVue.directive('on').keyCodes.f2 = 113;\n\n```\n\n### [2.x中自定义键盘修饰符](https://cn.vuejs.org/v2/guide/events.html#键值修饰符)\n\n1. 通过`Vue.config.keyCodes.名称 = 按键值`来自定义案件修饰符的别名：\n\n```\n\nVue.config.keyCodes.f2 = 113;\n\n```\n\n2. 使用自定义的按键修饰符：\n\n```\n\n<input type=\"text\" v-model=\"name\" @keyup.f2=\"add\">\n\n```\n\n\n\n\n\n## [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n1. 自定义全局和局部的 自定义指令：\n\n```\n\n    // 自定义全局指令 v-focus，为绑定的元素自动获取焦点：\n\n    Vue.directive('focus', {\n\n      inserted: function (el) { // inserted 表示被绑定元素插入父节点时调用\n\n        el.focus();\n\n      }\n\n    });\n\n\n\n    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：\n\n      directives: {\n\n        color: { // 为元素设置指定的字体颜色\n\n          bind(el, binding) {\n\n            el.style.color = binding.value;\n\n          }\n\n        },\n\n        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数\n\n          el.style.fontWeight = binding2.value;\n\n        }\n\n      }\n\n```\n\n2. 自定义指令的使用方式：\n\n```\n\n<input type=\"text\" v-model=\"searchName\" v-focus v-color=\"'red'\" v-font-weight=\"900\">\n\n```\n\n\n\n## Vue 1.x 中 自定义元素指令【已废弃,了解即可】\n```\nVue.elementDirective('red-color', {\n  bind: function () {\n    this.el.style.color = 'red';\n  }\n});\n```\n使用方式：\n```\n<red-color>1232</red-color>\n```\n\n\n## [vue实例的生命周期](https://cn.vuejs.org/v2/guide/instance.html#实例生命周期)\n+ 什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！\n+ [生命周期钩子](https://cn.vuejs.org/v2/api/#选项-生命周期钩子)：就是生命周期事件的别名而已；\n+ 生命周期钩子 = 生命周期函数 = 生命周期事件\n+ 主要的生命周期函数分类：\n - 创建期间的生命周期函数：\n  \t+ beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性\n  \t+ created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板\n  \t+ beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中\n  \t+ mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示\n - 运行期间的生命周期函数：\n \t+ beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点\n \t+ updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！\n - 销毁期间的生命周期函数：\n \t+ beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。\n \t+ destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n\n\n## [vue-resource 实现 get, post, jsonp请求](https://github.com/pagekit/vue-resource)\n除了 vue-resource 之外，还可以使用 `axios` 的第三方包实现实现数据的请求\n1. 之前的学习中，如何发起数据请求？\n2. 常见的数据请求类型？  get  post jsonp\n3. 测试的URL请求资源地址：\n + get请求地址： http://vue.studyit.io/api/getlunbo\n + post请求地址：http://vue.studyit.io/api/post\n + jsonp请求地址：http://vue.studyit.io/api/jsonp\n4. JSONP的实现原理\n + 由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；\n + 可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；\n + 具体实现过程：\n \t- 先在客户端定义一个回调方法，预定义对数据的操作；\n \t- 再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；\n \t- 服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；\n \t- 客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；\n + 带大家通过 Node.js ，来手动实现一个JSONP的请求例子；\n ```\n    const http = require('http');\n    // 导入解析 URL 地址的核心模块\n    const urlModule = require('url');\n\n    const server = http.createServer();\n    // 监听 服务器的 request 请求事件，处理每个请求\n    server.on('request', (req, res) => {\n      const url = req.url;\n\n      // 解析客户端请求的URL地址\n      var info = urlModule.parse(url, true);\n\n      // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据\n      if (info.pathname === '/getjsonp') {\n        // 获取客户端指定的回调函数的名称\n        var cbName = info.query.callback;\n        // 手动拼接要返回给客户端的数据对象\n        var data = {\n          name: 'zs',\n          age: 22,\n          gender: '男',\n          hobby: ['吃饭', '睡觉', '运动']\n        }\n        // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：\n        var result = `${cbName}(${JSON.stringify(data)})`;\n        // 将拼接好的方法的调用，返回给客户端去解析执行\n        res.end(result);\n      } else {\n        res.end('404');\n      }\n    });\n\n    server.listen(3000, () => {\n      console.log('server running at http://127.0.0.1:3000');\n    });\n ```\n5. vue-resource 的配置步骤：\n + 直接在页面中，通过`script`标签，引入 `vue-resource` 的脚本文件；\n + 注意：引用的先后顺序是：先引用 `Vue` 的脚本文件，再引用 `vue-resource` 的脚本文件；\n6. 发送get请求：\n```\ngetInfo() { // get 方式获取数据\n  this.$http.get('http://127.0.0.1:8899/api/getlunbo').then(res => {\n    console.log(res.body);\n  })\n}\n```\n7. 发送post请求：\n```\npostInfo() {\n  var url = 'http://127.0.0.1:8899/api/post';\n  // post 方法接收三个参数：\n  // 参数1： 要请求的URL地址\n  // 参数2： 要发送的数据对象\n  // 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded\n  this.$http.post(url, { name: 'zs' }, { emulateJSON: true }).then(res => {\n    console.log(res.body);\n  });\n}\n```\n8. 发送JSONP请求获取数据：\n```\njsonpInfo() { // JSONP形式从服务器获取数据\n  var url = 'http://127.0.0.1:8899/api/jsonp';\n  this.$http.jsonp(url).then(res => {\n    console.log(res.body);\n  });\n}\n```\n\n## 配置本地数据库和数据接口API\n1. 先解压安装 `PHPStudy`;\n2. 解压安装 `Navicat` 这个数据库可视化工具，并激活；\n3. 打开 `Navicat` 工具，新建空白数据库，名为 `dtcmsdb4`;\n4. 双击新建的数据库，连接上这个空白数据库，在新建的数据库上`右键` -> `运行SQL文件`，选择并执行 `dtcmsdb4.sql` 这个数据库脚本文件；如果执行不报错，则数据库导入完成；\n5. 进入文件夹 `vuecms3_nodejsapi` 内部，执行 `npm i` 安装所有的依赖项；\n6. 先确保本机安装了 `nodemon`, 没有安装，则运行 `npm i nodemon -g` 进行全局安装，安装完毕后，进入到 `vuecms3_nodejsapi`目录 -> `src`目录 -> 双击运行 `start.bat`\n7. 如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 `app.js` 中第 `14行` 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root\n\n## 品牌管理改造\n### 展示品牌列表\n\n### 添加品牌数据\n\n### 删除品牌数据\n\n## [Vue中的动画](https://cn.vuejs.org/v2/guide/transitions.html)\n为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；\n\n### 使用过渡类名\n1. HTML结构：\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"动起来\" @click=\"myAnimate\">\n    <!-- 使用 transition 将需要过渡的元素包裹起来 -->\n    <transition name=\"fade\">\n      <div v-show=\"isshow\">动画哦</div>\n    </transition>\n  </div>\n```\n2. VM 实例：\n```\n// 创建 Vue 实例，得到 ViewModel\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    isshow: false\n  },\n  methods: {\n    myAnimate() {\n      this.isshow = !this.isshow;\n    }\n  }\n});\n```\n3. 定义两组类样式：\n```\n/* 定义进入和离开时候的过渡状态 */\n    .fade-enter-active,\n    .fade-leave-active {\n      transition: all 0.2s ease;\n      position: absolute;\n    }\n\n    /* 定义进入过渡的开始状态 和 离开过渡的结束状态 */\n    .fade-enter,\n    .fade-leave-to {\n      opacity: 0;\n      transform: translateX(100px);\n    }\n```\n\n### [使用第三方 CSS 动画库](https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名)\n1. 导入动画类库：\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"./lib/animate.css\">\n```\n2. 定义 transition 及属性：\n```\n<transition\n\tenter-active-class=\"fadeInRight\"\n    leave-active-class=\"fadeOutRight\"\n    :duration=\"{ enter: 500, leave: 800 }\">\n  \t<div class=\"animated\" v-show=\"isshow\">动画哦</div>\n</transition>\n```\n\n### 使用动画钩子函数\n1. 定义 transition 组件以及三个钩子函数：\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"切换动画\" @click=\"isshow = !isshow\">\n    <transition\n    @before-enter=\"beforeEnter\"\n    @enter=\"enter\"\n    @after-enter=\"afterEnter\">\n      <div v-if=\"isshow\" class=\"show\">OK</div>\n    </transition>\n  </div>\n```\n2. 定义三个 methods 钩子方法：\n```\nmethods: {\n        beforeEnter(el) { // 动画进入之前的回调\n          el.style.transform = 'translateX(500px)';\n        },\n        enter(el, done) { // 动画进入完成时候的回调\n          el.offsetWidth;\n          el.style.transform = 'translateX(0px)';\n          done();\n        },\n        afterEnter(el) { // 动画进入完成之后的回调\n          this.isshow = !this.isshow;\n        }\n      }\n```\n3. 定义动画过渡时长和样式：\n```\n.show{\n      transition: all 0.4s ease;\n    }\n```\n\n\n### [v-for 的列表过渡](https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡)\n1. 定义过渡样式：\n```\n<style>\n    .list-enter,\n    .list-leave-to {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n\n    .list-enter-active,\n    .list-leave-active {\n      transition: all 0.3s ease;\n    }\n</style>\n```\n2. 定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：\n```\n  <div id=\"app\">\n    <input type=\"text\" v-model=\"txt\" @keyup.enter=\"add\">\n\n    <transition-group tag=\"ul\" name=\"list\">\n      <li v-for=\"(item, i) in list\" :key=\"i\">{{item}}</li>\n    </transition-group>\n  </div>\n```\n3. 定义 VM中的结构：\n```\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        txt: '',\n        list: [1, 2, 3, 4]\n      },\n      methods: {\n        add() {\n          this.list.push(this.txt);\n          this.txt = '';\n        }\n      }\n    });\n```\n\n\n### 列表的排序过渡\n`<transition-group>` 组件还有一个特殊之处。不仅可以进入和离开动画，**还可以改变定位**。要使用这个新功能只需了解新增的 `v-move` 特性，**它会在元素的改变定位的过程中应用**。\n+ `v-move` 和 `v-leave-active` 结合使用，能够让列表的过渡更加平缓柔和：\n```\n.v-move{\n  transition: all 0.8s ease;\n}\n.v-leave-active{\n  position: absolute;\n}\n```\n\n\n\n## 相关文章\n1. [vue.js 1.x 文档](https://v1-cn.vuejs.org/)\n2. [vue.js 2.x 文档](https://cn.vuejs.org/)\n3. [String.prototype.padStart(maxLength, fillString)](http://www.css88.com/archives/7715)\n4. [js 里面的键盘事件对应的键码](http://www.cnblogs.com/wuhua1/p/6686237.html)\n5. [pagekit/vue-resource](https://github.com/pagekit/vue-resource)\n6. [navicat如何导入sql文件和导出sql文件](https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html)\n7. [贝塞尔在线生成器](http://cubic-bezier.com/#.4,-0.3,1,.33)\n\n<h1 align=\"center\" style=\"color: red;\">Day3</h1>\n# Vue.js - Day3\n\n## 定义Vue组件\n什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；\n组件化和模块化的不同：\n + 模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；\n + 组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；\n### 全局组件定义的三种方式\n1. 使用 Vue.extend 配合 Vue.component 方法：\n```\nvar login = Vue.extend({\n      template: '<h1>登录</h1>'\n    });\n    Vue.component('login', login);\n```\n2. 直接使用 Vue.component 方法：\n```\nVue.component('register', {\n      template: '<h1>注册</h1>'\n    });\n```\n3. 将模板字符串，定义到script标签种：\n```\n<script id=\"tmpl\" type=\"x-template\">\n      <div><a href=\"#\">登录</a> | <a href=\"#\">注册</a></div>\n    </script>\n```\n同时，需要使用 Vue.component 来定义组件：\n```\nVue.component('account', {\n      template: '#tmpl'\n    });\n```\n\n> 注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！\n\n### 组件中展示数据和响应事件\n1. 在组件中，`data`需要被定义为一个方法，例如：\n```\nVue.component('account', {\n      template: '#tmpl',\n      data() {\n        return {\n          msg: '大家好！'\n        }\n      },\n      methods:{\n        login(){\n          alert('点击了登录按钮');\n        }\n      }\n    });\n```\n2. 在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的`data`属性中的值，需要使用`this`来访问；\n\n### 【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\n1. 通过计数器案例演示\n\n### 使用`components`属性定义局部子组件\n1. 组件实例定义方式：\n```\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: { // 定义子组件\n        account: { // account 组件\n          template: '<div><h1>这是Account组件{{name}}</h1><login></login></div>', // 在这里使用定义的子组件\n          components: { // 定义子组件的子组件\n            login: { // login 组件\n              template: \"<h3>这是登录组件</h3>\"\n            }\n          }\n        }\n      }\n    });\n  </script>\n```\n2. 引用组件：\n```\n<div id=\"app\">\n    <account></account>\n  </div>\n```\n\n## 使用`flag`标识符结合`v-if`和`v-else`切换组件\n1. 页面结构：\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"toggle\" @click=\"flag=!flag\">\n    <my-com1 v-if=\"flag\"></my-com1>\n    <my-com2 v-else=\"flag\"></my-com2>\n  </div>\n```\n2. Vue实例定义：\n```\n<script>\n    Vue.component('myCom1', {\n      template: '<h3>奔波霸</h3>'\n    })\n\n    Vue.component('myCom2', {\n      template: '<h3>霸波奔</h3>'\n    })\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        flag: true\n      },\n      methods: {}\n    });\n  </script>\n```\n\n## 使用`:is`属性来切换不同的子组件,并添加切换动画\n1. 组件实例定义方式：\n```\n  // 登录组件\n    const login = Vue.extend({\n      template: `<div>\n        <h3>登录组件</h3>\n      </div>`\n    });\n    Vue.component('login', login);\n\n    // 注册组件\n    const register = Vue.extend({\n      template: `<div>\n        <h3>注册组件</h3>\n      </div>`\n    });\n    Vue.component('register', register);\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: { comName: 'login' },\n      methods: {}\n    });\n```\n2. 使用`component`标签，来引用组件，并通过`:is`属性来指定要加载的组件：\n```\n  <div id=\"app\">\n    <a href=\"#\" @click.prevent=\"comName='login'\">登录</a>\n    <a href=\"#\" @click.prevent=\"comName='register'\">注册</a>\n    <hr>\n    <transition mode=\"out-in\">\n      <component :is=\"comName\"></component>\n    </transition>\n  </div>\n```\n3. 添加切换样式：\n```\n  <style>\n    .v-enter,\n    .v-leave-to {\n      opacity: 0;\n      transform: translateX(30px);\n    }\n\n    .v-enter-active,\n    .v-leave-active {\n      position: absolute;\n      transition: all 0.3s ease;\n    }\n\n    h3{\n      margin: 0;\n    }\n  </style>\n```\n\n## 父组件向子组件传值\n1. 组件实例定义方式，注意：一定要使用`props`属性来定义父组件传递过来的数据\n```\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        msg: '这是父组件中的消息'\n      },\n      components: {\n        son: {\n          template: '<h1>这是子组件 --- {{finfo}}</h1>',\n          props: ['finfo']\n        }\n      }\n    });\n  </script>\n```\n2. 使用`v-bind`或简化指令，将数据传递到子组件中：\n```\n<div id=\"app\">\n    <son :finfo=\"msg\"></son>\n  </div>\n```\n\n## 子组件向父组件传值\n1. 原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；\n2. 父组件将方法的引用传递给子组件，其中，`getMsg`是父组件中`methods`中定义的方法名称，`func`是子组件调用传递过来方法时候的方法名称\n```\n<son @func=\"getMsg\"></son>\n```\n3. 子组件内部通过`this.$emit('方法名', 要传递的数据)`方式，来调用父组件中的方法，同时把数据传递给父组件使用\n```\n<div id=\"app\">\n    <!-- 引用父组件 -->\n    <son @func=\"getMsg\"></son>\n\n    <!-- 组件模板定义 -->\n    <script type=\"x-template\" id=\"son\">\n      <div>\n        <input type=\"button\" value=\"向父组件传值\" @click=\"sendMsg\" />\n      </div>\n    </script>\n  </div>\n\n  <script>\n    // 子组件的定义方式\n    Vue.component('son', {\n      template: '#son', // 组件模板Id\n      methods: {\n        sendMsg() { // 按钮的点击事件\n          this.$emit('func', 'OK'); // 调用父组件传递过来的方法，同时把数据传递出去\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getMsg(val){ // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义\n          alert(val);\n        }\n      }\n    });\n  </script>\n```\n\n## 评论列表案例\n目标：主要练习父子组件之间传值\n\n## 使用 `this.$refs` 来获取元素和组件\n```\n  <div id=\"app\">\n    <div>\n      <input type=\"button\" value=\"获取元素内容\" @click=\"getElement\" />\n      <!-- 使用 ref 获取元素 -->\n      <h1 ref=\"myh1\">这是一个大大的H1</h1>\n\n      <hr>\n      <!-- 使用 ref 获取子组件 -->\n      <my-com ref=\"mycom\"></my-com>\n    </div>\n  </div>\n\n  <script>\n    Vue.component('my-com', {\n      template: '<h5>这是一个子组件</h5>',\n      data() {\n        return {\n          name: '子组件'\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getElement() {\n          // 通过 this.$refs 来获取元素\n          console.log(this.$refs.myh1.innerText);\n          // 通过 this.$refs 来获取组件\n          console.log(this.$refs.mycom.name);\n        }\n      }\n    });\n  </script>\n```\n\n## 什么是路由\n1. 对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；\n\n2. 对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；\n\n3. 在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；\n\n## 在 vue 中使用 vue-router\n1. 导入 vue-router 组件类库：\n```\n<!-- 1. 导入 vue-router 组件类库 -->\n  <script src=\"./lib/vue-router-2.7.0.js\"></script>\n```\n2. 使用 router-link 组件来导航\n```\n<!-- 2. 使用 router-link 组件来导航 -->\n<router-link to=\"/login\">登录</router-link>\n<router-link to=\"/register\">注册</router-link>\n```\n3. 使用 router-view 组件来显示匹配到的组件\n```\n<!-- 3. 使用 router-view 组件来显示匹配到的组件 -->\n<router-view></router-view>\n```\n4. 创建使用`Vue.extend`创建组件\n```\n    // 4.1 使用 Vue.extend 来创建登录组件\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    // 4.2 使用 Vue.extend 来创建注册组件\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n```\n5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n```\n// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n    var router = new VueRouter({\n      routes: [\n        { path: '/login', component: login },\n        { path: '/register', component: register }\n      ]\n    });\n```\n6. 使用 router 属性来使用路由规则\n```\n// 6. 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      router: router // 使用 router 属性来使用路由规则\n    });\n```\n\n## 设置路由高亮\n\n## 设置路由切换动效\n\n## 在路由规则中定义参数\n1. 在规则中定义参数：\n```\n{ path: '/register/:id', component: register }\n```\n2. 通过 `this.$route.params`来获取路由中的参数：\n```\nvar register = Vue.extend({\n      template: '<h1>注册组件 --- {{this.$route.params.id}}</h1>'\n    });\n```\n\n## 使用 `children` 属性实现路由嵌套\n```\n  <div id=\"app\">\n    <router-link to=\"/account\">Account</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    // 父路由中的组件\n    const account = Vue.extend({\n      template: `<div>\n        这是account组件\n        <router-link to=\"/account/login\">login</router-link> | \n        <router-link to=\"/account/register\">register</router-link>\n        <router-view></router-view>\n      </div>`\n    });\n\n    // 子路由中的 login 组件\n    const login = Vue.extend({\n      template: '<div>登录组件</div>'\n    });\n\n    // 子路由中的 register 组件\n    const register = Vue.extend({\n      template: '<div>注册组件</div>'\n    });\n\n    // 路由实例\n    var router = new VueRouter({\n      routes: [\n        { path: '/', redirect: '/account/login' }, // 使用 redirect 实现路由重定向\n        {\n          path: '/account',\n          component: account,\n          children: [ // 通过 children 数组属性，来实现路由的嵌套\n            { path: 'login', component: login }, // 注意，子路由的开头位置，不要加 / 路径符\n            { path: 'register', component: register }\n          ]\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: {\n        account\n      },\n      router: router\n    });\n  </script>\n```\n\n## 命名视图实现经典布局\n1. 标签代码结构：\n```\n<div id=\"app\">\n    <router-view></router-view>\n    <div class=\"content\">\n      <router-view name=\"a\"></router-view>\n      <router-view name=\"b\"></router-view>\n    </div>\n  </div>\n```\n2. JS代码：\n```\n<script>\n    var header = Vue.component('header', {\n      template: '<div class=\"header\">header</div>'\n    });\n\n    var sidebar = Vue.component('sidebar', {\n      template: '<div class=\"sidebar\">sidebar</div>'\n    });\n\n    var mainbox = Vue.component('mainbox', {\n      template: '<div class=\"mainbox\">mainbox</div>'\n    });\n\n    // 创建路由对象\n    var router = new VueRouter({\n      routes: [\n        {\n          path: '/', components: {\n            default: header,\n            a: sidebar,\n            b: mainbox\n          }\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router\n    });\n  </script>\n```\n3. CSS 样式：\n```\n  <style>\n    .header {\n      border: 1px solid red;\n    }\n\n    .content{\n      display: flex;\n    }\n    .sidebar {\n      flex: 2;\n      border: 1px solid green;\n      height: 500px;\n    }\n    .mainbox{\n      flex: 8;\n      border: 1px solid blue;\n      height: 500px;\n    }\n  </style>\n```\n\n## `watch`属性的使用\n考虑一个问题：想要实现 `名` 和 `姓` 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）\n\n1. 监听`data`中属性的改变：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen',\n        fullName: 'jack - chen'\n      },\n      methods: {},\n      watch: {\n        'firstName': function (newVal, oldVal) { // 第一个参数是新数据，第二个参数是旧数据\n          this.fullName = newVal + ' - ' + this.lastName;\n        },\n        'lastName': function (newVal, oldVal) {\n          this.fullName = this.firstName + ' - ' + newVal;\n        }\n      }\n    });\n  </script>\n```\n2. 监听路由对象的改变：\n```\n<div id=\"app\">\n    <router-link to=\"/login\">登录</router-link>\n    <router-link to=\"/register\">注册</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n\n    var router = new VueRouter({\n      routes: [\n        { path: \"/login\", component: login },\n        { path: \"/register\", component: register }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router: router,\n      watch: {\n        '$route': function (newVal, oldVal) {\n          if (newVal.path === '/login') {\n            console.log('这是登录组件');\n          }\n        }\n      }\n    });\n  </script>\n```\n\n## `computed`计算属性的使用\n1. 默认只有`getter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {},\n      computed: { // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值\n        fullName() {\n          return this.firstName + ' - ' + this.lastName;\n        }\n      }\n    });\n  </script>\n```\n2. 定义有`getter`和`setter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\">\n    <input type=\"text\" v-model=\"lastName\">\n    <!-- 点击按钮重新为 计算属性 fullName 赋值 -->\n    <input type=\"button\" value=\"修改fullName\" @click=\"changeName\">\n\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {\n        changeName() {\n          this.fullName = 'TOM - chen2';\n        }\n      },\n      computed: {\n        fullName: {\n          get: function () {\n            return this.firstName + ' - ' + this.lastName;\n          },\n          set: function (newVal) {\n            var parts = newVal.split(' - ');\n            this.firstName = parts[0];\n            this.lastName = parts[1];\n          }\n        }\n      }\n    });\n  </script>\n```\n\n## `watch`、`computed`和`methods`之间的对比\n1. `computed`属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；\n2. `methods`方法表示一个具体的操作，主要书写业务逻辑；\n3. `watch`一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是`computed`和`methods`的结合体；\n\n## `nrm`的安装使用\n作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；\n什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；\n1. 运行`npm i nrm -g`全局安装`nrm`包；\n2. 使用`nrm ls`查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；\n3. 使用`nrm use npm`或`nrm use taobao`切换不同的镜像源地址；\n\n## 相关文件\n1. [URL中的hash（井号）](http://www.cnblogs.com/joyho/articles/4430148.html)\n\n<h1 align=\"center\" style=\"color: red;\">Day4</h1>\n# Vue.js - Day4\n\n## 父组件向子组件传值\n1. 组件实例定义方式，注意：一定要使用`props`属性来定义父组件传递过来的数据\n```\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        msg: '这是父组件中的消息'\n      },\n      components: {\n        son: {\n          template: '<h1>这是子组件 --- {{finfo}}</h1>',\n          props: ['finfo']\n        }\n      }\n    });\n  </script>\n```\n2. 使用`v-bind`或简化指令，将数据传递到子组件中：\n```\n<div id=\"app\">\n    <son :finfo=\"msg\"></son>\n  </div>\n```\n\n## 子组件向父组件传值\n1. 原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；\n2. 父组件将方法的引用传递给子组件，其中，`getMsg`是父组件中`methods`中定义的方法名称，`func`是子组件调用传递过来方法时候的方法名称\n```\n<son @func=\"getMsg\"></son>\n```\n3. 子组件内部通过`this.$emit('方法名', 要传递的数据)`方式，来调用父组件中的方法，同时把数据传递给父组件使用\n```\n<div id=\"app\">\n    <!-- 引用父组件 -->\n    <son @func=\"getMsg\"></son>\n\n    <!-- 组件模板定义 -->\n    <script type=\"x-template\" id=\"son\">\n      <div>\n        <input type=\"button\" value=\"向父组件传值\" @click=\"sendMsg\" />\n      </div>\n    </script>\n  </div>\n\n  <script>\n    // 子组件的定义方式\n    Vue.component('son', {\n      template: '#son', // 组件模板Id\n      methods: {\n        sendMsg() { // 按钮的点击事件\n          this.$emit('func', 'OK'); // 调用父组件传递过来的方法，同时把数据传递出去\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getMsg(val){ // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义\n          alert(val);\n        }\n      }\n    });\n  </script>\n```\n\n## 组件中data和props的区别\n\n## 评论列表案例\n目标：主要练习父子组件之间传值\n\n## 使用 `this.$refs` 来获取元素和组件\n```\n  <div id=\"app\">\n    <div>\n      <input type=\"button\" value=\"获取元素内容\" @click=\"getElement\" />\n      <!-- 使用 ref 获取元素 -->\n      <h1 ref=\"myh1\">这是一个大大的H1</h1>\n\n      <hr>\n      <!-- 使用 ref 获取子组件 -->\n      <my-com ref=\"mycom\"></my-com>\n    </div>\n  </div>\n\n  <script>\n    Vue.component('my-com', {\n      template: '<h5>这是一个子组件</h5>',\n      data() {\n        return {\n          name: '子组件'\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getElement() {\n          // 通过 this.$refs 来获取元素\n          console.log(this.$refs.myh1.innerText);\n          // 通过 this.$refs 来获取组件\n          console.log(this.$refs.mycom.name);\n        }\n      }\n    });\n  </script>\n```\n\n## 什么是路由\n1. **后端路由：**对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；\n\n2. **前端路由：**对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；\n\n3. 在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；\n\n## 在 vue 中使用 vue-router\n1. 导入 vue-router 组件类库：\n```\n<!-- 1. 导入 vue-router 组件类库 -->\n  <script src=\"./lib/vue-router-2.7.0.js\"></script>\n```\n2. 使用 router-link 组件来导航\n```\n<!-- 2. 使用 router-link 组件来导航 -->\n<router-link to=\"/login\">登录</router-link>\n<router-link to=\"/register\">注册</router-link>\n```\n3. 使用 router-view 组件来显示匹配到的组件\n```\n<!-- 3. 使用 router-view 组件来显示匹配到的组件 -->\n<router-view></router-view>\n```\n4. 创建使用`Vue.extend`创建组件\n```\n    // 4.1 使用 Vue.extend 来创建登录组件\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    // 4.2 使用 Vue.extend 来创建注册组件\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n```\n5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n```\n// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n    var router = new VueRouter({\n      routes: [\n        { path: '/login', component: login },\n        { path: '/register', component: register }\n      ]\n    });\n```\n6. 使用 router 属性来使用路由规则\n```\n// 6. 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      router: router // 使用 router 属性来使用路由规则\n    });\n```\n\n## 使用tag属性指定router-link渲染的标签类型\n\n## 设置路由重定向\n\n## 设置路由高亮\n\n## 设置路由切换动效\n\n## 在路由规则中定义参数\n1. 在规则中定义参数：\n```\n{ path: '/register/:id', component: register }\n```\n2. 通过 `this.$route.params`来获取路由中的参数：\n```\nvar register = Vue.extend({\n      template: '<h1>注册组件 --- {{this.$route.params.id}}</h1>'\n    });\n```\n\n## 使用 `children` 属性实现路由嵌套\n```\n  <div id=\"app\">\n    <router-link to=\"/account\">Account</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    // 父路由中的组件\n    const account = Vue.extend({\n      template: `<div>\n        这是account组件\n        <router-link to=\"/account/login\">login</router-link> | \n        <router-link to=\"/account/register\">register</router-link>\n        <router-view></router-view>\n      </div>`\n    });\n\n    // 子路由中的 login 组件\n    const login = Vue.extend({\n      template: '<div>登录组件</div>'\n    });\n\n    // 子路由中的 register 组件\n    const register = Vue.extend({\n      template: '<div>注册组件</div>'\n    });\n\n    // 路由实例\n    var router = new VueRouter({\n      routes: [\n        { path: '/', redirect: '/account/login' }, // 使用 redirect 实现路由重定向\n        {\n          path: '/account',\n          component: account,\n          children: [ // 通过 children 数组属性，来实现路由的嵌套\n            { path: 'login', component: login }, // 注意，子路由的开头位置，不要加 / 路径符\n            { path: 'register', component: register }\n          ]\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: {\n        account\n      },\n      router: router\n    });\n  </script>\n```\n\n## 命名视图实现经典布局\n1. 标签代码结构：\n```\n<div id=\"app\">\n    <router-view></router-view>\n    <div class=\"content\">\n      <router-view name=\"a\"></router-view>\n      <router-view name=\"b\"></router-view>\n    </div>\n  </div>\n```\n2. JS代码：\n```\n<script>\n    var header = Vue.component('header', {\n      template: '<div class=\"header\">header</div>'\n    });\n\n    var sidebar = Vue.component('sidebar', {\n      template: '<div class=\"sidebar\">sidebar</div>'\n    });\n\n    var mainbox = Vue.component('mainbox', {\n      template: '<div class=\"mainbox\">mainbox</div>'\n    });\n\n    // 创建路由对象\n    var router = new VueRouter({\n      routes: [\n        {\n          path: '/', components: {\n            default: header,\n            a: sidebar,\n            b: mainbox\n          }\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router\n    });\n  </script>\n```\n3. CSS 样式：\n```\n  <style>\n    .header {\n      border: 1px solid red;\n    }\n\n    .content{\n      display: flex;\n    }\n    .sidebar {\n      flex: 2;\n      border: 1px solid green;\n      height: 500px;\n    }\n    .mainbox{\n      flex: 8;\n      border: 1px solid blue;\n      height: 500px;\n    }\n  </style>\n```\n\n## `watch`属性的使用\n考虑一个问题：想要实现 `名` 和 `姓` 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）\n\n1. 监听`data`中属性的改变：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen',\n        fullName: 'jack - chen'\n      },\n      methods: {},\n      watch: {\n        'firstName': function (newVal, oldVal) { // 第一个参数是新数据，第二个参数是旧数据\n          this.fullName = newVal + ' - ' + this.lastName;\n        },\n        'lastName': function (newVal, oldVal) {\n          this.fullName = this.firstName + ' - ' + newVal;\n        }\n      }\n    });\n  </script>\n```\n2. 监听路由对象的改变：\n```\n<div id=\"app\">\n    <router-link to=\"/login\">登录</router-link>\n    <router-link to=\"/register\">注册</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n\n    var router = new VueRouter({\n      routes: [\n        { path: \"/login\", component: login },\n        { path: \"/register\", component: register }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router: router,\n      watch: {\n        '$route': function (newVal, oldVal) {\n          if (newVal.path === '/login') {\n            console.log('这是登录组件');\n          }\n        }\n      }\n    });\n  </script>\n```\n\n## `computed`计算属性的使用\n1. 默认只有`getter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {},\n      computed: { // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值\n        fullName() {\n          return this.firstName + ' - ' + this.lastName;\n        }\n      }\n    });\n  </script>\n```\n2. 定义有`getter`和`setter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\">\n    <input type=\"text\" v-model=\"lastName\">\n    <!-- 点击按钮重新为 计算属性 fullName 赋值 -->\n    <input type=\"button\" value=\"修改fullName\" @click=\"changeName\">\n\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {\n        changeName() {\n          this.fullName = 'TOM - chen2';\n        }\n      },\n      computed: {\n        fullName: {\n          get: function () {\n            return this.firstName + ' - ' + this.lastName;\n          },\n          set: function (newVal) {\n            var parts = newVal.split(' - ');\n            this.firstName = parts[0];\n            this.lastName = parts[1];\n          }\n        }\n      }\n    });\n  </script>\n```\n\n## `watch`、`computed`和`methods`之间的对比\n1. `computed`属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；\n2. `methods`方法表示一个具体的操作，主要书写业务逻辑；\n3. `watch`一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是`computed`和`methods`的结合体；\n\n## `nrm`的安装使用\n作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；\n什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；\n1. 运行`npm i nrm -g`全局安装`nrm`包；\n2. 使用`nrm ls`查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；\n3. 使用`nrm use npm`或`nrm use taobao`切换不同的镜像源地址；\n\n## 相关文件\n1. [URL中的hash（井号）](http://www.cnblogs.com/joyho/articles/4430148.html)\n\n<h1 align=\"center\" style=\"color: red;\">Day5</h1>\n# Vue.js - Day5 - Webpack\n\n## 在网页中会引用哪些常见的静态资源？\n+ JS\n - .js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）\n+ CSS\n - .css  .less   .sass  .scss\n+ Images\n - .jpg   .png   .gif   .bmp   .svg\n+ 字体文件（Fonts）\n - .svg   .ttf   .eot   .woff   .woff2\n+ 模板文件\n - .ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】\n\n\n## 网页中引入的静态资源多了以后有什么问题？？？\n1. 网页加载速度慢， 因为 我们要发起很多的二次请求；\n2. 要处理错综复杂的依赖关系\n\n\n## 如何解决上述两个问题\n1. 合并、压缩、精灵图、图片的Base64编码\n2. 可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；\n\n## 什么是webpack?\nwebpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；\n\n\n## 如何完美实现上述的2种解决方案\n1. 使用Gulp， 是基于 task 任务的；\n2. 使用Webpack， 是基于整个项目进行构建的；\n+ 借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。\n+ 根据官网的图片介绍webpack打包的过程\n+ [webpack官网](http://webpack.github.io/)\n\n## webpack安装的两种方式\n1. 运行`npm i webpack -g`全局安装webpack，这样就能在全局使用webpack的命令\n2. 在项目根目录中运行`npm i webpack --save-dev`安装到项目依赖中\n\n## 初步使用webpack打包构建列表隔行变色案例\n1. 运行`npm init`初始化项目，使用npm管理项目中的依赖包\n2. 创建项目基本的目录结构\n3. 使用`cnpm i jquery --save`安装jquery类库\n4. 创建`main.js`并书写各行变色的代码逻辑：\n```\n\t// 导入jquery类库\n    import $ from 'jquery'\n\n    // 设置偶数行背景色，索引从0开始，0是偶数\n    $('#list li:even').css('backgroundColor','lightblue');\n    // 设置奇数行背景色\n    $('#list li:odd').css('backgroundColor','pink');\n```\n5. 直接在页面上引用`main.js`会报错，因为浏览器不认识`import`这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；\n6. 运行`webpack 入口文件路径 输出文件路径`对`main.js`进行处理：\n```\nwebpack src/js/main.js dist/bundle.js\n```\n\n## 使用webpack的配置文件简化打包时候的命令\n1. 在项目根目录中创建`webpack.config.js`\n2. 由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在`webpack.config.js`中配置这两个路径：\n```\n    // 导入处理路径的模块\n    var path = require('path');\n\n    // 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理\n    module.exports = {\n        entry: path.resolve(__dirname, 'src/js/main.js'), // 项目入口文件\n        output: { // 配置输出选项\n            path: path.resolve(__dirname, 'dist'), // 配置输出的路径\n            filename: 'bundle.js' // 配置输出的文件名\n        }\n    }\n```\n\n## 实现webpack的实时打包构建\n1. 由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用`webpack-dev-server`来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。\n2. 运行`cnpm i webpack-dev-server --save-dev`安装到开发依赖\n3. 安装完成之后，在命令行直接运行`webpack-dev-server`来进行打包，发现报错，此时需要借助于`package.json`文件中的指令，来进行运行`webpack-dev-server`命令，在`scripts`节点下新增`\"dev\": \"webpack-dev-server\"`指令，发现可以进行实时打包，但是dist目录下并没有生成`bundle.js`文件，这是因为`webpack-dev-server`将打包好的文件放在了内存中\n + 把`bundle.js`放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快\n + 这个时候访问webpack-dev-server启动的`http://localhost:8080/`网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:`<script src=\"../bundle.js\"></script>`\n + 为了能在访问`http://localhost:8080/`的时候直接访问到index首页，可以使用`--contentBase src`指令来修改dev指令，指定启动的根目录：\n ```\n \"dev\": \"webpack-dev-server --contentBase src\"\n ```\n 同时修改index页面中script的src属性为`<script src=\"bundle.js\"></script>`\n\n## 使用`html-webpack-plugin`插件配置启动页面\n由于使用`--contentBase`指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用`html-webpack-plugin`插件配置启动页面.\n1. 运行`cnpm i html-webpack-plugin --save-dev`安装到开发依赖\n2. 修改`webpack.config.js`配置文件如下：\n```\n    // 导入处理路径的模块\n    var path = require('path');\n    // 导入自动生成HTMl文件的插件\n    var htmlWebpackPlugin = require('html-webpack-plugin');\n\n    module.exports = {\n        entry: path.resolve(__dirname, 'src/js/main.js'), // 项目入口文件\n        output: { // 配置输出选项\n            path: path.resolve(__dirname, 'dist'), // 配置输出的路径\n            filename: 'bundle.js' // 配置输出的文件名\n        },\n        plugins:[ // 添加plugins节点配置插件\n            new htmlWebpackPlugin({\n                template:path.resolve(__dirname, 'src/index.html'),//模板路径\n                filename:'index.html'//自动生成的HTML文件的名称\n            })\n        ]\n    }\n```\n3. 修改`package.json`中`script`节点中的dev指令如下：\n```\n\"dev\": \"webpack-dev-server\"\n```\n4. 将index.html中script标签注释掉，因为`html-webpack-plugin`插件会自动把bundle.js注入到index.html页面中！\n\n## 实现自动打开浏览器、热更新和配置浏览器的默认端口号\n**注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！**\n### 方式1：\n+ 修改`package.json`的script节点如下，其中`--open`表示自动打开浏览器，`--port 4321`表示打开的端口号为4321，`--hot`表示启用浏览器热更新：\n```\n\"dev\": \"webpack-dev-server --hot --port 4321 --open\"\n```\n\n### 方式2：\n1. 修改`webpack.config.js`文件，新增`devServer`节点如下：\n```\ndevServer:{\n        hot:true,\n        open:true,\n        port:4321\n    }\n```\n2. 在头部引入`webpack`模块：\n```\nvar webpack = require('webpack');\n```\n3. 在`plugins`节点下新增：\n```\nnew webpack.HotModuleReplacementPlugin()\n```\n\n## 使用webpack打包css文件\n1. 运行`cnpm i style-loader css-loader --save-dev`\n2. 修改`webpack.config.js`这个配置文件：\n```\nmodule: { // 用来配置第三方loader模块的\n        rules: [ // 文件的匹配规则\n            { test: /\\.css$/, use: ['style-loader', 'css-loader'] }//处理css文件的规则\n        ]\n    }\n```\n3. 注意：`use`表示使用哪些模块来处理`test`所匹配到的文件；`use`中相关loader模块的调用顺序是从后向前调用的；\n\n## 使用webpack打包less文件\n1. 运行`cnpm i less-loader less -D`\n2. 修改`webpack.config.js`这个配置文件：\n```\n{ test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] },\n```\n\n## 使用webpack打包sass文件\n1. 运行`cnpm i sass-loader node-sass --save-dev`\n2. 在`webpack.config.js`中添加处理sass文件的loader模块：\n```\n{ test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] }\n```\n\n## 使用webpack处理css中的路径\n1. 运行`cnpm i url-loader file-loader --save-dev`\n2. 在`webpack.config.js`中添加处理url路径的loader模块：\n```\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader' }\n```\n3. 可以通过`limit`指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：\n```\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader?limit=43960' },\n```\n\n## 使用babel处理高级JS语法\n1. 运行`cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev`安装babel的相关loader包\n2. 运行`cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev`安装babel转换的语法\n3. 在`webpack.config.js`中添加相关loader模块，其中需要注意的是，一定要把`node_modules`文件夹添加到排除项：\n```\n{ test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ }\n```\n4. 在项目根目录中添加`.babelrc`文件，并修改这个配置文件如下：\n```\n{\n    \"presets\":[\"es2015\", \"stage-0\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n5. **注意：语法插件`babel-preset-es2015`可以更新为`babel-preset-env`，它包含了所有的ES相关的语法；**\n\n## 相关文章\n[babel-preset-env：你需要的唯一Babel插件](https://segmentfault.com/p/1210000008466178)\n[Runtime transform 运行时编译es6](https://segmentfault.com/a/1190000009065987)","source":"_posts/vue-heima-1.md","raw":"---\ntitle: Vue 笔记 Day1\ndate: 2020-03-13 12:11:46\ntags: Vue\ncategories: Vue.js\n---\n<p>黑马的课堂笔记总结，总共五天。附上Vue生命周期图</p>\n<div align=\"center\">\n\t<img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/lifecycle.png\" alt=\"生命周期\">\n</div>\n\n<!--more-->\n<h1 align=\"center\" style=\"color: red;\">Day1</h1>\n# Vue.js - Day1\n\n## 课程介绍\n前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp\n后5天： 以项目驱动教学；\n\n\n### 什么是Vue.js\n\n+ Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）\n\n+ Vue.js 是前端的**主流框架之一**，和Angular.js、React.js 一起，并成为前端三大主流框架！\n\n+ Vue.js 是一套构建用户界面的框架，**只关注视图层**，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）\n\n+ 前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；\n\n\n\n\n\n## 为什么要学习流行框架\n + 企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；\n  - 企业中，使用框架，能够提高开发的效率；\n\n\n\n + 提高开发效率的发展历程：原生JS -> Jquery之类的类库 -> 前端模板引擎 -> Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）\n + 在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；\n\n\n\n + 增强自己就业时候的竞争力\n  - 人无我有，人有我优\n  - 你平时不忙的时候，都在干嘛？\n\n## 框架和库的区别\n\n\n\n + 框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。\n\n  - node 中的 express；\n\n\n\n + 库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。\n  - 1. 从Jquery 切换到 Zepto\n  - 2. 从 EJS 切换到 art-template\n\n\n\n\n\n\n\n## Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\n\n + MVC 是后端的分层开发概念；\n + MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel\n\n + 为什么有了MVC还要有MVVM\n\n\n\n## Vue.js 基本代码 和 MVVM 之间的对应关系\n\n\n## Vue之 - `基本的代码结构`和`插值表达式`、`v-cloak`\n\n\n## Vue指令之`v-text`和`v-html`\n\n\n## Vue指令之`v-bind`的三种用法\n\n1. 直接使用指令`v-bind`\n\n2. 使用简化指令`:`\n\n3. 在绑定的时候，拼接绑定内容：`:title=\"btnTitle + ', 这是追加的内容'\"`\n\n\n## Vue指令之`v-on`和`跑马灯效果`\n\n\n\n### 跑马灯效果\n\n1. HTML结构：\n\n```\n\n<div id=\"app\">\n\n    <p>{{info}}</p>\n\n    <input type=\"button\" value=\"开启\" v-on:click=\"go\">\n\n    <input type=\"button\" value=\"停止\" v-on:click=\"stop\">\n\n  </div>\n\n```\n\n2. Vue实例：\n\n```\n\n\t// 创建 Vue 实例，得到 ViewModel\n\n    var vm = new Vue({\n\n      el: '#app',\n\n      data: {\n\n        info: '猥琐发育，别浪~！',\n\n        intervalId: null\n\n      },\n\n      methods: {\n\n        go() {\n\n          // 如果当前有定时器在运行，则直接return\n\n          if (this.intervalId != null) {\n\n            return;\n\n          }\n\n          // 开始定时器\n\n          this.intervalId = setInterval(() => {\n\n            this.info = this.info.substring(1) + this.info.substring(0, 1);\n\n          }, 500);\n\n        },\n\n        stop() {\n\n          clearInterval(this.intervalId);\n\n        }\n\n      }\n\n    });\n\n```\n\n\n\n\n\n\n\n## Vue指令之`v-on的缩写`和`事件修饰符`\n\n\n\n### 事件修饰符：\n\n+ .stop       阻止冒泡\n\n+ .prevent    阻止默认事件\n\n+ .capture    添加事件侦听器时使用事件捕获模式\n\n+ .self       只当事件在该元素本身（比如不是子元素）触发时触发回调\n\n+ .once       事件只触发一次\n\n\n\n\n\n\n\n## Vue指令之`v-model`和`双向数据绑定`\n\n\n\n\n\n\n\n## 简易计算器案例\n\n1. HTML 代码结构\n\n```\n\n  <div id=\"app\">\n\n    <input type=\"text\" v-model=\"n1\">\n\n    <select v-model=\"opt\">\n\n      <option value=\"0\">+</option>\n\n      <option value=\"1\">-</option>\n\n      <option value=\"2\">*</option>\n\n      <option value=\"3\">÷</option>\n\n    </select>\n\n    <input type=\"text\" v-model=\"n2\">\n\n    <input type=\"button\" value=\"=\" v-on:click=\"getResult\">\n\n    <input type=\"text\" v-model=\"result\">\n\n  </div>\n\n```\n\n2. Vue实例代码：\n\n```\n\n\t// 创建 Vue 实例，得到 ViewModel\n\n    var vm = new Vue({\n\n      el: '#app',\n\n      data: {\n\n        n1: 0,\n\n        n2: 0,\n\n        result: 0,\n\n        opt: '0'\n\n      },\n\n      methods: {\n\n        getResult() {\n\n          switch (this.opt) {\n\n            case '0':\n\n              this.result = parseInt(this.n1) + parseInt(this.n2);\n\n              break;\n\n            case '1':\n\n              this.result = parseInt(this.n1) - parseInt(this.n2);\n\n              break;\n\n            case '2':\n\n              this.result = parseInt(this.n1) * parseInt(this.n2);\n\n              break;\n\n            case '3':\n\n              this.result = parseInt(this.n1) / parseInt(this.n2);\n\n              break;\n\n          }\n\n        }\n\n      }\n\n    });\n\n```\n\n\n\n\n\n\n\n\n\n## 在Vue中使用样式\n\n\n\n### 使用class样式\n\n1. 数组\n```\n<h1 :class=\"['red', 'thin']\">这是一个邪恶的H1</h1>\n```\n\n2. 数组中使用三元表达式\n```\n<h1 :class=\"['red', 'thin', isactive?'active':'']\">这是一个邪恶的H1</h1>\n```\n\n3. 数组中嵌套对象\n```\n<h1 :class=\"['red', 'thin', {'active': isactive}]\">这是一个邪恶的H1</h1>\n```\n\n4. 直接使用对象\n```\n<h1 :class=\"{red:true, italic:true, active:true, thin:true}\">这是一个邪恶的H1</h1>\n```\n\n\n\n### 使用内联样式\n\n1. 直接在元素上通过 `:style` 的形式，书写样式对象\n```\n<h1 :style=\"{color: 'red', 'font-size': '40px'}\">这是一个善良的H1</h1>\n```\n\n2. 将样式对象，定义到 `data` 中，并直接引用到 `:style` 中\n + 在data上定义样式：\n```\ndata: {\n        h1StyleObj: { color: 'red', 'font-size': '40px', 'font-weight': '200' }\n}\n```\n + 在元素中，通过属性绑定的形式，将样式对象应用到元素中：\n```\n<h1 :style=\"h1StyleObj\">这是一个善良的H1</h1>\n```\n\n3. 在 `:style` 中通过数组，引用多个 `data` 上的样式对象\n + 在data上定义样式：\n```\ndata: {\n        h1StyleObj: { color: 'red', 'font-size': '40px', 'font-weight': '200' },\n        h1StyleObj2: { fontStyle: 'italic' }\n}\n```\n + 在元素中，通过属性绑定的形式，将样式对象应用到元素中：\n```\n<h1 :style=\"[h1StyleObj, h1StyleObj2]\">这是一个善良的H1</h1>\n```\n\n\n\n## Vue指令之`v-for`和`key`属性\n\n1. 迭代数组\n\n```\n<ul>\n  <li v-for=\"(item, i) in list\">索引：{{i}} --- 姓名：{{item.name}} --- 年龄：{{item.age}}</li>\n</ul>\n```\n\n2. 迭代对象中的属性\n\n```\n\n\t<!-- 循环遍历对象身上的属性 -->\n\n    <div v-for=\"(val, key, i) in userInfo\">{{val}} --- {{key}} --- {{i}}</div>\n\n```\n\n3. 迭代数字\n\n```\n\n<p v-for=\"i in 10\">这是第 {{i}} 个P标签</p>\n\n```\n\n\n\n> 2.2.0+ 的版本里，**当在组件中使用** v-for 时，key 现在是必须的。\n\n\n\n当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “**就地复用**” 策略。如果数据项的顺序被改变，Vue将**不是移动 DOM 元素来匹配数据项的顺序**， 而是**简单复用此处每个元素**，并且确保它在特定索引下显示已被渲染过的每个元素。\n\n\n\n为了给 Vue 一个提示，**以便它能跟踪每个节点的身份，从而重用和重新排序现有元素**，你需要为每项提供一个唯一 key 属性。\n\n\n\n\n\n\n\n## Vue指令之`v-if`和`v-show`\n\n\n\n\n\n\n\n> 一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。\n\n\n\n\n\n\n\n## 品牌管理案例\n\n\n\n### 添加新品牌\n\n\n\n### 删除品牌\n\n\n\n### 根据条件筛选品牌\n\n1. 1.x 版本中的filterBy指令，在2.x中已经被废除：\n\n[filterBy - 指令](https://v1-cn.vuejs.org/api/#filterBy)\n\n```\n\n<tr v-for=\"item in list | filterBy searchName in 'name'\">\n\n  <td>{{item.id}}</td>\n\n  <td>{{item.name}}</td>\n\n  <td>{{item.ctime}}</td>\n\n  <td>\n\n    <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n  </td>\n\n</tr>\n\n```\n\n2. 在2.x版本中[手动实现筛选的方式](https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果)：\n\n+ 筛选框绑定到 VM 实例中的 `searchName` 属性：\n\n```\n\n<hr> 输入筛选名称：\n\n<input type=\"text\" v-model=\"searchName\">\n\n```\n\n+ 在使用 `v-for` 指令循环每一行数据的时候，不再直接 `item in list`，而是 `in` 一个 过滤的methods 方法，同时，把过滤条件`searchName`传递进去：\n\n```\n\n<tbody>\n\n      <tr v-for=\"item in search(searchName)\">\n\n        <td>{{item.id}}</td>\n\n        <td>{{item.name}}</td>\n\n        <td>{{item.ctime}}</td>\n\n        <td>\n\n          <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n        </td>\n\n      </tr>\n\n    </tbody>\n\n```\n\n+ `search` 过滤方法中，使用 数组的 `filter` 方法进行过滤：\n\n```\n\nsearch(name) {\n\n  return this.list.filter(x => {\n\n    return x.name.indexOf(name) != -1;\n\n  });\n\n}\n\n```\n\n\n\n\n\n\n\n## Vue调试工具`vue-devtools`的安装步骤和使用\n\n[Vue.js devtools - 翻墙安装方式 - 推荐](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN)\n\n\n\n\n\n## 过滤器\n\n概念：Vue.js 允许你自定义过滤器，**可被用作一些常见的文本格式化**。过滤器可以用在两个地方：**mustache 插值和 v-bind 表达式**。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；\n\n### 私有过滤器\n\n1. HTML元素：\n\n```\n\n<td>{{item.ctime | dataFormat('yyyy-mm-dd')}}</td>\n\n```\n\n2. 私有 `filters` 定义方式：\n\n```\n\nfilters: { // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用\n\n    dataFormat(input, pattern = \"\") { // 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错\n\n      var dt = new Date(input);\n\n      // 获取年月日\n\n      var y = dt.getFullYear();\n\n      var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n      var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n      // 否则，就返回  年-月-日 时：分：秒\n\n      if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n        return `${y}-${m}-${d}`;\n\n      } else {\n\n        // 获取时分秒\n\n        var hh = dt.getHours().toString().padStart(2, '0');\n\n        var mm = dt.getMinutes().toString().padStart(2, '0');\n\n        var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n      }\n\n    }\n\n  }\n\n```\n\n\n\n> 使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString='') 或 String.prototype.padEnd(maxLength, fillString='')来填充字符串；\n\n\n\n\n\n### 全局过滤器\n\n```\n\n// 定义一个全局过滤器\n\nVue.filter('dataFormat', function (input, pattern = '') {\n\n  var dt = new Date(input);\n\n  // 获取年月日\n\n  var y = dt.getFullYear();\n\n  var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n  var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n  // 否则，就返回  年-月-日 时：分：秒\n\n  if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n    return `${y}-${m}-${d}`;\n\n  } else {\n\n    // 获取时分秒\n\n    var hh = dt.getHours().toString().padStart(2, '0');\n\n    var mm = dt.getMinutes().toString().padStart(2, '0');\n\n    var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n  }\n\n});\n\n```\n\n\n\n> 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！\n\n\n\n## 键盘修饰符以及自定义键盘修饰符\n\n### 1.x中自定义键盘修饰符【了解即可】\n\n```\n\nVue.directive('on').keyCodes.f2 = 113;\n\n```\n\n### [2.x中自定义键盘修饰符](https://cn.vuejs.org/v2/guide/events.html#键值修饰符)\n\n1. 通过`Vue.config.keyCodes.名称 = 按键值`来自定义案件修饰符的别名：\n\n```\n\nVue.config.keyCodes.f2 = 113;\n\n```\n\n2. 使用自定义的按键修饰符：\n\n```\n\n<input type=\"text\" v-model=\"name\" @keyup.f2=\"add\">\n\n```\n\n\n\n\n\n## [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n1. 自定义全局和局部的 自定义指令：\n\n```\n\n    // 自定义全局指令 v-focus，为绑定的元素自动获取焦点：\n\n    Vue.directive('focus', {\n\n      inserted: function (el) { // inserted 表示被绑定元素插入父节点时调用\n\n        el.focus();\n\n      }\n\n    });\n\n\n\n    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：\n\n      directives: {\n\n        color: { // 为元素设置指定的字体颜色\n\n          bind(el, binding) {\n\n            el.style.color = binding.value;\n\n          }\n\n        },\n\n        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数\n\n          el.style.fontWeight = binding2.value;\n\n        }\n\n      }\n\n```\n\n2. 自定义指令的使用方式：\n\n```\n\n<input type=\"text\" v-model=\"searchName\" v-focus v-color=\"'red'\" v-font-weight=\"900\">\n\n```\n\n\n\n## Vue 1.x 中 自定义元素指令【已废弃,了解即可】\n```\nVue.elementDirective('red-color', {\n  bind: function () {\n    this.el.style.color = 'red';\n  }\n});\n```\n使用方式：\n```\n<red-color>1232</red-color>\n```\n\n## 相关文章\n1. [vue.js 1.x 文档](https://v1-cn.vuejs.org/)\n2. [vue.js 2.x 文档](https://cn.vuejs.org/)\n3. [String.prototype.padStart(maxLength, fillString)](http://www.css88.com/archives/7715)\n4. [js 里面的键盘事件对应的键码](http://www.cnblogs.com/wuhua1/p/6686237.html)\n5. [Vue.js双向绑定的实现原理](http://www.cnblogs.com/kidney/p/6052935.html)\n\n<h1 align=\"center\" style=\"color: red;\">Day2</h1>\n# Vue.js - Day2\n\n## 品牌管理案例\n\n### 添加新品牌\n\n### 删除品牌\n\n### 根据条件筛选品牌\n\n1. 1.x 版本中的filterBy指令，在2.x中已经被废除：\n\n[filterBy - 指令](https://v1-cn.vuejs.org/api/#filterBy)\n\n```\n\n<tr v-for=\"item in list | filterBy searchName in 'name'\">\n\n  <td>{{item.id}}</td>\n\n  <td>{{item.name}}</td>\n\n  <td>{{item.ctime}}</td>\n\n  <td>\n\n    <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n  </td>\n\n</tr>\n\n```\n\n2. 在2.x版本中[手动实现筛选的方式](https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果)：\n\n+ 筛选框绑定到 VM 实例中的 `searchName` 属性：\n\n```\n\n<hr> 输入筛选名称：\n\n<input type=\"text\" v-model=\"searchName\">\n\n```\n\n+ 在使用 `v-for` 指令循环每一行数据的时候，不再直接 `item in list`，而是 `in` 一个 过滤的methods 方法，同时，把过滤条件`searchName`传递进去：\n\n```\n\n<tbody>\n\n      <tr v-for=\"item in search(searchName)\">\n\n        <td>{{item.id}}</td>\n\n        <td>{{item.name}}</td>\n\n        <td>{{item.ctime}}</td>\n\n        <td>\n\n          <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n        </td>\n\n      </tr>\n\n    </tbody>\n\n```\n\n+ `search` 过滤方法中，使用 数组的 `filter` 方法进行过滤：\n\n```\n\nsearch(name) {\n\n  return this.list.filter(x => {\n\n    return x.name.indexOf(name) != -1;\n\n  });\n\n}\n\n```\n\n## Vue调试工具`vue-devtools`的安装步骤和使用\n\n[Vue.js devtools - 翻墙安装方式 - 推荐](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN)\n\n## 过滤器\n\n概念：Vue.js 允许你自定义过滤器，**可被用作一些常见的文本格式化**。过滤器可以用在两个地方：**mustache 插值和 v-bind 表达式**。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；\n\n### 私有过滤器\n\n1. HTML元素：\n\n```\n\n<td>{{item.ctime | dataFormat('yyyy-mm-dd')}}</td>\n\n```\n\n2. 私有 `filters` 定义方式：\n\n```\n\nfilters: { // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用\n\n    dataFormat(input, pattern = \"\") { // 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错\n\n      var dt = new Date(input);\n\n      // 获取年月日\n\n      var y = dt.getFullYear();\n\n      var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n      var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n      // 否则，就返回  年-月-日 时：分：秒\n\n      if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n        return `${y}-${m}-${d}`;\n\n      } else {\n\n        // 获取时分秒\n\n        var hh = dt.getHours().toString().padStart(2, '0');\n\n        var mm = dt.getMinutes().toString().padStart(2, '0');\n\n        var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n      }\n\n    }\n\n  }\n\n```\n\n\n\n> 使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString='') 或 String.prototype.padEnd(maxLength, fillString='')来填充字符串；\n\n\n\n\n\n### 全局过滤器\n\n```\n\n// 定义一个全局过滤器\n\nVue.filter('dataFormat', function (input, pattern = '') {\n\n  var dt = new Date(input);\n\n  // 获取年月日\n\n  var y = dt.getFullYear();\n\n  var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n  var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n  // 否则，就返回  年-月-日 时：分：秒\n\n  if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n    return `${y}-${m}-${d}`;\n\n  } else {\n\n    // 获取时分秒\n\n    var hh = dt.getHours().toString().padStart(2, '0');\n\n    var mm = dt.getMinutes().toString().padStart(2, '0');\n\n    var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n  }\n\n});\n\n```\n\n\n\n> 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！\n\n\n\n## 键盘修饰符以及自定义键盘修饰符\n\n### 1.x中自定义键盘修饰符【了解即可】\n\n```\n\nVue.directive('on').keyCodes.f2 = 113;\n\n```\n\n### [2.x中自定义键盘修饰符](https://cn.vuejs.org/v2/guide/events.html#键值修饰符)\n\n1. 通过`Vue.config.keyCodes.名称 = 按键值`来自定义案件修饰符的别名：\n\n```\n\nVue.config.keyCodes.f2 = 113;\n\n```\n\n2. 使用自定义的按键修饰符：\n\n```\n\n<input type=\"text\" v-model=\"name\" @keyup.f2=\"add\">\n\n```\n\n\n\n\n\n## [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n1. 自定义全局和局部的 自定义指令：\n\n```\n\n    // 自定义全局指令 v-focus，为绑定的元素自动获取焦点：\n\n    Vue.directive('focus', {\n\n      inserted: function (el) { // inserted 表示被绑定元素插入父节点时调用\n\n        el.focus();\n\n      }\n\n    });\n\n\n\n    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：\n\n      directives: {\n\n        color: { // 为元素设置指定的字体颜色\n\n          bind(el, binding) {\n\n            el.style.color = binding.value;\n\n          }\n\n        },\n\n        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数\n\n          el.style.fontWeight = binding2.value;\n\n        }\n\n      }\n\n```\n\n2. 自定义指令的使用方式：\n\n```\n\n<input type=\"text\" v-model=\"searchName\" v-focus v-color=\"'red'\" v-font-weight=\"900\">\n\n```\n\n\n\n## Vue 1.x 中 自定义元素指令【已废弃,了解即可】\n```\nVue.elementDirective('red-color', {\n  bind: function () {\n    this.el.style.color = 'red';\n  }\n});\n```\n使用方式：\n```\n<red-color>1232</red-color>\n```\n\n\n## [vue实例的生命周期](https://cn.vuejs.org/v2/guide/instance.html#实例生命周期)\n+ 什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！\n+ [生命周期钩子](https://cn.vuejs.org/v2/api/#选项-生命周期钩子)：就是生命周期事件的别名而已；\n+ 生命周期钩子 = 生命周期函数 = 生命周期事件\n+ 主要的生命周期函数分类：\n - 创建期间的生命周期函数：\n  \t+ beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性\n  \t+ created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板\n  \t+ beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中\n  \t+ mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示\n - 运行期间的生命周期函数：\n \t+ beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点\n \t+ updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！\n - 销毁期间的生命周期函数：\n \t+ beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。\n \t+ destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n\n\n## [vue-resource 实现 get, post, jsonp请求](https://github.com/pagekit/vue-resource)\n除了 vue-resource 之外，还可以使用 `axios` 的第三方包实现实现数据的请求\n1. 之前的学习中，如何发起数据请求？\n2. 常见的数据请求类型？  get  post jsonp\n3. 测试的URL请求资源地址：\n + get请求地址： http://vue.studyit.io/api/getlunbo\n + post请求地址：http://vue.studyit.io/api/post\n + jsonp请求地址：http://vue.studyit.io/api/jsonp\n4. JSONP的实现原理\n + 由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；\n + 可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；\n + 具体实现过程：\n \t- 先在客户端定义一个回调方法，预定义对数据的操作；\n \t- 再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；\n \t- 服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；\n \t- 客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；\n + 带大家通过 Node.js ，来手动实现一个JSONP的请求例子；\n ```\n    const http = require('http');\n    // 导入解析 URL 地址的核心模块\n    const urlModule = require('url');\n\n    const server = http.createServer();\n    // 监听 服务器的 request 请求事件，处理每个请求\n    server.on('request', (req, res) => {\n      const url = req.url;\n\n      // 解析客户端请求的URL地址\n      var info = urlModule.parse(url, true);\n\n      // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据\n      if (info.pathname === '/getjsonp') {\n        // 获取客户端指定的回调函数的名称\n        var cbName = info.query.callback;\n        // 手动拼接要返回给客户端的数据对象\n        var data = {\n          name: 'zs',\n          age: 22,\n          gender: '男',\n          hobby: ['吃饭', '睡觉', '运动']\n        }\n        // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：\n        var result = `${cbName}(${JSON.stringify(data)})`;\n        // 将拼接好的方法的调用，返回给客户端去解析执行\n        res.end(result);\n      } else {\n        res.end('404');\n      }\n    });\n\n    server.listen(3000, () => {\n      console.log('server running at http://127.0.0.1:3000');\n    });\n ```\n5. vue-resource 的配置步骤：\n + 直接在页面中，通过`script`标签，引入 `vue-resource` 的脚本文件；\n + 注意：引用的先后顺序是：先引用 `Vue` 的脚本文件，再引用 `vue-resource` 的脚本文件；\n6. 发送get请求：\n```\ngetInfo() { // get 方式获取数据\n  this.$http.get('http://127.0.0.1:8899/api/getlunbo').then(res => {\n    console.log(res.body);\n  })\n}\n```\n7. 发送post请求：\n```\npostInfo() {\n  var url = 'http://127.0.0.1:8899/api/post';\n  // post 方法接收三个参数：\n  // 参数1： 要请求的URL地址\n  // 参数2： 要发送的数据对象\n  // 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded\n  this.$http.post(url, { name: 'zs' }, { emulateJSON: true }).then(res => {\n    console.log(res.body);\n  });\n}\n```\n8. 发送JSONP请求获取数据：\n```\njsonpInfo() { // JSONP形式从服务器获取数据\n  var url = 'http://127.0.0.1:8899/api/jsonp';\n  this.$http.jsonp(url).then(res => {\n    console.log(res.body);\n  });\n}\n```\n\n## 配置本地数据库和数据接口API\n1. 先解压安装 `PHPStudy`;\n2. 解压安装 `Navicat` 这个数据库可视化工具，并激活；\n3. 打开 `Navicat` 工具，新建空白数据库，名为 `dtcmsdb4`;\n4. 双击新建的数据库，连接上这个空白数据库，在新建的数据库上`右键` -> `运行SQL文件`，选择并执行 `dtcmsdb4.sql` 这个数据库脚本文件；如果执行不报错，则数据库导入完成；\n5. 进入文件夹 `vuecms3_nodejsapi` 内部，执行 `npm i` 安装所有的依赖项；\n6. 先确保本机安装了 `nodemon`, 没有安装，则运行 `npm i nodemon -g` 进行全局安装，安装完毕后，进入到 `vuecms3_nodejsapi`目录 -> `src`目录 -> 双击运行 `start.bat`\n7. 如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 `app.js` 中第 `14行` 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root\n\n## 品牌管理改造\n### 展示品牌列表\n\n### 添加品牌数据\n\n### 删除品牌数据\n\n## [Vue中的动画](https://cn.vuejs.org/v2/guide/transitions.html)\n为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；\n\n### 使用过渡类名\n1. HTML结构：\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"动起来\" @click=\"myAnimate\">\n    <!-- 使用 transition 将需要过渡的元素包裹起来 -->\n    <transition name=\"fade\">\n      <div v-show=\"isshow\">动画哦</div>\n    </transition>\n  </div>\n```\n2. VM 实例：\n```\n// 创建 Vue 实例，得到 ViewModel\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    isshow: false\n  },\n  methods: {\n    myAnimate() {\n      this.isshow = !this.isshow;\n    }\n  }\n});\n```\n3. 定义两组类样式：\n```\n/* 定义进入和离开时候的过渡状态 */\n    .fade-enter-active,\n    .fade-leave-active {\n      transition: all 0.2s ease;\n      position: absolute;\n    }\n\n    /* 定义进入过渡的开始状态 和 离开过渡的结束状态 */\n    .fade-enter,\n    .fade-leave-to {\n      opacity: 0;\n      transform: translateX(100px);\n    }\n```\n\n### [使用第三方 CSS 动画库](https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名)\n1. 导入动画类库：\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"./lib/animate.css\">\n```\n2. 定义 transition 及属性：\n```\n<transition\n\tenter-active-class=\"fadeInRight\"\n    leave-active-class=\"fadeOutRight\"\n    :duration=\"{ enter: 500, leave: 800 }\">\n  \t<div class=\"animated\" v-show=\"isshow\">动画哦</div>\n</transition>\n```\n\n### 使用动画钩子函数\n1. 定义 transition 组件以及三个钩子函数：\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"切换动画\" @click=\"isshow = !isshow\">\n    <transition\n    @before-enter=\"beforeEnter\"\n    @enter=\"enter\"\n    @after-enter=\"afterEnter\">\n      <div v-if=\"isshow\" class=\"show\">OK</div>\n    </transition>\n  </div>\n```\n2. 定义三个 methods 钩子方法：\n```\nmethods: {\n        beforeEnter(el) { // 动画进入之前的回调\n          el.style.transform = 'translateX(500px)';\n        },\n        enter(el, done) { // 动画进入完成时候的回调\n          el.offsetWidth;\n          el.style.transform = 'translateX(0px)';\n          done();\n        },\n        afterEnter(el) { // 动画进入完成之后的回调\n          this.isshow = !this.isshow;\n        }\n      }\n```\n3. 定义动画过渡时长和样式：\n```\n.show{\n      transition: all 0.4s ease;\n    }\n```\n\n\n### [v-for 的列表过渡](https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡)\n1. 定义过渡样式：\n```\n<style>\n    .list-enter,\n    .list-leave-to {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n\n    .list-enter-active,\n    .list-leave-active {\n      transition: all 0.3s ease;\n    }\n</style>\n```\n2. 定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：\n```\n  <div id=\"app\">\n    <input type=\"text\" v-model=\"txt\" @keyup.enter=\"add\">\n\n    <transition-group tag=\"ul\" name=\"list\">\n      <li v-for=\"(item, i) in list\" :key=\"i\">{{item}}</li>\n    </transition-group>\n  </div>\n```\n3. 定义 VM中的结构：\n```\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        txt: '',\n        list: [1, 2, 3, 4]\n      },\n      methods: {\n        add() {\n          this.list.push(this.txt);\n          this.txt = '';\n        }\n      }\n    });\n```\n\n\n### 列表的排序过渡\n`<transition-group>` 组件还有一个特殊之处。不仅可以进入和离开动画，**还可以改变定位**。要使用这个新功能只需了解新增的 `v-move` 特性，**它会在元素的改变定位的过程中应用**。\n+ `v-move` 和 `v-leave-active` 结合使用，能够让列表的过渡更加平缓柔和：\n```\n.v-move{\n  transition: all 0.8s ease;\n}\n.v-leave-active{\n  position: absolute;\n}\n```\n\n\n\n## 相关文章\n1. [vue.js 1.x 文档](https://v1-cn.vuejs.org/)\n2. [vue.js 2.x 文档](https://cn.vuejs.org/)\n3. [String.prototype.padStart(maxLength, fillString)](http://www.css88.com/archives/7715)\n4. [js 里面的键盘事件对应的键码](http://www.cnblogs.com/wuhua1/p/6686237.html)\n5. [pagekit/vue-resource](https://github.com/pagekit/vue-resource)\n6. [navicat如何导入sql文件和导出sql文件](https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html)\n7. [贝塞尔在线生成器](http://cubic-bezier.com/#.4,-0.3,1,.33)\n\n<h1 align=\"center\" style=\"color: red;\">Day3</h1>\n# Vue.js - Day3\n\n## 定义Vue组件\n什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；\n组件化和模块化的不同：\n + 模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；\n + 组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；\n### 全局组件定义的三种方式\n1. 使用 Vue.extend 配合 Vue.component 方法：\n```\nvar login = Vue.extend({\n      template: '<h1>登录</h1>'\n    });\n    Vue.component('login', login);\n```\n2. 直接使用 Vue.component 方法：\n```\nVue.component('register', {\n      template: '<h1>注册</h1>'\n    });\n```\n3. 将模板字符串，定义到script标签种：\n```\n<script id=\"tmpl\" type=\"x-template\">\n      <div><a href=\"#\">登录</a> | <a href=\"#\">注册</a></div>\n    </script>\n```\n同时，需要使用 Vue.component 来定义组件：\n```\nVue.component('account', {\n      template: '#tmpl'\n    });\n```\n\n> 注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！\n\n### 组件中展示数据和响应事件\n1. 在组件中，`data`需要被定义为一个方法，例如：\n```\nVue.component('account', {\n      template: '#tmpl',\n      data() {\n        return {\n          msg: '大家好！'\n        }\n      },\n      methods:{\n        login(){\n          alert('点击了登录按钮');\n        }\n      }\n    });\n```\n2. 在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的`data`属性中的值，需要使用`this`来访问；\n\n### 【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\n1. 通过计数器案例演示\n\n### 使用`components`属性定义局部子组件\n1. 组件实例定义方式：\n```\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: { // 定义子组件\n        account: { // account 组件\n          template: '<div><h1>这是Account组件{{name}}</h1><login></login></div>', // 在这里使用定义的子组件\n          components: { // 定义子组件的子组件\n            login: { // login 组件\n              template: \"<h3>这是登录组件</h3>\"\n            }\n          }\n        }\n      }\n    });\n  </script>\n```\n2. 引用组件：\n```\n<div id=\"app\">\n    <account></account>\n  </div>\n```\n\n## 使用`flag`标识符结合`v-if`和`v-else`切换组件\n1. 页面结构：\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"toggle\" @click=\"flag=!flag\">\n    <my-com1 v-if=\"flag\"></my-com1>\n    <my-com2 v-else=\"flag\"></my-com2>\n  </div>\n```\n2. Vue实例定义：\n```\n<script>\n    Vue.component('myCom1', {\n      template: '<h3>奔波霸</h3>'\n    })\n\n    Vue.component('myCom2', {\n      template: '<h3>霸波奔</h3>'\n    })\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        flag: true\n      },\n      methods: {}\n    });\n  </script>\n```\n\n## 使用`:is`属性来切换不同的子组件,并添加切换动画\n1. 组件实例定义方式：\n```\n  // 登录组件\n    const login = Vue.extend({\n      template: `<div>\n        <h3>登录组件</h3>\n      </div>`\n    });\n    Vue.component('login', login);\n\n    // 注册组件\n    const register = Vue.extend({\n      template: `<div>\n        <h3>注册组件</h3>\n      </div>`\n    });\n    Vue.component('register', register);\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: { comName: 'login' },\n      methods: {}\n    });\n```\n2. 使用`component`标签，来引用组件，并通过`:is`属性来指定要加载的组件：\n```\n  <div id=\"app\">\n    <a href=\"#\" @click.prevent=\"comName='login'\">登录</a>\n    <a href=\"#\" @click.prevent=\"comName='register'\">注册</a>\n    <hr>\n    <transition mode=\"out-in\">\n      <component :is=\"comName\"></component>\n    </transition>\n  </div>\n```\n3. 添加切换样式：\n```\n  <style>\n    .v-enter,\n    .v-leave-to {\n      opacity: 0;\n      transform: translateX(30px);\n    }\n\n    .v-enter-active,\n    .v-leave-active {\n      position: absolute;\n      transition: all 0.3s ease;\n    }\n\n    h3{\n      margin: 0;\n    }\n  </style>\n```\n\n## 父组件向子组件传值\n1. 组件实例定义方式，注意：一定要使用`props`属性来定义父组件传递过来的数据\n```\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        msg: '这是父组件中的消息'\n      },\n      components: {\n        son: {\n          template: '<h1>这是子组件 --- {{finfo}}</h1>',\n          props: ['finfo']\n        }\n      }\n    });\n  </script>\n```\n2. 使用`v-bind`或简化指令，将数据传递到子组件中：\n```\n<div id=\"app\">\n    <son :finfo=\"msg\"></son>\n  </div>\n```\n\n## 子组件向父组件传值\n1. 原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；\n2. 父组件将方法的引用传递给子组件，其中，`getMsg`是父组件中`methods`中定义的方法名称，`func`是子组件调用传递过来方法时候的方法名称\n```\n<son @func=\"getMsg\"></son>\n```\n3. 子组件内部通过`this.$emit('方法名', 要传递的数据)`方式，来调用父组件中的方法，同时把数据传递给父组件使用\n```\n<div id=\"app\">\n    <!-- 引用父组件 -->\n    <son @func=\"getMsg\"></son>\n\n    <!-- 组件模板定义 -->\n    <script type=\"x-template\" id=\"son\">\n      <div>\n        <input type=\"button\" value=\"向父组件传值\" @click=\"sendMsg\" />\n      </div>\n    </script>\n  </div>\n\n  <script>\n    // 子组件的定义方式\n    Vue.component('son', {\n      template: '#son', // 组件模板Id\n      methods: {\n        sendMsg() { // 按钮的点击事件\n          this.$emit('func', 'OK'); // 调用父组件传递过来的方法，同时把数据传递出去\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getMsg(val){ // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义\n          alert(val);\n        }\n      }\n    });\n  </script>\n```\n\n## 评论列表案例\n目标：主要练习父子组件之间传值\n\n## 使用 `this.$refs` 来获取元素和组件\n```\n  <div id=\"app\">\n    <div>\n      <input type=\"button\" value=\"获取元素内容\" @click=\"getElement\" />\n      <!-- 使用 ref 获取元素 -->\n      <h1 ref=\"myh1\">这是一个大大的H1</h1>\n\n      <hr>\n      <!-- 使用 ref 获取子组件 -->\n      <my-com ref=\"mycom\"></my-com>\n    </div>\n  </div>\n\n  <script>\n    Vue.component('my-com', {\n      template: '<h5>这是一个子组件</h5>',\n      data() {\n        return {\n          name: '子组件'\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getElement() {\n          // 通过 this.$refs 来获取元素\n          console.log(this.$refs.myh1.innerText);\n          // 通过 this.$refs 来获取组件\n          console.log(this.$refs.mycom.name);\n        }\n      }\n    });\n  </script>\n```\n\n## 什么是路由\n1. 对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；\n\n2. 对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；\n\n3. 在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；\n\n## 在 vue 中使用 vue-router\n1. 导入 vue-router 组件类库：\n```\n<!-- 1. 导入 vue-router 组件类库 -->\n  <script src=\"./lib/vue-router-2.7.0.js\"></script>\n```\n2. 使用 router-link 组件来导航\n```\n<!-- 2. 使用 router-link 组件来导航 -->\n<router-link to=\"/login\">登录</router-link>\n<router-link to=\"/register\">注册</router-link>\n```\n3. 使用 router-view 组件来显示匹配到的组件\n```\n<!-- 3. 使用 router-view 组件来显示匹配到的组件 -->\n<router-view></router-view>\n```\n4. 创建使用`Vue.extend`创建组件\n```\n    // 4.1 使用 Vue.extend 来创建登录组件\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    // 4.2 使用 Vue.extend 来创建注册组件\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n```\n5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n```\n// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n    var router = new VueRouter({\n      routes: [\n        { path: '/login', component: login },\n        { path: '/register', component: register }\n      ]\n    });\n```\n6. 使用 router 属性来使用路由规则\n```\n// 6. 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      router: router // 使用 router 属性来使用路由规则\n    });\n```\n\n## 设置路由高亮\n\n## 设置路由切换动效\n\n## 在路由规则中定义参数\n1. 在规则中定义参数：\n```\n{ path: '/register/:id', component: register }\n```\n2. 通过 `this.$route.params`来获取路由中的参数：\n```\nvar register = Vue.extend({\n      template: '<h1>注册组件 --- {{this.$route.params.id}}</h1>'\n    });\n```\n\n## 使用 `children` 属性实现路由嵌套\n```\n  <div id=\"app\">\n    <router-link to=\"/account\">Account</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    // 父路由中的组件\n    const account = Vue.extend({\n      template: `<div>\n        这是account组件\n        <router-link to=\"/account/login\">login</router-link> | \n        <router-link to=\"/account/register\">register</router-link>\n        <router-view></router-view>\n      </div>`\n    });\n\n    // 子路由中的 login 组件\n    const login = Vue.extend({\n      template: '<div>登录组件</div>'\n    });\n\n    // 子路由中的 register 组件\n    const register = Vue.extend({\n      template: '<div>注册组件</div>'\n    });\n\n    // 路由实例\n    var router = new VueRouter({\n      routes: [\n        { path: '/', redirect: '/account/login' }, // 使用 redirect 实现路由重定向\n        {\n          path: '/account',\n          component: account,\n          children: [ // 通过 children 数组属性，来实现路由的嵌套\n            { path: 'login', component: login }, // 注意，子路由的开头位置，不要加 / 路径符\n            { path: 'register', component: register }\n          ]\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: {\n        account\n      },\n      router: router\n    });\n  </script>\n```\n\n## 命名视图实现经典布局\n1. 标签代码结构：\n```\n<div id=\"app\">\n    <router-view></router-view>\n    <div class=\"content\">\n      <router-view name=\"a\"></router-view>\n      <router-view name=\"b\"></router-view>\n    </div>\n  </div>\n```\n2. JS代码：\n```\n<script>\n    var header = Vue.component('header', {\n      template: '<div class=\"header\">header</div>'\n    });\n\n    var sidebar = Vue.component('sidebar', {\n      template: '<div class=\"sidebar\">sidebar</div>'\n    });\n\n    var mainbox = Vue.component('mainbox', {\n      template: '<div class=\"mainbox\">mainbox</div>'\n    });\n\n    // 创建路由对象\n    var router = new VueRouter({\n      routes: [\n        {\n          path: '/', components: {\n            default: header,\n            a: sidebar,\n            b: mainbox\n          }\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router\n    });\n  </script>\n```\n3. CSS 样式：\n```\n  <style>\n    .header {\n      border: 1px solid red;\n    }\n\n    .content{\n      display: flex;\n    }\n    .sidebar {\n      flex: 2;\n      border: 1px solid green;\n      height: 500px;\n    }\n    .mainbox{\n      flex: 8;\n      border: 1px solid blue;\n      height: 500px;\n    }\n  </style>\n```\n\n## `watch`属性的使用\n考虑一个问题：想要实现 `名` 和 `姓` 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）\n\n1. 监听`data`中属性的改变：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen',\n        fullName: 'jack - chen'\n      },\n      methods: {},\n      watch: {\n        'firstName': function (newVal, oldVal) { // 第一个参数是新数据，第二个参数是旧数据\n          this.fullName = newVal + ' - ' + this.lastName;\n        },\n        'lastName': function (newVal, oldVal) {\n          this.fullName = this.firstName + ' - ' + newVal;\n        }\n      }\n    });\n  </script>\n```\n2. 监听路由对象的改变：\n```\n<div id=\"app\">\n    <router-link to=\"/login\">登录</router-link>\n    <router-link to=\"/register\">注册</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n\n    var router = new VueRouter({\n      routes: [\n        { path: \"/login\", component: login },\n        { path: \"/register\", component: register }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router: router,\n      watch: {\n        '$route': function (newVal, oldVal) {\n          if (newVal.path === '/login') {\n            console.log('这是登录组件');\n          }\n        }\n      }\n    });\n  </script>\n```\n\n## `computed`计算属性的使用\n1. 默认只有`getter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {},\n      computed: { // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值\n        fullName() {\n          return this.firstName + ' - ' + this.lastName;\n        }\n      }\n    });\n  </script>\n```\n2. 定义有`getter`和`setter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\">\n    <input type=\"text\" v-model=\"lastName\">\n    <!-- 点击按钮重新为 计算属性 fullName 赋值 -->\n    <input type=\"button\" value=\"修改fullName\" @click=\"changeName\">\n\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {\n        changeName() {\n          this.fullName = 'TOM - chen2';\n        }\n      },\n      computed: {\n        fullName: {\n          get: function () {\n            return this.firstName + ' - ' + this.lastName;\n          },\n          set: function (newVal) {\n            var parts = newVal.split(' - ');\n            this.firstName = parts[0];\n            this.lastName = parts[1];\n          }\n        }\n      }\n    });\n  </script>\n```\n\n## `watch`、`computed`和`methods`之间的对比\n1. `computed`属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；\n2. `methods`方法表示一个具体的操作，主要书写业务逻辑；\n3. `watch`一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是`computed`和`methods`的结合体；\n\n## `nrm`的安装使用\n作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；\n什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；\n1. 运行`npm i nrm -g`全局安装`nrm`包；\n2. 使用`nrm ls`查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；\n3. 使用`nrm use npm`或`nrm use taobao`切换不同的镜像源地址；\n\n## 相关文件\n1. [URL中的hash（井号）](http://www.cnblogs.com/joyho/articles/4430148.html)\n\n<h1 align=\"center\" style=\"color: red;\">Day4</h1>\n# Vue.js - Day4\n\n## 父组件向子组件传值\n1. 组件实例定义方式，注意：一定要使用`props`属性来定义父组件传递过来的数据\n```\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        msg: '这是父组件中的消息'\n      },\n      components: {\n        son: {\n          template: '<h1>这是子组件 --- {{finfo}}</h1>',\n          props: ['finfo']\n        }\n      }\n    });\n  </script>\n```\n2. 使用`v-bind`或简化指令，将数据传递到子组件中：\n```\n<div id=\"app\">\n    <son :finfo=\"msg\"></son>\n  </div>\n```\n\n## 子组件向父组件传值\n1. 原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；\n2. 父组件将方法的引用传递给子组件，其中，`getMsg`是父组件中`methods`中定义的方法名称，`func`是子组件调用传递过来方法时候的方法名称\n```\n<son @func=\"getMsg\"></son>\n```\n3. 子组件内部通过`this.$emit('方法名', 要传递的数据)`方式，来调用父组件中的方法，同时把数据传递给父组件使用\n```\n<div id=\"app\">\n    <!-- 引用父组件 -->\n    <son @func=\"getMsg\"></son>\n\n    <!-- 组件模板定义 -->\n    <script type=\"x-template\" id=\"son\">\n      <div>\n        <input type=\"button\" value=\"向父组件传值\" @click=\"sendMsg\" />\n      </div>\n    </script>\n  </div>\n\n  <script>\n    // 子组件的定义方式\n    Vue.component('son', {\n      template: '#son', // 组件模板Id\n      methods: {\n        sendMsg() { // 按钮的点击事件\n          this.$emit('func', 'OK'); // 调用父组件传递过来的方法，同时把数据传递出去\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getMsg(val){ // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义\n          alert(val);\n        }\n      }\n    });\n  </script>\n```\n\n## 组件中data和props的区别\n\n## 评论列表案例\n目标：主要练习父子组件之间传值\n\n## 使用 `this.$refs` 来获取元素和组件\n```\n  <div id=\"app\">\n    <div>\n      <input type=\"button\" value=\"获取元素内容\" @click=\"getElement\" />\n      <!-- 使用 ref 获取元素 -->\n      <h1 ref=\"myh1\">这是一个大大的H1</h1>\n\n      <hr>\n      <!-- 使用 ref 获取子组件 -->\n      <my-com ref=\"mycom\"></my-com>\n    </div>\n  </div>\n\n  <script>\n    Vue.component('my-com', {\n      template: '<h5>这是一个子组件</h5>',\n      data() {\n        return {\n          name: '子组件'\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getElement() {\n          // 通过 this.$refs 来获取元素\n          console.log(this.$refs.myh1.innerText);\n          // 通过 this.$refs 来获取组件\n          console.log(this.$refs.mycom.name);\n        }\n      }\n    });\n  </script>\n```\n\n## 什么是路由\n1. **后端路由：**对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；\n\n2. **前端路由：**对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；\n\n3. 在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；\n\n## 在 vue 中使用 vue-router\n1. 导入 vue-router 组件类库：\n```\n<!-- 1. 导入 vue-router 组件类库 -->\n  <script src=\"./lib/vue-router-2.7.0.js\"></script>\n```\n2. 使用 router-link 组件来导航\n```\n<!-- 2. 使用 router-link 组件来导航 -->\n<router-link to=\"/login\">登录</router-link>\n<router-link to=\"/register\">注册</router-link>\n```\n3. 使用 router-view 组件来显示匹配到的组件\n```\n<!-- 3. 使用 router-view 组件来显示匹配到的组件 -->\n<router-view></router-view>\n```\n4. 创建使用`Vue.extend`创建组件\n```\n    // 4.1 使用 Vue.extend 来创建登录组件\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    // 4.2 使用 Vue.extend 来创建注册组件\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n```\n5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n```\n// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n    var router = new VueRouter({\n      routes: [\n        { path: '/login', component: login },\n        { path: '/register', component: register }\n      ]\n    });\n```\n6. 使用 router 属性来使用路由规则\n```\n// 6. 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      router: router // 使用 router 属性来使用路由规则\n    });\n```\n\n## 使用tag属性指定router-link渲染的标签类型\n\n## 设置路由重定向\n\n## 设置路由高亮\n\n## 设置路由切换动效\n\n## 在路由规则中定义参数\n1. 在规则中定义参数：\n```\n{ path: '/register/:id', component: register }\n```\n2. 通过 `this.$route.params`来获取路由中的参数：\n```\nvar register = Vue.extend({\n      template: '<h1>注册组件 --- {{this.$route.params.id}}</h1>'\n    });\n```\n\n## 使用 `children` 属性实现路由嵌套\n```\n  <div id=\"app\">\n    <router-link to=\"/account\">Account</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    // 父路由中的组件\n    const account = Vue.extend({\n      template: `<div>\n        这是account组件\n        <router-link to=\"/account/login\">login</router-link> | \n        <router-link to=\"/account/register\">register</router-link>\n        <router-view></router-view>\n      </div>`\n    });\n\n    // 子路由中的 login 组件\n    const login = Vue.extend({\n      template: '<div>登录组件</div>'\n    });\n\n    // 子路由中的 register 组件\n    const register = Vue.extend({\n      template: '<div>注册组件</div>'\n    });\n\n    // 路由实例\n    var router = new VueRouter({\n      routes: [\n        { path: '/', redirect: '/account/login' }, // 使用 redirect 实现路由重定向\n        {\n          path: '/account',\n          component: account,\n          children: [ // 通过 children 数组属性，来实现路由的嵌套\n            { path: 'login', component: login }, // 注意，子路由的开头位置，不要加 / 路径符\n            { path: 'register', component: register }\n          ]\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: {\n        account\n      },\n      router: router\n    });\n  </script>\n```\n\n## 命名视图实现经典布局\n1. 标签代码结构：\n```\n<div id=\"app\">\n    <router-view></router-view>\n    <div class=\"content\">\n      <router-view name=\"a\"></router-view>\n      <router-view name=\"b\"></router-view>\n    </div>\n  </div>\n```\n2. JS代码：\n```\n<script>\n    var header = Vue.component('header', {\n      template: '<div class=\"header\">header</div>'\n    });\n\n    var sidebar = Vue.component('sidebar', {\n      template: '<div class=\"sidebar\">sidebar</div>'\n    });\n\n    var mainbox = Vue.component('mainbox', {\n      template: '<div class=\"mainbox\">mainbox</div>'\n    });\n\n    // 创建路由对象\n    var router = new VueRouter({\n      routes: [\n        {\n          path: '/', components: {\n            default: header,\n            a: sidebar,\n            b: mainbox\n          }\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router\n    });\n  </script>\n```\n3. CSS 样式：\n```\n  <style>\n    .header {\n      border: 1px solid red;\n    }\n\n    .content{\n      display: flex;\n    }\n    .sidebar {\n      flex: 2;\n      border: 1px solid green;\n      height: 500px;\n    }\n    .mainbox{\n      flex: 8;\n      border: 1px solid blue;\n      height: 500px;\n    }\n  </style>\n```\n\n## `watch`属性的使用\n考虑一个问题：想要实现 `名` 和 `姓` 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）\n\n1. 监听`data`中属性的改变：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen',\n        fullName: 'jack - chen'\n      },\n      methods: {},\n      watch: {\n        'firstName': function (newVal, oldVal) { // 第一个参数是新数据，第二个参数是旧数据\n          this.fullName = newVal + ' - ' + this.lastName;\n        },\n        'lastName': function (newVal, oldVal) {\n          this.fullName = this.firstName + ' - ' + newVal;\n        }\n      }\n    });\n  </script>\n```\n2. 监听路由对象的改变：\n```\n<div id=\"app\">\n    <router-link to=\"/login\">登录</router-link>\n    <router-link to=\"/register\">注册</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n\n    var router = new VueRouter({\n      routes: [\n        { path: \"/login\", component: login },\n        { path: \"/register\", component: register }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router: router,\n      watch: {\n        '$route': function (newVal, oldVal) {\n          if (newVal.path === '/login') {\n            console.log('这是登录组件');\n          }\n        }\n      }\n    });\n  </script>\n```\n\n## `computed`计算属性的使用\n1. 默认只有`getter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {},\n      computed: { // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值\n        fullName() {\n          return this.firstName + ' - ' + this.lastName;\n        }\n      }\n    });\n  </script>\n```\n2. 定义有`getter`和`setter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\">\n    <input type=\"text\" v-model=\"lastName\">\n    <!-- 点击按钮重新为 计算属性 fullName 赋值 -->\n    <input type=\"button\" value=\"修改fullName\" @click=\"changeName\">\n\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {\n        changeName() {\n          this.fullName = 'TOM - chen2';\n        }\n      },\n      computed: {\n        fullName: {\n          get: function () {\n            return this.firstName + ' - ' + this.lastName;\n          },\n          set: function (newVal) {\n            var parts = newVal.split(' - ');\n            this.firstName = parts[0];\n            this.lastName = parts[1];\n          }\n        }\n      }\n    });\n  </script>\n```\n\n## `watch`、`computed`和`methods`之间的对比\n1. `computed`属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；\n2. `methods`方法表示一个具体的操作，主要书写业务逻辑；\n3. `watch`一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是`computed`和`methods`的结合体；\n\n## `nrm`的安装使用\n作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；\n什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；\n1. 运行`npm i nrm -g`全局安装`nrm`包；\n2. 使用`nrm ls`查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；\n3. 使用`nrm use npm`或`nrm use taobao`切换不同的镜像源地址；\n\n## 相关文件\n1. [URL中的hash（井号）](http://www.cnblogs.com/joyho/articles/4430148.html)\n\n<h1 align=\"center\" style=\"color: red;\">Day5</h1>\n# Vue.js - Day5 - Webpack\n\n## 在网页中会引用哪些常见的静态资源？\n+ JS\n - .js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）\n+ CSS\n - .css  .less   .sass  .scss\n+ Images\n - .jpg   .png   .gif   .bmp   .svg\n+ 字体文件（Fonts）\n - .svg   .ttf   .eot   .woff   .woff2\n+ 模板文件\n - .ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】\n\n\n## 网页中引入的静态资源多了以后有什么问题？？？\n1. 网页加载速度慢， 因为 我们要发起很多的二次请求；\n2. 要处理错综复杂的依赖关系\n\n\n## 如何解决上述两个问题\n1. 合并、压缩、精灵图、图片的Base64编码\n2. 可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；\n\n## 什么是webpack?\nwebpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；\n\n\n## 如何完美实现上述的2种解决方案\n1. 使用Gulp， 是基于 task 任务的；\n2. 使用Webpack， 是基于整个项目进行构建的；\n+ 借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。\n+ 根据官网的图片介绍webpack打包的过程\n+ [webpack官网](http://webpack.github.io/)\n\n## webpack安装的两种方式\n1. 运行`npm i webpack -g`全局安装webpack，这样就能在全局使用webpack的命令\n2. 在项目根目录中运行`npm i webpack --save-dev`安装到项目依赖中\n\n## 初步使用webpack打包构建列表隔行变色案例\n1. 运行`npm init`初始化项目，使用npm管理项目中的依赖包\n2. 创建项目基本的目录结构\n3. 使用`cnpm i jquery --save`安装jquery类库\n4. 创建`main.js`并书写各行变色的代码逻辑：\n```\n\t// 导入jquery类库\n    import $ from 'jquery'\n\n    // 设置偶数行背景色，索引从0开始，0是偶数\n    $('#list li:even').css('backgroundColor','lightblue');\n    // 设置奇数行背景色\n    $('#list li:odd').css('backgroundColor','pink');\n```\n5. 直接在页面上引用`main.js`会报错，因为浏览器不认识`import`这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；\n6. 运行`webpack 入口文件路径 输出文件路径`对`main.js`进行处理：\n```\nwebpack src/js/main.js dist/bundle.js\n```\n\n## 使用webpack的配置文件简化打包时候的命令\n1. 在项目根目录中创建`webpack.config.js`\n2. 由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在`webpack.config.js`中配置这两个路径：\n```\n    // 导入处理路径的模块\n    var path = require('path');\n\n    // 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理\n    module.exports = {\n        entry: path.resolve(__dirname, 'src/js/main.js'), // 项目入口文件\n        output: { // 配置输出选项\n            path: path.resolve(__dirname, 'dist'), // 配置输出的路径\n            filename: 'bundle.js' // 配置输出的文件名\n        }\n    }\n```\n\n## 实现webpack的实时打包构建\n1. 由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用`webpack-dev-server`来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。\n2. 运行`cnpm i webpack-dev-server --save-dev`安装到开发依赖\n3. 安装完成之后，在命令行直接运行`webpack-dev-server`来进行打包，发现报错，此时需要借助于`package.json`文件中的指令，来进行运行`webpack-dev-server`命令，在`scripts`节点下新增`\"dev\": \"webpack-dev-server\"`指令，发现可以进行实时打包，但是dist目录下并没有生成`bundle.js`文件，这是因为`webpack-dev-server`将打包好的文件放在了内存中\n + 把`bundle.js`放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快\n + 这个时候访问webpack-dev-server启动的`http://localhost:8080/`网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:`<script src=\"../bundle.js\"></script>`\n + 为了能在访问`http://localhost:8080/`的时候直接访问到index首页，可以使用`--contentBase src`指令来修改dev指令，指定启动的根目录：\n ```\n \"dev\": \"webpack-dev-server --contentBase src\"\n ```\n 同时修改index页面中script的src属性为`<script src=\"bundle.js\"></script>`\n\n## 使用`html-webpack-plugin`插件配置启动页面\n由于使用`--contentBase`指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用`html-webpack-plugin`插件配置启动页面.\n1. 运行`cnpm i html-webpack-plugin --save-dev`安装到开发依赖\n2. 修改`webpack.config.js`配置文件如下：\n```\n    // 导入处理路径的模块\n    var path = require('path');\n    // 导入自动生成HTMl文件的插件\n    var htmlWebpackPlugin = require('html-webpack-plugin');\n\n    module.exports = {\n        entry: path.resolve(__dirname, 'src/js/main.js'), // 项目入口文件\n        output: { // 配置输出选项\n            path: path.resolve(__dirname, 'dist'), // 配置输出的路径\n            filename: 'bundle.js' // 配置输出的文件名\n        },\n        plugins:[ // 添加plugins节点配置插件\n            new htmlWebpackPlugin({\n                template:path.resolve(__dirname, 'src/index.html'),//模板路径\n                filename:'index.html'//自动生成的HTML文件的名称\n            })\n        ]\n    }\n```\n3. 修改`package.json`中`script`节点中的dev指令如下：\n```\n\"dev\": \"webpack-dev-server\"\n```\n4. 将index.html中script标签注释掉，因为`html-webpack-plugin`插件会自动把bundle.js注入到index.html页面中！\n\n## 实现自动打开浏览器、热更新和配置浏览器的默认端口号\n**注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！**\n### 方式1：\n+ 修改`package.json`的script节点如下，其中`--open`表示自动打开浏览器，`--port 4321`表示打开的端口号为4321，`--hot`表示启用浏览器热更新：\n```\n\"dev\": \"webpack-dev-server --hot --port 4321 --open\"\n```\n\n### 方式2：\n1. 修改`webpack.config.js`文件，新增`devServer`节点如下：\n```\ndevServer:{\n        hot:true,\n        open:true,\n        port:4321\n    }\n```\n2. 在头部引入`webpack`模块：\n```\nvar webpack = require('webpack');\n```\n3. 在`plugins`节点下新增：\n```\nnew webpack.HotModuleReplacementPlugin()\n```\n\n## 使用webpack打包css文件\n1. 运行`cnpm i style-loader css-loader --save-dev`\n2. 修改`webpack.config.js`这个配置文件：\n```\nmodule: { // 用来配置第三方loader模块的\n        rules: [ // 文件的匹配规则\n            { test: /\\.css$/, use: ['style-loader', 'css-loader'] }//处理css文件的规则\n        ]\n    }\n```\n3. 注意：`use`表示使用哪些模块来处理`test`所匹配到的文件；`use`中相关loader模块的调用顺序是从后向前调用的；\n\n## 使用webpack打包less文件\n1. 运行`cnpm i less-loader less -D`\n2. 修改`webpack.config.js`这个配置文件：\n```\n{ test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] },\n```\n\n## 使用webpack打包sass文件\n1. 运行`cnpm i sass-loader node-sass --save-dev`\n2. 在`webpack.config.js`中添加处理sass文件的loader模块：\n```\n{ test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] }\n```\n\n## 使用webpack处理css中的路径\n1. 运行`cnpm i url-loader file-loader --save-dev`\n2. 在`webpack.config.js`中添加处理url路径的loader模块：\n```\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader' }\n```\n3. 可以通过`limit`指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：\n```\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader?limit=43960' },\n```\n\n## 使用babel处理高级JS语法\n1. 运行`cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev`安装babel的相关loader包\n2. 运行`cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev`安装babel转换的语法\n3. 在`webpack.config.js`中添加相关loader模块，其中需要注意的是，一定要把`node_modules`文件夹添加到排除项：\n```\n{ test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ }\n```\n4. 在项目根目录中添加`.babelrc`文件，并修改这个配置文件如下：\n```\n{\n    \"presets\":[\"es2015\", \"stage-0\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n5. **注意：语法插件`babel-preset-es2015`可以更新为`babel-preset-env`，它包含了所有的ES相关的语法；**\n\n## 相关文章\n[babel-preset-env：你需要的唯一Babel插件](https://segmentfault.com/p/1210000008466178)\n[Runtime transform 运行时编译es6](https://segmentfault.com/a/1190000009065987)","slug":"vue-heima-1","published":1,"updated":"2020-08-27T08:22:17.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrh9005xr0u22rzw6hi4","content":"<p>黑马的课堂笔记总结，总共五天。附上Vue生命周期图</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/lifecycle.png\" alt=\"生命周期\">\n</div>\n\n<a id=\"more\"></a>\n<h1 align=\"center\" style=\"color: red;\">Day1</h1>\n# Vue.js - Day1\n\n<h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2><p>前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>后5天： 以项目驱动教学；</p>\n<h3 id=\"什么是Vue-js\"><a href=\"#什么是Vue-js\" class=\"headerlink\" title=\"什么是Vue.js\"></a>什么是Vue.js</h3><ul>\n<li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p>\n</li>\n<li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>\n</li>\n<li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p>\n</li>\n<li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>\n</li>\n</ul>\n<h2 id=\"为什么要学习流行框架\"><a href=\"#为什么要学习流行框架\" class=\"headerlink\" title=\"为什么要学习流行框架\"></a>为什么要学习流行框架</h2><ul>\n<li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；<ul>\n<li>企业中，使用框架，能够提高开发的效率；</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li>\n<li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li>\n</ul>\n<ul>\n<li>增强自己就业时候的竞争力<ul>\n<li>人无我有，人有我优</li>\n<li>你平时不忙的时候，都在干嘛？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"框架和库的区别\"><a href=\"#框架和库的区别\" class=\"headerlink\" title=\"框架和库的区别\"></a>框架和库的区别</h2><ul>\n<li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p>\n<ul>\n<li>node 中的 express；</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。<ul>\n<li><ol>\n<li>从Jquery 切换到 Zepto</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从 EJS 切换到 art-template</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\"><a href=\"#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\" class=\"headerlink\" title=\"Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul>\n<li><p>MVC 是后端的分层开发概念；</p>\n</li>\n<li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p>\n</li>\n<li><p>为什么有了MVC还要有MVVM</p>\n</li>\n</ul>\n<h2 id=\"Vue-js-基本代码-和-MVVM-之间的对应关系\"><a href=\"#Vue-js-基本代码-和-MVVM-之间的对应关系\" class=\"headerlink\" title=\"Vue.js 基本代码 和 MVVM 之间的对应关系\"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h2><h2 id=\"Vue之-基本的代码结构和插值表达式、v-cloak\"><a href=\"#Vue之-基本的代码结构和插值表达式、v-cloak\" class=\"headerlink\" title=\"Vue之 - 基本的代码结构和插值表达式、v-cloak\"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id=\"Vue指令之v-text和v-html\"><a href=\"#Vue指令之v-text和v-html\" class=\"headerlink\" title=\"Vue指令之v-text和v-html\"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><h2 id=\"Vue指令之v-bind的三种用法\"><a href=\"#Vue指令之v-bind的三种用法\" class=\"headerlink\" title=\"Vue指令之v-bind的三种用法\"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol>\n<li><p>直接使用指令<code>v-bind</code></p>\n</li>\n<li><p>使用简化指令<code>:</code></p>\n</li>\n<li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p>\n</li>\n</ol>\n<h2 id=\"Vue指令之v-on和跑马灯效果\"><a href=\"#Vue指令之v-on和跑马灯效果\" class=\"headerlink\" title=\"Vue指令之v-on和跑马灯效果\"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h2><h3 id=\"跑马灯效果\"><a href=\"#跑马灯效果\" class=\"headerlink\" title=\"跑马灯效果\"></a>跑马灯效果</h3><ol>\n<li>HTML结构：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开启&quot; v-on:click&#x3D;&quot;go&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;停止&quot; v-on:click&#x3D;&quot;stop&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       info: &#39;猥琐发育，别浪~！&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">       intervalId: null</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       go() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 如果当前有定时器在运行，则直接return</span><br><span class=\"line\"></span><br><span class=\"line\">         if (this.intervalId !&#x3D; null) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           return;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 开始定时器</span><br><span class=\"line\"></span><br><span class=\"line\">         this.intervalId &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           this.info &#x3D; this.info.substring(1) + this.info.substring(0, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">       stop() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         clearInterval(this.intervalId);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue指令之v-on的缩写和事件修饰符\"><a href=\"#Vue指令之v-on的缩写和事件修饰符\" class=\"headerlink\" title=\"Vue指令之v-on的缩写和事件修饰符\"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id=\"事件修饰符：\"><a href=\"#事件修饰符：\" class=\"headerlink\" title=\"事件修饰符：\"></a>事件修饰符：</h3><ul>\n<li><p>.stop       阻止冒泡</p>\n</li>\n<li><p>.prevent    阻止默认事件</p>\n</li>\n<li><p>.capture    添加事件侦听器时使用事件捕获模式</p>\n</li>\n<li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p>\n</li>\n<li><p>.once       事件只触发一次</p>\n</li>\n</ul>\n<h2 id=\"Vue指令之v-model和双向数据绑定\"><a href=\"#Vue指令之v-model和双向数据绑定\" class=\"headerlink\" title=\"Vue指令之v-model和双向数据绑定\"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id=\"简易计算器案例\"><a href=\"#简易计算器案例\" class=\"headerlink\" title=\"简易计算器案例\"></a>简易计算器案例</h2><ol>\n<li>HTML 代码结构</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;select v-model&#x3D;&quot;opt&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;0&quot;&gt;+&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;1&quot;&gt;-&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;2&quot;&gt;*&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;3&quot;&gt;÷&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;&#x3D;&quot; v-on:click&#x3D;&quot;getResult&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;result&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       n1: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       n2: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       result: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       opt: &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       getResult() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         switch (this.opt) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;0&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) + parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;1&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) - parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;2&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) * parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;3&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) &#x2F; parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"在Vue中使用样式\"><a href=\"#在Vue中使用样式\" class=\"headerlink\" title=\"在Vue中使用样式\"></a>在Vue中使用样式</h2><h3 id=\"使用class样式\"><a href=\"#使用class样式\" class=\"headerlink\" title=\"使用class样式\"></a>使用class样式</h3><ol>\n<li><p>数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组中使用三元表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组中嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接使用对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h3><ol>\n<li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span><br><span class=\"line\">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Vue指令之v-for和key属性\"><a href=\"#Vue指令之v-for和key属性\" class=\"headerlink\" title=\"Vue指令之v-for和key属性\"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol>\n<li>迭代数组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>迭代对象中的属性</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>迭代数字</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p>\n</blockquote>\n<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p>\n<p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p>\n<h2 id=\"Vue指令之v-if和v-show\"><a href=\"#Vue指令之v-if和v-show\" class=\"headerlink\" title=\"Vue指令之v-if和v-show\"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><blockquote>\n<p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p>\n</blockquote>\n<h2 id=\"品牌管理案例\"><a href=\"#品牌管理案例\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌\"><a href=\"#添加新品牌\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌\"><a href=\"#删除品牌\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌\"><a href=\"#根据条件筛选品牌\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\" target=\"_blank\" rel=\"noopener\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果\" target=\"_blank\" rel=\"noopener\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符\"><a href=\"#键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】\"><a href=\"#1-x中自定义键盘修饰符【了解即可】\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符\"><a href=\"#2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#键值修饰符\" target=\"_blank\" rel=\"noopener\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\" target=\"_blank\" rel=\"noopener\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\" target=\"_blank\" rel=\"noopener\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\" target=\"_blank\" rel=\"noopener\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"http://www.cnblogs.com/kidney/p/6052935.html\" target=\"_blank\" rel=\"noopener\">Vue.js双向绑定的实现原理</a></li>\n</ol>\n<h1 align=\"center\" style=\"color: red;\">Day2</h1>\n# Vue.js - Day2\n\n<h2 id=\"品牌管理案例-1\"><a href=\"#品牌管理案例-1\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌-1\"><a href=\"#添加新品牌-1\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌-1\"><a href=\"#删除品牌-1\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌-1\"><a href=\"#根据条件筛选品牌-1\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\" target=\"_blank\" rel=\"noopener\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果\" target=\"_blank\" rel=\"noopener\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用-1\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用-1\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器-1\"><a href=\"#过滤器-1\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器-1\"><a href=\"#私有过滤器-1\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器-1\"><a href=\"#全局过滤器-1\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符-1\"><a href=\"#键盘修饰符以及自定义键盘修饰符-1\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】-1\"><a href=\"#1-x中自定义键盘修饰符【了解即可】-1\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符-1\"><a href=\"#2-x中自定义键盘修饰符-1\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#键值修饰符\" target=\"_blank\" rel=\"noopener\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令-1\"><a href=\"#自定义指令-1\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\" target=\"_blank\" rel=\"noopener\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】-1\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】-1\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"vue实例的生命周期\"><a href=\"#vue实例的生命周期\" class=\"headerlink\" title=\"vue实例的生命周期\"></a><a href=\"https://cn.vuejs.org/v2/guide/instance.html#实例生命周期\" target=\"_blank\" rel=\"noopener\">vue实例的生命周期</a></h2><ul>\n<li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#选项-生命周期钩子\" target=\"_blank\" rel=\"noopener\">生命周期钩子</a>：就是生命周期事件的别名而已；</li>\n<li>生命周期钩子 = 生命周期函数 = 生命周期事件</li>\n<li>主要的生命周期函数分类：<ul>\n<li>创建期间的生命周期函数：<ul>\n<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li>\n<li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li>\n<li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>\n<li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li>\n</ul>\n</li>\n<li>运行期间的生命周期函数：<ul>\n<li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>\n<li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li>\n</ul>\n</li>\n<li>销毁期间的生命周期函数：<ul>\n<li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-resource-实现-get-post-jsonp请求\"><a href=\"#vue-resource-实现-get-post-jsonp请求\" class=\"headerlink\" title=\"vue-resource 实现 get, post, jsonp请求\"></a><a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"noopener\">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p>\n<ol>\n<li>之前的学习中，如何发起数据请求？</li>\n<li>常见的数据请求类型？  get  post jsonp</li>\n<li>测试的URL请求资源地址：<ul>\n<li>get请求地址： <a href=\"http://vue.studyit.io/api/getlunbo\" target=\"_blank\" rel=\"noopener\">http://vue.studyit.io/api/getlunbo</a></li>\n<li>post请求地址：<a href=\"http://vue.studyit.io/api/post\" target=\"_blank\" rel=\"noopener\">http://vue.studyit.io/api/post</a></li>\n<li>jsonp请求地址：<a href=\"http://vue.studyit.io/api/jsonp\" target=\"_blank\" rel=\"noopener\">http://vue.studyit.io/api/jsonp</a></li>\n</ul>\n</li>\n<li>JSONP的实现原理<ul>\n<li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li>\n<li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li>\n<li>具体实现过程：<ul>\n<li>先在客户端定义一个回调方法，预定义对数据的操作；</li>\n<li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li>\n<li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li>\n<li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li>\n</ul>\n</li>\n<li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http &#x3D; require(&#39;http&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 导入解析 URL 地址的核心模块</span><br><span class=\"line\">const urlModule &#x3D; require(&#39;url&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">const server &#x3D; http.createServer();</span><br><span class=\"line\">&#x2F;&#x2F; 监听 服务器的 request 请求事件，处理每个请求</span><br><span class=\"line\">server.on(&#39;request&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  const url &#x3D; req.url;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 解析客户端请求的URL地址</span><br><span class=\"line\">  var info &#x3D; urlModule.parse(url, true);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果请求的 URL 地址是 &#x2F;getjsonp ，则表示要获取JSONP类型的数据</span><br><span class=\"line\">  if (info.pathname &#x3D;&#x3D;&#x3D; &#39;&#x2F;getjsonp&#39;) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取客户端指定的回调函数的名称</span><br><span class=\"line\">    var cbName &#x3D; info.query.callback;</span><br><span class=\"line\">    &#x2F;&#x2F; 手动拼接要返回给客户端的数据对象</span><br><span class=\"line\">    var data &#x3D; &#123;</span><br><span class=\"line\">      name: &#39;zs&#39;,</span><br><span class=\"line\">      age: 22,</span><br><span class=\"line\">      gender: &#39;男&#39;,</span><br><span class=\"line\">      hobby: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;运动&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class=\"line\">    var result &#x3D; &#96;$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)&#96;;</span><br><span class=\"line\">    &#x2F;&#x2F; 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class=\"line\">    res.end(result);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    res.end(&#39;404&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(3000, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;server running at http:&#x2F;&#x2F;127.0.0.1:3000&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>vue-resource 的配置步骤：<ul>\n<li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li>\n<li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li>\n</ul>\n</li>\n<li>发送get请求：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getInfo() &#123; &#x2F;&#x2F; get 方式获取数据</span><br><span class=\"line\">  this.$http.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;getlunbo&#39;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送post请求：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postInfo() &#123;</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;post&#39;;</span><br><span class=\"line\">  &#x2F;&#x2F; post 方法接收三个参数：</span><br><span class=\"line\">  &#x2F;&#x2F; 参数1： 要请求的URL地址</span><br><span class=\"line\">  &#x2F;&#x2F; 参数2： 要发送的数据对象</span><br><span class=\"line\">  &#x2F;&#x2F; 参数3： 指定post提交的编码类型为 application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">  this.$http.post(url, &#123; name: &#39;zs&#39; &#125;, &#123; emulateJSON: true &#125;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送JSONP请求获取数据：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsonpInfo() &#123; &#x2F;&#x2F; JSONP形式从服务器获取数据</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;jsonp&#39;;</span><br><span class=\"line\">  this.$http.jsonp(url).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"配置本地数据库和数据接口API\"><a href=\"#配置本地数据库和数据接口API\" class=\"headerlink\" title=\"配置本地数据库和数据接口API\"></a>配置本地数据库和数据接口API</h2><ol>\n<li>先解压安装 <code>PHPStudy</code>;</li>\n<li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li>\n<li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li>\n<li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li>\n<li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li>\n<li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li>\n<li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li>\n</ol>\n<h2 id=\"品牌管理改造\"><a href=\"#品牌管理改造\" class=\"headerlink\" title=\"品牌管理改造\"></a>品牌管理改造</h2><h3 id=\"展示品牌列表\"><a href=\"#展示品牌列表\" class=\"headerlink\" title=\"展示品牌列表\"></a>展示品牌列表</h3><h3 id=\"添加品牌数据\"><a href=\"#添加品牌数据\" class=\"headerlink\" title=\"添加品牌数据\"></a>添加品牌数据</h3><h3 id=\"删除品牌数据\"><a href=\"#删除品牌数据\" class=\"headerlink\" title=\"删除品牌数据\"></a>删除品牌数据</h3><h2 id=\"Vue中的动画\"><a href=\"#Vue中的动画\" class=\"headerlink\" title=\"Vue中的动画\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html\" target=\"_blank\" rel=\"noopener\">Vue中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p>\n<h3 id=\"使用过渡类名\"><a href=\"#使用过渡类名\" class=\"headerlink\" title=\"使用过渡类名\"></a>使用过渡类名</h3><ol>\n<li>HTML结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class=\"line\">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class=\"line\">      &lt;div v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>VM 实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isshow: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    myAnimate() &#123;</span><br><span class=\"line\">      this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>定义两组类样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter-active,</span><br><span class=\"line\">    .fade-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.2s ease;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter,</span><br><span class=\"line\">    .fade-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateX(100px);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"使用第三方-CSS-动画库\"><a href=\"#使用第三方-CSS-动画库\" class=\"headerlink\" title=\"使用第三方 CSS 动画库\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名\" target=\"_blank\" rel=\"noopener\">使用第三方 CSS 动画库</a></h3><ol>\n<li>导入动画类库：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 transition 及属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition</span><br><span class=\"line\">\tenter-active-class&#x3D;&quot;fadeInRight&quot;</span><br><span class=\"line\">    leave-active-class&#x3D;&quot;fadeOutRight&quot;</span><br><span class=\"line\">    :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class=\"line\">  \t&lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"使用动画钩子函数\"><a href=\"#使用动画钩子函数\" class=\"headerlink\" title=\"使用动画钩子函数\"></a>使用动画钩子函数</h3><ol>\n<li>定义 transition 组件以及三个钩子函数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;isshow &#x3D; !isshow&quot;&gt;</span><br><span class=\"line\">    &lt;transition</span><br><span class=\"line\">    @before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class=\"line\">    @enter&#x3D;&quot;enter&quot;</span><br><span class=\"line\">    @after-enter&#x3D;&quot;afterEnter&quot;&gt;</span><br><span class=\"line\">      &lt;div v-if&#x3D;&quot;isshow&quot; class&#x3D;&quot;show&quot;&gt;OK&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义三个 methods 钩子方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(500px)&#39;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调</span><br><span class=\"line\">          el.offsetWidth;</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(0px)&#39;;</span><br><span class=\"line\">          done();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调</span><br><span class=\"line\">          this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n<li>定义动画过渡时长和样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.show&#123;</span><br><span class=\"line\">      transition: all 0.4s ease;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h3 id=\"v-for-的列表过渡\"><a href=\"#v-for-的列表过渡\" class=\"headerlink\" title=\"v-for 的列表过渡\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡\" target=\"_blank\" rel=\"noopener\">v-for 的列表过渡</a></h3><ol>\n<li>定义过渡样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .list-enter,</span><br><span class=\"line\">    .list-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateY(10px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .list-enter-active,</span><br><span class=\"line\">    .list-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.3s ease;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition-group&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 VM中的结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    txt: &#39;&#39;,</span><br><span class=\"line\">    list: [1, 2, 3, 4]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      this.list.push(this.txt);</span><br><span class=\"line\">      this.txt &#x3D; &#39;&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h3 id=\"列表的排序过渡\"><a href=\"#列表的排序过渡\" class=\"headerlink\" title=\"列表的排序过渡\"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p>\n<ul>\n<li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.v-move&#123;</span><br><span class=\"line\">  transition: all 0.8s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-leave-active&#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h2 id=\"相关文章-1\"><a href=\"#相关文章-1\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\" target=\"_blank\" rel=\"noopener\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\" target=\"_blank\" rel=\"noopener\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"noopener\">pagekit/vue-resource</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html\" target=\"_blank\" rel=\"noopener\">navicat如何导入sql文件和导出sql文件</a></li>\n<li><a href=\"http://cubic-bezier.com/#.4,-0.3,1,.33\" target=\"_blank\" rel=\"noopener\">贝塞尔在线生成器</a></li>\n</ol>\n<h1 align=\"center\" style=\"color: red;\">Day3</h1>\n# Vue.js - Day3\n\n<h2 id=\"定义Vue组件\"><a href=\"#定义Vue组件\" class=\"headerlink\" title=\"定义Vue组件\"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p>\n<ul>\n<li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li>\n<li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id=\"全局组件定义的三种方式\"><a href=\"#全局组件定义的三种方式\" class=\"headerlink\" title=\"全局组件定义的三种方式\"></a>全局组件定义的三种方式</h3><ol>\n<li>使用 Vue.extend 配合 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Vue.component(&#39;login&#39;, login);</span><br></pre></td></tr></table></figure></li>\n<li>直接使用 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;register&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>将模板字符串，定义到script标签种：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script id&#x3D;&quot;tmpl&quot; type&#x3D;&quot;x-template&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;&lt;a href&#x3D;&quot;#&quot;&gt;登录&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n同时，需要使用 Vue.component 来定义组件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p>\n</blockquote>\n<h3 id=\"组件中展示数据和响应事件\"><a href=\"#组件中展示数据和响应事件\" class=\"headerlink\" title=\"组件中展示数据和响应事件\"></a>组件中展示数据和响应事件</h3><ol>\n<li>在组件中，<code>data</code>需要被定义为一个方法，例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;,</span><br><span class=\"line\">      data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          msg: &#39;大家好！&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\">        login()&#123;</span><br><span class=\"line\">          alert(&#39;点击了登录按钮&#39;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li>\n</ol>\n<h3 id=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"><a href=\"#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\" class=\"headerlink\" title=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol>\n<li>通过计数器案例演示</li>\n</ol>\n<h3 id=\"使用components属性定义局部子组件\"><a href=\"#使用components属性定义局部子组件\" class=\"headerlink\" title=\"使用components属性定义局部子组件\"></a>使用<code>components</code>属性定义局部子组件</h3><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      components: &#123; &#x2F;&#x2F; 定义子组件</span><br><span class=\"line\">        account: &#123; &#x2F;&#x2F; account 组件</span><br><span class=\"line\">          template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件</span><br><span class=\"line\">          components: &#123; &#x2F;&#x2F; 定义子组件的子组件</span><br><span class=\"line\">            login: &#123; &#x2F;&#x2F; login 组件</span><br><span class=\"line\">              template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>引用组件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;account&gt;&lt;&#x2F;account&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用flag标识符结合v-if和v-else切换组件\"><a href=\"#使用flag标识符结合v-if和v-else切换组件\" class=\"headerlink\" title=\"使用flag标识符结合v-if和v-else切换组件\"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol>\n<li>页面结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class=\"line\">    &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt;</span><br><span class=\"line\">    &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Vue实例定义：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    Vue.component(&#39;myCom1&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    Vue.component(&#39;myCom2&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        flag: true</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用-is属性来切换不同的子组件-并添加切换动画\"><a href=\"#使用-is属性来切换不同的子组件-并添加切换动画\" class=\"headerlink\" title=\"使用:is属性来切换不同的子组件,并添加切换动画\"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 登录组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;登录组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;login&#39;, login);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 注册组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;注册组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;register&#39;, register);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123; comName: &#39;login&#39; &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br><span class=\"line\">  &lt;transition mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class=\"line\">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>添加切换样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .v-enter,</span><br><span class=\"line\">  .v-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateX(30px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .v-enter-active,</span><br><span class=\"line\">  .v-leave-active &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    transition: all 0.3s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  h3&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"评论列表案例\"><a href=\"#评论列表案例\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件\"><a href=\"#使用-this-refs-来获取元素和组件\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router\"><a href=\"#在-vue-中使用-vue-router\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"设置路由高亮\"><a href=\"#设置路由高亮\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效\"><a href=\"#设置路由切换动效\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数\"><a href=\"#在路由规则中定义参数\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套\"><a href=\"#使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | </span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局\"><a href=\"#命名视图实现经典布局\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"watch属性的使用\"><a href=\"#watch属性的使用\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"computed计算属性的使用\"><a href=\"#computed计算属性的使用\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比\"><a href=\"#watch、computed和methods之间的对比\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用\"><a href=\"#nrm的安装使用\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\" target=\"_blank\" rel=\"noopener\">URL中的hash（井号）</a></li>\n</ol>\n<h1 align=\"center\" style=\"color: red;\">Day4</h1>\n# Vue.js - Day4\n\n<h2 id=\"父组件向子组件传值-1\"><a href=\"#父组件向子组件传值-1\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"子组件向父组件传值-1\"><a href=\"#子组件向父组件传值-1\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"组件中data和props的区别\"><a href=\"#组件中data和props的区别\" class=\"headerlink\" title=\"组件中data和props的区别\"></a>组件中data和props的区别</h2><h2 id=\"评论列表案例-1\"><a href=\"#评论列表案例-1\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件-1\"><a href=\"#使用-this-refs-来获取元素和组件-1\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由-1\"><a href=\"#什么是路由-1\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router-1\"><a href=\"#在-vue-中使用-vue-router-1\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用tag属性指定router-link渲染的标签类型\"><a href=\"#使用tag属性指定router-link渲染的标签类型\" class=\"headerlink\" title=\"使用tag属性指定router-link渲染的标签类型\"></a>使用tag属性指定router-link渲染的标签类型</h2><h2 id=\"设置路由重定向\"><a href=\"#设置路由重定向\" class=\"headerlink\" title=\"设置路由重定向\"></a>设置路由重定向</h2><h2 id=\"设置路由高亮-1\"><a href=\"#设置路由高亮-1\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效-1\"><a href=\"#设置路由切换动效-1\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数-1\"><a href=\"#在路由规则中定义参数-1\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套-1\"><a href=\"#使用-children-属性实现路由嵌套-1\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | </span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局-1\"><a href=\"#命名视图实现经典布局-1\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"watch属性的使用-1\"><a href=\"#watch属性的使用-1\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"computed计算属性的使用-1\"><a href=\"#computed计算属性的使用-1\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比-1\"><a href=\"#watch、computed和methods之间的对比-1\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用-1\"><a href=\"#nrm的安装使用-1\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件-1\"><a href=\"#相关文件-1\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\" target=\"_blank\" rel=\"noopener\">URL中的hash（井号）</a></li>\n</ol>\n<h1 align=\"center\" style=\"color: red;\">Day5</h1>\n# Vue.js - Day5 - Webpack\n\n<h2 id=\"在网页中会引用哪些常见的静态资源？\"><a href=\"#在网页中会引用哪些常见的静态资源？\" class=\"headerlink\" title=\"在网页中会引用哪些常见的静态资源？\"></a>在网页中会引用哪些常见的静态资源？</h2><ul>\n<li>JS<ul>\n<li>.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）</li>\n</ul>\n</li>\n<li>CSS<ul>\n<li>.css  .less   .sass  .scss</li>\n</ul>\n</li>\n<li>Images<ul>\n<li>.jpg   .png   .gif   .bmp   .svg</li>\n</ul>\n</li>\n<li>字体文件（Fonts）<ul>\n<li>.svg   .ttf   .eot   .woff   .woff2</li>\n</ul>\n</li>\n<li>模板文件<ul>\n<li>.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"网页中引入的静态资源多了以后有什么问题？？？\"><a href=\"#网页中引入的静态资源多了以后有什么问题？？？\" class=\"headerlink\" title=\"网页中引入的静态资源多了以后有什么问题？？？\"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol>\n<li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li>\n<li>要处理错综复杂的依赖关系</li>\n</ol>\n<h2 id=\"如何解决上述两个问题\"><a href=\"#如何解决上述两个问题\" class=\"headerlink\" title=\"如何解决上述两个问题\"></a>如何解决上述两个问题</h2><ol>\n<li>合并、压缩、精灵图、图片的Base64编码</li>\n<li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li>\n</ol>\n<h2 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack?\"></a>什么是webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p>\n<h2 id=\"如何完美实现上述的2种解决方案\"><a href=\"#如何完美实现上述的2种解决方案\" class=\"headerlink\" title=\"如何完美实现上述的2种解决方案\"></a>如何完美实现上述的2种解决方案</h2><ol>\n<li>使用Gulp， 是基于 task 任务的；</li>\n<li>使用Webpack， 是基于整个项目进行构建的；</li>\n</ol>\n<ul>\n<li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li>\n<li>根据官网的图片介绍webpack打包的过程</li>\n<li><a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"noopener\">webpack官网</a></li>\n</ul>\n<h2 id=\"webpack安装的两种方式\"><a href=\"#webpack安装的两种方式\" class=\"headerlink\" title=\"webpack安装的两种方式\"></a>webpack安装的两种方式</h2><ol>\n<li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li>\n<li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li>\n</ol>\n<h2 id=\"初步使用webpack打包构建列表隔行变色案例\"><a href=\"#初步使用webpack打包构建列表隔行变色案例\" class=\"headerlink\" title=\"初步使用webpack打包构建列表隔行变色案例\"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol>\n<li>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包</li>\n<li>创建项目基本的目录结构</li>\n<li>使用<code>cnpm i jquery --save</code>安装jquery类库</li>\n<li>创建<code>main.js</code>并书写各行变色的代码逻辑：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入jquery类库</span><br><span class=\"line\">   import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#x2F;&#x2F; 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class=\"line\">   $(&#39;#list li:even&#39;).css(&#39;backgroundColor&#39;,&#39;lightblue&#39;);</span><br><span class=\"line\">   &#x2F;&#x2F; 设置奇数行背景色</span><br><span class=\"line\">   $(&#39;#list li:odd&#39;).css(&#39;backgroundColor&#39;,&#39;pink&#39;);</span><br></pre></td></tr></table></figure></li>\n<li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li>\n<li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack src&#x2F;js&#x2F;main.js dist&#x2F;bundle.js</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用webpack的配置文件简化打包时候的命令\"><a href=\"#使用webpack的配置文件简化打包时候的命令\" class=\"headerlink\" title=\"使用webpack的配置文件简化打包时候的命令\"></a>使用webpack的配置文件简化打包时候的命令</h2><ol>\n<li>在项目根目录中创建<code>webpack.config.js</code></li>\n<li>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class=\"line\">var path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class=\"line\">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class=\"line\">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"实现webpack的实时打包构建\"><a href=\"#实现webpack的实时打包构建\" class=\"headerlink\" title=\"实现webpack的实时打包构建\"></a>实现webpack的实时打包构建</h2><ol>\n<li>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li>\n<li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li>\n<li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中<ul>\n<li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li>\n<li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure>\n同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"使用html-webpack-plugin插件配置启动页面\"><a href=\"#使用html-webpack-plugin插件配置启动页面\" class=\"headerlink\" title=\"使用html-webpack-plugin插件配置启动页面\"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p>\n<ol>\n<li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li>\n<li>修改<code>webpack.config.js</code>配置文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class=\"line\">var path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 导入自动生成HTMl文件的插件</span><br><span class=\"line\">var htmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class=\"line\">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class=\"line\">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[ &#x2F;&#x2F; 添加plugins节点配置插件</span><br><span class=\"line\">        new htmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template:path.resolve(__dirname, &#39;src&#x2F;index.html&#39;),&#x2F;&#x2F;模板路径</span><br><span class=\"line\">            filename:&#39;index.html&#39;&#x2F;&#x2F;自动生成的HTML文件的名称</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure></li>\n<li>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</li>\n</ol>\n<h2 id=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p>\n<h3 id=\"方式1：\"><a href=\"#方式1：\" class=\"headerlink\" title=\"方式1：\"></a>方式1：</h3><ul>\n<li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"方式2：\"><a href=\"#方式2：\" class=\"headerlink\" title=\"方式2：\"></a>方式2：</h3><ol>\n<li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">        hot:true,</span><br><span class=\"line\">        open:true,</span><br><span class=\"line\">        port:4321</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>在头部引入<code>webpack</code>模块：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack &#x3D; require(&#39;webpack&#39;);</span><br></pre></td></tr></table></figure></li>\n<li>在<code>plugins</code>节点下新增：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用webpack打包css文件\"><a href=\"#使用webpack打包css文件\" class=\"headerlink\" title=\"使用webpack打包css文件\"></a>使用webpack打包css文件</h2><ol>\n<li>运行<code>cnpm i style-loader css-loader --save-dev</code></li>\n<li>修改<code>webpack.config.js</code>这个配置文件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123; &#x2F;&#x2F; 用来配置第三方loader模块的</span><br><span class=\"line\">        rules: [ &#x2F;&#x2F; 文件的匹配规则</span><br><span class=\"line\">            &#123; test: &#x2F;\\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;&#x2F;&#x2F;处理css文件的规则</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</li>\n</ol>\n<h2 id=\"使用webpack打包less文件\"><a href=\"#使用webpack打包less文件\" class=\"headerlink\" title=\"使用webpack打包less文件\"></a>使用webpack打包less文件</h2><ol>\n<li>运行<code>cnpm i less-loader less -D</code></li>\n<li>修改<code>webpack.config.js</code>这个配置文件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.less$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;] &#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用webpack打包sass文件\"><a href=\"#使用webpack打包sass文件\" class=\"headerlink\" title=\"使用webpack打包sass文件\"></a>使用webpack打包sass文件</h2><ol>\n<li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li>\n<li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.scss$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;] &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用webpack处理css中的路径\"><a href=\"#使用webpack处理css中的路径\" class=\"headerlink\" title=\"使用webpack处理css中的路径\"></a>使用webpack处理css中的路径</h2><ol>\n<li>运行<code>cnpm i url-loader file-loader --save-dev</code></li>\n<li>在<code>webpack.config.js</code>中添加处理url路径的loader模块：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader&#39; &#125;</span><br></pre></td></tr></table></figure></li>\n<li>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader?limit&#x3D;43960&#39; &#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用babel处理高级JS语法\"><a href=\"#使用babel处理高级JS语法\" class=\"headerlink\" title=\"使用babel处理高级JS语法\"></a>使用babel处理高级JS语法</h2><ol>\n<li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</li>\n<li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</li>\n<li>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.js$&#x2F;, use: &#39;babel-loader&#39;, exclude: &#x2F;node_modules&#x2F; &#125;</span><br></pre></td></tr></table></figure></li>\n<li>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></li>\n</ol>\n<h2 id=\"相关文章-2\"><a href=\"#相关文章-2\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><p><a href=\"https://segmentfault.com/p/1210000008466178\" target=\"_blank\" rel=\"noopener\">babel-preset-env：你需要的唯一Babel插件</a><br><a href=\"https://segmentfault.com/a/1190000009065987\" target=\"_blank\" rel=\"noopener\">Runtime transform 运行时编译es6</a></p>\n","site":{"data":{}},"excerpt":"<p>黑马的课堂笔记总结，总共五天。附上Vue生命周期图</p>\n<div align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/uncledwyane/imageBed/img/lifecycle.png\" alt=\"生命周期\">\n</div>","more":"<h1 align=\"center\" style=\"color: red;\">Day1</h1>\n# Vue.js - Day1\n\n<h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2><p>前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>后5天： 以项目驱动教学；</p>\n<h3 id=\"什么是Vue-js\"><a href=\"#什么是Vue-js\" class=\"headerlink\" title=\"什么是Vue.js\"></a>什么是Vue.js</h3><ul>\n<li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p>\n</li>\n<li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>\n</li>\n<li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p>\n</li>\n<li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>\n</li>\n</ul>\n<h2 id=\"为什么要学习流行框架\"><a href=\"#为什么要学习流行框架\" class=\"headerlink\" title=\"为什么要学习流行框架\"></a>为什么要学习流行框架</h2><ul>\n<li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；<ul>\n<li>企业中，使用框架，能够提高开发的效率；</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li>\n<li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li>\n</ul>\n<ul>\n<li>增强自己就业时候的竞争力<ul>\n<li>人无我有，人有我优</li>\n<li>你平时不忙的时候，都在干嘛？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"框架和库的区别\"><a href=\"#框架和库的区别\" class=\"headerlink\" title=\"框架和库的区别\"></a>框架和库的区别</h2><ul>\n<li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p>\n<ul>\n<li>node 中的 express；</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。<ul>\n<li><ol>\n<li>从Jquery 切换到 Zepto</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从 EJS 切换到 art-template</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\"><a href=\"#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\" class=\"headerlink\" title=\"Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul>\n<li><p>MVC 是后端的分层开发概念；</p>\n</li>\n<li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p>\n</li>\n<li><p>为什么有了MVC还要有MVVM</p>\n</li>\n</ul>\n<h2 id=\"Vue-js-基本代码-和-MVVM-之间的对应关系\"><a href=\"#Vue-js-基本代码-和-MVVM-之间的对应关系\" class=\"headerlink\" title=\"Vue.js 基本代码 和 MVVM 之间的对应关系\"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h2><h2 id=\"Vue之-基本的代码结构和插值表达式、v-cloak\"><a href=\"#Vue之-基本的代码结构和插值表达式、v-cloak\" class=\"headerlink\" title=\"Vue之 - 基本的代码结构和插值表达式、v-cloak\"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id=\"Vue指令之v-text和v-html\"><a href=\"#Vue指令之v-text和v-html\" class=\"headerlink\" title=\"Vue指令之v-text和v-html\"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><h2 id=\"Vue指令之v-bind的三种用法\"><a href=\"#Vue指令之v-bind的三种用法\" class=\"headerlink\" title=\"Vue指令之v-bind的三种用法\"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol>\n<li><p>直接使用指令<code>v-bind</code></p>\n</li>\n<li><p>使用简化指令<code>:</code></p>\n</li>\n<li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p>\n</li>\n</ol>\n<h2 id=\"Vue指令之v-on和跑马灯效果\"><a href=\"#Vue指令之v-on和跑马灯效果\" class=\"headerlink\" title=\"Vue指令之v-on和跑马灯效果\"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h2><h3 id=\"跑马灯效果\"><a href=\"#跑马灯效果\" class=\"headerlink\" title=\"跑马灯效果\"></a>跑马灯效果</h3><ol>\n<li>HTML结构：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开启&quot; v-on:click&#x3D;&quot;go&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;停止&quot; v-on:click&#x3D;&quot;stop&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       info: &#39;猥琐发育，别浪~！&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">       intervalId: null</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       go() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 如果当前有定时器在运行，则直接return</span><br><span class=\"line\"></span><br><span class=\"line\">         if (this.intervalId !&#x3D; null) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           return;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 开始定时器</span><br><span class=\"line\"></span><br><span class=\"line\">         this.intervalId &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           this.info &#x3D; this.info.substring(1) + this.info.substring(0, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">       stop() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         clearInterval(this.intervalId);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue指令之v-on的缩写和事件修饰符\"><a href=\"#Vue指令之v-on的缩写和事件修饰符\" class=\"headerlink\" title=\"Vue指令之v-on的缩写和事件修饰符\"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id=\"事件修饰符：\"><a href=\"#事件修饰符：\" class=\"headerlink\" title=\"事件修饰符：\"></a>事件修饰符：</h3><ul>\n<li><p>.stop       阻止冒泡</p>\n</li>\n<li><p>.prevent    阻止默认事件</p>\n</li>\n<li><p>.capture    添加事件侦听器时使用事件捕获模式</p>\n</li>\n<li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p>\n</li>\n<li><p>.once       事件只触发一次</p>\n</li>\n</ul>\n<h2 id=\"Vue指令之v-model和双向数据绑定\"><a href=\"#Vue指令之v-model和双向数据绑定\" class=\"headerlink\" title=\"Vue指令之v-model和双向数据绑定\"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id=\"简易计算器案例\"><a href=\"#简易计算器案例\" class=\"headerlink\" title=\"简易计算器案例\"></a>简易计算器案例</h2><ol>\n<li>HTML 代码结构</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;select v-model&#x3D;&quot;opt&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;0&quot;&gt;+&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;1&quot;&gt;-&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;2&quot;&gt;*&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;3&quot;&gt;÷&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;&#x3D;&quot; v-on:click&#x3D;&quot;getResult&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;result&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       n1: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       n2: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       result: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       opt: &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       getResult() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         switch (this.opt) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;0&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) + parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;1&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) - parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;2&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) * parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;3&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) &#x2F; parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"在Vue中使用样式\"><a href=\"#在Vue中使用样式\" class=\"headerlink\" title=\"在Vue中使用样式\"></a>在Vue中使用样式</h2><h3 id=\"使用class样式\"><a href=\"#使用class样式\" class=\"headerlink\" title=\"使用class样式\"></a>使用class样式</h3><ol>\n<li><p>数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组中使用三元表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组中嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接使用对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h3><ol>\n<li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span><br><span class=\"line\">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Vue指令之v-for和key属性\"><a href=\"#Vue指令之v-for和key属性\" class=\"headerlink\" title=\"Vue指令之v-for和key属性\"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol>\n<li>迭代数组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>迭代对象中的属性</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>迭代数字</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p>\n</blockquote>\n<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p>\n<p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p>\n<h2 id=\"Vue指令之v-if和v-show\"><a href=\"#Vue指令之v-if和v-show\" class=\"headerlink\" title=\"Vue指令之v-if和v-show\"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><blockquote>\n<p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p>\n</blockquote>\n<h2 id=\"品牌管理案例\"><a href=\"#品牌管理案例\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌\"><a href=\"#添加新品牌\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌\"><a href=\"#删除品牌\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌\"><a href=\"#根据条件筛选品牌\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\" target=\"_blank\" rel=\"noopener\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果\" target=\"_blank\" rel=\"noopener\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符\"><a href=\"#键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】\"><a href=\"#1-x中自定义键盘修饰符【了解即可】\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符\"><a href=\"#2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#键值修饰符\" target=\"_blank\" rel=\"noopener\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\" target=\"_blank\" rel=\"noopener\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\" target=\"_blank\" rel=\"noopener\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\" target=\"_blank\" rel=\"noopener\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"http://www.cnblogs.com/kidney/p/6052935.html\" target=\"_blank\" rel=\"noopener\">Vue.js双向绑定的实现原理</a></li>\n</ol>\n<h1 align=\"center\" style=\"color: red;\">Day2</h1>\n# Vue.js - Day2\n\n<h2 id=\"品牌管理案例-1\"><a href=\"#品牌管理案例-1\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌-1\"><a href=\"#添加新品牌-1\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌-1\"><a href=\"#删除品牌-1\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌-1\"><a href=\"#根据条件筛选品牌-1\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\" target=\"_blank\" rel=\"noopener\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果\" target=\"_blank\" rel=\"noopener\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用-1\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用-1\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器-1\"><a href=\"#过滤器-1\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器-1\"><a href=\"#私有过滤器-1\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器-1\"><a href=\"#全局过滤器-1\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符-1\"><a href=\"#键盘修饰符以及自定义键盘修饰符-1\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】-1\"><a href=\"#1-x中自定义键盘修饰符【了解即可】-1\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符-1\"><a href=\"#2-x中自定义键盘修饰符-1\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#键值修饰符\" target=\"_blank\" rel=\"noopener\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令-1\"><a href=\"#自定义指令-1\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\" target=\"_blank\" rel=\"noopener\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】-1\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】-1\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"vue实例的生命周期\"><a href=\"#vue实例的生命周期\" class=\"headerlink\" title=\"vue实例的生命周期\"></a><a href=\"https://cn.vuejs.org/v2/guide/instance.html#实例生命周期\" target=\"_blank\" rel=\"noopener\">vue实例的生命周期</a></h2><ul>\n<li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#选项-生命周期钩子\" target=\"_blank\" rel=\"noopener\">生命周期钩子</a>：就是生命周期事件的别名而已；</li>\n<li>生命周期钩子 = 生命周期函数 = 生命周期事件</li>\n<li>主要的生命周期函数分类：<ul>\n<li>创建期间的生命周期函数：<ul>\n<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li>\n<li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li>\n<li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>\n<li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li>\n</ul>\n</li>\n<li>运行期间的生命周期函数：<ul>\n<li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>\n<li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li>\n</ul>\n</li>\n<li>销毁期间的生命周期函数：<ul>\n<li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-resource-实现-get-post-jsonp请求\"><a href=\"#vue-resource-实现-get-post-jsonp请求\" class=\"headerlink\" title=\"vue-resource 实现 get, post, jsonp请求\"></a><a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"noopener\">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p>\n<ol>\n<li>之前的学习中，如何发起数据请求？</li>\n<li>常见的数据请求类型？  get  post jsonp</li>\n<li>测试的URL请求资源地址：<ul>\n<li>get请求地址： <a href=\"http://vue.studyit.io/api/getlunbo\" target=\"_blank\" rel=\"noopener\">http://vue.studyit.io/api/getlunbo</a></li>\n<li>post请求地址：<a href=\"http://vue.studyit.io/api/post\" target=\"_blank\" rel=\"noopener\">http://vue.studyit.io/api/post</a></li>\n<li>jsonp请求地址：<a href=\"http://vue.studyit.io/api/jsonp\" target=\"_blank\" rel=\"noopener\">http://vue.studyit.io/api/jsonp</a></li>\n</ul>\n</li>\n<li>JSONP的实现原理<ul>\n<li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li>\n<li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li>\n<li>具体实现过程：<ul>\n<li>先在客户端定义一个回调方法，预定义对数据的操作；</li>\n<li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li>\n<li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li>\n<li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li>\n</ul>\n</li>\n<li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http &#x3D; require(&#39;http&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 导入解析 URL 地址的核心模块</span><br><span class=\"line\">const urlModule &#x3D; require(&#39;url&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">const server &#x3D; http.createServer();</span><br><span class=\"line\">&#x2F;&#x2F; 监听 服务器的 request 请求事件，处理每个请求</span><br><span class=\"line\">server.on(&#39;request&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  const url &#x3D; req.url;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 解析客户端请求的URL地址</span><br><span class=\"line\">  var info &#x3D; urlModule.parse(url, true);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果请求的 URL 地址是 &#x2F;getjsonp ，则表示要获取JSONP类型的数据</span><br><span class=\"line\">  if (info.pathname &#x3D;&#x3D;&#x3D; &#39;&#x2F;getjsonp&#39;) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取客户端指定的回调函数的名称</span><br><span class=\"line\">    var cbName &#x3D; info.query.callback;</span><br><span class=\"line\">    &#x2F;&#x2F; 手动拼接要返回给客户端的数据对象</span><br><span class=\"line\">    var data &#x3D; &#123;</span><br><span class=\"line\">      name: &#39;zs&#39;,</span><br><span class=\"line\">      age: 22,</span><br><span class=\"line\">      gender: &#39;男&#39;,</span><br><span class=\"line\">      hobby: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;运动&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class=\"line\">    var result &#x3D; &#96;$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)&#96;;</span><br><span class=\"line\">    &#x2F;&#x2F; 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class=\"line\">    res.end(result);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    res.end(&#39;404&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(3000, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;server running at http:&#x2F;&#x2F;127.0.0.1:3000&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>vue-resource 的配置步骤：<ul>\n<li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li>\n<li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li>\n</ul>\n</li>\n<li>发送get请求：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getInfo() &#123; &#x2F;&#x2F; get 方式获取数据</span><br><span class=\"line\">  this.$http.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;getlunbo&#39;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送post请求：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postInfo() &#123;</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;post&#39;;</span><br><span class=\"line\">  &#x2F;&#x2F; post 方法接收三个参数：</span><br><span class=\"line\">  &#x2F;&#x2F; 参数1： 要请求的URL地址</span><br><span class=\"line\">  &#x2F;&#x2F; 参数2： 要发送的数据对象</span><br><span class=\"line\">  &#x2F;&#x2F; 参数3： 指定post提交的编码类型为 application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">  this.$http.post(url, &#123; name: &#39;zs&#39; &#125;, &#123; emulateJSON: true &#125;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送JSONP请求获取数据：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsonpInfo() &#123; &#x2F;&#x2F; JSONP形式从服务器获取数据</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;jsonp&#39;;</span><br><span class=\"line\">  this.$http.jsonp(url).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"配置本地数据库和数据接口API\"><a href=\"#配置本地数据库和数据接口API\" class=\"headerlink\" title=\"配置本地数据库和数据接口API\"></a>配置本地数据库和数据接口API</h2><ol>\n<li>先解压安装 <code>PHPStudy</code>;</li>\n<li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li>\n<li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li>\n<li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li>\n<li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li>\n<li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li>\n<li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li>\n</ol>\n<h2 id=\"品牌管理改造\"><a href=\"#品牌管理改造\" class=\"headerlink\" title=\"品牌管理改造\"></a>品牌管理改造</h2><h3 id=\"展示品牌列表\"><a href=\"#展示品牌列表\" class=\"headerlink\" title=\"展示品牌列表\"></a>展示品牌列表</h3><h3 id=\"添加品牌数据\"><a href=\"#添加品牌数据\" class=\"headerlink\" title=\"添加品牌数据\"></a>添加品牌数据</h3><h3 id=\"删除品牌数据\"><a href=\"#删除品牌数据\" class=\"headerlink\" title=\"删除品牌数据\"></a>删除品牌数据</h3><h2 id=\"Vue中的动画\"><a href=\"#Vue中的动画\" class=\"headerlink\" title=\"Vue中的动画\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html\" target=\"_blank\" rel=\"noopener\">Vue中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p>\n<h3 id=\"使用过渡类名\"><a href=\"#使用过渡类名\" class=\"headerlink\" title=\"使用过渡类名\"></a>使用过渡类名</h3><ol>\n<li>HTML结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class=\"line\">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class=\"line\">      &lt;div v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>VM 实例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isshow: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    myAnimate() &#123;</span><br><span class=\"line\">      this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>定义两组类样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter-active,</span><br><span class=\"line\">    .fade-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.2s ease;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter,</span><br><span class=\"line\">    .fade-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateX(100px);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"使用第三方-CSS-动画库\"><a href=\"#使用第三方-CSS-动画库\" class=\"headerlink\" title=\"使用第三方 CSS 动画库\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名\" target=\"_blank\" rel=\"noopener\">使用第三方 CSS 动画库</a></h3><ol>\n<li>导入动画类库：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 transition 及属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition</span><br><span class=\"line\">\tenter-active-class&#x3D;&quot;fadeInRight&quot;</span><br><span class=\"line\">    leave-active-class&#x3D;&quot;fadeOutRight&quot;</span><br><span class=\"line\">    :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class=\"line\">  \t&lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"使用动画钩子函数\"><a href=\"#使用动画钩子函数\" class=\"headerlink\" title=\"使用动画钩子函数\"></a>使用动画钩子函数</h3><ol>\n<li>定义 transition 组件以及三个钩子函数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;isshow &#x3D; !isshow&quot;&gt;</span><br><span class=\"line\">    &lt;transition</span><br><span class=\"line\">    @before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class=\"line\">    @enter&#x3D;&quot;enter&quot;</span><br><span class=\"line\">    @after-enter&#x3D;&quot;afterEnter&quot;&gt;</span><br><span class=\"line\">      &lt;div v-if&#x3D;&quot;isshow&quot; class&#x3D;&quot;show&quot;&gt;OK&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义三个 methods 钩子方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(500px)&#39;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调</span><br><span class=\"line\">          el.offsetWidth;</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(0px)&#39;;</span><br><span class=\"line\">          done();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调</span><br><span class=\"line\">          this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n<li>定义动画过渡时长和样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.show&#123;</span><br><span class=\"line\">      transition: all 0.4s ease;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h3 id=\"v-for-的列表过渡\"><a href=\"#v-for-的列表过渡\" class=\"headerlink\" title=\"v-for 的列表过渡\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡\" target=\"_blank\" rel=\"noopener\">v-for 的列表过渡</a></h3><ol>\n<li>定义过渡样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .list-enter,</span><br><span class=\"line\">    .list-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateY(10px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .list-enter-active,</span><br><span class=\"line\">    .list-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.3s ease;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition-group&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 VM中的结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    txt: &#39;&#39;,</span><br><span class=\"line\">    list: [1, 2, 3, 4]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      this.list.push(this.txt);</span><br><span class=\"line\">      this.txt &#x3D; &#39;&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h3 id=\"列表的排序过渡\"><a href=\"#列表的排序过渡\" class=\"headerlink\" title=\"列表的排序过渡\"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p>\n<ul>\n<li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.v-move&#123;</span><br><span class=\"line\">  transition: all 0.8s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-leave-active&#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h2 id=\"相关文章-1\"><a href=\"#相关文章-1\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\" target=\"_blank\" rel=\"noopener\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\" target=\"_blank\" rel=\"noopener\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"noopener\">pagekit/vue-resource</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html\" target=\"_blank\" rel=\"noopener\">navicat如何导入sql文件和导出sql文件</a></li>\n<li><a href=\"http://cubic-bezier.com/#.4,-0.3,1,.33\" target=\"_blank\" rel=\"noopener\">贝塞尔在线生成器</a></li>\n</ol>\n<h1 align=\"center\" style=\"color: red;\">Day3</h1>\n# Vue.js - Day3\n\n<h2 id=\"定义Vue组件\"><a href=\"#定义Vue组件\" class=\"headerlink\" title=\"定义Vue组件\"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p>\n<ul>\n<li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li>\n<li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id=\"全局组件定义的三种方式\"><a href=\"#全局组件定义的三种方式\" class=\"headerlink\" title=\"全局组件定义的三种方式\"></a>全局组件定义的三种方式</h3><ol>\n<li>使用 Vue.extend 配合 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Vue.component(&#39;login&#39;, login);</span><br></pre></td></tr></table></figure></li>\n<li>直接使用 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;register&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>将模板字符串，定义到script标签种：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script id&#x3D;&quot;tmpl&quot; type&#x3D;&quot;x-template&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;&lt;a href&#x3D;&quot;#&quot;&gt;登录&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n同时，需要使用 Vue.component 来定义组件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p>\n</blockquote>\n<h3 id=\"组件中展示数据和响应事件\"><a href=\"#组件中展示数据和响应事件\" class=\"headerlink\" title=\"组件中展示数据和响应事件\"></a>组件中展示数据和响应事件</h3><ol>\n<li>在组件中，<code>data</code>需要被定义为一个方法，例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;,</span><br><span class=\"line\">      data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          msg: &#39;大家好！&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\">        login()&#123;</span><br><span class=\"line\">          alert(&#39;点击了登录按钮&#39;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li>\n</ol>\n<h3 id=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"><a href=\"#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\" class=\"headerlink\" title=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol>\n<li>通过计数器案例演示</li>\n</ol>\n<h3 id=\"使用components属性定义局部子组件\"><a href=\"#使用components属性定义局部子组件\" class=\"headerlink\" title=\"使用components属性定义局部子组件\"></a>使用<code>components</code>属性定义局部子组件</h3><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      components: &#123; &#x2F;&#x2F; 定义子组件</span><br><span class=\"line\">        account: &#123; &#x2F;&#x2F; account 组件</span><br><span class=\"line\">          template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件</span><br><span class=\"line\">          components: &#123; &#x2F;&#x2F; 定义子组件的子组件</span><br><span class=\"line\">            login: &#123; &#x2F;&#x2F; login 组件</span><br><span class=\"line\">              template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>引用组件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;account&gt;&lt;&#x2F;account&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用flag标识符结合v-if和v-else切换组件\"><a href=\"#使用flag标识符结合v-if和v-else切换组件\" class=\"headerlink\" title=\"使用flag标识符结合v-if和v-else切换组件\"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol>\n<li>页面结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class=\"line\">    &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt;</span><br><span class=\"line\">    &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Vue实例定义：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    Vue.component(&#39;myCom1&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    Vue.component(&#39;myCom2&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        flag: true</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用-is属性来切换不同的子组件-并添加切换动画\"><a href=\"#使用-is属性来切换不同的子组件-并添加切换动画\" class=\"headerlink\" title=\"使用:is属性来切换不同的子组件,并添加切换动画\"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 登录组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;登录组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;login&#39;, login);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 注册组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;注册组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;register&#39;, register);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123; comName: &#39;login&#39; &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br><span class=\"line\">  &lt;transition mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class=\"line\">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>添加切换样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .v-enter,</span><br><span class=\"line\">  .v-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateX(30px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .v-enter-active,</span><br><span class=\"line\">  .v-leave-active &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    transition: all 0.3s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  h3&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"评论列表案例\"><a href=\"#评论列表案例\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件\"><a href=\"#使用-this-refs-来获取元素和组件\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router\"><a href=\"#在-vue-中使用-vue-router\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"设置路由高亮\"><a href=\"#设置路由高亮\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效\"><a href=\"#设置路由切换动效\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数\"><a href=\"#在路由规则中定义参数\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套\"><a href=\"#使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | </span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局\"><a href=\"#命名视图实现经典布局\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"watch属性的使用\"><a href=\"#watch属性的使用\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"computed计算属性的使用\"><a href=\"#computed计算属性的使用\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比\"><a href=\"#watch、computed和methods之间的对比\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用\"><a href=\"#nrm的安装使用\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\" target=\"_blank\" rel=\"noopener\">URL中的hash（井号）</a></li>\n</ol>\n<h1 align=\"center\" style=\"color: red;\">Day4</h1>\n# Vue.js - Day4\n\n<h2 id=\"父组件向子组件传值-1\"><a href=\"#父组件向子组件传值-1\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"子组件向父组件传值-1\"><a href=\"#子组件向父组件传值-1\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"组件中data和props的区别\"><a href=\"#组件中data和props的区别\" class=\"headerlink\" title=\"组件中data和props的区别\"></a>组件中data和props的区别</h2><h2 id=\"评论列表案例-1\"><a href=\"#评论列表案例-1\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件-1\"><a href=\"#使用-this-refs-来获取元素和组件-1\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由-1\"><a href=\"#什么是路由-1\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router-1\"><a href=\"#在-vue-中使用-vue-router-1\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用tag属性指定router-link渲染的标签类型\"><a href=\"#使用tag属性指定router-link渲染的标签类型\" class=\"headerlink\" title=\"使用tag属性指定router-link渲染的标签类型\"></a>使用tag属性指定router-link渲染的标签类型</h2><h2 id=\"设置路由重定向\"><a href=\"#设置路由重定向\" class=\"headerlink\" title=\"设置路由重定向\"></a>设置路由重定向</h2><h2 id=\"设置路由高亮-1\"><a href=\"#设置路由高亮-1\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效-1\"><a href=\"#设置路由切换动效-1\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数-1\"><a href=\"#在路由规则中定义参数-1\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套-1\"><a href=\"#使用-children-属性实现路由嵌套-1\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | </span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局-1\"><a href=\"#命名视图实现经典布局-1\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"watch属性的使用-1\"><a href=\"#watch属性的使用-1\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"computed计算属性的使用-1\"><a href=\"#computed计算属性的使用-1\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比-1\"><a href=\"#watch、computed和methods之间的对比-1\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用-1\"><a href=\"#nrm的安装使用-1\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件-1\"><a href=\"#相关文件-1\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\" target=\"_blank\" rel=\"noopener\">URL中的hash（井号）</a></li>\n</ol>\n<h1 align=\"center\" style=\"color: red;\">Day5</h1>\n# Vue.js - Day5 - Webpack\n\n<h2 id=\"在网页中会引用哪些常见的静态资源？\"><a href=\"#在网页中会引用哪些常见的静态资源？\" class=\"headerlink\" title=\"在网页中会引用哪些常见的静态资源？\"></a>在网页中会引用哪些常见的静态资源？</h2><ul>\n<li>JS<ul>\n<li>.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）</li>\n</ul>\n</li>\n<li>CSS<ul>\n<li>.css  .less   .sass  .scss</li>\n</ul>\n</li>\n<li>Images<ul>\n<li>.jpg   .png   .gif   .bmp   .svg</li>\n</ul>\n</li>\n<li>字体文件（Fonts）<ul>\n<li>.svg   .ttf   .eot   .woff   .woff2</li>\n</ul>\n</li>\n<li>模板文件<ul>\n<li>.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"网页中引入的静态资源多了以后有什么问题？？？\"><a href=\"#网页中引入的静态资源多了以后有什么问题？？？\" class=\"headerlink\" title=\"网页中引入的静态资源多了以后有什么问题？？？\"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol>\n<li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li>\n<li>要处理错综复杂的依赖关系</li>\n</ol>\n<h2 id=\"如何解决上述两个问题\"><a href=\"#如何解决上述两个问题\" class=\"headerlink\" title=\"如何解决上述两个问题\"></a>如何解决上述两个问题</h2><ol>\n<li>合并、压缩、精灵图、图片的Base64编码</li>\n<li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li>\n</ol>\n<h2 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack?\"></a>什么是webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p>\n<h2 id=\"如何完美实现上述的2种解决方案\"><a href=\"#如何完美实现上述的2种解决方案\" class=\"headerlink\" title=\"如何完美实现上述的2种解决方案\"></a>如何完美实现上述的2种解决方案</h2><ol>\n<li>使用Gulp， 是基于 task 任务的；</li>\n<li>使用Webpack， 是基于整个项目进行构建的；</li>\n</ol>\n<ul>\n<li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li>\n<li>根据官网的图片介绍webpack打包的过程</li>\n<li><a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"noopener\">webpack官网</a></li>\n</ul>\n<h2 id=\"webpack安装的两种方式\"><a href=\"#webpack安装的两种方式\" class=\"headerlink\" title=\"webpack安装的两种方式\"></a>webpack安装的两种方式</h2><ol>\n<li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li>\n<li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li>\n</ol>\n<h2 id=\"初步使用webpack打包构建列表隔行变色案例\"><a href=\"#初步使用webpack打包构建列表隔行变色案例\" class=\"headerlink\" title=\"初步使用webpack打包构建列表隔行变色案例\"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol>\n<li>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包</li>\n<li>创建项目基本的目录结构</li>\n<li>使用<code>cnpm i jquery --save</code>安装jquery类库</li>\n<li>创建<code>main.js</code>并书写各行变色的代码逻辑：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入jquery类库</span><br><span class=\"line\">   import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#x2F;&#x2F; 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class=\"line\">   $(&#39;#list li:even&#39;).css(&#39;backgroundColor&#39;,&#39;lightblue&#39;);</span><br><span class=\"line\">   &#x2F;&#x2F; 设置奇数行背景色</span><br><span class=\"line\">   $(&#39;#list li:odd&#39;).css(&#39;backgroundColor&#39;,&#39;pink&#39;);</span><br></pre></td></tr></table></figure></li>\n<li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li>\n<li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack src&#x2F;js&#x2F;main.js dist&#x2F;bundle.js</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用webpack的配置文件简化打包时候的命令\"><a href=\"#使用webpack的配置文件简化打包时候的命令\" class=\"headerlink\" title=\"使用webpack的配置文件简化打包时候的命令\"></a>使用webpack的配置文件简化打包时候的命令</h2><ol>\n<li>在项目根目录中创建<code>webpack.config.js</code></li>\n<li>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class=\"line\">var path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class=\"line\">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class=\"line\">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"实现webpack的实时打包构建\"><a href=\"#实现webpack的实时打包构建\" class=\"headerlink\" title=\"实现webpack的实时打包构建\"></a>实现webpack的实时打包构建</h2><ol>\n<li>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li>\n<li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li>\n<li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中<ul>\n<li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li>\n<li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure>\n同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"使用html-webpack-plugin插件配置启动页面\"><a href=\"#使用html-webpack-plugin插件配置启动页面\" class=\"headerlink\" title=\"使用html-webpack-plugin插件配置启动页面\"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p>\n<ol>\n<li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li>\n<li>修改<code>webpack.config.js</code>配置文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class=\"line\">var path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 导入自动生成HTMl文件的插件</span><br><span class=\"line\">var htmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class=\"line\">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class=\"line\">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[ &#x2F;&#x2F; 添加plugins节点配置插件</span><br><span class=\"line\">        new htmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template:path.resolve(__dirname, &#39;src&#x2F;index.html&#39;),&#x2F;&#x2F;模板路径</span><br><span class=\"line\">            filename:&#39;index.html&#39;&#x2F;&#x2F;自动生成的HTML文件的名称</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure></li>\n<li>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</li>\n</ol>\n<h2 id=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p>\n<h3 id=\"方式1：\"><a href=\"#方式1：\" class=\"headerlink\" title=\"方式1：\"></a>方式1：</h3><ul>\n<li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"方式2：\"><a href=\"#方式2：\" class=\"headerlink\" title=\"方式2：\"></a>方式2：</h3><ol>\n<li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">        hot:true,</span><br><span class=\"line\">        open:true,</span><br><span class=\"line\">        port:4321</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>在头部引入<code>webpack</code>模块：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack &#x3D; require(&#39;webpack&#39;);</span><br></pre></td></tr></table></figure></li>\n<li>在<code>plugins</code>节点下新增：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用webpack打包css文件\"><a href=\"#使用webpack打包css文件\" class=\"headerlink\" title=\"使用webpack打包css文件\"></a>使用webpack打包css文件</h2><ol>\n<li>运行<code>cnpm i style-loader css-loader --save-dev</code></li>\n<li>修改<code>webpack.config.js</code>这个配置文件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123; &#x2F;&#x2F; 用来配置第三方loader模块的</span><br><span class=\"line\">        rules: [ &#x2F;&#x2F; 文件的匹配规则</span><br><span class=\"line\">            &#123; test: &#x2F;\\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;&#x2F;&#x2F;处理css文件的规则</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</li>\n</ol>\n<h2 id=\"使用webpack打包less文件\"><a href=\"#使用webpack打包less文件\" class=\"headerlink\" title=\"使用webpack打包less文件\"></a>使用webpack打包less文件</h2><ol>\n<li>运行<code>cnpm i less-loader less -D</code></li>\n<li>修改<code>webpack.config.js</code>这个配置文件：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.less$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;] &#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用webpack打包sass文件\"><a href=\"#使用webpack打包sass文件\" class=\"headerlink\" title=\"使用webpack打包sass文件\"></a>使用webpack打包sass文件</h2><ol>\n<li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li>\n<li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.scss$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;] &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用webpack处理css中的路径\"><a href=\"#使用webpack处理css中的路径\" class=\"headerlink\" title=\"使用webpack处理css中的路径\"></a>使用webpack处理css中的路径</h2><ol>\n<li>运行<code>cnpm i url-loader file-loader --save-dev</code></li>\n<li>在<code>webpack.config.js</code>中添加处理url路径的loader模块：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader&#39; &#125;</span><br></pre></td></tr></table></figure></li>\n<li>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader?limit&#x3D;43960&#39; &#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用babel处理高级JS语法\"><a href=\"#使用babel处理高级JS语法\" class=\"headerlink\" title=\"使用babel处理高级JS语法\"></a>使用babel处理高级JS语法</h2><ol>\n<li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</li>\n<li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</li>\n<li>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.js$&#x2F;, use: &#39;babel-loader&#39;, exclude: &#x2F;node_modules&#x2F; &#125;</span><br></pre></td></tr></table></figure></li>\n<li>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></li>\n</ol>\n<h2 id=\"相关文章-2\"><a href=\"#相关文章-2\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><p><a href=\"https://segmentfault.com/p/1210000008466178\" target=\"_blank\" rel=\"noopener\">babel-preset-env：你需要的唯一Babel插件</a><br><a href=\"https://segmentfault.com/a/1190000009065987\" target=\"_blank\" rel=\"noopener\">Runtime transform 运行时编译es6</a></p>"},{"title":"继续学习webpack，webpack的多入口，多配置文件等.","date":"2020-06-06T07:06:30.000Z","_content":"\n<div class='post-summary notification is-warning'>\n    <p>\n        最近学习了node，想再复习一下vue，就准备使用webpack做一个vue+node的后台管理系统，但是刚写一点就发现vue对spa很友好，即单页面多应用，我想在这个后台管理系统实现登录注册以及其他功能，涉及到多个页面，以之前学习的webpack已经不能满足这个项目的需求，所以想重新学习一下webpack的其他稍微进阶的内容。\n    </p>\n</div>\n\n<!--more-->\n\n- [安装前先npm初始化](#%E5%AE%89%E8%A3%85%E5%89%8D%E5%85%88npm%E5%88%9D%E5%A7%8B%E5%8C%96)\n- [本地服务](#%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1)\n- [复制html](#%E5%A4%8D%E5%88%B6html)\n- [处理css](#%E5%A4%84%E7%90%86css)\n- [处理less](#%E5%A4%84%E7%90%86less)\n- [抽离css文件，通过link引入](#%E6%8A%BD%E7%A6%BBcss%E6%96%87%E4%BB%B6%E9%80%9A%E8%BF%87link%E5%BC%95%E5%85%A5)\n- [压缩css和js](#%E5%8E%8B%E7%BC%A9css%E5%92%8Cjs)\n- [给css加上兼容浏览器的前缀](#%E7%BB%99css%E5%8A%A0%E4%B8%8A%E5%85%BC%E5%AE%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%89%8D%E7%BC%80)\n- [es6 转 es5](#es6-%E8%BD%AC-es5)\n- [es 7的语法](#es-7%E7%9A%84%E8%AF%AD%E6%B3%95)\n- [全局变量引入](#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%BC%95%E5%85%A5)\n- [webpack图片打包](#webpack%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85)\n- [当图片小于多少，用base64](#%E5%BD%93%E5%9B%BE%E7%89%87%E5%B0%8F%E4%BA%8E%E5%A4%9A%E5%B0%91%E7%94%A8base64)\n- [打包文件分类](#%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB)\n- [希望输出的时候，给这些`css\\img`加上前缀，传到服务器也能访问](#%E5%B8%8C%E6%9C%9B%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E7%Bimg%E5%8A%A0%E4%B8%8A%E5%89%8D%E7%BC%80%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E8%83%BD%E8%AE%BF%E9%97%AE)\n- [如果只希望处理图片](#%E5%A6%82%E6%9E%9C%E5%8F%AA%E5%B8%8C%E6%9C%9B%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87)\n- [打包多页应用](#%E6%89%93%E5%8C%85%E5%A4%9A%E9%A1%B5%E5%BA%94%E7%94%A8)\n- [配置`source-map`](#%E9%85%8D%E7%BD%AEsource-map)\n- [`watch` 改完代表重新打包实体](#watch-%E6%94%B9%E5%AE%8C%E4%BB%A3%E8%A1%A8%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%E5%AE%9E%E4%BD%93)\n- [`webpack`的其他三个小插件](#webpack%E7%9A%84%E5%85%B6%E4%BB%96%E4%B8%89%E4%B8%AA%E5%B0%8F%E6%8F%92%E4%BB%B6)\n- [`webpack` 跨域](#webpack-%E8%B7%A8%E5%9F%9F)\n- [如果后端给的请求没有API 「跨域」](#%E5%A6%82%E6%9E%9C%E5%90%8E%E7%AB%AF%E7%BB%99%E7%9A%84%E8%AF%B7%E6%B1%82%E6%B2%A1%E6%9C%89api-%E8%B7%A8%E5%9F%9F)\n- [前端只想单纯mock数据 「跨域」](#%E5%89%8D%E7%AB%AF%E5%8F%AA%E6%83%B3%E5%8D%95%E7%BA%AFmock%E6%95%B0%E6%8D%AE-%E8%B7%A8%E5%9F%9F)\n- [有服务端，不用代理, 服务端启动webpack 「跨域」](#%E6%9C%89%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8D%E7%94%A8%E4%BB%A3%E7%90%86-%E6%9C%8F%E5%90%AF%E5%8A%A8webpack-%E8%B7%A8%E5%9F%9F)\n- [webpack解析resolve](#webpack%E8%A7%A3%E6%9E%90resolve)\n- [但是每次引入都很长，如何优雅引入](#%E4%BD%86%E6%98%AF%E6%AF%8F%E6%AC%A1%E5%BC%95%E5%85%A5%E9%83%BD%E5%BE%88%E9%95%BF%E5%A6%82%E4%B%9B%85%E5%BC%95%E5%85%A5)\n- [省略扩展名](#%E7%9C%81%E7%95%A5%E6%89%A9%E5%B1%95%E5%90%8D)\n- [定义环境变量](#%E5%AE%9A%E4%B9%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)\n- [区分两个不同的环境](#%E5%8C%BA%E5%88%86%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E7%8E%AF%E5%A2%83)\n- [webpack 优化](#webpack-%E4%BC%98%E5%8C%96)\n- [优化：当某些包是独立的个体没有依赖](#%E4%BC%98%E5%8C%96%E5%BD%93%E6%9F%90%E4%BA%9B%E5%8C%85%E6%98%AF%E7%8B%AC%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BD%93%E6%B2%A1%E6%9C%89%E4%BE%9D%E8%B5%96)\n- [优化：规则匹配设置范围](#%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99%E5%8C%B9%E9%85%8D%E8%AE%BE%E7%BD%AE%E8%8C%83%E5%9B%B4)\n- [优化：忽略依赖中不必要的语言包](#%E4%BC%98%E5%8C%96%E5%BF%BD%E7%95%A5%E4%BE%9D%E8%B5%96%E4%B8%AD%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%A8%80%E5%8C%85)\n- [动态链接库](#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93)\n- [多线程打包happypack](#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85happypack)\n- [webpack 自带的优化](#webpack-%E8%87%AA%E5%B8%A6%E7%9A%84%E4%BC%98%E5%8C%96)\n- [抽取公共代码](#%E6%8A%BD%E5%8F%96%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81)\n- [懒加载(延迟加载)](#%E6%87%92%E5%8A%A0%E8%BD%BD%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD)\n- [热更新(当页面改变只更新改变的部分，不重新打包)](#%E7%83%AD%E6%9B%B4%E6%96%B0%E5%BD%93%E9%A1%B5%E9%9D%A2%E6%94%B9%E5%8F%98%E5%8F%AA%E6%9B%B4%E6%96%B0%E6%94%B9%E5%8F%98%E7%9A%84%E9%83%A8%E5%88%86%E4%B8%8D%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85)\n- [tapable介绍 - SyncHook](#tapable%E4%BB%8B%E7%BB%8D---synchook)\n- [tapable介绍 - SyncBailHook](#tapable%E4%BB%8B%E7%BB%8D---syncbailhook)\n- [tapable介绍 - SyncWaterfallHook](#tapable%E4%BB%8B%E7%BB%8D---syncwaterfallhook)\n- [tapable介绍 - SyncLoopHook](#tapable%E4%BB%8B%E7%BB%8D---syncloophook)\n- [`AsyncParallelHook` 与 `AsyncParallelBailHook`](#asyncparallelhook-%E4%B8%8E-asyncparallelbailhook)\n  + [AsyncParallelHook](#asyncparallelhook)\n  + [AsyncParallelBailHook](#asyncparallelbailhook)\n- [异步串行 —— AsyncSeriesHook](#%E5%BC%82%E6%AD%A5%E4%B8%B2%E8%A1%8C--asyncserieshook)\n- [异步串行 —— AsyncSeriesWaterfallHook](#%E5%BC%82%E6%AD%A5%E4%B8%B2%E8%A1%8C--asyncserieswaterfallhook)\n- [手写webpack](#%E6%89%8B%E5%86%99webpack)\n- [webpack分析及处理](#webpack%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%84%E7%90%86)\n- [创建依赖关系](#%E5%88%9B%E5%BB%BA%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB)\n- [ast递归解析](#ast%E9%80%92%E5%BD%92%E8%A7%A3%E6%9E%90)\n- [生成打包工具](#%E7%94%9F%E6%88%90%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7)\n- [增加loader](#%E5%A2%9E%E5%8A%A0loader)\n- [增加plugins](#%E5%A2%9E%E5%8A%A0plugins)\n- [loader](#loader)\n- [配置多个loader](#%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAloader)\n- [`babel-loader`实现](#babel-loader%E5%AE%9E%E7%8E%B0)\n- [`banner-loader`实现(自创)](#banner-loader%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%88%9B)\n- [实现`file-loader`和`url-loader`](#%E5%AE%9E%E7%8E%B0file-loader%E5%92%8Curl-loader)\n- [`less-loader`和`css-loader`](#less-loader%E5%92%8Ccss-loader)\n- [`css-loader`](#css-loader)\n- [webpack 中的插件](#webpack-%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6)\n- [文件列表插件](#%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6)\n- [内联的`webpack`插件](#%E5%86%85%E8%81%94%E7%9A%84webpack%E6%8F%92%E4%BB%B6)\n- [打包后自动发布](#%E6%89%93%E5%8C%85%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83)\n\n## 安装前先npm初始化\n\n```\nnpm init -y\nnpm i webpack webpack-cli -D\n```\n\n\n```js\nlet path = require('path')   // 相对路径变绝对路径\n\nmodule.exports = {\n  mode: 'production', // 模式 默认 production development\n  entry: './src/index',    // 入口\n  output: {\n    filename: 'bundle.[hash:8].js',   // hash: 8只显示8位\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: ''  // // 给所有打包文件引入时加前缀，包括css，js，img，如果只想处理图片可以单独在url-loader配置中加publicPath\n  }\n}\n```\n\n## 本地服务\n\n`npm i webpack-dev-server -D`\n\n```\ndevServer: {\n  port: 3000,\n  progress: true          // 滚动条\n  contentBase: './build'  // 起服务的地址\n  open: true              // 自动打开浏览器\n  compress： true         // gzip压缩\n}\n```\n\n\n## 复制html\n\n`npm i html-webpack-plugin -D`\n\n```\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\nplugins: [ // 放着所有webpack插件\n  new HtmlWebpackPlugin({ // 用于使用模板打包时生成index.html文件，并且在run dev时会将模板文件也打包到内存中\n    template: './index.html', // 模板文件\n    filename: 'index.html', // 打包后生成文件\n    hash: true, // 添加hash值解决缓存问题\n    minify: { // 对打包的html模板进行压缩\n      removeAttributeQuotes: true, // 删除属性双引号\n      collapseWhitespace: true // 折叠空行变成一行\n    }\n  })\n]\n\n```\n\n[html-webpack-plugin#options](https://github.com/jantimon/html-webpack-plugin#options)\n\n\n## 处理css\n\n`npm i css-loader style-loader -D`\n\n```\n// css-loader   作用：用来解析@import这种语法\n// style-loader 作用：把 css 插入到head标签中\n// loader的执行顺序： 默认是从右向左（从下向上）\nmodule: {    // 模块\n  rules: [   // 规则\n    // style-loader 把css插入head标签中\n    // loader 功能单一\n    // 多个loader 需要 []\n    // 顺便默认从右到左\n    // 也可以写成对象方式\n    {\n      test: /\\.css$/,   // css 处理\n      // use: 'css-loader'\n      // use: ['style-loader', 'css-loader'],\n      use: [\n        // {\n        //     loader: 'style-loader',\n        //     options: {\n        //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n        //     }\n        // },\n        MiniCssExtractPlugin.loader,\n        'css-loader', // css-loader 用来解析@import这种语法,\n        'postcss-loader'\n      ]\n    }\n  ]\n}\n```\n\n\n## 处理less\n\n`npm i less-loader`\n\n```\n{\n  test: /\\.less$/,   // less 处理\n  // use: 'css-loader'\n  // use: ['style-loader', 'css-loader'],\n  use: [\n    // {\n    //     loader: 'style-loader',\n    //     options: {\n    //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n    //     }\n    // },\n    MiniCssExtractPlugin.loader,   // 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置\n    'css-loader', // css-loader 用来解析@import这种语法\n    'postcss-loader',\n    'less-loader' // less-loader less -> css\n    // sass node-sass sass-loader\n    // stylus stylus-loader\n  ]\n}\n```\n\n[less-loader](https://webpack.js.org/loaders/less-loader/#src/components/Sidebar/Sidbar.jsx)\n\n## 抽离css文件，通过link引入\n\n`yarn add mini-css-extract-plugin -D`\n\n[mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin)\n\n```\nlet MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\n// 压缩css\n\nplugins: [\n  new MiniCssExtractPlugin({\n      filename: 'css/main.css'\n  })\n]\n\n{\n  test: /\\.css$/,   // css 处理\n  // use: 'css-loader'\n  // use: ['style-loader', 'css-loader'],\n  use: [\n    // {\n    //     loader: 'style-loader',\n    //     options: {\n    //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n    //     }\n    // },\n    // 此时不需要style-loader\n    MiniCssExtractPlugin.loader,   // 抽离\n    'css-loader', // css-loader 用来解析@import这种语法,\n    'postcss-loader'\n  ]\n}\n\n```\n\n抽离css插件文件时可使用`optimize-css-assets-webpack-plugin`优化压缩css以及js文件\n\n## 压缩css和js\n\n```\n// 用了`mini-css-extract-plugin`抽离css为link需使用`optimize-css-assets-webpack-plugin`进行压缩css,使用此方法压缩了css需要`uglifyjs-webpack-plugin`压缩js\nconst OptimizeCSSAssetsPlugin = require(\"optimize-css-assets-webpack-plugin\")\nconst UglifyJsPlugin = require(\"uglifyjs-webpack-plugin\")\n\nmodule.exports = {\n  optimization: {              // 优化项\n    minimizer: [\n      new UglifyJsPlugin({     // 优化js\n        cache: true,           // 是否缓存\n        parallel: true,        // 是否并发打包\n        // sourceMap: true     // 源码映射 set to true if you want JS source maps\n      }),\n      new OptimizeCSSAssetsPlugin({})    // css 的优化\n    ]\n  },\n  mode: 'production',\n  entry: '',\n  output: {},\n}\n\n```\n\n## 给css加上兼容浏览器的前缀\n\n`yarn add postcss-loader autoprefixer -D`\n\n```\n// css\n{\n  test: /\\.css$/,   // css 处理\n  // use: 'css-loader'\n  // use: ['style-loader', 'css-loader'],\n  use: [\n    // {\n    //     loader: 'style-loader',\n    //     options: {\n    //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n    //     }\n    // },\n    MiniCssExtractPlugin.loader,\n    'css-loader', // css-loader 用来解析@import这种语法,\n    'postcss-loader'\n  ]\n}\n// less\n{\n  test: /\\.less$/,   // less 处理\n  // use: 'css-loader'\n  // use: ['style-loader', 'css-loader'],\n  use: [\n    // {\n    //     loader: 'style-loader',\n    //     options: {\n    //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n    //     }\n    // },\n    MiniCssExtractPlugin.loader,   // 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置\n    'css-loader', // css-loader 用来解析@import这种语法\n    'postcss-loader',\n    'less-loader' // less-loader less -> css\n    // sass node-sass sass-loader\n    // stylus stylus-loader\n  ]\n},\n```\n\npostcss 需要配置文档   `postcss.config1.js`\n\n[postcss-loader](https://github.com/postcss/postcss-loader)\n\n```\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')\n  ]\n}\n```\n\n## es6 转 es5\n\n`npm i babel-loader @babel/core  @babel/preset-env -D`\n\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [ //预设\n              '@babel/preset-env' \n            ],\n            plugins:[\n              // 转es7的语法\n              [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n              [\"@babel/plugin-proposal-class-properties\", { \"loose\" : true }]\n            ]\n          }\n        },\n        exclude: /node_modules/\n      }\n    ]\n  }\n}\n\n```\n\n\n## 转es7的语法\n\n```\n// 转class\nnpm i @babel/plugin-proposal-class-properties -D\n\n// 转装饰器\nnpm i @babel/plugin-proposal-decorators -D\n```\n\n配置如上\n\n### 其他不兼容的高级语法\n\n```\n使用 @babel/polyfill\n```\n\n## 语法检查 eslint\n\n`npm i eslint eslint-loader -S`\n\n根目录添加 `.eslintrc.json` 配置文件\n\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'eslint-loader',\n          options: {\n            enforce: 'pre'  // previous优先执行  post-普通loader之后执行\n          }\n        }\n      },\n      {\n        test: /\\.js$/,      // mormal 普通的loader\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [ //预设\n              '@babel/preset-env' \n            ]\n          }\n        },\n        exclude: /node_modules/\n      }\n    ]\n  }\n}\n\n```\n\n## 全局变量引入\n\njquery的引入\n\n```\nnpm i jquery -S\n```\n\n```\nlet webpack = require('webpack')\n\nnew webpack.ProvidePlugin({\n  $: 'jquery'\n})\n```\n\n其他情况\n\n1. 暴露全局\n\n`npm i expose-loader -D` 暴露全局的`loader`\n\n#### 法1：\n\n可以在js中 `import $ from 'expose-loader?$!jquery'`   // 全局暴露jquery为$符号\n\n可以调用`window.$`\n\n#### 法2：\n\n也可在`webpack.config.js` 中配置 `rules`\n\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve('jquery'),\n        use: 'expose-loader?$'\n      }\n    ]\n  }\n}\n\n```\n\n以后在`.js`文件中引入\n\n```\nimport $ from 'jquery'\n```\n\n#### 法3. 如何在每个模块中注入：\n\n```\nlet webpack = require('webpack')\n\nmodule.exports = {\n  plugins: [\n    new webpack.ProvidePlugin({\n      $: 'jquery'\n    })\n  ]\n}\n\n之后代码内直接使用 $\n```\n\n#### 法4：\n\n在`index.html`中通过`script`标签引入`jquery`, 但是在`js`中，用`import`会重新打包`jquery`,如何避免\n\n从输出的bundle 中排除依赖\n\n```\nmodule.exports = {\n  externals: { // 告知webpack是外部引入的，不需要打包\n    jquery: 'jQuery'\n  }\n}\n\n```\n\n此时在index.js上\n\n```\nimport $ from 'jquery'\n\nconsole.log($)\n```\n\n## webpack图片打包\n\n1. js中创建\n2. css中引入\n3. `<img src=\"\">`\n\n`yarn add file-loader -D`\n\n适合一二情况\n\n```\nmodule.export={\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: 'file-loader'\n      }\n    ]\n  }\n}\n\n```\n\n默认会内部生成一张图片到build,生成图片的路径返回回来\n\n第一种情况: 图片地址要`import`引入，直接写图片的地址，会默认为字符串\n\n```\nimport logo from './logo.png'\n\nlet image = new Image()\nimage.src = logo\ndocument.body.appendChild(image)\n```\n\n第二种情况: `css-loader`会将`css`里面的图片转为`require`的格式\n\n```\ndiv {\n  background: url(\"./logo.png\");\n}\n```\n\n第三种情况: 解析`html`中的`image`\n\n`yarn add html-withimg-loader -D`\n\n```\n{\n  test: /\\.html$/,\n  use: 'html-withimg-loader'\n}\n```\n\n## 当图片小于多少，用base64\n\n`yarn add url-loader -D`\n\n如果过大，才用`file-loader`\n\n```\n{\n  test: /\\.(png|jpg|gif)$/,\n  // 当图片小于多少，用base64,否则用file-loader产生真实的图片\n  use: {\n    loader: 'url-loader',\n    options: {\n      limit: 200 * 1024,          // 小于200k变成base64\n      // outputPath: '/img/',     // 打包后输出地址\n      // publicPath: ''           // 给资源加上域名路径\n    }\n  }\n}\n```\n\n## 打包文件分类\n\n1.图片:\n\n```\n{\n  test: /\\.(png|jpg|gif)$/,\n  // 当图片小于多少，用base64,否则用file-loader产生真实的图片\n  use: {\n    loader: 'url-loader',\n    options: {\n      limit: 1,  // 200k 200 * 1024\n      outputPath: 'img/'   // 打包后输出地址 在dist/img\n    }\n  }\n},\n```\n\n2.css:\n\n```\nplugins: [\n  new MiniCssExtractPlugin({\n    filename: 'css/main.css'\n  }),\n]\n```\n\n## 希望输出的时候，给这些`css\\img`加上前缀，传到服务器也能访问\n\n```\noutput: {\n  filename: 'bundle.[hash:8].js',   // hash: 8只显示8位\n  path: path.resolve(__dirname, 'dist'),\n  publicPath: 'http://www.mayufo.cn'  // 给静态资源统一加\n},\n```\n\n\n## 如果只希望处理图片\n\n```\n{\n  test: /\\.(png|jpg|gif)$/,\n  // 当图片小于多少，用base64,否则用file-loader产生真实的图片\n  use: {\n    loader: 'url-loader',\n    options: {\n      limit: 1,  // 200k 200 * 1024\n      outputPath: '/img/',   // 打包后输出地址\n      publicPath: 'http://www.mayufo.cn'\n    }\n  }\n}\n```\n\n## 打包多页应用\n\n```\n// 多入口\nlet path = require('path')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    home: './src/index.js',\n    other: './src/other.js'\n  },\n  output: {\n    filename: \"[name].js\",\n    path: path.resolve(__dirname, 'dist2')\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './index.html',\n      filename: 'home.html',\n      chunks: ['home']\n    }),\n    new HtmlWebpackPlugin({\n      template: './index.html',\n      filename: 'other.html',\n      chunks: ['other', 'home']   // other.html 里面有 other.js & home.js\n    }),\n  ]\n}\n\n```\n\n## 配置`source-map`\n\n`yarn add @babel/core  @babel/preset-env babel-loader  webpack-dev-server -D`\n\n```\nmodule.exports = {\n  devtool: 'source-map' // 增加映射文件调试源代码\n}\n```\n\n1. 源码映射 会标识错误的代码 打包后生成独立的文件 大而全 「source-map」\n2. 不会陈胜单独的文件 但是可以显示行和列  「eval-source-map」\n3. 不会产生列有行，产生单独的映射文件  「cheap-module-source-map」\n4. 不会产生文件 集成在打包后的文件中 不会产生列有行 「cheap-module-eval-source-map」\n\n\n## `watch` 改完代表重新打包实体\n\n```\nmodule.exports = {\n  watch: true,\n  watchOptions: {\n    poll: 1000,              // 每秒监听1000次\n    aggregateTimeout: 300,   // 防抖，当第一个文件更改，会在重新构建前增加延迟\n    ignored: /node_modules/  // 对于某些系统，监听大量文件系统会导致大量的 CPU 或内存占用。这个选项可以排除一些巨大的文件夹，\n  },\n}\n```\n\n\n## `webpack`的其他三个小插件\n\n1. `cleanWebpackPlugin`\n\n每次打包之前删掉dist目录\n`yarn add clean-webpack-plugin -D`\n\n[clean-webpack-plugin](https://github.com/johnagan/clean-webpack-plugin)\n\n```\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n  output: {\n    path: path.resolve(process.cwd(), 'dist'),\n  },\n  plugins: [\n    new CleanWebpackPlugin('./dist')\n  ]\n}\n```\n\n2. `copyWebpackPlugin`\n\n一些静态资源也希望拷贝的dist中\n\n`yarn add copy-webpack-plugin -D`\n\n```\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\n\nmodule.exports = {\n  plugins: [\n    new CopyWebpackPlugin([\n      {from: 'doc', to: './dist'}\n    ])\n  ]\n}\n```\n\n3. `bannerPlugin`内置模块\n\n版权声明\n\n```\nconst webpack = require('webpack');\n\nnew webpack.BannerPlugin('hello world')\n// or\nnew webpack.BannerPlugin({ banner: 'hello world'})\n\n```\n\n## `webpack` 跨域\n\n设置一个服务,由于`webpack-dev-server`内含`express`\n\n[express](https://expressjs.com/zh-cn/starter/hello-world.html)\n\n`server.js`\n\n```\n// express\n\nlet express = require('express')\n\nlet app = express();\n\napp.get('/api/user', (res) => {\n  res.json({name: 'mayufo'})\n})\n\napp.listen(3000)   // 服务端口在3000\n```\n\n写完后记得`node server.js`\n\n访问 `http://localhost:3000/api/user` 可见内容\n\n\n`index.js`\n\n```\n// 发送一个请求\nlet xhr = new XMLHttpRequest();\n\n// 默认访问 http://localhost:8080  webpack-dev-server 的服务 再转发给3000\nxhr.open('GET', '/api/user', true);\n\nxhr.onload = function () {\n  console.log(xhr.response)\n}\n\nxhr.send();\n\n```\n\n\n`webpack.config.js`\n\n```\nmodule.exports = {\n  devServer: {\n    proxy: {\n      '/api': 'http://localhost:3000'\n    }\n  },\n}\n```\n\n## 1.如果后端给的请求没有API 「跨域」\n\n```\n// express\n\nlet express = require('express')\n\nlet app = express();\n\n\napp.get('/user', (res) => {\n  res.json({name: 'mayufo'})\n})\n\napp.listen(3000)   // 服务端口在3000\n```\n\n\n请求已api开头, 转发的时候再删掉api\n\n```\ndevServer: {\n  proxy: {\n    '/api': {\n      target: 'http://localhost:3000',\n      pathRewrite: {'^/api': ''}\n    }\n  }\n}\n```\n\n## 2.前端只想单纯mock数据 「跨域」\n\n```\ndevServer: {\n  // proxy: {\n  //     '/api': 'http://localhost:3000' // 配置一个代理\n  // }\n  //   proxy: {   // 重写方式 把请求代理到express 上\n  //       '/api': {\n  //           target: 'http://localhost:3000',\n  //           pathRewrite: {'^/api': ''}\n  //       }\n  //   }\n  before: function (app) {  // 勾子\n    app.get('/api/user', (req, res) => {\n      res.json({name: 'tigerHee'})\n    })\n  }\n},\n```\n\n## 3.有服务端，不用代理, 服务端启动webpack 「跨域」\n\n`server.js`中启动`webpack`\n\n`yarn add webpack-dev-middleware -D`\n\n`server.js`\n\n```\n// express\n\nlet express = require('express')\nlet webpack = require('webpack')\nlet app = express();\n\n\n// 中间件\nlet middle = require('webpack-dev-middleware')\n\nlet config = require('./webpack.config')\n\n\nlet compiler = webpack(config)\n\n\napp.use(middle(compiler))\n\napp.get('/user', (req, res) => {\n  res.json({name: 'mayufo'})\n})\n\n\napp.listen(3000)\n\n```\n\n## webpack解析resolve\n\n以`bootstrap`为例\n\n```\nnpm install bootstrap  -D\n```\n\n`index.js`\n\n```\nimport 'bootstrap/dist/css/bootstrap.css'\n```\n\n报错\n\n```\nERROR in ./node_modules/bootstrap/dist/css/bootstrap.css 7:0\nModule parse failed: Unexpected token (7:0)\nYou may need an appropriate loader to handle this file type.\n|  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n|  */\n> :root {\n|   --blue: #007bff;\n|   --indigo: #6610f2;\n @ ./src/index.js 22:0-42\n @ multi (webpack)-dev-server/client?http://localhost:8081 ./src/index.js\n\n```\n\n这是因为`bootstrap` 4.0的css引入了新的特性，CSS Variables\n\n安装\n`npm install postcss-custom-properties --save-dev`\n\n\n配置`webpack.config.js`\n\n```\n{\n  test: /\\.css$/,\n  use: ['style-loader', 'css-loader', {\n    loader: 'postcss-loader',\n    options: {\n      plugins: (loader) => [\n        require(\"postcss-custom-properties\")\n      ]\n    }\n  }]\n}\n```\n\n## 但是每次引入都很长，如何优雅引入\n\n```\nresolve: {\n  // 在当前目录查找\n  modules: [path.resolve('node_modules')],\n  alias: {\n      'bootstrapCss': 'bootstrap/dist/css/bootstrap.css'\n  }\n},\n```\n\n```\nimport 'bootstrapCss'  // 在node_modules查找\n```\n\n## 省略扩展名\n\nextensions:\n\n```\nresolve: {\n  // 在当前目录查找\n  modules: [path.resolve('node_modules')],\n  // alias: {\n  //   'bootstrapCss': 'bootstrap/dist/css/bootstrap.css'\n  // },\n  mainFields: ['style', 'main'],   // 先用bootstrap中在package中的style,没有在用main\n  // mainFiles: []  // 入口文件的名字 默认index\n  extensions: ['.js', '.css', '.json']  // 当没有拓展命的时候，先默认js、次之css、再次之json\n},\n```\n\n## 定义环境变量\n\n`DefinePlugin` 允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和生产模式的构建允许不同的行为非常有用。\n\n```\nlet url = ''\nif (DEV === 'dev') {\n  // 开发环境\n  url = 'http://localhost:3000'\n} else {\n  // 生成环境\n  url = 'http://www.mayufo.cn'\n}\n```\n\n`webpack.config.js`\n\n```\nnew webpack.DefinePlugin({\n  // DEV: '\"production\"',\n  DEV: JSON.stringify('production'),\n  FLAG: 'true',   // 布尔\n  EXPRESSION: '1 + 1'   // 字符串 如果希望是字符串 JSON.stringify('1 + 1')\n})\n```\n\n## 区分两个不同的环境\n\n分别配置不同的环境\n\n- `webpack.base4.js`   基础配置\n- `webpack.dev4.js`    开发环境\n- `webpack.prod4.js`   生产环境\n\n`yarn add webpack-merge -D`\n\n\n`npm run build -- -- config webpack.dev4.js`\n`npm run build -- -- config webpack.build.js`\n\n[官方文档](https://webpack.docschina.org/guides/production/)\n\n\n`webpack.base4.js`\n\n```\nlet path = require('path')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\nlet CleanWebpackPlugin = require('clean-webpack-plugin')\n\nmodule.exports = {\n  entry: {\n    home: './src/index.js'\n  },\n  output: {\n    filename: \"[name].js\",\n    path: path.resolve(process.cwd(), 'dist3')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-env'\n            ]\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader', {\n          loader: 'postcss-loader',\n          options: {\n            plugins: (loader) => [\n              require(\"postcss-custom-properties\")\n            ]\n          }\n        }]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      filename: 'index.html'\n    })\n  ]\n}\n\n```\n\n`webpack.dev4.js`\n\n```\nlet merge = require('webpack-merge')\nlet base = require('./webpack.base4.js')\n\nmodule.exports = merge(base, {\n  mode: 'development',\n  devServer: {},\n  devtool: 'source-map'\n})\n\n```\n\n`webpack.prod4.js`\n\n```\nlet merge = require('webpack-merge')\nlet base = require('./webpack.base4.js')\n\nmodule.exports = merge(base, {\n  mode: 'production'\n})\n\n```\n\n`package.json`\n\n```\n\"scripts\": {\n  \"build\": \"webpack  --config webpack.prod4.js\",\n  \"dev\": \"webpack-dev-server --config webpack.dev4.js\"\n},\n```\n\n\n## webpack 优化\n\n`yarn add webpack webpack-cli html-webpack-plugin @babel/core babel-loader @babel/preset-env @babel/preset-react -D`\n\n`webpack.config.js`\n\n```\nlet path = require('path')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\n\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-env',\n              '@babel/preset-react'\n            ]\n          }\n        }\n      },\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      filename: 'index.html'\n    }),\n  ]\n}\n\n```\n\n##  优化：当某些包是独立的个体没有依赖\n\n以jquery为例，`yarn add jquery -D`,它是一个独立的包没有依赖，可以在webpack配置中，配置它不再查找依赖\n\n```\nmodule: {\n    noParse: /jquery/, // 不用解析某些包的依赖\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-env',\n              '@babel/preset-react'\n            ]\n          }\n        }\n      },\n  ]\n}\n\n```\n\n运行`npx webpack`\n\n从2057ms  -> 1946 ms\n\n## 优化：规则匹配设置范围\n\n```\nrules: [\n  {\n    test: /\\.js$/,\n    exclude: '/node_modules/',   // 排除\n    include: path.resolve('src'),  // 在这个范围内\n    use: {\n      loader: 'babel-loader',\n      options: {\n        presets: [\n          '@babel/preset-env',\n          '@babel/preset-react'\n        ]\n      }\n    }\n  }\n```\n\n尽量实用`include`,不使用`exclude`,使用绝对路径\n\n## 优化：忽略依赖中不必要的语言包\n\n`yarn add moment webpack-dev-server -D`\n\n忽略掉`moment`的其他语言包\n\n```\nlet webpack = require('webpack')\n\nplugins: [\n    new webpack.IgnorePlugin(/\\.\\/locale/, /moment/)\n]\n\n```\n\n`index.js`\n\n```\nimport moment from 'moment'\n\nlet r = moment().endOf('day').fromNow()  // 距离现在多少天\nconsole.log(r);\n```\n\n\n从 1.2MB 到  800kb\n\n## 动态链接库\n\n`yarn add react react-dom`\n\n正常使用\n\n`webpack.config.js`\n\n```\n{\n  test: /\\.js$/,\n  exclude: '/node_modules/',\n  include: path.resolve('src'),\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: [\n        '@babel/preset-env',\n        '@babel/preset-react'\n      ]\n    }\n  }\n}\n```\n\n`index.js`\n\n```\nimport React from 'react'\n\nimport {render} from 'react-dom'\n\n\nrender(<h1>111111</h1>, window.root)\n```\n\n`index.html`\n\n```\n<div id=\"root\"></div>\n```\n\n独立的将`react react-dom` 打包好, 打包好再引用，从而减少`webpack`每次都要打包`react`\n\n创建`webpack.config.react.js`\n\n\n```\nlet path = require('path')\nlet webpack = require('webpack')\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    // test: './src/test.js'\n    react: ['react', 'react-dom']\n  },\n  output: {\n    filename: '_dll_[name].js',  // 产生的文件名\n    path: path.resolve(__dirname, 'dist'),\n    library: '_dll_[name]',     // 给输出的结果加个名字\n    // libraryTarget: 'var'   // 配置如何暴露 library\n    // commonjs 结果放在export属性上， umd统一资源模块, 默认是var\n  },\n  plugins: [\n    new webpack.DllPlugin({\n      name: '_dll_[name]',   // name === library\n      path: path.resolve(__dirname, 'dist', 'manifest.json')  // manifest.json 定义了各个模块的路径\n    })\n  ]\n}\n```\n\n[libraryTarget](https://webpack.docschina.org/configuration/output/#%E6%9A%B4%E9%9C%B2%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F)\n\n`manifest.json`就是一个任务清单or动态链接库，在这个清单里面查找react\n\n`npx webpack --config webpack.config.react.js`\n\n在`index.html`增加引用\n\n```\n<body>\n<div id=\"root\"></div>\n<script src=\"/_dll_react.js\"></script>\n</body>\n```\n\n在webpack.config.js 中配置，现在动态链接库`manifest.json`中查找,如果没有再打包react\n\n```\nplugins: [\n  new webpack.DllReferencePlugin({\n    manifest: path.resolve(__dirname, 'dist', 'manifest.json')\n  })\n]\n\n```\n\n[DLLPlugin 和 DLLReferencePlugin](https://webpack.docschina.org/plugins/dll-plugin/#src/components/Sidebar/Sidebar.jsx)\n\n`npm run build`\n\n打包后的`bunle.js`文件变小\n\n`npm run dev`\n\n可以理解为先把react打包，后面每次都直接使用react打包后的结果\n\n## 多线程打包`happypack`\n\n`yarn add happypack`\n\n`webpack.config.js`\n\n```\nlet Happypack = require('happypack')\n\n\nrules: [\n  {\n    test: /\\.js$/,\n    exclude: '/node_modules/',\n    include: path.resolve('src'),\n    use: 'happypack/loader?id=js'\n  },\n]\n\nplugins: [\n  new Happypack({\n    id: 'js',\n    use: [{\n      loader: 'babel-loader',\n      options: {\n        presets: [\n          '@babel/preset-env',\n          '@babel/preset-react'\n        ]\n      }\n    }]\n  })\n]\n```\n\njs启用多线程，由于启用多线程也会浪费时间，因此当项目比较大的时候启用效果更好\n\ncss启用多线程\n\n```\n{\n  test: /\\.css$/,\n  use: 'happypack/loader?id=css'\n}\n\nnew Happypack({\n  id: 'css',\n  use: ['style-loader', 'css-loader']\n}),\n```\n\n## webpack 自带的优化\n\n`test.js`\n\n```\nlet sum = (a, b) => {\n  return a + b + 'sum'\n}\n\nlet minus = (a, b) => {\n  return a - b + 'minus';\n}\n\nexport default {\n  sum, minus\n}\n```\n\n1. 使用import \n\n`index.js`\n\n```\nimport calc from './test'\n\nconsole.log(calc.sum(1, 2));\n```\n\n\nimport在生产环境下会自动去除没有用的代码`minus`，这叫`tree-shaking`，将没有用的代码自动删除掉\n\n\n`index.js`\n\n```\nlet calc = require('./test')\nconsole.log(calc);   // es 6导出，是一个default的对象\nconsole.log(calc.default.sum(1, 2));\n```\n\nrequire引入es6 模块会把结果放在default上,打包build后并不会把多余`minus`代码删除掉，不支持`tree-shaking`\n\n\n2. 作用域的提升\n\n`index.js`\n\n```\nlet a = 1\nlet b = 2\nlet c = 3\nlet d = a + b + c\n\nconsole.log(d, '---------');\n```\n\n打包出来的文件\n\n```\nconsole.log(r.default.sum(1,2));console.log(6,\"---------\")\n```\n\n在webpack中可以省略一些可以简化的代码\n\n## 抽取公共代码\n\n1. 抽离自有模块\n\n`webpack.config.js`\n\n```\nmodule.exports = {\n  optimization: {\n    splitChunks: {             // 分割代码块，针对多入口\n      cacheGroups: {           // 缓存组\n        common: {              // 公共模块\n          minSize: 0,          // 大于多少抽离\n          minChunks: 2,        // 使用多少次以上抽离抽离\n          chunks: 'initial'    // 从什么地方开始, 从入口开始\n        }\n      }\n    }\n  },\n}\n```\n\n[SplitChunksPlugin](https://webpack.docschina.org/plugins/split-chunks-plugin/)\n\n\n分别有a.js和b.js, index.js和other.js分别引入a和b两个js\n\n`index.js`\n\n```\nimport './a'\nimport './b'\n\nconsole.log('index.js');\n```\n\n`other.js`\n\n```\nimport './a'\nimport './b'\n\nconsole.log('other.js');\n```\n\n`webpack.config.js`\n\n```\nmodule.exports = {\n  optimization: {\n    splitChunks: {             // 分割代码块，针对多入口\n      cacheGroups: {           // 缓存组\n        common: {              // 公共模块\n          minSize: 0,          // 大于多少抽离\n          minChunks: 2,        // 使用多少次以上抽离抽离\n          chunks: 'initial'    // 从什么地方开始, 从入口开始\n        }\n      }\n    }\n  },\n}\n```\n\n2. 抽离第三方模块\n\n比如jquery\n\n`index.js` 和 `other.js`分别引入\n\n```\nimport $ from 'jquery'\n\nconsole.log($);\n```\n\n修改`webpack.config.js`配置：\n\n```\noptimization: {\n  splitChunks: {              // 分割代码块，针对多入口\n    cacheGroups: {            // 缓存组\n      common: {               // 公共模块\n        minSize: 0,           // 大于多少抽离\n        minChunks: 2,         // 使用多少次以上抽离抽离\n        chunks: 'initial'     // 从什么地方开始,刚开始\n      },\n      vendor: {\n        priority: 1,          // 增加权重, (先抽离第三方)\n        test: /node_modules/, // 把此目录下的抽离\n        minSize: 0,           // 大于多少抽离\n        minChunks: 2,         // 使用多少次以上抽离抽离\n        chunks: 'initial'     // 从什么地方开始,刚开始\n      }\n    }\n  },\n},\n```\n\n## 懒加载(延迟加载)\n\n`yarn add @babel/plugin-syntax-dynamic-import  -D`\n\n`source.js`\n\n```\nexport default 'mayufo'\n```\n\n`index.js`\n\n```\nlet button = document.createElement('button')\nbutton.innerHTML = 'hello'\nbutton.addEventListener('click', function () {\n  console.log('click')\n  // es6草案中的语法，jsonp实现动态加载文件\n  import('./source.js').then(data => {\n    console.log(data.default)\n  })\n})\ndocument.body.appendChild(button)\n\n```\n\n`webpack.config.js`\n\n```\n{\n  test: /\\.js$/,\n  exclude: '/node_modules/',\n  include: path.resolve('src'),\n  use: [{\n    loader: 'babel-loader',\n    options: {\n      presets: [\n        '@babel/preset-env',\n        '@babel/preset-react'\n      ],\n      plugins: [\n        '@babel/plugin-syntax-dynamic-import'\n      ]\n    }\n  }]\n}\n```\n\n## 热更新(当页面改变只更新改变的部分，不重新打包)\n\n`webpack.config.js`\n\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    template: './src/index.html',\n    filename: 'index.html'\n  }),\n  new webpack.NameModulesPlugin(),          // 打印更新的模块路径\n  new webpack.HotModuleReplacementPlugin()  // 热更新插件\n]\n```\n\n`index.js`\n\n```\nimport str from './source'\n\nconsole.log(str);\n\nif (module.hot) {\n  module.hot.accept('./source', () => {\n    console.log('文件更新了');\n    require('./source')\n    console.log(str);\n  })\n}\n\n```\n\n## tapable介绍 - SyncHook\n\n[tapable](https://juejin.im/post/5abf33f16fb9a028e46ec352)\n\n`webpack`本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是`Tapable`，`webpack`中最核心的负责编译的`Compiler`和负责创建`bundles`的`Compilation`都是`Tapable`的实例。\n\n`SyncHook` 不关心监听函数的返回值\n\n`yarn add tabable`\n\n`1.use.js`\n\n```\nlet {SyncHook} = require('tapable')   // 结构同步勾子\n\n\nclass Lesson {\n  constructor () {\n    this.hooks = {\n      // 订阅勾子\n      arch: new SyncHook(['name']),\n    }\n  }\n  start () {\n    this.hooks.arch.call('may')\n  }\n  tap () {   //  注册监听函数\n    this.hooks.arch.tap('node', function (name) {\n      console.log('node', name)\n    })\n    this.hooks.arch.tap('react', function (name) {\n      console.log('react', name)\n    })\n  }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n```\n\n`1.theory.js`\n\n```\nclass SyncHook {  // 勾子是同步的\n  constructor(args) {  // args => ['name']\n    this.tasks = []\n  }\n  tap (name, task) {\n    this.tasks.push(task)\n  }\n  call (...args) {\n    this.tasks.forEach((task) => task(...args))\n  }\n}\n\nlet hook = new SyncHook(['name'])\n\nhook.tap('react', function (name) {\n  console.log('react', name);\n})\n\n\nhook.tap('node', function (name) {\n  console.log('node', name);\n})\n\n\nhook.call('jw')\n```\n\n\n## tapable介绍 - SyncBailHook\n\n`SyncBailHook`为勾子加了个保险，当`return`返回不是`undefine`就会停止\n\n`2.use.js`\n\n```\nlet {SyncBailHook} = require('tapable')   // 解构同步勾子\n\nclass Lesson {\n  constructor () {\n    this.hooks = {\n      // 订阅勾子\n      arch: new SyncBailHook(['name']),\n\n    }\n  }\n  start () {\n    // 发布\n    this.hooks.arch.call('may')\n  }\n  tap () {   //  注册监听函数,订阅\n    this.hooks.arch.tap('node', function (name) {\n      console.log('node', name)\n      return '停止学习'  // 会停止\n      // return undefined\n    })\n    this.hooks.arch.tap('react', function (name) {\n      console.log('react', name)\n    })\n  }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n```\n\n`2.theory.js`\n\n```\nclass SyncBailHook {  // 勾子是同步的\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n    tap (name, task) {\n        this.tasks.push(task)\n    }\n    call (...args) {\n        let ret;   // 当前函数的返回值\n        let index = 0; // 当前要执行的第一个\n        do {\n            ret = this.tasks[index](...args)\n        } while (ret === undefined  && index < this.tasks.length)\n    }\n}\n\nlet hook = new SyncBailHook(['name'])\n\nhook.tap('react', function (name) {\n    console.log('react', name);\n    return '停止学习'\n    // return undefined\n})\n\n\nhook.tap('node', function (name) {\n    console.log('node', name);\n})\n\n\nhook.call('jw')\n\n```\n\n## tapable介绍 - SyncWaterfallHook\n\n`SyncWaterfallHook`上一个监听函数的返回值可以传给下一个监听函数\n\n`3.use.js`\n\n```\nlet {SyncWaterfallHook} = require('tapable')   // 解构同步勾子\n\n// waterfall 瀑布\n\nclass Lesson {\n    constructor () {\n        this.hooks = {\n            // 订阅勾子\n            arch: new SyncWaterfallHook(['name']),\n\n        }\n    }\n    start () {\n        // 发布\n        this.hooks.arch.call('may')\n    }\n    tap () {   //  注册监听函数,订阅\n        this.hooks.arch.tap('node', function (name) {\n            console.log('node', name)\n            return '学的不错'\n        })\n        this.hooks.arch.tap('react', function (name) {\n            console.log('react', name)\n        })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n```\n\n`3.theory.js`\n\n```\nclass SyncWaterfallHook {  // 勾子是同步的 - 瀑布\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n    tap (name, task) {\n        this.tasks.push(task)\n    }\n    call (...args) {\n        let [first, ...others] = this.tasks;\n        let ret = first(...args)\n        others.reduce((a, b) => {\n            return b(a);\n        }, ret);\n\n    }\n}\n\nlet hook = new SyncWaterfallHook(['name'])\n\nhook.tap('react', function (name) {\n    console.log('react', name);\n    return 'react Ok'\n    // return undefined\n})\n\n\nhook.tap('node', function (name) {\n    console.log('node', name);\n    return 'node Ok'\n})\n\nhook.tap('webpack', function (data) {\n    console.log('webpack', data);\n})\n\n\n\nhook.call('jw')\n\n\n```\n\n## tapable介绍 - SyncLoopHook\n\n`SyncLoopHook`当监听函数被触发的时候，如果该监听函数返回`true`时则这个监听函数会反复执行，如果返回 `undefined` 则表示退出循环\n\n`4.use.js`\n\n```\nlet {SyncLoopHook} = require('tapable')   // 解构同步勾子\n\n// 不返回undefined 会多次执行\n\nclass Lesson {\n    constructor () {\n        this.index = 0\n        this.hooks = {\n            // 订阅勾子\n            arch: new SyncLoopHook(['name']),\n\n        }\n    }\n    start () {\n        // 发布\n        this.hooks.arch.call('may')\n    }\n    tap () {   //  注册监听函数,订阅\n        this.hooks.arch.tap('node',  (name) => {\n            console.log('node', name)\n            return ++this.index === 3 ? undefined : '继续学'\n        })\n        this.hooks.arch.tap('react',  (name) => {\n            console.log('react', name)\n        })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n```\n\n`4.theory.js`\n\n```\nclass SyncLoopHook {  // 勾子是同步的 - 瀑布\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n    tap (name, task) {\n        this.tasks.push(task)\n    }\n    call (...args) {\n        this.tasks.forEach(task => {\n            let ret\n            do {\n                ret = task(...args);\n            } while(ret !== undefined)\n        })\n    }\n}\n\nlet hook = new SyncLoopHook(['name'])\nlet total = 0\nhook.tap('react', function (name) {\n    console.log('react', name);\n    return ++total === 3 ? undefined: '继续学'\n})\n\n\nhook.tap('node', function (name) {\n    console.log('node', name);\n})\n\nhook.tap('webpack', function (data) {\n    console.log('webpack', data);\n})\n\n\n\nhook.call('jw')\n\n```\n\n\n## `AsyncParallelHook` 与 `AsyncParallelBailHook`\n\n异步的勾子分两种`串行`和`并行`\n\n`并行`等待所有并发的异步事件执行后执行回调\n\n注册的三种方法\n\n1. 异步的注册方法`tap`\n2. 异步的注册方法`tapAsync`， 还有个回调参数\n3. `topPromise`,注册`promise`\n\n调用的三种\n\n1. call (同步)\n2. callAsync （异步）\n3. promise （异步）\n\n这里介绍的是异步并行的\n\n#### AsyncParallelHook \n\n不关心监听函数的返回值。\n\n`5.use.js`\n\n```\nlet {AsyncParallelHook} = require('tapable')   // 解构同步勾子\n\n// 不返回undefined 会多次执行\n\nclass Lesson {\n    constructor() {\n        this.index = 0\n        this.hooks = {\n            // 订阅勾子\n            arch: new AsyncParallelHook(['name']),\n\n        }\n    }\n\n    start() {\n        // 发布callAsync\n        // this.hooks.arch.callAsync('may', function () {\n        //     console.log('end');\n        // })\n        // 另一种发布promise\n        this.hooks.arch.promise('may').then(function () {\n                console.log('end');\n            }\n        )\n    }\n\n    tap() {   //  注册监听函数,订阅\n        // 注册tapAsync\n        // this.hooks.arch.tapAsync('node',  (name, callback) => {\n        //     setTimeout(() => {\n        //         console.log('node', name)\n        //         callback()\n        //     }, 1000)\n        // })\n        // this.hooks.arch.tapAsync('react',  (name, callback) => {\n        //     setTimeout(() => {\n        //         console.log('react', name)\n        //         callback()\n        //     }, 1000)\n        // })\n        // 另一种订阅 tapPromise\n        this.hooks.arch.tapPromise('node', (name) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('node', name)\n                    resolve()\n                }, 1000)\n            })\n        })\n        this.hooks.arch.tapPromise('react', (name) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('react', name)\n                    resolve()\n                }, 1000)\n            })\n        })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n\n```\n\n\n`5.theory.js`\n\n```\nclass AsyncParallelHook {  // 勾子是同步的 - 瀑布\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n\n    tapAsync(name, task) {\n        this.tasks.push(task)\n    }\n\n    tapPromise(name, task) {\n        this.tasks.push(task)\n    }\n    callAsync(...args) {\n        let finalCallback = args.pop()   // 拿出最终的函数\n        let index = 0\n        let done = () => {   // 类似promise.all的实现\n            index++;\n            if (index === this.tasks.length) {\n                finalCallback();\n            }\n        }\n        this.tasks.forEach(task => {\n            task(...args, done) // 这里的args 已经把最后一个参数删掉\n        })\n    }\n\n    promise(...args) {\n        let tasks = this.tasks.map(task => task(...args))\n        return Promise.all(tasks)\n    }\n}\n\nlet hook = new AsyncParallelHook(['name'])\n\n\n// hook.tapAsync('react', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('react', name);\n//         callback()\n//     }, 1000)\n// })\n//\n// hook.tapAsync('node', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('node', name);\n//         callback()\n//     }, 1000)\n// })\n\n// hook.tapAsync('webpack', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('webpack', name);\n//         callback()\n//     }, 1000)\n// })\n\nhook.tapPromise('react', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('react', name);\n            resolve()\n        }, 1000)\n    })\n})\n\nhook.tapPromise('node', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('node', name);\n            resolve()\n        }, 1000)\n    })\n})\n\n\n\n//\n// hook.callAsync('jw', function () {\n//     console.log('end');\n// })\n\n\nhook.promise('jw').then(function () {\n    console.log('end');\n})\n\n\n```\n\n\n#### AsyncParallelBailHook\n\n只要监听函数的返回值不为 `null`，就会忽略后面的监听函数执行，直接跳跃到`callAsync`等触发函数绑定的回调函数，然后执行这个被绑定的回调函数。\n\n使用和原理与`SyncBailHook`相似\n\n\n## 异步串行 —— AsyncSeriesHook\n\n`串行 `one by one\n\n`6.use.js`\n\n```\nlet {AsyncSeriesHook} = require('tapable')   // 解构同步勾子\n\n\nclass Lesson {\n    constructor() {\n        this.index = 0\n        this.hooks = {\n            // 订阅勾子\n            arch: new AsyncSeriesHook(['name']),\n\n        }\n    }\n\n    start() {\n        // 发布\n        // this.hooks.arch.callAsync('may', function () {\n        //     console.log('end');\n        // })\n        // 另一种发布\n        this.hooks.arch.promise('may').then(function () {\n                console.log('end');\n            }\n        )\n    }\n\n    tap() {   //  注册监听函数,订阅\n        // this.hooks.arch.tapAsync('node',  (name, callback) => {\n        //     setTimeout(() => {\n        //         console.log('node', name)\n        //         callback()\n        //     }, 1000)\n        // })\n        // this.hooks.arch.tapAsync('react',  (name, callback) => {\n        //     setTimeout(() => {\n        //         console.log('react', name)\n        //         callback()\n        //     }, 1000)\n        // })\n        // 另一种订阅\n        this.hooks.arch.tapPromise('node', (name) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('node', name)\n                    resolve()\n                }, 1000)\n            })\n        })\n        this.hooks.arch.tapPromise('react', (name) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('react', name)\n                    resolve()\n                }, 1000)\n            })\n        })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start(); // 启动勾子\n\n```\n\n`6.theory.js`\n\n```\nclass AsyncSeriesHook {  //\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n\n    tapAsync(name, task) {\n        this.tasks.push(task)\n    }\n\n    tapPromise(name, task) {\n        this.tasks.push(task)\n    }\n\n    callAsync(...args) {\n        let finalCallback = args.pop()\n        let index = 0;\n        let next = () => {\n            if (this.tasks.length === index) return finalCallback();\n            let task = this.tasks[index++];\n            task(...args, next);\n        }\n        next();\n    }\n\n    promise(...args) {\n        // 将promise串联起来\n        let [first, ...other] = this.tasks\n        return other.reduce((p, n) => {\n             return p.then(() => n (...args))\n        }, first(...args))\n    }\n}\n\nlet hook = new AsyncSeriesHook(['name'])\n\n\n// hook.tapAsync('react', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('react', name);\n//         callback()\n//     }, 1000)\n// })\n//\n// hook.tapAsync('node', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('node', name);\n//         callback()\n//     }, 1000)\n// })\n//\n// hook.tapAsync('webpack', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('webpack', name);\n//         callback()\n//     }, 1000)\n// })\n\n\nhook.tapPromise('react', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('react', name);\n            resolve()\n        }, 1000)\n    })\n})\n\nhook.tapPromise('node', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('node', name);\n            resolve()\n        }, 1000)\n    })\n})\n\n\n\n\n// hook.callAsync('jw', function () {\n//     console.log('end');\n// })\n\n\nhook.promise('jw').then(function () {\n    console.log('end');\n})\n\n```\n\n## 异步串行 —— AsyncSeriesWaterfallHook\n\n上一个监听函数的中的`callback(err, data)`的第二个参数,可以作为下一个监听函数的参数\n\n\n`7.use.js`\n\n```\nlet {AsyncSeriesWaterfallHook} = require('tapable')   // 解构同步勾子\n\n\nclass Lesson {\n    constructor() {\n        this.index = 0\n        this.hooks = {\n            // 订阅勾子\n            arch: new AsyncSeriesWaterfallHook(['name']),\n\n        }\n    }\n\n    start() {\n        // 发布\n        this.hooks.arch.callAsync('may', function () {\n            console.log('end');\n        })\n        // 另一种发布\n        // this.hooks.arch.promise('may').then(function () {\n        //         console.log('end');\n        //     }\n        // )\n    }\n\n    tap() {   //  注册监听函数,订阅\n        this.hooks.arch.tapAsync('node',  (name, callback) => {\n            setTimeout(() => {\n                console.log('node', name)\n                // callback(null, 'result')\n                callback('error', 'result')   // 如果放error, 会跳过直接后面的勾子，直接走到最终的\n\n            }, 1000)\n        })\n        this.hooks.arch.tapAsync('react',  (name, callback) => {\n            setTimeout(() => {\n                console.log('react', name)\n                callback()\n            }, 1000)\n        })\n        // 另一种订阅\n        // this.hooks.arch.tapPromise('node', (name) => {\n        //     return new Promise((resolve, reject) => {\n        //         setTimeout(() => {\n        //             console.log('node', name)\n        //             resolve()\n        //         }, 1000)\n        //     })\n        // })\n        // this.hooks.arch.tapPromise('react', (name) => {\n        //     return new Promise((resolve, reject) => {\n        //         setTimeout(() => {\n        //             console.log('react', name)\n        //             resolve()\n        //         }, 1000)\n        //     })\n        // })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start(); // 启动勾子\n\n```\n\n`7.theory.js`\n\n```\nclass AsyncSeriesWaterfallHook {  //\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n\n    tapAsync(name, task) {\n        this.tasks.push(task)\n    }\n\n    tapPromise(name, task) {\n        this.tasks.push(task)\n    }\n    callAsync(...args) {\n        let finalCallback = args.pop()\n        let index = 0;\n        let next = (err, data) => {\n            let task = this.tasks[index]\n            if(!task) return finalCallback();\n            if (index === 0) {\n                // 执行的第一个\n                task(...args, next)\n            } else {\n                task(data, next)\n            }\n            index ++\n        }\n        next();\n    }\n\n    promise(...args) {\n        // 将promise串联起来\n        let [first, ...other] = this.tasks\n        return other.reduce((p, n) => {\n             return p.then((data) => n(data))\n        }, first(...args))\n    }\n}\n\nlet hook = new AsyncSeriesWaterfallHook(['name'])\n\n\n// hook.tapAsync('react', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('react', name);\n//         callback(null, '结果1')\n//     }, 1000)\n// })\n//\n// hook.tapAsync('node', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('node', name);\n//         callback(null, '结果2')\n//     }, 1000)\n// })\n//\n// hook.tapAsync('webpack', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('webpack', name);\n//         callback()\n//     }, 1000)\n// })\n\n//\nhook.tapPromise('react', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('react', name);\n            resolve('result')\n        }, 1000)\n    })\n})\n\nhook.tapPromise('node', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('node', name);\n            resolve()\n        }, 1000)\n    })\n})\n\n\n//\n//\n// hook.callAsync('jw', function () {\n//     console.log('end');\n// })\n\n\nhook.promise('jw').then(function () {\n    console.log('end');\n})\n\n```\n\n\n## 手写webpack\n\n[对应的may-pack项目](https://github.com/mayufo/webpack-training)\n\n\n`yarn add webpack webpack-cli -D`\n\n\n`webpack.config.js`\n\n```\nlet path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    }\n}\n```\n\n`npx webpack`\n\n生成文件`bundle.js`\n\n```\n(function (modules) {\n    var installedModules = {};\n\n    function __webpack_require__(moduleId) {\n\n        if (installedModules[moduleId]) {\n            return installedModules[moduleId].exports;\n        }\n        var module = installedModules[moduleId] = {\n            i: moduleId,\n            l: false,\n            exports: {}\n        };\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n        module.l = true;\n\n        return module.exports;\n    }\n\n\n    // Load entry module and return exports\n    return __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n})\n({\n    \"./src/a.js\":\n        (function (module, exports, __webpack_require__) {\n            eval(\"let b = __webpack_require__(/*! ./base/b */ \\\"./src/base/b.js\\\")\\n\\nmodule.exports = 'a'+ b\\n\\n\\n\\n//# sourceURL=webpack:///./src/a.js?\");\n        }),\n    \"./src/base/b.js\":\n        (function (module, exports) {\n            eval(\"module.exports = 'b'\\n\\n\\n//# sourceURL=webpack:///./src/base/b.js?\");\n        }),\n    \"./src/index.js\":\n        (function (module, exports, __webpack_require__) {\n            eval(\" let str = __webpack_require__(/*! ./a.js */ \\\"./src/a.js\\\")\\n\\n console.log(str);\\n\\n\\n//# sourceURL=webpack:///./src/index.js?\");\n        })\n\n});\n\n```\n\n新建项目用于自己的`webpack`,这里叫`may-pack`\n\n`yarn init`\n\n如果在node里想执行命令，创建`bin`文件,再创建`may-pack.js`\n\n配置`package.json`\n\n```\n{\n  \"name\": \"may-pack\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"bin\": {\n    \"may-pack\": \"./bin/may-pack.js\"\n  }\n}\n```\n\n`may-pack.js`\n\n```\n#!  /usr/bin/env node \n\n// node环境\n\nconsole.log('start');\n\n```\n\n运行`npm link`将npm 模块链接到对应的运行项目中去，方便地对模块进行调试和测试\n\n在想运行`may-pack`的项目中运行，`npm link may-pack` 得到 `start`\n\n## webpack分析及处理\n\n`may-pack.js`\n\n```\n#!  /usr/bin/env node\n\n// node环境\n\nconsole.log('start');\n\nlet path = require('path')\n\n// 拿到配置文件webpack.config.js\nlet config = require(path.resolve('webpack.config.js'));\n\n\nlet Compiler = require('../lib/Compiler.js');\n\nlet compiler = new Compiler(config);\n\n// 标识运行编译\ncompiler.run()\n\n```\n\n创建`lib`文件`Compiler.js`\n\n```\nlet path = require('path')\nlet fs = require('fs')\n\nclass Compiler {\n    constructor(config) {\n        // entry  output\n        this.config = config\n        // 需要保存入口文件的路径\n        this.entryId = '';   // './src/index.js'\n        // 需要保存所有的模块依赖\n        this.modules = {};\n        this.entry = config.entry  // 入口文件\n        // 工作目录\n        this.root = process.cwd(); // 当前运行npx的路径\n    }\n    \n    // 构建模块\n    buildModule(modulePath, isEntry) {\n       \n    }\n\n    // 发射文件\n    emitFile() {\n        // 用数据 渲染想要的\n    }\n\n    run() {\n        // 执行 创建模块的依赖关系\n        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径\n        // 发射打包后的文件\n        this.emitFile()\n    }\n}\n\nmodule.exports = Compiler\n\n```\n\n主要两个任务\n\n1. 拿到入口Id\n2. 解析模块，也就是实现`buildModule`方法\n\n## 创建依赖关系\n\n`may-pack`中`Compiler.js`\n\n```\nlet path = require('path')\nlet fs = require('fs')\n// babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。\n// @babel/traverse 对ast解析遍历语法树 负责替换，删除和添加节点\n// @babel/types 用于AST节点的Lodash-esque实用程序库\n// @babel/generator 结果生成\n\nlet babylon = require('babylon')\nlet traverse = require('@babel/traverse').default;\nlet type = require('@babel/types');\nlet generator = require('@babel/generator').default\nclass Compiler {\n    constructor(config) {\n        // entry  output\n        this.config = config\n        // 需要保存入口文件的路径\n        this.entryId = '';   // './src/index.js'\n        // 需要保存所有的模块依赖\n        this.modules = {};\n        this.entry = config.entry  // 入口文件\n        // 工作目录\n        this.root = process.cwd(); // 当前运行npx的路径\n\n\n    }\n    // 拿到模块内容\n    getSource (modulePath) {\n        let content = fs.readFileSync(modulePath, 'utf8')\n        return content\n    }\n    parse (source, parentPath) {\n        console.log(source, parentPath)\n    }\n    // 构建模块\n    buildModule(modulePath, isEntry) {\n        // 拿到模块内容\n        let source = this.getSource(modulePath)  // 得到入口文件的内容\n        // 模块id modulePath(需要相对路径) = modulePath(模块路径) - this.root(项目工作路径)   src/index.js\n        let moduleName = './' + path.relative(this.root, modulePath)\n        console.log(source, moduleName);  // 拿到代码 和相对路径 ./src/index.js\n        if (isEntry) {\n            this.entryId = moduleName\n        }\n        let {sourceCode, dependencies} = this.parse(source, path.dirname(moduleName))   // ./src\n        // 把相对路径和模块中的内容对应起来\n        this.modules[moduleName] = sourceCode\n    }\n\n    // 发射文件\n    emitFile() {\n        // 用数据 渲染想要的\n    }\n\n    run() {\n        // 执行 创建模块的依赖关系\n        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径\n        console.log(this.modules, this.entryId);\n        // 发射打包后的文件\n        this.emitFile()\n    }\n\n\n}\n\nmodule.exports = Compiler\n\n\n```\n\n## ast递归解析\n\n`parse`方法主要靠解析语法树来进行转义\n`babylon`  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。\n`@babel/traverse` 对ast解析遍历语法树 负责替换，删除和添加节点\n`@babel/types` 用于AST节点的Lodash-esque实用程序库\n`@babel/generator` 结果生成\n\n\n`yarn add babylon @babel/traverse @babel/types @babel/generator`\n\n`may-pack`中`Compiler.js`\n\n```\nlet path = require('path')\nlet fs = require('fs')\n// babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。\n// @babel/traverse 对ast解析遍历语法树 负责替换，删除和添加节点\n// @babel/types 用于AST节点的Lodash-esque实用程序库\n// @babel/generator 结果生成\n\nlet babylon = require('babylon')\nlet traverse = require('@babel/traverse').default;\nlet type = require('@babel/types');\nlet generator = require('@babel/generator').default\nclass Compiler {\n    constructor(config) {\n        // entry  output\n        this.config = config\n        // 需要保存入口文件的路径\n        this.entryId = '';   // './src/index.js'\n        // 需要保存所有的模块依赖\n        this.modules = {};\n        this.entry = config.entry  // 入口文件\n        // 工作目录\n        this.root = process.cwd(); // 当前运行npx的路径\n\n\n    }\n    // 拿到模块内容\n    getSource (modulePath) {\n        let content = fs.readFileSync(modulePath, 'utf8')\n        return content\n    }\n    parse (source, parentPath) {\n        // AST解析语法树\n        let ast = babylon.parse(source)\n        let dependencies = []; // 依赖的数组\n        // https://astexplorer.net/\n        traverse(ast, {\n            // 调用表达式\n            CallExpression(p) {\n                let node = p.node; //对应的节点\n                if(node.callee.name === 'require') {\n                   node.callee.name = '__webpack_require__'\n                    let moduledName = node.arguments[0].value   // 取到模块的引用名字\n                    moduledName = moduledName + (path.extname(moduledName) ? '': '.js');  // ./a.js\n                    moduledName = './' + path.join(parentPath, moduledName)  // './src/a.js'\n                    dependencies.push(moduledName)\n                    node.arguments = [type.stringLiteral(moduledName)] // 改掉源码\n                }\n            }\n        })\n        let sourceCode = generator(ast).code\n        return { sourceCode, dependencies }\n    }\n    // 构建模块\n    buildModule(modulePath, isEntry) {\n        // 拿到模块内容\n        let source = this.getSource(modulePath)  // 得到入口文件的内容\n        // 模块id modulePath(需要相对路径) = modulePath(模块路径) - this.root(项目工作路径)   src/index.js\n        let moduleName = './' + path.relative(this.root, modulePath)\n        // console.log(source, moduleName);  // 拿到代码 和相对路径 ./src/index.js\n        if (isEntry) {\n            this.entryId = moduleName\n        }\n        // 解析把source源码进行改造， 返回一个依赖列表\n        let {sourceCode, dependencies} = this.parse(source, path.dirname(moduleName))   // ./src\n        // 把相对路径和模块中的内容对应起来\n        this.modules[moduleName] = sourceCode\n        dependencies.forEach(dep => {  // 附模块的加载 递归加载\n            this.buildModule(path.join(this.root, dep), false)\n        })\n    }\n\n    // 发射文件\n    emitFile() {\n        // 用数据 渲染想要的\n    }\n\n    run() {\n        // 执行 创建模块的依赖关系\n        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径\n        console.log(this.modules, this.entryId);\n        // 发射打包后的文件\n        this.emitFile()\n    }\n\n\n}\n\nmodule.exports = Compiler\n\n```\n\n## 生成打包工具\n\n使用ejs模板\n\n`may-pack`中`main.ejs`\n\n```\n(function (modules) {\nvar installedModules = {};\n\nfunction __webpack_require__(moduleId) {\n\nif (installedModules[moduleId]) {\nreturn installedModules[moduleId].exports;\n}\nvar module = installedModules[moduleId] = {\ni: moduleId,\nl: false,\nexports: {}\n};\n\nmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\nmodule.l = true;\n\nreturn module.exports;\n}\n\n\n// Load entry module and return exports\nreturn __webpack_require__(__webpack_require__.s = \"<%-entryId %>\");\n})({\n<% for(let key in modules){ %>\n    \"<%- key %>\":\n    (function (module, exports,__webpack_require__) {\neval(`<%-modules[key] %>`);\n}),\n<% } %>\n});\n\n```\n\n[ejs入门](https://ejs.bootcss.com/)\n\n`yarn add ejs`\n\n\n`may-pack`中`Compiler.js`\n\n```\nlet ejs = require('ejs')\n```\n\n```\n// 发射文件\n    emitFile() {\n        // 用数据 渲染想要的\n        // 输出到那个目录下\n        let main = path.join(this.config.output.path, this.config.output.filename)\n        let templateStr = this.getSource(path.join(__dirname, 'main.ejs'))\n        let code = ejs.render(templateStr, { entryId: this.entryId, modules: this.modules})\n        this.assets = {}\n        // 路径对应的代码\n        this.assets[main] = code\n        fs.writeFileSync(main, this.assets[main])\n    }\n```\n\n在`webpack-training`项目中运行`npx may-pack`, 得到`bundle.js`,运行得到结果\n\n## 增加loader\n\n创建`loader`文件夹，创建`less-loader1.js`和`style-loader1.js`\n\n`yarn add less`\n\n[less使用](http://lesscss.cn/#using-less)\n\n`less-loader1.js`\n\n```\n// 将less转为css\nlet less = require('less')\n\nfunction loader(source) {\n    let css = ''\n    less.render(source, function (err, output) {\n        css = output.css\n    })\n    css = css.replace(/\\n/g, '\\\\n');\n    return css\n}\n\nmodule.exports = loader\n\n```\n\n`style-loader1.js`\n\n```\n// 将css插入到html头部\nfunction loader(source) {\n    console.log(111);\n    let style = `\n    let style = document.createElement('style')\n    style.innerHTML = ${JSON.stringify(source)}\n    document.head.appendChild(style)\n   `\n    return style\n}\nmodule.exports = loader\n\n\n// JSON.stringify(source) 可以将代码转为一行\n\n```\n\n`webpack.config.js`\n\n```\nlet path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.less$/,\n                use: [\n                    path.resolve(__dirname, 'loader', 'style-loader1'),\n                    path.resolve(__dirname, 'loader', 'less-loader1')\n                ]\n            }\n        ]\n    }\n}\n\n```\n\n创建`index.less`\n\n```\nbody {\n  background: red\n}\n```\n\n`index.js`\n\n```\n let str = require('./a.js')\n\n require('./index.less')\n\n console.log(str);\n\n```\n\n`may-pack`中`Compiler.js`\n\n```\n// 拿到模块内容\n    getSource (modulePath) {\n        // 匹配各种文件的规则\n        let rules= this.config.module.rules;   // webpack.config.js 中rules的数组\n        let content = fs.readFileSync(modulePath, 'utf8')\n\n        for (let i = 0; i < rules.length; i++) {\n            let rule = rules[i]\n            let {test, use} = rule\n            let len = use.length - 1\n\n            if (test.test(modulePath)) {\n                // console.log(use[len]);\n                function normalLoader () {\n                    // console.log(use[len--]);\n                    let loader = require(use[len--])\n                    content = loader(content)\n                    // 递归调用loader 实现转化\n                    if (len >= 0) {\n                        normalLoader()\n                    }\n                }\n                normalLoader()\n            }\n\n        }\n        return content\n    }\n```\n\n运行`npx may-pack`\n\n## 增加plugins\n\n`yarn add tapable`\n\n`may-pack`中`Compiler.js`\n\n```\nconstructor(config) {\n        // entry  output\n        this.config = config\n        // 需要保存入口文件的路径\n        this.entryId = '';   // './src/index.js'\n        // 需要保存所有的模块依赖\n        this.modules = {};\n        this.entry = config.entry  // 入口文件\n        // 工作目录\n        this.root = process.cwd(); // 当前运行npx的路径\n\n        this.hooks = {\n            entryOption: new SyncHook(),  // 入口选项\n            compile: new SyncHook(),      // 编译\n            afterCompile: new SyncHook(),  // 编译完成\n            afterPlugins: new SyncHook(),   // 编译完插件\n            run: new SyncHook(),         // 运行\n            emit: new SyncHook(),        // 发射\n            done: new SyncHook()         // 完成\n        }\n        // 如果传递了plugins参数\n        let plugins = this.config.plugins\n        if (Array.isArray(plugins)) {\n            plugins.forEach(plugin => {\n                plugin.apply(this); // 这里只是appLy方法不是改变this指向\n            })\n        }\n        this.hooks.afterPlugins.call()\n    }\n```\n\n在`webpack.config.js`中写插件方法\n\n```\nclass P {\n    apply(compiler) {   // 这里只是appLy方法不是改变this指向\n        // 绑定\n        compiler.hooks.emit.tap('emit', function () {\n            console.log('emit');\n        })\n    }\n}\n\nclass P1 {\n    apply(compiler) {   // 这里只是appLy方法不是改变this指向\n        // 绑定\n        compiler.hooks.afterPlugins.tap('emit', function () {\n            console.log('afterPlugins');\n        })\n    }\n}\n\n\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.less$/,\n                use: [\n                    path.resolve(__dirname, 'loader', 'style-loader'),\n                    path.resolve(__dirname, 'loader', 'less-loader')\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new P(),\n        new P1()\n    ]\n}\n```\n\n然后在各个地方调用\n\n`may-pack`中`may-pack.js`\n\n\n```\n.....\n// 调用\ncompiler.hooks.entryOption.call()\n// 标识运行编译\ncompiler.run()\n```\n\n`may-pack`中`Compiler.js`\n\n```\nrun() {\n        this.hooks.run.call()\n\n        this.hooks.compile.call()\n        // 执行 创建模块的依赖关系\n        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径\n        // console.log(this.modules, this.entryId);\n        this.hooks.afterCompile.call()\n        // 发射打包后的文件\n        this.emitFile()\n        this.hooks.emit.call()\n        this.hooks.done.call()\n    }\n```\n\n运行`npx may-pack`\n\n\n## loader\n\n\n[手写loader](https://juejin.im/post/59e6a5de518825469c7461da)\n\n`webapck.config.js`\n\n```\nlet path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index',\n    output: {\n        filename: 'build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js/,\n                use: 'loader1' // 如何找到这个loader1\n            }\n        ]\n    },\n}\n\n```\n\n创建`loader`文件`loader1.js`\n\n```\nconsole.log(22);\n\nfunction loader(source) {  // loader的参数就是源代码\n    return source\n}\nmodule.exports = loader\n\n```\n\n\n`webpack.config.js`\n\n```\nlet path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    resolveLoader: {\n      // 别名\n      // alias: {\n      //     loader1: path.resolve(__dirname, 'loader', 'loader1')\n      // }\n        modules: ['node_modules', path.resolve(__dirname, 'loader')]  // 先找node_modules, 再去loader中去找\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                // use: [path.resolve(__dirname, 'loader', 'loader1')]\n                use: 'loader1' // 如何找到这个loader1\n\n            },\n            // {\n            //     test: /\\.less$/,\n            //     use: [\n            //         path.resolve(__dirname, 'loader', 'style-loader'),\n            //         path.resolve(__dirname, 'loader', 'less-loader')\n            //     ]\n            // }\n        ]\n    },\n}\n\n```\n\n如何找到这个`loader1`\n\n1. 通过配别名`alias`\n2. 通过`modules`\n\n`npx webpack`\n\n## 配置多个loader\n\n1. 数组方式\n\n先分别在`loader`文件下创建，`loader2.js`和`loader3.js`\n\n```\nfunction loader(source) {  // loader的参数就是源代码\n    console.log('loader2');  // loader3.js 类似\n    return source\n}\nmodule.exports = loader\n\n```\n\n`webpack.config.js`\n\n```\nrules: [\n    {\n        test: /\\.js$/,\n        use: ['loader3', 'loader2', 'loader1']\n    },\n]\n```\n\n运行`npx webpack`,分别打出\n\n```\nloader1\nloader2\nloader3\n```\n\n2. 对象方式\n\n```\nrules: [\n    {\n        test: /\\.js$/,\n        use: ['loader3']\n    },\n    {\n        test: /\\.js$/,\n        use: ['loader2']\n    },\n    {\n        test: /\\.js$/,\n        use: ['loader1']\n    }\n]\n```\n\n运行`npx webpack`,分别打出\n\n```\nloader1\nloader2\nloader3\n```\n\n\n> `loader`的顺序: 从右到左, 从下到上\n\n\n也可以通过配置不同的参数改变`loader`的执行顺序，`pre` 前面的， `post`在后面的， `normal`正常\n\n\n```\n{\n    test: /\\.js$/,\n    use: ['loader1'],\n    enforce: \"pre\"\n},\n{\n    test: /\\.js$/,\n    use: ['loader2']\n},\n{\n    test: /\\.js$/,\n    use: ['loader3'],\n    enforce: \"post\"\n},\n```\n\n`loader` 带参数执行的顺序: `pre  -> normal -> inline -> post`\n\n`inline`为行内`loader`\n\n在`loader`文件中新建`inlin-loader`\n\n```\nfunction loader(source) {  // loader的参数就是源代码\n    console.log('inline');\n    return source\n}\nmodule.exports = loader\n\n```\n\n`src/a.js`\n\n```\nmodule.exports = 'may'\n```\n\n`src/index`\n\n```\nconsole.log('hello')\nlet srt = require('-!inline-loader!./a')\n```\n\n1. `-!`禁用`pre-loader`和 `normal-loader`来处理了\n\n```\nloader1\nloader2\nloader3\ninline\nloader3\n```\n\n\n\n2. `!`禁用`normal-loader`\n\n```\nloader1\nloader2\nloader3\nloader1\ninline\nloader3\n```\n\n\n\n3. `!!` 禁用`pre-loader`、`normal-loader`、`post-loader`,只能行内处理\n\n```\nloader1\nloader2\nloader3\ninline\n```\n\nloader 默认由两部分组成`pitch`和`normal`\n\n`user: [loader3, loader2, loader1]`\n\n\n无返回值: 先执行pitch方法,从左到右，再获取资源\n\n\n```\n    pitch loader - 无返回值\n    \npitch   loader3 → loader2 → loader1  \n                                    ↘\n                                      资源\n                                    ↙\nnormal   loader3 ← loader2 ← loader1 \n```\n\n有返回值: 直接跳过后续所有的`loader`包括自己的,跳到之前的`loader`, 可用于阻断\n\n[loader](https://webpack.docschina.org/api/loaders/)\n\n```\nuser: [loader3, loader2, loader1]\n\n    pitch loader - 有返回值\n    \npitch   loader3 → loader2  loader1  \n                     ↙               \n               有返回值               资源\n               ↙                      \nnormal  loader3  loader2  loader1 \n```\n\n`loadeer2.js`\n\n```\nfunction loader(source) {  // loader的参数就是源代码\n    console.log('loader2');\n    return source\n}\n\nloader.pitch = function () {\n    return '111'\n}\nmodule.exports = loader\n\n```\n\n结果\n\n```\nloader3\n```\n\n## `babel-loader`实现\n\n`yarn add @babel/core @babel/preset-env`\n\n`webpack.config.js`\n\n```\n{\n    test: '\\.js$/',\n    use: {\n        loader: 'babel-loader2',\n        options: {\n            presets: [\n                '@babel/preset-env'\n            ]\n        }\n    }\n}\n```\n\n在`loader`文件创建`babel-loader2.js`(如果你已经装过`babel-loader`)\n\n拿到`babel`的参数\n\n`yarn add loader-utils`\n\n\n```\n// 需要在webpack.config.js拿到babel的预设, 通过预设转换模块, 先引入babel\nlet babel = require('@babel/core')\n\n// 拿到babel的参数 需要工具 loaderUtils\nlet loaderUtils =require('loader-utils')\n\n\nfunction loader(source) {  // loader的参数就是源代码  这里的this就是loader的上下文\n    let options = loaderUtils.getOptions(this)\n    console.log(this.resourcePath, 444);   // [./src/index.js]\n    let callback = this.async(); // babel的转换是异步的,同步的返回是不行的， 不能用return  同步就是直接掉用 异步会在async中\n    babel.transform(source, {\n        ...options,\n        sourceMap: true,         // 是否设置sourceMap 还需要再webpack.config.js 中配置  devtool: 'source-map'\n        filename: this.resourcePath.split('/').pop()   //  给生成的`source-map`指定名字\n    }, function (err, result) {\n        callback(err, result.code, result.map)   // 异步 参数分别是「错误 转化后的代码 和 sourceMap」\n    })\n    console.log(options);\n    // return source  失效\n}\n\nmodule.exports = loader\n\n\n```\n\n\n`index.js`\n\n```\nclass May {\n    constructor () {\n        this.name = 'may'\n    }\n    getName () {\n        return this.name\n    }\n}\n\n\nlet may = new May()\n\nconsole.log(may.getName());\n```\n\n`npx webpack`\n\n## `banner-loader`实现(自创)\n\n给所有匹配的`js`加一个注释\n\n`webpack.config.js`\n\n```\n{    // 给所有匹配的`js`加一个注释\n    test: /\\.js$/,\n    use: {\n        loader: 'banner-loader',\n        options: {\n           text: 'may',\n           filename: path.resolve(__dirname, 'banner.js')\n        }\n    }\n}\n```\n\n`banner.js`\n\n```\n二次星球中毒\n```\n\n\n在`loader`文件创建`banner-loader.js`\n\n`yarn add schema-utils` 校验自己写的`loader`格式是否正确\n\n[schema-utils](https://github.com/webpack-contrib/schema-utils)\n\n`banner-loader.js`\n\n```\n// 拿到loader的配置\nlet loaderUtils = require('loader-utils')\n// 校验loader\nlet validateOptions = require('schema-utils')\n// 读取文件\nlet fs = require('fs')  // 异步\n\nfunction loader(source) {  // loader的参数就是源代码\n    let options = loaderUtils.getOptions(this)\n    let callback = this.async()  // 读取文件是异步\n    let schema = {\n        type: 'object',\n        properties: {\n            text: {\n                type: 'string'\n            },\n            filename: {\n                type: 'string'\n            }\n        }\n    }\n    validateOptions(schema, options, 'banner-loader')  // 自己的校验格式， 自己的写的配置， 对应的loader名字\n    if (options.filename) {\n        this.cacheable(false)  // 不要缓存  如果有大量计算 推荐缓存\n        // this.cacheable && this.cacheable()\n        this.addDependency(options.filename) // 自动增加依赖\n        fs.readFile(options.filename, 'utf8', function (err, data) {\n            callback(err, `/**${data}**/${source}`)\n        })\n    } else {\n        callback(null, `/**${options.text}**/${source}`)\n    }\n    return source\n}\nmodule.exports = loader\n\n```\n\n优化:\n\n1. 修改`banner.js`的内容后, `webpack`进行监控，打包`webapck.config.js`配置`watch: true`\n2. `loader`缓存\n\n## 实现`file-loader`和`url-loader`\n\n`yarn add mime`\n\n其主要用途是设置某种扩展名的文件的响应程序类型\n\n[mime](https://github.com/broofa/node-mime#readme)\n\n创建`file-loader.js1`\n\n```\n// 拿到babel的参数 需要工具 loaderUtils\nlet loaderUtils = require('loader-utils')\n\nfunction loader(source) {  // loader的参数就是源代码\n    // file-loader需要返回路径\n    let filename = loaderUtils.interpolateName(this, '[hash].[ext]', {content: source })\n    this.emitFile(filename, source) // 发射文件\n    console.log('loader1');\n    return `module.exports=\"${filename}\"`\n}\nloader.raw = true // 二进制\nmodule.exports = loader\n\n```\n\n创建`url-loader1.js`\n\n```\n// 拿到babel的参数 需要工具 loaderUtils\nlet loaderUtils = require('loader-utils')\nlet mime = require('mime')  // 途是设置某种扩展名的文件的响应程序类型\n\nfunction loader(source) {  // loader的参数就是源代码\n    let {limit} = loaderUtils.getOptions(this)\n    console.log(this.resourcePath);\n    if (limit && limit > source.length) {\n        return `module.exports=\"data:${mime.getType(this.resourcePath)};base64,${source.toString('base64')}\"`\n    } else {\n        return require('./file-loader1').call(this, source)\n    }\n}\nloader.raw = true // 二进制\nmodule.exports = loader\n\n```\n\n`webpack.config.js`\n\n```\n{\n    test: /\\.png$/,\n    // 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径\n    // use: 'file-loader'\n    // 处理路径\n    use: {\n        loader: 'url-loader1',\n        options: {\n            limit: 200 * 1024\n        }\n    }\n}\n```\n\n`index.js`引入图片\n\n```\nimport p from './photo.png'\n\nlet img = document.createElement('img')\nimg.src = p\ndocument.body.appendChild(img);\n\n```\n\n\n## `less-loader`和`css-loader`\n\n\n先安装`less`\n\n分别创建`style-loader2` `css-loader2` `less-loader2`\n\n`style-loader1` 与 `less-loader1` 同之前的\n\n\n## `css-loader`\n\n主要用来处理`css`中的图片链接，需要把`url`转换成`require`\n\n\n`webpack.config.js`\n\n```\n{\n    test: /\\.png$/,\n    // 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径\n    // use: 'file-loader'\n    // 处理路径\n    use: {\n        loader: 'url-loader1',\n        options: {\n            limit: 200 * 1024\n        }\n    }\n},\n{\n    test: /\\.less$/,\n    use: ['style-loader2', 'css-loader2', 'less-loader2']\n}\n```\n\n创建`index.less`\n\n```\n@base: #f938ab;\nbody {\n  background: @base;\n  background: url(\"./photo.png\");\n}\n```\n\n`less-loader2.js`\n\n```\n// 将less转为css\nlet less = require('less')\n\nfunction loader(source) {\n    let css = ''\n    // console.log(source, 2222);\n    less.render(source, function (err, output) {\n        // console.log(output);\n        css = output.css\n    })\n    // css = css.replace(/\\n/g, '\\\\n');\n    return css\n}\n\nmodule.exports = loader\n```\n\n\n`css-loader2.js`\n\n```\n// css-loader 用来解析@import这种语法,包括css中引入的图片\nfunction loader(source) {\n    let reg = /url\\((.+?)\\)/g   // 匹配括号\n\n    let pos = 0;\n    let current;\n\n    let arr = ['let list = []']\n\n    while (current = reg.exec(source)) {\n        let [matchUrl, g] = current   // matchUrl -> 'url(\"./photo.png\")', g  -> '\"./photo.png\"'\n        // console.log(matchUrl, g, 88);\n        let lastIndex = reg.lastIndex - matchUrl.length    // 拿到css从开通到地址链接之前的index\n        arr.push(`list.push(${JSON.stringify(source.slice(pos, lastIndex))})`)  // 拼入开始和地址之前的代码\n        pos = reg.lastIndex\n        arr.push(`list.push('url('+ require(${g}) +')')`)    // 拼入图片地址\n    }\n    arr.push(`list.push(${JSON.stringify(source.slice(pos))})`)  // 拼入地址到结尾的代码\n    arr.push(`module.exports = list.join('')`)\n    console.log(arr.join('\\r\\n'));\n    // let list = []\n    // list.push(\"body {\\\\n  background: #f938ab;\\\\n  background: \")\n    // list.push('url('+ require(\"./photo.png\") +')')\n    // list.push(\";\\\\n}\\\\n\")\n    // module.exports = list.join('')\n\n    return arr.join('\\r\\n')\n}\nmodule.exports = loader\n\n```\n\n`style-loader2.js`\n\n```\nlet loaderUtils = require('loader-utils')\n\n// 将css插入到html头部\nfunction loader(source) {\n    let str = `\n    let style = document.createElement('style')\n    style.innerHTML = ${JSON.stringify(source)}\n    document.head.appendChild(style)\n   `\n    return str\n}\n\n\n// style-loader写了pitch,有返回后面的跳过，自己的写不会走\nloader.pitch = function (remainingRequest) {  // 剩余的请求\n    console.log(loaderUtils.stringifyRequest(this, '!!' + remainingRequest, 99999999))\n    // 让style-loader 处理 less-loader 和css-loader拼接的结果\n    // 得到 /Users/liuhuimin/work/webpack/loader/css-loader2.js!/Users/liuhuimin/work/webpack/loader/less-loader2.js!/Users/liuhuimin/work/webpack/src/index.less\n    // 剩余的请求 less-loader!css-loader!./index.less\n    // console.log(remainingRequest, 1223);\n    // require返回的就是css-loader处理好的结果require('!!css-loader!less-loader!./index.less')\n    let str = `\n    let style = document.createElement('style')\n    style.innerHTML = require(${loaderUtils.stringifyRequest(this, '!!' + remainingRequest)})\n    document.head.appendChild(style)\n   `\n    // stringifyRequest 绝对路径转相对路径\n    return str\n}\nmodule.exports = loader\n\n```\n\n\n```\nuser: ['style-loader2', 'css-loader2', 'less-loader2']\n\n    pitch loader - 有返回值\n    \npitch   style-loader2 → css-loader2  less-loader2  \n                     ↙               \n               有返回值               资源\n               ↙                      \nnormal  style-loader2  css-loader2  less-loader2\n```\n\n在`style-loader2`中 引用了`less-loader` `css-loader` 和`less`文件\n\n\n## webpack 中的插件\n\n`yarn add webpack webpack-cil -D`\n\n`webpack.config.js`\n\n```\nlet path = require('path')\nlet DonePlugin = require('./plugins/DonePlugins')\nlet AsyncPlugins = require('./plugins/AsyncPlugins')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n        new DonePlugin(),    // 同步\n        new AsyncPlugins()   // 异步\n    ]\n}\n\n```\n\n`node_modules/webpack/lib`中查看`Compiler.js`\n\n1. 同步`plugins/DonePlugins`\n\n打包完成\n\n```\nclass DonePlugins {\n    apply (compiler) {\n        console.log(1);\n        compiler.hooks.done.tap('DonePlugin', (stats) => {\n            console.log('编译完成');\n        })\n    }\n}\n\n\nmodule.exports = DonePlugins\n\n```\n\n\n2. 异步`plugins/AsyncPlugins`\n\n```\nclass AsyncPlugins {\n    apply (compiler) {\n        console.log(2);\n        compiler.hooks.emit.tapAsync('AsyncPlugin', (complete, callback) => {\n            setTimeout(() => {\n                console.log('文件发射出来');\n                callback()\n            }, 1000)\n        })\n        compiler.hooks.emit.tapPromise('AsyncPlugin', (complete, callback) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('文件发射出来 222');\n                    resolve()\n                }, 1000)\n            })\n        })\n    }\n}\n\n\nmodule.exports = AsyncPlugins\n\n```\n\n## 文件列表插件\n\n希望生成一个文件描述打包出来的文件\n\n在`plugins`中新建`FileListPlugin`\n\n```\nclass FileListPlugin {\n    constructor ({filename}) {\n        this.filename = filename\n    }\n    apply (compiler) {\n        // 文件已经准备好了 要进行发射\n        // emit\n        compiler.hooks.emit.tap('FileListPlugin', (compilation) => {\n            let assets = compilation.assets;\n            console.log(assets, 55);\n            let content = `## 文件名  资源大小\\r\\n`\n            // [ [bundls.js, {}], [index.html, {}]]\n            Object.entries(assets).forEach(([filename, stateObj]) => {\n                content += `- ${filename}    ${stateObj.size()}\\r\\n`\n            })\n            // 资源对象\n            assets[this.filename] = {\n                source () {\n                    return content;\n                },\n                size () {\n                    return content.length\n                }\n            }\n        })\n    }\n}\n\nmodule.exports = FileListPlugin\n\n```\n\n```\nlet path = require('path')\nlet DonePlugin = require('./plugins/DonePlugins')\nlet AsyncPlugins = require('./plugins/AsyncPlugins')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\nlet FileListPlugin = require('./plugins/FileListPlugin')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n        new DonePlugin(),\n        new AsyncPlugins(),\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            filename: 'index.html'\n        }),\n        new FileListPlugin({\n            filename: 'list.md'\n        })\n    ]\n}\n\n```\n\n生成`list.md`\n\n\n## 内联的`webpack`插件\n\n新建`index.css`引入`index.js`\n\n`yarn add css-loader mini-css-extract-plugin -D`\n\n希望打包后`css、js`内联在`index.html`文件中\n\n创建`plugins`中`InlineSourcePlugins.js`\n\n`yarn add --dev html-webpack-plugin@next`\n\n[HTML Webpack Plugin](https://github.com/jantimon/html-webpack-plugin)\n\n`webpack.config.js`\n\n```\nlet path = require('path')\nlet DonePlugin = require('./plugins/DonePlugins')\nlet AsyncPlugins = require('./plugins/AsyncPlugins')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\nlet FileListPlugin = require('./plugins/FileListPlugin')\n\nlet InlineSourcePlugins = require('./plugins/InlineSourcePlugins')\n\nlet MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n    mode: 'production',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [MiniCssExtractPlugin.loader, 'css-loader']\n            }\n        ]\n    },\n    plugins: [\n        // new DonePlugin(),\n        // new AsyncPlugins(),\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            filename: 'index.html'\n        }),\n        new MiniCssExtractPlugin({\n            filename: 'index.css'\n        }),\n        new InlineSourcePlugins({\n            match: /\\.(js|css)/\n        }),\n        // new FileListPlugin({\n        //     filename: 'list.md'\n        // })\n    ]\n}\n\n```\n\n`InlineSourcePlugins.js`\n\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\n// 把外链的标签编程内联的标签\nclass InlineSourcePlugins {\n    constructor({match}) {\n        this.reg = match  // 正则\n    }\n\n    // 处理某一个标签\n    processTag(tag, compilation) {\n        let newTag = {}\n        let url = ''\n        if (tag.tagName === 'link' && this.reg.test(tag.attributes.href)) {\n            newTag = {\n                tagName: 'style',\n                attributes: {type: 'text/css'}\n            }\n            url = tag.attributes.href\n        } else if (tag.tagName === 'script' && this.reg.test(tag.attributes.src)) {\n            newTag = {\n                tagName: 'script',\n                attributes: {type: 'application/javascript'}\n            }\n            url = tag.attributes.src\n        }\n        if (url) {\n            newTag.innerHTML = compilation.assets[url].source(); // 文件内容放到innerHTML属性中\n            delete compilation.assets[url]   // 删除原有的资源\n            return newTag\n            // console.log(compilation.assets[url].source());\n        }\n        return tag\n    }\n\n    // 处理引入标签的数据\n    processTags(data, compilation) {\n        let headTags = []\n        let bodyTags = []\n        data.headTags.forEach(headTag => {\n            headTags.push(this.processTag(headTag, compilation))\n        })\n        data.bodyTags.forEach(bodyTag => {\n            bodyTags.push(this.processTag(bodyTag, compilation))\n        })\n        console.log({...data, headTags, bodyTags})\n        return {...data, headTags, bodyTags}\n    }\n\n\n\n    apply(compiler) {\n        // 通过webpackPlugin来实现  npm搜索  html-webpack-plugin\n        compiler.hooks.compilation.tap('InlineSourcePlugins', (compilation) => {\n            HtmlWebpackPlugin.getHooks(compilation).alterAssetTagGroups.tapAsync(\n                'alertPlugin',\n                (data, callback) => {\n                    // console.log('======');\n                    // console.log(data) // 插入html标签的数据\n                    // console.log('======');\n                    data = this.processTags(data, compilation)   // compilation.assets 资源的链接\n                    callback(null, data)\n                })\n        })\n\n    }\n}\n\nmodule.exports = InlineSourcePlugins\n\n```\n\n\n## 打包后自动发布\n\n打包好的文件自动上传致七牛\n\n需要这几个参数\n\n```\nbucket: ''  // 七牛的存储空间\ndomain: '',\naccessKey: '', // 七牛云的两对密匙\nsecretKey: '' // 七牛云的两对密匙\n```\n\n注册七牛，并在对象存储里面,新建存储空间列表`test`,`bucket: 'test'`\n\n内容管理外链接默认域名 `domain: 'xxxxxxxx'`\n\n右上角个人面板里面个人中心,密钥管理分别对应`accessKey`和`secretKey`\n\n[进入开发者中心](https://developer.qiniu.com/) -> SDK&工具 -> 官方SDK -> Node服务端文档 —> 文件上传\n\n\n[node文件上传](https://developer.qiniu.com/kodo/sdk/1289/nodejs)\n\n\n\n`npm install qiniu`\n\n[compiler-hooks](https://webpack.docschina.org/api/compiler-hooks)\n\n\n`webpack.config.js`\n\n```\nplugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            filename: 'index.html'\n        }),\n        new MiniCssExtractPlugin({\n            filename: 'index.css'\n        }),\n        new UploadPlugin({\n            bucket: 'test',  // 七牛的存储空间\n            domain: 'poyrjyh1b.bkt.clouddn.com',\n            accessKey: 'xxxxxx', // 七牛云的两对密匙\n            secretKey: 'yyyyyy' // 七牛云的两对密匙\n        })\n    ]\n```\n\n`UploadPlugin.js`\n\n```\nlet qiniu = require('qiniu')\nlet path = require('path')\n\nclass UploadPlugin {\n    constructor (options = {}) {\n        // 参考 https://developer.qiniu.com/kodo/sdk/1289/nodejs\n        let { bucket = '', domain = '', accessKey = '', secretKey = ''} = options\n        let mac = new qiniu.auth.digest.Mac(accessKey, secretKey)\n        let putPolicy = new qiniu.rs.PutPolicy({\n            scope: bucket\n        });\n        this.uploadToken = putPolicy.uploadToken(mac)\n        let config = new qiniu.conf.Config();\n        this.formUploader = new qiniu.form_up.FormUploader(config)\n        this.putExtra = new qiniu.form_up.PutExtra()\n    }\n    apply (compiler) {\n        compiler.hooks.afterEmit.tapPromise('UploadPlugin', (complication) => {\n            let assets = complication.assets\n            let promise = []\n            Object.keys(assets).forEach(filename => {\n                promise.push(this.upload(filename))\n            })\n            return Promise.all(promise)\n        })\n    }\n\n    upload (filename) {\n        return new Promise((resolve, reject) => {\n            let localFile = path.resolve(__dirname, '../dist', filename)\n            this.formUploader.putFile(this.uploadToken, filename, localFile, this.putExtra, function(respErr,\n                                                                                 respBody, respInfo) {\n                if (respErr) {\n                    reject(respErr)\n                }\n                if (respInfo.statusCode == 200) {\n                    resolve(respBody)\n                } else {\n                    console.log(respInfo.statusCode)\n                    console.log(respBody)\n                }\n            });\n        })\n    }\n}\n\nmodule.exports = UploadPlugin\n\n```","source":"_posts/webpack-multi-config.md","raw":"---\ntitle: 继续学习webpack，webpack的多入口，多配置文件等.\ndate: 2020-06-06 15:06:30\ntags: webpack\ncategories: webpack\n---\n\n<div class='post-summary notification is-warning'>\n    <p>\n        最近学习了node，想再复习一下vue，就准备使用webpack做一个vue+node的后台管理系统，但是刚写一点就发现vue对spa很友好，即单页面多应用，我想在这个后台管理系统实现登录注册以及其他功能，涉及到多个页面，以之前学习的webpack已经不能满足这个项目的需求，所以想重新学习一下webpack的其他稍微进阶的内容。\n    </p>\n</div>\n\n<!--more-->\n\n- [安装前先npm初始化](#%E5%AE%89%E8%A3%85%E5%89%8D%E5%85%88npm%E5%88%9D%E5%A7%8B%E5%8C%96)\n- [本地服务](#%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1)\n- [复制html](#%E5%A4%8D%E5%88%B6html)\n- [处理css](#%E5%A4%84%E7%90%86css)\n- [处理less](#%E5%A4%84%E7%90%86less)\n- [抽离css文件，通过link引入](#%E6%8A%BD%E7%A6%BBcss%E6%96%87%E4%BB%B6%E9%80%9A%E8%BF%87link%E5%BC%95%E5%85%A5)\n- [压缩css和js](#%E5%8E%8B%E7%BC%A9css%E5%92%8Cjs)\n- [给css加上兼容浏览器的前缀](#%E7%BB%99css%E5%8A%A0%E4%B8%8A%E5%85%BC%E5%AE%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%89%8D%E7%BC%80)\n- [es6 转 es5](#es6-%E8%BD%AC-es5)\n- [es 7的语法](#es-7%E7%9A%84%E8%AF%AD%E6%B3%95)\n- [全局变量引入](#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%BC%95%E5%85%A5)\n- [webpack图片打包](#webpack%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85)\n- [当图片小于多少，用base64](#%E5%BD%93%E5%9B%BE%E7%89%87%E5%B0%8F%E4%BA%8E%E5%A4%9A%E5%B0%91%E7%94%A8base64)\n- [打包文件分类](#%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB)\n- [希望输出的时候，给这些`css\\img`加上前缀，传到服务器也能访问](#%E5%B8%8C%E6%9C%9B%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E7%Bimg%E5%8A%A0%E4%B8%8A%E5%89%8D%E7%BC%80%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E8%83%BD%E8%AE%BF%E9%97%AE)\n- [如果只希望处理图片](#%E5%A6%82%E6%9E%9C%E5%8F%AA%E5%B8%8C%E6%9C%9B%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87)\n- [打包多页应用](#%E6%89%93%E5%8C%85%E5%A4%9A%E9%A1%B5%E5%BA%94%E7%94%A8)\n- [配置`source-map`](#%E9%85%8D%E7%BD%AEsource-map)\n- [`watch` 改完代表重新打包实体](#watch-%E6%94%B9%E5%AE%8C%E4%BB%A3%E8%A1%A8%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%E5%AE%9E%E4%BD%93)\n- [`webpack`的其他三个小插件](#webpack%E7%9A%84%E5%85%B6%E4%BB%96%E4%B8%89%E4%B8%AA%E5%B0%8F%E6%8F%92%E4%BB%B6)\n- [`webpack` 跨域](#webpack-%E8%B7%A8%E5%9F%9F)\n- [如果后端给的请求没有API 「跨域」](#%E5%A6%82%E6%9E%9C%E5%90%8E%E7%AB%AF%E7%BB%99%E7%9A%84%E8%AF%B7%E6%B1%82%E6%B2%A1%E6%9C%89api-%E8%B7%A8%E5%9F%9F)\n- [前端只想单纯mock数据 「跨域」](#%E5%89%8D%E7%AB%AF%E5%8F%AA%E6%83%B3%E5%8D%95%E7%BA%AFmock%E6%95%B0%E6%8D%AE-%E8%B7%A8%E5%9F%9F)\n- [有服务端，不用代理, 服务端启动webpack 「跨域」](#%E6%9C%89%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8D%E7%94%A8%E4%BB%A3%E7%90%86-%E6%9C%8F%E5%90%AF%E5%8A%A8webpack-%E8%B7%A8%E5%9F%9F)\n- [webpack解析resolve](#webpack%E8%A7%A3%E6%9E%90resolve)\n- [但是每次引入都很长，如何优雅引入](#%E4%BD%86%E6%98%AF%E6%AF%8F%E6%AC%A1%E5%BC%95%E5%85%A5%E9%83%BD%E5%BE%88%E9%95%BF%E5%A6%82%E4%B%9B%85%E5%BC%95%E5%85%A5)\n- [省略扩展名](#%E7%9C%81%E7%95%A5%E6%89%A9%E5%B1%95%E5%90%8D)\n- [定义环境变量](#%E5%AE%9A%E4%B9%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)\n- [区分两个不同的环境](#%E5%8C%BA%E5%88%86%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E7%8E%AF%E5%A2%83)\n- [webpack 优化](#webpack-%E4%BC%98%E5%8C%96)\n- [优化：当某些包是独立的个体没有依赖](#%E4%BC%98%E5%8C%96%E5%BD%93%E6%9F%90%E4%BA%9B%E5%8C%85%E6%98%AF%E7%8B%AC%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BD%93%E6%B2%A1%E6%9C%89%E4%BE%9D%E8%B5%96)\n- [优化：规则匹配设置范围](#%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99%E5%8C%B9%E9%85%8D%E8%AE%BE%E7%BD%AE%E8%8C%83%E5%9B%B4)\n- [优化：忽略依赖中不必要的语言包](#%E4%BC%98%E5%8C%96%E5%BF%BD%E7%95%A5%E4%BE%9D%E8%B5%96%E4%B8%AD%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%A8%80%E5%8C%85)\n- [动态链接库](#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93)\n- [多线程打包happypack](#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85happypack)\n- [webpack 自带的优化](#webpack-%E8%87%AA%E5%B8%A6%E7%9A%84%E4%BC%98%E5%8C%96)\n- [抽取公共代码](#%E6%8A%BD%E5%8F%96%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81)\n- [懒加载(延迟加载)](#%E6%87%92%E5%8A%A0%E8%BD%BD%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD)\n- [热更新(当页面改变只更新改变的部分，不重新打包)](#%E7%83%AD%E6%9B%B4%E6%96%B0%E5%BD%93%E9%A1%B5%E9%9D%A2%E6%94%B9%E5%8F%98%E5%8F%AA%E6%9B%B4%E6%96%B0%E6%94%B9%E5%8F%98%E7%9A%84%E9%83%A8%E5%88%86%E4%B8%8D%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85)\n- [tapable介绍 - SyncHook](#tapable%E4%BB%8B%E7%BB%8D---synchook)\n- [tapable介绍 - SyncBailHook](#tapable%E4%BB%8B%E7%BB%8D---syncbailhook)\n- [tapable介绍 - SyncWaterfallHook](#tapable%E4%BB%8B%E7%BB%8D---syncwaterfallhook)\n- [tapable介绍 - SyncLoopHook](#tapable%E4%BB%8B%E7%BB%8D---syncloophook)\n- [`AsyncParallelHook` 与 `AsyncParallelBailHook`](#asyncparallelhook-%E4%B8%8E-asyncparallelbailhook)\n  + [AsyncParallelHook](#asyncparallelhook)\n  + [AsyncParallelBailHook](#asyncparallelbailhook)\n- [异步串行 —— AsyncSeriesHook](#%E5%BC%82%E6%AD%A5%E4%B8%B2%E8%A1%8C--asyncserieshook)\n- [异步串行 —— AsyncSeriesWaterfallHook](#%E5%BC%82%E6%AD%A5%E4%B8%B2%E8%A1%8C--asyncserieswaterfallhook)\n- [手写webpack](#%E6%89%8B%E5%86%99webpack)\n- [webpack分析及处理](#webpack%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%84%E7%90%86)\n- [创建依赖关系](#%E5%88%9B%E5%BB%BA%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB)\n- [ast递归解析](#ast%E9%80%92%E5%BD%92%E8%A7%A3%E6%9E%90)\n- [生成打包工具](#%E7%94%9F%E6%88%90%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7)\n- [增加loader](#%E5%A2%9E%E5%8A%A0loader)\n- [增加plugins](#%E5%A2%9E%E5%8A%A0plugins)\n- [loader](#loader)\n- [配置多个loader](#%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAloader)\n- [`babel-loader`实现](#babel-loader%E5%AE%9E%E7%8E%B0)\n- [`banner-loader`实现(自创)](#banner-loader%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%88%9B)\n- [实现`file-loader`和`url-loader`](#%E5%AE%9E%E7%8E%B0file-loader%E5%92%8Curl-loader)\n- [`less-loader`和`css-loader`](#less-loader%E5%92%8Ccss-loader)\n- [`css-loader`](#css-loader)\n- [webpack 中的插件](#webpack-%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6)\n- [文件列表插件](#%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6)\n- [内联的`webpack`插件](#%E5%86%85%E8%81%94%E7%9A%84webpack%E6%8F%92%E4%BB%B6)\n- [打包后自动发布](#%E6%89%93%E5%8C%85%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83)\n\n## 安装前先npm初始化\n\n```\nnpm init -y\nnpm i webpack webpack-cli -D\n```\n\n\n```js\nlet path = require('path')   // 相对路径变绝对路径\n\nmodule.exports = {\n  mode: 'production', // 模式 默认 production development\n  entry: './src/index',    // 入口\n  output: {\n    filename: 'bundle.[hash:8].js',   // hash: 8只显示8位\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: ''  // // 给所有打包文件引入时加前缀，包括css，js，img，如果只想处理图片可以单独在url-loader配置中加publicPath\n  }\n}\n```\n\n## 本地服务\n\n`npm i webpack-dev-server -D`\n\n```\ndevServer: {\n  port: 3000,\n  progress: true          // 滚动条\n  contentBase: './build'  // 起服务的地址\n  open: true              // 自动打开浏览器\n  compress： true         // gzip压缩\n}\n```\n\n\n## 复制html\n\n`npm i html-webpack-plugin -D`\n\n```\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\nplugins: [ // 放着所有webpack插件\n  new HtmlWebpackPlugin({ // 用于使用模板打包时生成index.html文件，并且在run dev时会将模板文件也打包到内存中\n    template: './index.html', // 模板文件\n    filename: 'index.html', // 打包后生成文件\n    hash: true, // 添加hash值解决缓存问题\n    minify: { // 对打包的html模板进行压缩\n      removeAttributeQuotes: true, // 删除属性双引号\n      collapseWhitespace: true // 折叠空行变成一行\n    }\n  })\n]\n\n```\n\n[html-webpack-plugin#options](https://github.com/jantimon/html-webpack-plugin#options)\n\n\n## 处理css\n\n`npm i css-loader style-loader -D`\n\n```\n// css-loader   作用：用来解析@import这种语法\n// style-loader 作用：把 css 插入到head标签中\n// loader的执行顺序： 默认是从右向左（从下向上）\nmodule: {    // 模块\n  rules: [   // 规则\n    // style-loader 把css插入head标签中\n    // loader 功能单一\n    // 多个loader 需要 []\n    // 顺便默认从右到左\n    // 也可以写成对象方式\n    {\n      test: /\\.css$/,   // css 处理\n      // use: 'css-loader'\n      // use: ['style-loader', 'css-loader'],\n      use: [\n        // {\n        //     loader: 'style-loader',\n        //     options: {\n        //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n        //     }\n        // },\n        MiniCssExtractPlugin.loader,\n        'css-loader', // css-loader 用来解析@import这种语法,\n        'postcss-loader'\n      ]\n    }\n  ]\n}\n```\n\n\n## 处理less\n\n`npm i less-loader`\n\n```\n{\n  test: /\\.less$/,   // less 处理\n  // use: 'css-loader'\n  // use: ['style-loader', 'css-loader'],\n  use: [\n    // {\n    //     loader: 'style-loader',\n    //     options: {\n    //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n    //     }\n    // },\n    MiniCssExtractPlugin.loader,   // 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置\n    'css-loader', // css-loader 用来解析@import这种语法\n    'postcss-loader',\n    'less-loader' // less-loader less -> css\n    // sass node-sass sass-loader\n    // stylus stylus-loader\n  ]\n}\n```\n\n[less-loader](https://webpack.js.org/loaders/less-loader/#src/components/Sidebar/Sidbar.jsx)\n\n## 抽离css文件，通过link引入\n\n`yarn add mini-css-extract-plugin -D`\n\n[mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin)\n\n```\nlet MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\n// 压缩css\n\nplugins: [\n  new MiniCssExtractPlugin({\n      filename: 'css/main.css'\n  })\n]\n\n{\n  test: /\\.css$/,   // css 处理\n  // use: 'css-loader'\n  // use: ['style-loader', 'css-loader'],\n  use: [\n    // {\n    //     loader: 'style-loader',\n    //     options: {\n    //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n    //     }\n    // },\n    // 此时不需要style-loader\n    MiniCssExtractPlugin.loader,   // 抽离\n    'css-loader', // css-loader 用来解析@import这种语法,\n    'postcss-loader'\n  ]\n}\n\n```\n\n抽离css插件文件时可使用`optimize-css-assets-webpack-plugin`优化压缩css以及js文件\n\n## 压缩css和js\n\n```\n// 用了`mini-css-extract-plugin`抽离css为link需使用`optimize-css-assets-webpack-plugin`进行压缩css,使用此方法压缩了css需要`uglifyjs-webpack-plugin`压缩js\nconst OptimizeCSSAssetsPlugin = require(\"optimize-css-assets-webpack-plugin\")\nconst UglifyJsPlugin = require(\"uglifyjs-webpack-plugin\")\n\nmodule.exports = {\n  optimization: {              // 优化项\n    minimizer: [\n      new UglifyJsPlugin({     // 优化js\n        cache: true,           // 是否缓存\n        parallel: true,        // 是否并发打包\n        // sourceMap: true     // 源码映射 set to true if you want JS source maps\n      }),\n      new OptimizeCSSAssetsPlugin({})    // css 的优化\n    ]\n  },\n  mode: 'production',\n  entry: '',\n  output: {},\n}\n\n```\n\n## 给css加上兼容浏览器的前缀\n\n`yarn add postcss-loader autoprefixer -D`\n\n```\n// css\n{\n  test: /\\.css$/,   // css 处理\n  // use: 'css-loader'\n  // use: ['style-loader', 'css-loader'],\n  use: [\n    // {\n    //     loader: 'style-loader',\n    //     options: {\n    //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n    //     }\n    // },\n    MiniCssExtractPlugin.loader,\n    'css-loader', // css-loader 用来解析@import这种语法,\n    'postcss-loader'\n  ]\n}\n// less\n{\n  test: /\\.less$/,   // less 处理\n  // use: 'css-loader'\n  // use: ['style-loader', 'css-loader'],\n  use: [\n    // {\n    //     loader: 'style-loader',\n    //     options: {\n    //         insertAt: 'top' // 将css标签插入最顶头  这样可以自定义style不被覆盖\n    //     }\n    // },\n    MiniCssExtractPlugin.loader,   // 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置\n    'css-loader', // css-loader 用来解析@import这种语法\n    'postcss-loader',\n    'less-loader' // less-loader less -> css\n    // sass node-sass sass-loader\n    // stylus stylus-loader\n  ]\n},\n```\n\npostcss 需要配置文档   `postcss.config1.js`\n\n[postcss-loader](https://github.com/postcss/postcss-loader)\n\n```\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')\n  ]\n}\n```\n\n## es6 转 es5\n\n`npm i babel-loader @babel/core  @babel/preset-env -D`\n\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [ //预设\n              '@babel/preset-env' \n            ],\n            plugins:[\n              // 转es7的语法\n              [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n              [\"@babel/plugin-proposal-class-properties\", { \"loose\" : true }]\n            ]\n          }\n        },\n        exclude: /node_modules/\n      }\n    ]\n  }\n}\n\n```\n\n\n## 转es7的语法\n\n```\n// 转class\nnpm i @babel/plugin-proposal-class-properties -D\n\n// 转装饰器\nnpm i @babel/plugin-proposal-decorators -D\n```\n\n配置如上\n\n### 其他不兼容的高级语法\n\n```\n使用 @babel/polyfill\n```\n\n## 语法检查 eslint\n\n`npm i eslint eslint-loader -S`\n\n根目录添加 `.eslintrc.json` 配置文件\n\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'eslint-loader',\n          options: {\n            enforce: 'pre'  // previous优先执行  post-普通loader之后执行\n          }\n        }\n      },\n      {\n        test: /\\.js$/,      // mormal 普通的loader\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [ //预设\n              '@babel/preset-env' \n            ]\n          }\n        },\n        exclude: /node_modules/\n      }\n    ]\n  }\n}\n\n```\n\n## 全局变量引入\n\njquery的引入\n\n```\nnpm i jquery -S\n```\n\n```\nlet webpack = require('webpack')\n\nnew webpack.ProvidePlugin({\n  $: 'jquery'\n})\n```\n\n其他情况\n\n1. 暴露全局\n\n`npm i expose-loader -D` 暴露全局的`loader`\n\n#### 法1：\n\n可以在js中 `import $ from 'expose-loader?$!jquery'`   // 全局暴露jquery为$符号\n\n可以调用`window.$`\n\n#### 法2：\n\n也可在`webpack.config.js` 中配置 `rules`\n\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve('jquery'),\n        use: 'expose-loader?$'\n      }\n    ]\n  }\n}\n\n```\n\n以后在`.js`文件中引入\n\n```\nimport $ from 'jquery'\n```\n\n#### 法3. 如何在每个模块中注入：\n\n```\nlet webpack = require('webpack')\n\nmodule.exports = {\n  plugins: [\n    new webpack.ProvidePlugin({\n      $: 'jquery'\n    })\n  ]\n}\n\n之后代码内直接使用 $\n```\n\n#### 法4：\n\n在`index.html`中通过`script`标签引入`jquery`, 但是在`js`中，用`import`会重新打包`jquery`,如何避免\n\n从输出的bundle 中排除依赖\n\n```\nmodule.exports = {\n  externals: { // 告知webpack是外部引入的，不需要打包\n    jquery: 'jQuery'\n  }\n}\n\n```\n\n此时在index.js上\n\n```\nimport $ from 'jquery'\n\nconsole.log($)\n```\n\n## webpack图片打包\n\n1. js中创建\n2. css中引入\n3. `<img src=\"\">`\n\n`yarn add file-loader -D`\n\n适合一二情况\n\n```\nmodule.export={\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: 'file-loader'\n      }\n    ]\n  }\n}\n\n```\n\n默认会内部生成一张图片到build,生成图片的路径返回回来\n\n第一种情况: 图片地址要`import`引入，直接写图片的地址，会默认为字符串\n\n```\nimport logo from './logo.png'\n\nlet image = new Image()\nimage.src = logo\ndocument.body.appendChild(image)\n```\n\n第二种情况: `css-loader`会将`css`里面的图片转为`require`的格式\n\n```\ndiv {\n  background: url(\"./logo.png\");\n}\n```\n\n第三种情况: 解析`html`中的`image`\n\n`yarn add html-withimg-loader -D`\n\n```\n{\n  test: /\\.html$/,\n  use: 'html-withimg-loader'\n}\n```\n\n## 当图片小于多少，用base64\n\n`yarn add url-loader -D`\n\n如果过大，才用`file-loader`\n\n```\n{\n  test: /\\.(png|jpg|gif)$/,\n  // 当图片小于多少，用base64,否则用file-loader产生真实的图片\n  use: {\n    loader: 'url-loader',\n    options: {\n      limit: 200 * 1024,          // 小于200k变成base64\n      // outputPath: '/img/',     // 打包后输出地址\n      // publicPath: ''           // 给资源加上域名路径\n    }\n  }\n}\n```\n\n## 打包文件分类\n\n1.图片:\n\n```\n{\n  test: /\\.(png|jpg|gif)$/,\n  // 当图片小于多少，用base64,否则用file-loader产生真实的图片\n  use: {\n    loader: 'url-loader',\n    options: {\n      limit: 1,  // 200k 200 * 1024\n      outputPath: 'img/'   // 打包后输出地址 在dist/img\n    }\n  }\n},\n```\n\n2.css:\n\n```\nplugins: [\n  new MiniCssExtractPlugin({\n    filename: 'css/main.css'\n  }),\n]\n```\n\n## 希望输出的时候，给这些`css\\img`加上前缀，传到服务器也能访问\n\n```\noutput: {\n  filename: 'bundle.[hash:8].js',   // hash: 8只显示8位\n  path: path.resolve(__dirname, 'dist'),\n  publicPath: 'http://www.mayufo.cn'  // 给静态资源统一加\n},\n```\n\n\n## 如果只希望处理图片\n\n```\n{\n  test: /\\.(png|jpg|gif)$/,\n  // 当图片小于多少，用base64,否则用file-loader产生真实的图片\n  use: {\n    loader: 'url-loader',\n    options: {\n      limit: 1,  // 200k 200 * 1024\n      outputPath: '/img/',   // 打包后输出地址\n      publicPath: 'http://www.mayufo.cn'\n    }\n  }\n}\n```\n\n## 打包多页应用\n\n```\n// 多入口\nlet path = require('path')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    home: './src/index.js',\n    other: './src/other.js'\n  },\n  output: {\n    filename: \"[name].js\",\n    path: path.resolve(__dirname, 'dist2')\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './index.html',\n      filename: 'home.html',\n      chunks: ['home']\n    }),\n    new HtmlWebpackPlugin({\n      template: './index.html',\n      filename: 'other.html',\n      chunks: ['other', 'home']   // other.html 里面有 other.js & home.js\n    }),\n  ]\n}\n\n```\n\n## 配置`source-map`\n\n`yarn add @babel/core  @babel/preset-env babel-loader  webpack-dev-server -D`\n\n```\nmodule.exports = {\n  devtool: 'source-map' // 增加映射文件调试源代码\n}\n```\n\n1. 源码映射 会标识错误的代码 打包后生成独立的文件 大而全 「source-map」\n2. 不会陈胜单独的文件 但是可以显示行和列  「eval-source-map」\n3. 不会产生列有行，产生单独的映射文件  「cheap-module-source-map」\n4. 不会产生文件 集成在打包后的文件中 不会产生列有行 「cheap-module-eval-source-map」\n\n\n## `watch` 改完代表重新打包实体\n\n```\nmodule.exports = {\n  watch: true,\n  watchOptions: {\n    poll: 1000,              // 每秒监听1000次\n    aggregateTimeout: 300,   // 防抖，当第一个文件更改，会在重新构建前增加延迟\n    ignored: /node_modules/  // 对于某些系统，监听大量文件系统会导致大量的 CPU 或内存占用。这个选项可以排除一些巨大的文件夹，\n  },\n}\n```\n\n\n## `webpack`的其他三个小插件\n\n1. `cleanWebpackPlugin`\n\n每次打包之前删掉dist目录\n`yarn add clean-webpack-plugin -D`\n\n[clean-webpack-plugin](https://github.com/johnagan/clean-webpack-plugin)\n\n```\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n  output: {\n    path: path.resolve(process.cwd(), 'dist'),\n  },\n  plugins: [\n    new CleanWebpackPlugin('./dist')\n  ]\n}\n```\n\n2. `copyWebpackPlugin`\n\n一些静态资源也希望拷贝的dist中\n\n`yarn add copy-webpack-plugin -D`\n\n```\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\n\nmodule.exports = {\n  plugins: [\n    new CopyWebpackPlugin([\n      {from: 'doc', to: './dist'}\n    ])\n  ]\n}\n```\n\n3. `bannerPlugin`内置模块\n\n版权声明\n\n```\nconst webpack = require('webpack');\n\nnew webpack.BannerPlugin('hello world')\n// or\nnew webpack.BannerPlugin({ banner: 'hello world'})\n\n```\n\n## `webpack` 跨域\n\n设置一个服务,由于`webpack-dev-server`内含`express`\n\n[express](https://expressjs.com/zh-cn/starter/hello-world.html)\n\n`server.js`\n\n```\n// express\n\nlet express = require('express')\n\nlet app = express();\n\napp.get('/api/user', (res) => {\n  res.json({name: 'mayufo'})\n})\n\napp.listen(3000)   // 服务端口在3000\n```\n\n写完后记得`node server.js`\n\n访问 `http://localhost:3000/api/user` 可见内容\n\n\n`index.js`\n\n```\n// 发送一个请求\nlet xhr = new XMLHttpRequest();\n\n// 默认访问 http://localhost:8080  webpack-dev-server 的服务 再转发给3000\nxhr.open('GET', '/api/user', true);\n\nxhr.onload = function () {\n  console.log(xhr.response)\n}\n\nxhr.send();\n\n```\n\n\n`webpack.config.js`\n\n```\nmodule.exports = {\n  devServer: {\n    proxy: {\n      '/api': 'http://localhost:3000'\n    }\n  },\n}\n```\n\n## 1.如果后端给的请求没有API 「跨域」\n\n```\n// express\n\nlet express = require('express')\n\nlet app = express();\n\n\napp.get('/user', (res) => {\n  res.json({name: 'mayufo'})\n})\n\napp.listen(3000)   // 服务端口在3000\n```\n\n\n请求已api开头, 转发的时候再删掉api\n\n```\ndevServer: {\n  proxy: {\n    '/api': {\n      target: 'http://localhost:3000',\n      pathRewrite: {'^/api': ''}\n    }\n  }\n}\n```\n\n## 2.前端只想单纯mock数据 「跨域」\n\n```\ndevServer: {\n  // proxy: {\n  //     '/api': 'http://localhost:3000' // 配置一个代理\n  // }\n  //   proxy: {   // 重写方式 把请求代理到express 上\n  //       '/api': {\n  //           target: 'http://localhost:3000',\n  //           pathRewrite: {'^/api': ''}\n  //       }\n  //   }\n  before: function (app) {  // 勾子\n    app.get('/api/user', (req, res) => {\n      res.json({name: 'tigerHee'})\n    })\n  }\n},\n```\n\n## 3.有服务端，不用代理, 服务端启动webpack 「跨域」\n\n`server.js`中启动`webpack`\n\n`yarn add webpack-dev-middleware -D`\n\n`server.js`\n\n```\n// express\n\nlet express = require('express')\nlet webpack = require('webpack')\nlet app = express();\n\n\n// 中间件\nlet middle = require('webpack-dev-middleware')\n\nlet config = require('./webpack.config')\n\n\nlet compiler = webpack(config)\n\n\napp.use(middle(compiler))\n\napp.get('/user', (req, res) => {\n  res.json({name: 'mayufo'})\n})\n\n\napp.listen(3000)\n\n```\n\n## webpack解析resolve\n\n以`bootstrap`为例\n\n```\nnpm install bootstrap  -D\n```\n\n`index.js`\n\n```\nimport 'bootstrap/dist/css/bootstrap.css'\n```\n\n报错\n\n```\nERROR in ./node_modules/bootstrap/dist/css/bootstrap.css 7:0\nModule parse failed: Unexpected token (7:0)\nYou may need an appropriate loader to handle this file type.\n|  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n|  */\n> :root {\n|   --blue: #007bff;\n|   --indigo: #6610f2;\n @ ./src/index.js 22:0-42\n @ multi (webpack)-dev-server/client?http://localhost:8081 ./src/index.js\n\n```\n\n这是因为`bootstrap` 4.0的css引入了新的特性，CSS Variables\n\n安装\n`npm install postcss-custom-properties --save-dev`\n\n\n配置`webpack.config.js`\n\n```\n{\n  test: /\\.css$/,\n  use: ['style-loader', 'css-loader', {\n    loader: 'postcss-loader',\n    options: {\n      plugins: (loader) => [\n        require(\"postcss-custom-properties\")\n      ]\n    }\n  }]\n}\n```\n\n## 但是每次引入都很长，如何优雅引入\n\n```\nresolve: {\n  // 在当前目录查找\n  modules: [path.resolve('node_modules')],\n  alias: {\n      'bootstrapCss': 'bootstrap/dist/css/bootstrap.css'\n  }\n},\n```\n\n```\nimport 'bootstrapCss'  // 在node_modules查找\n```\n\n## 省略扩展名\n\nextensions:\n\n```\nresolve: {\n  // 在当前目录查找\n  modules: [path.resolve('node_modules')],\n  // alias: {\n  //   'bootstrapCss': 'bootstrap/dist/css/bootstrap.css'\n  // },\n  mainFields: ['style', 'main'],   // 先用bootstrap中在package中的style,没有在用main\n  // mainFiles: []  // 入口文件的名字 默认index\n  extensions: ['.js', '.css', '.json']  // 当没有拓展命的时候，先默认js、次之css、再次之json\n},\n```\n\n## 定义环境变量\n\n`DefinePlugin` 允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和生产模式的构建允许不同的行为非常有用。\n\n```\nlet url = ''\nif (DEV === 'dev') {\n  // 开发环境\n  url = 'http://localhost:3000'\n} else {\n  // 生成环境\n  url = 'http://www.mayufo.cn'\n}\n```\n\n`webpack.config.js`\n\n```\nnew webpack.DefinePlugin({\n  // DEV: '\"production\"',\n  DEV: JSON.stringify('production'),\n  FLAG: 'true',   // 布尔\n  EXPRESSION: '1 + 1'   // 字符串 如果希望是字符串 JSON.stringify('1 + 1')\n})\n```\n\n## 区分两个不同的环境\n\n分别配置不同的环境\n\n- `webpack.base4.js`   基础配置\n- `webpack.dev4.js`    开发环境\n- `webpack.prod4.js`   生产环境\n\n`yarn add webpack-merge -D`\n\n\n`npm run build -- -- config webpack.dev4.js`\n`npm run build -- -- config webpack.build.js`\n\n[官方文档](https://webpack.docschina.org/guides/production/)\n\n\n`webpack.base4.js`\n\n```\nlet path = require('path')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\nlet CleanWebpackPlugin = require('clean-webpack-plugin')\n\nmodule.exports = {\n  entry: {\n    home: './src/index.js'\n  },\n  output: {\n    filename: \"[name].js\",\n    path: path.resolve(process.cwd(), 'dist3')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-env'\n            ]\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader', {\n          loader: 'postcss-loader',\n          options: {\n            plugins: (loader) => [\n              require(\"postcss-custom-properties\")\n            ]\n          }\n        }]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      filename: 'index.html'\n    })\n  ]\n}\n\n```\n\n`webpack.dev4.js`\n\n```\nlet merge = require('webpack-merge')\nlet base = require('./webpack.base4.js')\n\nmodule.exports = merge(base, {\n  mode: 'development',\n  devServer: {},\n  devtool: 'source-map'\n})\n\n```\n\n`webpack.prod4.js`\n\n```\nlet merge = require('webpack-merge')\nlet base = require('./webpack.base4.js')\n\nmodule.exports = merge(base, {\n  mode: 'production'\n})\n\n```\n\n`package.json`\n\n```\n\"scripts\": {\n  \"build\": \"webpack  --config webpack.prod4.js\",\n  \"dev\": \"webpack-dev-server --config webpack.dev4.js\"\n},\n```\n\n\n## webpack 优化\n\n`yarn add webpack webpack-cli html-webpack-plugin @babel/core babel-loader @babel/preset-env @babel/preset-react -D`\n\n`webpack.config.js`\n\n```\nlet path = require('path')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\n\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-env',\n              '@babel/preset-react'\n            ]\n          }\n        }\n      },\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      filename: 'index.html'\n    }),\n  ]\n}\n\n```\n\n##  优化：当某些包是独立的个体没有依赖\n\n以jquery为例，`yarn add jquery -D`,它是一个独立的包没有依赖，可以在webpack配置中，配置它不再查找依赖\n\n```\nmodule: {\n    noParse: /jquery/, // 不用解析某些包的依赖\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-env',\n              '@babel/preset-react'\n            ]\n          }\n        }\n      },\n  ]\n}\n\n```\n\n运行`npx webpack`\n\n从2057ms  -> 1946 ms\n\n## 优化：规则匹配设置范围\n\n```\nrules: [\n  {\n    test: /\\.js$/,\n    exclude: '/node_modules/',   // 排除\n    include: path.resolve('src'),  // 在这个范围内\n    use: {\n      loader: 'babel-loader',\n      options: {\n        presets: [\n          '@babel/preset-env',\n          '@babel/preset-react'\n        ]\n      }\n    }\n  }\n```\n\n尽量实用`include`,不使用`exclude`,使用绝对路径\n\n## 优化：忽略依赖中不必要的语言包\n\n`yarn add moment webpack-dev-server -D`\n\n忽略掉`moment`的其他语言包\n\n```\nlet webpack = require('webpack')\n\nplugins: [\n    new webpack.IgnorePlugin(/\\.\\/locale/, /moment/)\n]\n\n```\n\n`index.js`\n\n```\nimport moment from 'moment'\n\nlet r = moment().endOf('day').fromNow()  // 距离现在多少天\nconsole.log(r);\n```\n\n\n从 1.2MB 到  800kb\n\n## 动态链接库\n\n`yarn add react react-dom`\n\n正常使用\n\n`webpack.config.js`\n\n```\n{\n  test: /\\.js$/,\n  exclude: '/node_modules/',\n  include: path.resolve('src'),\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: [\n        '@babel/preset-env',\n        '@babel/preset-react'\n      ]\n    }\n  }\n}\n```\n\n`index.js`\n\n```\nimport React from 'react'\n\nimport {render} from 'react-dom'\n\n\nrender(<h1>111111</h1>, window.root)\n```\n\n`index.html`\n\n```\n<div id=\"root\"></div>\n```\n\n独立的将`react react-dom` 打包好, 打包好再引用，从而减少`webpack`每次都要打包`react`\n\n创建`webpack.config.react.js`\n\n\n```\nlet path = require('path')\nlet webpack = require('webpack')\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    // test: './src/test.js'\n    react: ['react', 'react-dom']\n  },\n  output: {\n    filename: '_dll_[name].js',  // 产生的文件名\n    path: path.resolve(__dirname, 'dist'),\n    library: '_dll_[name]',     // 给输出的结果加个名字\n    // libraryTarget: 'var'   // 配置如何暴露 library\n    // commonjs 结果放在export属性上， umd统一资源模块, 默认是var\n  },\n  plugins: [\n    new webpack.DllPlugin({\n      name: '_dll_[name]',   // name === library\n      path: path.resolve(__dirname, 'dist', 'manifest.json')  // manifest.json 定义了各个模块的路径\n    })\n  ]\n}\n```\n\n[libraryTarget](https://webpack.docschina.org/configuration/output/#%E6%9A%B4%E9%9C%B2%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F)\n\n`manifest.json`就是一个任务清单or动态链接库，在这个清单里面查找react\n\n`npx webpack --config webpack.config.react.js`\n\n在`index.html`增加引用\n\n```\n<body>\n<div id=\"root\"></div>\n<script src=\"/_dll_react.js\"></script>\n</body>\n```\n\n在webpack.config.js 中配置，现在动态链接库`manifest.json`中查找,如果没有再打包react\n\n```\nplugins: [\n  new webpack.DllReferencePlugin({\n    manifest: path.resolve(__dirname, 'dist', 'manifest.json')\n  })\n]\n\n```\n\n[DLLPlugin 和 DLLReferencePlugin](https://webpack.docschina.org/plugins/dll-plugin/#src/components/Sidebar/Sidebar.jsx)\n\n`npm run build`\n\n打包后的`bunle.js`文件变小\n\n`npm run dev`\n\n可以理解为先把react打包，后面每次都直接使用react打包后的结果\n\n## 多线程打包`happypack`\n\n`yarn add happypack`\n\n`webpack.config.js`\n\n```\nlet Happypack = require('happypack')\n\n\nrules: [\n  {\n    test: /\\.js$/,\n    exclude: '/node_modules/',\n    include: path.resolve('src'),\n    use: 'happypack/loader?id=js'\n  },\n]\n\nplugins: [\n  new Happypack({\n    id: 'js',\n    use: [{\n      loader: 'babel-loader',\n      options: {\n        presets: [\n          '@babel/preset-env',\n          '@babel/preset-react'\n        ]\n      }\n    }]\n  })\n]\n```\n\njs启用多线程，由于启用多线程也会浪费时间，因此当项目比较大的时候启用效果更好\n\ncss启用多线程\n\n```\n{\n  test: /\\.css$/,\n  use: 'happypack/loader?id=css'\n}\n\nnew Happypack({\n  id: 'css',\n  use: ['style-loader', 'css-loader']\n}),\n```\n\n## webpack 自带的优化\n\n`test.js`\n\n```\nlet sum = (a, b) => {\n  return a + b + 'sum'\n}\n\nlet minus = (a, b) => {\n  return a - b + 'minus';\n}\n\nexport default {\n  sum, minus\n}\n```\n\n1. 使用import \n\n`index.js`\n\n```\nimport calc from './test'\n\nconsole.log(calc.sum(1, 2));\n```\n\n\nimport在生产环境下会自动去除没有用的代码`minus`，这叫`tree-shaking`，将没有用的代码自动删除掉\n\n\n`index.js`\n\n```\nlet calc = require('./test')\nconsole.log(calc);   // es 6导出，是一个default的对象\nconsole.log(calc.default.sum(1, 2));\n```\n\nrequire引入es6 模块会把结果放在default上,打包build后并不会把多余`minus`代码删除掉，不支持`tree-shaking`\n\n\n2. 作用域的提升\n\n`index.js`\n\n```\nlet a = 1\nlet b = 2\nlet c = 3\nlet d = a + b + c\n\nconsole.log(d, '---------');\n```\n\n打包出来的文件\n\n```\nconsole.log(r.default.sum(1,2));console.log(6,\"---------\")\n```\n\n在webpack中可以省略一些可以简化的代码\n\n## 抽取公共代码\n\n1. 抽离自有模块\n\n`webpack.config.js`\n\n```\nmodule.exports = {\n  optimization: {\n    splitChunks: {             // 分割代码块，针对多入口\n      cacheGroups: {           // 缓存组\n        common: {              // 公共模块\n          minSize: 0,          // 大于多少抽离\n          minChunks: 2,        // 使用多少次以上抽离抽离\n          chunks: 'initial'    // 从什么地方开始, 从入口开始\n        }\n      }\n    }\n  },\n}\n```\n\n[SplitChunksPlugin](https://webpack.docschina.org/plugins/split-chunks-plugin/)\n\n\n分别有a.js和b.js, index.js和other.js分别引入a和b两个js\n\n`index.js`\n\n```\nimport './a'\nimport './b'\n\nconsole.log('index.js');\n```\n\n`other.js`\n\n```\nimport './a'\nimport './b'\n\nconsole.log('other.js');\n```\n\n`webpack.config.js`\n\n```\nmodule.exports = {\n  optimization: {\n    splitChunks: {             // 分割代码块，针对多入口\n      cacheGroups: {           // 缓存组\n        common: {              // 公共模块\n          minSize: 0,          // 大于多少抽离\n          minChunks: 2,        // 使用多少次以上抽离抽离\n          chunks: 'initial'    // 从什么地方开始, 从入口开始\n        }\n      }\n    }\n  },\n}\n```\n\n2. 抽离第三方模块\n\n比如jquery\n\n`index.js` 和 `other.js`分别引入\n\n```\nimport $ from 'jquery'\n\nconsole.log($);\n```\n\n修改`webpack.config.js`配置：\n\n```\noptimization: {\n  splitChunks: {              // 分割代码块，针对多入口\n    cacheGroups: {            // 缓存组\n      common: {               // 公共模块\n        minSize: 0,           // 大于多少抽离\n        minChunks: 2,         // 使用多少次以上抽离抽离\n        chunks: 'initial'     // 从什么地方开始,刚开始\n      },\n      vendor: {\n        priority: 1,          // 增加权重, (先抽离第三方)\n        test: /node_modules/, // 把此目录下的抽离\n        minSize: 0,           // 大于多少抽离\n        minChunks: 2,         // 使用多少次以上抽离抽离\n        chunks: 'initial'     // 从什么地方开始,刚开始\n      }\n    }\n  },\n},\n```\n\n## 懒加载(延迟加载)\n\n`yarn add @babel/plugin-syntax-dynamic-import  -D`\n\n`source.js`\n\n```\nexport default 'mayufo'\n```\n\n`index.js`\n\n```\nlet button = document.createElement('button')\nbutton.innerHTML = 'hello'\nbutton.addEventListener('click', function () {\n  console.log('click')\n  // es6草案中的语法，jsonp实现动态加载文件\n  import('./source.js').then(data => {\n    console.log(data.default)\n  })\n})\ndocument.body.appendChild(button)\n\n```\n\n`webpack.config.js`\n\n```\n{\n  test: /\\.js$/,\n  exclude: '/node_modules/',\n  include: path.resolve('src'),\n  use: [{\n    loader: 'babel-loader',\n    options: {\n      presets: [\n        '@babel/preset-env',\n        '@babel/preset-react'\n      ],\n      plugins: [\n        '@babel/plugin-syntax-dynamic-import'\n      ]\n    }\n  }]\n}\n```\n\n## 热更新(当页面改变只更新改变的部分，不重新打包)\n\n`webpack.config.js`\n\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    template: './src/index.html',\n    filename: 'index.html'\n  }),\n  new webpack.NameModulesPlugin(),          // 打印更新的模块路径\n  new webpack.HotModuleReplacementPlugin()  // 热更新插件\n]\n```\n\n`index.js`\n\n```\nimport str from './source'\n\nconsole.log(str);\n\nif (module.hot) {\n  module.hot.accept('./source', () => {\n    console.log('文件更新了');\n    require('./source')\n    console.log(str);\n  })\n}\n\n```\n\n## tapable介绍 - SyncHook\n\n[tapable](https://juejin.im/post/5abf33f16fb9a028e46ec352)\n\n`webpack`本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是`Tapable`，`webpack`中最核心的负责编译的`Compiler`和负责创建`bundles`的`Compilation`都是`Tapable`的实例。\n\n`SyncHook` 不关心监听函数的返回值\n\n`yarn add tabable`\n\n`1.use.js`\n\n```\nlet {SyncHook} = require('tapable')   // 结构同步勾子\n\n\nclass Lesson {\n  constructor () {\n    this.hooks = {\n      // 订阅勾子\n      arch: new SyncHook(['name']),\n    }\n  }\n  start () {\n    this.hooks.arch.call('may')\n  }\n  tap () {   //  注册监听函数\n    this.hooks.arch.tap('node', function (name) {\n      console.log('node', name)\n    })\n    this.hooks.arch.tap('react', function (name) {\n      console.log('react', name)\n    })\n  }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n```\n\n`1.theory.js`\n\n```\nclass SyncHook {  // 勾子是同步的\n  constructor(args) {  // args => ['name']\n    this.tasks = []\n  }\n  tap (name, task) {\n    this.tasks.push(task)\n  }\n  call (...args) {\n    this.tasks.forEach((task) => task(...args))\n  }\n}\n\nlet hook = new SyncHook(['name'])\n\nhook.tap('react', function (name) {\n  console.log('react', name);\n})\n\n\nhook.tap('node', function (name) {\n  console.log('node', name);\n})\n\n\nhook.call('jw')\n```\n\n\n## tapable介绍 - SyncBailHook\n\n`SyncBailHook`为勾子加了个保险，当`return`返回不是`undefine`就会停止\n\n`2.use.js`\n\n```\nlet {SyncBailHook} = require('tapable')   // 解构同步勾子\n\nclass Lesson {\n  constructor () {\n    this.hooks = {\n      // 订阅勾子\n      arch: new SyncBailHook(['name']),\n\n    }\n  }\n  start () {\n    // 发布\n    this.hooks.arch.call('may')\n  }\n  tap () {   //  注册监听函数,订阅\n    this.hooks.arch.tap('node', function (name) {\n      console.log('node', name)\n      return '停止学习'  // 会停止\n      // return undefined\n    })\n    this.hooks.arch.tap('react', function (name) {\n      console.log('react', name)\n    })\n  }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n```\n\n`2.theory.js`\n\n```\nclass SyncBailHook {  // 勾子是同步的\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n    tap (name, task) {\n        this.tasks.push(task)\n    }\n    call (...args) {\n        let ret;   // 当前函数的返回值\n        let index = 0; // 当前要执行的第一个\n        do {\n            ret = this.tasks[index](...args)\n        } while (ret === undefined  && index < this.tasks.length)\n    }\n}\n\nlet hook = new SyncBailHook(['name'])\n\nhook.tap('react', function (name) {\n    console.log('react', name);\n    return '停止学习'\n    // return undefined\n})\n\n\nhook.tap('node', function (name) {\n    console.log('node', name);\n})\n\n\nhook.call('jw')\n\n```\n\n## tapable介绍 - SyncWaterfallHook\n\n`SyncWaterfallHook`上一个监听函数的返回值可以传给下一个监听函数\n\n`3.use.js`\n\n```\nlet {SyncWaterfallHook} = require('tapable')   // 解构同步勾子\n\n// waterfall 瀑布\n\nclass Lesson {\n    constructor () {\n        this.hooks = {\n            // 订阅勾子\n            arch: new SyncWaterfallHook(['name']),\n\n        }\n    }\n    start () {\n        // 发布\n        this.hooks.arch.call('may')\n    }\n    tap () {   //  注册监听函数,订阅\n        this.hooks.arch.tap('node', function (name) {\n            console.log('node', name)\n            return '学的不错'\n        })\n        this.hooks.arch.tap('react', function (name) {\n            console.log('react', name)\n        })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n```\n\n`3.theory.js`\n\n```\nclass SyncWaterfallHook {  // 勾子是同步的 - 瀑布\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n    tap (name, task) {\n        this.tasks.push(task)\n    }\n    call (...args) {\n        let [first, ...others] = this.tasks;\n        let ret = first(...args)\n        others.reduce((a, b) => {\n            return b(a);\n        }, ret);\n\n    }\n}\n\nlet hook = new SyncWaterfallHook(['name'])\n\nhook.tap('react', function (name) {\n    console.log('react', name);\n    return 'react Ok'\n    // return undefined\n})\n\n\nhook.tap('node', function (name) {\n    console.log('node', name);\n    return 'node Ok'\n})\n\nhook.tap('webpack', function (data) {\n    console.log('webpack', data);\n})\n\n\n\nhook.call('jw')\n\n\n```\n\n## tapable介绍 - SyncLoopHook\n\n`SyncLoopHook`当监听函数被触发的时候，如果该监听函数返回`true`时则这个监听函数会反复执行，如果返回 `undefined` 则表示退出循环\n\n`4.use.js`\n\n```\nlet {SyncLoopHook} = require('tapable')   // 解构同步勾子\n\n// 不返回undefined 会多次执行\n\nclass Lesson {\n    constructor () {\n        this.index = 0\n        this.hooks = {\n            // 订阅勾子\n            arch: new SyncLoopHook(['name']),\n\n        }\n    }\n    start () {\n        // 发布\n        this.hooks.arch.call('may')\n    }\n    tap () {   //  注册监听函数,订阅\n        this.hooks.arch.tap('node',  (name) => {\n            console.log('node', name)\n            return ++this.index === 3 ? undefined : '继续学'\n        })\n        this.hooks.arch.tap('react',  (name) => {\n            console.log('react', name)\n        })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n```\n\n`4.theory.js`\n\n```\nclass SyncLoopHook {  // 勾子是同步的 - 瀑布\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n    tap (name, task) {\n        this.tasks.push(task)\n    }\n    call (...args) {\n        this.tasks.forEach(task => {\n            let ret\n            do {\n                ret = task(...args);\n            } while(ret !== undefined)\n        })\n    }\n}\n\nlet hook = new SyncLoopHook(['name'])\nlet total = 0\nhook.tap('react', function (name) {\n    console.log('react', name);\n    return ++total === 3 ? undefined: '继续学'\n})\n\n\nhook.tap('node', function (name) {\n    console.log('node', name);\n})\n\nhook.tap('webpack', function (data) {\n    console.log('webpack', data);\n})\n\n\n\nhook.call('jw')\n\n```\n\n\n## `AsyncParallelHook` 与 `AsyncParallelBailHook`\n\n异步的勾子分两种`串行`和`并行`\n\n`并行`等待所有并发的异步事件执行后执行回调\n\n注册的三种方法\n\n1. 异步的注册方法`tap`\n2. 异步的注册方法`tapAsync`， 还有个回调参数\n3. `topPromise`,注册`promise`\n\n调用的三种\n\n1. call (同步)\n2. callAsync （异步）\n3. promise （异步）\n\n这里介绍的是异步并行的\n\n#### AsyncParallelHook \n\n不关心监听函数的返回值。\n\n`5.use.js`\n\n```\nlet {AsyncParallelHook} = require('tapable')   // 解构同步勾子\n\n// 不返回undefined 会多次执行\n\nclass Lesson {\n    constructor() {\n        this.index = 0\n        this.hooks = {\n            // 订阅勾子\n            arch: new AsyncParallelHook(['name']),\n\n        }\n    }\n\n    start() {\n        // 发布callAsync\n        // this.hooks.arch.callAsync('may', function () {\n        //     console.log('end');\n        // })\n        // 另一种发布promise\n        this.hooks.arch.promise('may').then(function () {\n                console.log('end');\n            }\n        )\n    }\n\n    tap() {   //  注册监听函数,订阅\n        // 注册tapAsync\n        // this.hooks.arch.tapAsync('node',  (name, callback) => {\n        //     setTimeout(() => {\n        //         console.log('node', name)\n        //         callback()\n        //     }, 1000)\n        // })\n        // this.hooks.arch.tapAsync('react',  (name, callback) => {\n        //     setTimeout(() => {\n        //         console.log('react', name)\n        //         callback()\n        //     }, 1000)\n        // })\n        // 另一种订阅 tapPromise\n        this.hooks.arch.tapPromise('node', (name) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('node', name)\n                    resolve()\n                }, 1000)\n            })\n        })\n        this.hooks.arch.tapPromise('react', (name) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('react', name)\n                    resolve()\n                }, 1000)\n            })\n        })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start() // 启动勾子\n\n\n```\n\n\n`5.theory.js`\n\n```\nclass AsyncParallelHook {  // 勾子是同步的 - 瀑布\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n\n    tapAsync(name, task) {\n        this.tasks.push(task)\n    }\n\n    tapPromise(name, task) {\n        this.tasks.push(task)\n    }\n    callAsync(...args) {\n        let finalCallback = args.pop()   // 拿出最终的函数\n        let index = 0\n        let done = () => {   // 类似promise.all的实现\n            index++;\n            if (index === this.tasks.length) {\n                finalCallback();\n            }\n        }\n        this.tasks.forEach(task => {\n            task(...args, done) // 这里的args 已经把最后一个参数删掉\n        })\n    }\n\n    promise(...args) {\n        let tasks = this.tasks.map(task => task(...args))\n        return Promise.all(tasks)\n    }\n}\n\nlet hook = new AsyncParallelHook(['name'])\n\n\n// hook.tapAsync('react', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('react', name);\n//         callback()\n//     }, 1000)\n// })\n//\n// hook.tapAsync('node', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('node', name);\n//         callback()\n//     }, 1000)\n// })\n\n// hook.tapAsync('webpack', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('webpack', name);\n//         callback()\n//     }, 1000)\n// })\n\nhook.tapPromise('react', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('react', name);\n            resolve()\n        }, 1000)\n    })\n})\n\nhook.tapPromise('node', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('node', name);\n            resolve()\n        }, 1000)\n    })\n})\n\n\n\n//\n// hook.callAsync('jw', function () {\n//     console.log('end');\n// })\n\n\nhook.promise('jw').then(function () {\n    console.log('end');\n})\n\n\n```\n\n\n#### AsyncParallelBailHook\n\n只要监听函数的返回值不为 `null`，就会忽略后面的监听函数执行，直接跳跃到`callAsync`等触发函数绑定的回调函数，然后执行这个被绑定的回调函数。\n\n使用和原理与`SyncBailHook`相似\n\n\n## 异步串行 —— AsyncSeriesHook\n\n`串行 `one by one\n\n`6.use.js`\n\n```\nlet {AsyncSeriesHook} = require('tapable')   // 解构同步勾子\n\n\nclass Lesson {\n    constructor() {\n        this.index = 0\n        this.hooks = {\n            // 订阅勾子\n            arch: new AsyncSeriesHook(['name']),\n\n        }\n    }\n\n    start() {\n        // 发布\n        // this.hooks.arch.callAsync('may', function () {\n        //     console.log('end');\n        // })\n        // 另一种发布\n        this.hooks.arch.promise('may').then(function () {\n                console.log('end');\n            }\n        )\n    }\n\n    tap() {   //  注册监听函数,订阅\n        // this.hooks.arch.tapAsync('node',  (name, callback) => {\n        //     setTimeout(() => {\n        //         console.log('node', name)\n        //         callback()\n        //     }, 1000)\n        // })\n        // this.hooks.arch.tapAsync('react',  (name, callback) => {\n        //     setTimeout(() => {\n        //         console.log('react', name)\n        //         callback()\n        //     }, 1000)\n        // })\n        // 另一种订阅\n        this.hooks.arch.tapPromise('node', (name) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('node', name)\n                    resolve()\n                }, 1000)\n            })\n        })\n        this.hooks.arch.tapPromise('react', (name) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('react', name)\n                    resolve()\n                }, 1000)\n            })\n        })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start(); // 启动勾子\n\n```\n\n`6.theory.js`\n\n```\nclass AsyncSeriesHook {  //\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n\n    tapAsync(name, task) {\n        this.tasks.push(task)\n    }\n\n    tapPromise(name, task) {\n        this.tasks.push(task)\n    }\n\n    callAsync(...args) {\n        let finalCallback = args.pop()\n        let index = 0;\n        let next = () => {\n            if (this.tasks.length === index) return finalCallback();\n            let task = this.tasks[index++];\n            task(...args, next);\n        }\n        next();\n    }\n\n    promise(...args) {\n        // 将promise串联起来\n        let [first, ...other] = this.tasks\n        return other.reduce((p, n) => {\n             return p.then(() => n (...args))\n        }, first(...args))\n    }\n}\n\nlet hook = new AsyncSeriesHook(['name'])\n\n\n// hook.tapAsync('react', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('react', name);\n//         callback()\n//     }, 1000)\n// })\n//\n// hook.tapAsync('node', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('node', name);\n//         callback()\n//     }, 1000)\n// })\n//\n// hook.tapAsync('webpack', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('webpack', name);\n//         callback()\n//     }, 1000)\n// })\n\n\nhook.tapPromise('react', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('react', name);\n            resolve()\n        }, 1000)\n    })\n})\n\nhook.tapPromise('node', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('node', name);\n            resolve()\n        }, 1000)\n    })\n})\n\n\n\n\n// hook.callAsync('jw', function () {\n//     console.log('end');\n// })\n\n\nhook.promise('jw').then(function () {\n    console.log('end');\n})\n\n```\n\n## 异步串行 —— AsyncSeriesWaterfallHook\n\n上一个监听函数的中的`callback(err, data)`的第二个参数,可以作为下一个监听函数的参数\n\n\n`7.use.js`\n\n```\nlet {AsyncSeriesWaterfallHook} = require('tapable')   // 解构同步勾子\n\n\nclass Lesson {\n    constructor() {\n        this.index = 0\n        this.hooks = {\n            // 订阅勾子\n            arch: new AsyncSeriesWaterfallHook(['name']),\n\n        }\n    }\n\n    start() {\n        // 发布\n        this.hooks.arch.callAsync('may', function () {\n            console.log('end');\n        })\n        // 另一种发布\n        // this.hooks.arch.promise('may').then(function () {\n        //         console.log('end');\n        //     }\n        // )\n    }\n\n    tap() {   //  注册监听函数,订阅\n        this.hooks.arch.tapAsync('node',  (name, callback) => {\n            setTimeout(() => {\n                console.log('node', name)\n                // callback(null, 'result')\n                callback('error', 'result')   // 如果放error, 会跳过直接后面的勾子，直接走到最终的\n\n            }, 1000)\n        })\n        this.hooks.arch.tapAsync('react',  (name, callback) => {\n            setTimeout(() => {\n                console.log('react', name)\n                callback()\n            }, 1000)\n        })\n        // 另一种订阅\n        // this.hooks.arch.tapPromise('node', (name) => {\n        //     return new Promise((resolve, reject) => {\n        //         setTimeout(() => {\n        //             console.log('node', name)\n        //             resolve()\n        //         }, 1000)\n        //     })\n        // })\n        // this.hooks.arch.tapPromise('react', (name) => {\n        //     return new Promise((resolve, reject) => {\n        //         setTimeout(() => {\n        //             console.log('react', name)\n        //             resolve()\n        //         }, 1000)\n        //     })\n        // })\n    }\n}\n\n\nlet l = new Lesson()\n\nl.tap();  //注册两个函数\nl.start(); // 启动勾子\n\n```\n\n`7.theory.js`\n\n```\nclass AsyncSeriesWaterfallHook {  //\n    constructor(args) {  // args => ['name']\n        this.tasks = []\n    }\n\n    tapAsync(name, task) {\n        this.tasks.push(task)\n    }\n\n    tapPromise(name, task) {\n        this.tasks.push(task)\n    }\n    callAsync(...args) {\n        let finalCallback = args.pop()\n        let index = 0;\n        let next = (err, data) => {\n            let task = this.tasks[index]\n            if(!task) return finalCallback();\n            if (index === 0) {\n                // 执行的第一个\n                task(...args, next)\n            } else {\n                task(data, next)\n            }\n            index ++\n        }\n        next();\n    }\n\n    promise(...args) {\n        // 将promise串联起来\n        let [first, ...other] = this.tasks\n        return other.reduce((p, n) => {\n             return p.then((data) => n(data))\n        }, first(...args))\n    }\n}\n\nlet hook = new AsyncSeriesWaterfallHook(['name'])\n\n\n// hook.tapAsync('react', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('react', name);\n//         callback(null, '结果1')\n//     }, 1000)\n// })\n//\n// hook.tapAsync('node', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('node', name);\n//         callback(null, '结果2')\n//     }, 1000)\n// })\n//\n// hook.tapAsync('webpack', function (name, callback) {\n//     setTimeout(() => {\n//         console.log('webpack', name);\n//         callback()\n//     }, 1000)\n// })\n\n//\nhook.tapPromise('react', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('react', name);\n            resolve('result')\n        }, 1000)\n    })\n})\n\nhook.tapPromise('node', function (name, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log('node', name);\n            resolve()\n        }, 1000)\n    })\n})\n\n\n//\n//\n// hook.callAsync('jw', function () {\n//     console.log('end');\n// })\n\n\nhook.promise('jw').then(function () {\n    console.log('end');\n})\n\n```\n\n\n## 手写webpack\n\n[对应的may-pack项目](https://github.com/mayufo/webpack-training)\n\n\n`yarn add webpack webpack-cli -D`\n\n\n`webpack.config.js`\n\n```\nlet path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    }\n}\n```\n\n`npx webpack`\n\n生成文件`bundle.js`\n\n```\n(function (modules) {\n    var installedModules = {};\n\n    function __webpack_require__(moduleId) {\n\n        if (installedModules[moduleId]) {\n            return installedModules[moduleId].exports;\n        }\n        var module = installedModules[moduleId] = {\n            i: moduleId,\n            l: false,\n            exports: {}\n        };\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n        module.l = true;\n\n        return module.exports;\n    }\n\n\n    // Load entry module and return exports\n    return __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n})\n({\n    \"./src/a.js\":\n        (function (module, exports, __webpack_require__) {\n            eval(\"let b = __webpack_require__(/*! ./base/b */ \\\"./src/base/b.js\\\")\\n\\nmodule.exports = 'a'+ b\\n\\n\\n\\n//# sourceURL=webpack:///./src/a.js?\");\n        }),\n    \"./src/base/b.js\":\n        (function (module, exports) {\n            eval(\"module.exports = 'b'\\n\\n\\n//# sourceURL=webpack:///./src/base/b.js?\");\n        }),\n    \"./src/index.js\":\n        (function (module, exports, __webpack_require__) {\n            eval(\" let str = __webpack_require__(/*! ./a.js */ \\\"./src/a.js\\\")\\n\\n console.log(str);\\n\\n\\n//# sourceURL=webpack:///./src/index.js?\");\n        })\n\n});\n\n```\n\n新建项目用于自己的`webpack`,这里叫`may-pack`\n\n`yarn init`\n\n如果在node里想执行命令，创建`bin`文件,再创建`may-pack.js`\n\n配置`package.json`\n\n```\n{\n  \"name\": \"may-pack\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"bin\": {\n    \"may-pack\": \"./bin/may-pack.js\"\n  }\n}\n```\n\n`may-pack.js`\n\n```\n#!  /usr/bin/env node \n\n// node环境\n\nconsole.log('start');\n\n```\n\n运行`npm link`将npm 模块链接到对应的运行项目中去，方便地对模块进行调试和测试\n\n在想运行`may-pack`的项目中运行，`npm link may-pack` 得到 `start`\n\n## webpack分析及处理\n\n`may-pack.js`\n\n```\n#!  /usr/bin/env node\n\n// node环境\n\nconsole.log('start');\n\nlet path = require('path')\n\n// 拿到配置文件webpack.config.js\nlet config = require(path.resolve('webpack.config.js'));\n\n\nlet Compiler = require('../lib/Compiler.js');\n\nlet compiler = new Compiler(config);\n\n// 标识运行编译\ncompiler.run()\n\n```\n\n创建`lib`文件`Compiler.js`\n\n```\nlet path = require('path')\nlet fs = require('fs')\n\nclass Compiler {\n    constructor(config) {\n        // entry  output\n        this.config = config\n        // 需要保存入口文件的路径\n        this.entryId = '';   // './src/index.js'\n        // 需要保存所有的模块依赖\n        this.modules = {};\n        this.entry = config.entry  // 入口文件\n        // 工作目录\n        this.root = process.cwd(); // 当前运行npx的路径\n    }\n    \n    // 构建模块\n    buildModule(modulePath, isEntry) {\n       \n    }\n\n    // 发射文件\n    emitFile() {\n        // 用数据 渲染想要的\n    }\n\n    run() {\n        // 执行 创建模块的依赖关系\n        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径\n        // 发射打包后的文件\n        this.emitFile()\n    }\n}\n\nmodule.exports = Compiler\n\n```\n\n主要两个任务\n\n1. 拿到入口Id\n2. 解析模块，也就是实现`buildModule`方法\n\n## 创建依赖关系\n\n`may-pack`中`Compiler.js`\n\n```\nlet path = require('path')\nlet fs = require('fs')\n// babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。\n// @babel/traverse 对ast解析遍历语法树 负责替换，删除和添加节点\n// @babel/types 用于AST节点的Lodash-esque实用程序库\n// @babel/generator 结果生成\n\nlet babylon = require('babylon')\nlet traverse = require('@babel/traverse').default;\nlet type = require('@babel/types');\nlet generator = require('@babel/generator').default\nclass Compiler {\n    constructor(config) {\n        // entry  output\n        this.config = config\n        // 需要保存入口文件的路径\n        this.entryId = '';   // './src/index.js'\n        // 需要保存所有的模块依赖\n        this.modules = {};\n        this.entry = config.entry  // 入口文件\n        // 工作目录\n        this.root = process.cwd(); // 当前运行npx的路径\n\n\n    }\n    // 拿到模块内容\n    getSource (modulePath) {\n        let content = fs.readFileSync(modulePath, 'utf8')\n        return content\n    }\n    parse (source, parentPath) {\n        console.log(source, parentPath)\n    }\n    // 构建模块\n    buildModule(modulePath, isEntry) {\n        // 拿到模块内容\n        let source = this.getSource(modulePath)  // 得到入口文件的内容\n        // 模块id modulePath(需要相对路径) = modulePath(模块路径) - this.root(项目工作路径)   src/index.js\n        let moduleName = './' + path.relative(this.root, modulePath)\n        console.log(source, moduleName);  // 拿到代码 和相对路径 ./src/index.js\n        if (isEntry) {\n            this.entryId = moduleName\n        }\n        let {sourceCode, dependencies} = this.parse(source, path.dirname(moduleName))   // ./src\n        // 把相对路径和模块中的内容对应起来\n        this.modules[moduleName] = sourceCode\n    }\n\n    // 发射文件\n    emitFile() {\n        // 用数据 渲染想要的\n    }\n\n    run() {\n        // 执行 创建模块的依赖关系\n        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径\n        console.log(this.modules, this.entryId);\n        // 发射打包后的文件\n        this.emitFile()\n    }\n\n\n}\n\nmodule.exports = Compiler\n\n\n```\n\n## ast递归解析\n\n`parse`方法主要靠解析语法树来进行转义\n`babylon`  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。\n`@babel/traverse` 对ast解析遍历语法树 负责替换，删除和添加节点\n`@babel/types` 用于AST节点的Lodash-esque实用程序库\n`@babel/generator` 结果生成\n\n\n`yarn add babylon @babel/traverse @babel/types @babel/generator`\n\n`may-pack`中`Compiler.js`\n\n```\nlet path = require('path')\nlet fs = require('fs')\n// babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。\n// @babel/traverse 对ast解析遍历语法树 负责替换，删除和添加节点\n// @babel/types 用于AST节点的Lodash-esque实用程序库\n// @babel/generator 结果生成\n\nlet babylon = require('babylon')\nlet traverse = require('@babel/traverse').default;\nlet type = require('@babel/types');\nlet generator = require('@babel/generator').default\nclass Compiler {\n    constructor(config) {\n        // entry  output\n        this.config = config\n        // 需要保存入口文件的路径\n        this.entryId = '';   // './src/index.js'\n        // 需要保存所有的模块依赖\n        this.modules = {};\n        this.entry = config.entry  // 入口文件\n        // 工作目录\n        this.root = process.cwd(); // 当前运行npx的路径\n\n\n    }\n    // 拿到模块内容\n    getSource (modulePath) {\n        let content = fs.readFileSync(modulePath, 'utf8')\n        return content\n    }\n    parse (source, parentPath) {\n        // AST解析语法树\n        let ast = babylon.parse(source)\n        let dependencies = []; // 依赖的数组\n        // https://astexplorer.net/\n        traverse(ast, {\n            // 调用表达式\n            CallExpression(p) {\n                let node = p.node; //对应的节点\n                if(node.callee.name === 'require') {\n                   node.callee.name = '__webpack_require__'\n                    let moduledName = node.arguments[0].value   // 取到模块的引用名字\n                    moduledName = moduledName + (path.extname(moduledName) ? '': '.js');  // ./a.js\n                    moduledName = './' + path.join(parentPath, moduledName)  // './src/a.js'\n                    dependencies.push(moduledName)\n                    node.arguments = [type.stringLiteral(moduledName)] // 改掉源码\n                }\n            }\n        })\n        let sourceCode = generator(ast).code\n        return { sourceCode, dependencies }\n    }\n    // 构建模块\n    buildModule(modulePath, isEntry) {\n        // 拿到模块内容\n        let source = this.getSource(modulePath)  // 得到入口文件的内容\n        // 模块id modulePath(需要相对路径) = modulePath(模块路径) - this.root(项目工作路径)   src/index.js\n        let moduleName = './' + path.relative(this.root, modulePath)\n        // console.log(source, moduleName);  // 拿到代码 和相对路径 ./src/index.js\n        if (isEntry) {\n            this.entryId = moduleName\n        }\n        // 解析把source源码进行改造， 返回一个依赖列表\n        let {sourceCode, dependencies} = this.parse(source, path.dirname(moduleName))   // ./src\n        // 把相对路径和模块中的内容对应起来\n        this.modules[moduleName] = sourceCode\n        dependencies.forEach(dep => {  // 附模块的加载 递归加载\n            this.buildModule(path.join(this.root, dep), false)\n        })\n    }\n\n    // 发射文件\n    emitFile() {\n        // 用数据 渲染想要的\n    }\n\n    run() {\n        // 执行 创建模块的依赖关系\n        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径\n        console.log(this.modules, this.entryId);\n        // 发射打包后的文件\n        this.emitFile()\n    }\n\n\n}\n\nmodule.exports = Compiler\n\n```\n\n## 生成打包工具\n\n使用ejs模板\n\n`may-pack`中`main.ejs`\n\n```\n(function (modules) {\nvar installedModules = {};\n\nfunction __webpack_require__(moduleId) {\n\nif (installedModules[moduleId]) {\nreturn installedModules[moduleId].exports;\n}\nvar module = installedModules[moduleId] = {\ni: moduleId,\nl: false,\nexports: {}\n};\n\nmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\nmodule.l = true;\n\nreturn module.exports;\n}\n\n\n// Load entry module and return exports\nreturn __webpack_require__(__webpack_require__.s = \"<%-entryId %>\");\n})({\n<% for(let key in modules){ %>\n    \"<%- key %>\":\n    (function (module, exports,__webpack_require__) {\neval(`<%-modules[key] %>`);\n}),\n<% } %>\n});\n\n```\n\n[ejs入门](https://ejs.bootcss.com/)\n\n`yarn add ejs`\n\n\n`may-pack`中`Compiler.js`\n\n```\nlet ejs = require('ejs')\n```\n\n```\n// 发射文件\n    emitFile() {\n        // 用数据 渲染想要的\n        // 输出到那个目录下\n        let main = path.join(this.config.output.path, this.config.output.filename)\n        let templateStr = this.getSource(path.join(__dirname, 'main.ejs'))\n        let code = ejs.render(templateStr, { entryId: this.entryId, modules: this.modules})\n        this.assets = {}\n        // 路径对应的代码\n        this.assets[main] = code\n        fs.writeFileSync(main, this.assets[main])\n    }\n```\n\n在`webpack-training`项目中运行`npx may-pack`, 得到`bundle.js`,运行得到结果\n\n## 增加loader\n\n创建`loader`文件夹，创建`less-loader1.js`和`style-loader1.js`\n\n`yarn add less`\n\n[less使用](http://lesscss.cn/#using-less)\n\n`less-loader1.js`\n\n```\n// 将less转为css\nlet less = require('less')\n\nfunction loader(source) {\n    let css = ''\n    less.render(source, function (err, output) {\n        css = output.css\n    })\n    css = css.replace(/\\n/g, '\\\\n');\n    return css\n}\n\nmodule.exports = loader\n\n```\n\n`style-loader1.js`\n\n```\n// 将css插入到html头部\nfunction loader(source) {\n    console.log(111);\n    let style = `\n    let style = document.createElement('style')\n    style.innerHTML = ${JSON.stringify(source)}\n    document.head.appendChild(style)\n   `\n    return style\n}\nmodule.exports = loader\n\n\n// JSON.stringify(source) 可以将代码转为一行\n\n```\n\n`webpack.config.js`\n\n```\nlet path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.less$/,\n                use: [\n                    path.resolve(__dirname, 'loader', 'style-loader1'),\n                    path.resolve(__dirname, 'loader', 'less-loader1')\n                ]\n            }\n        ]\n    }\n}\n\n```\n\n创建`index.less`\n\n```\nbody {\n  background: red\n}\n```\n\n`index.js`\n\n```\n let str = require('./a.js')\n\n require('./index.less')\n\n console.log(str);\n\n```\n\n`may-pack`中`Compiler.js`\n\n```\n// 拿到模块内容\n    getSource (modulePath) {\n        // 匹配各种文件的规则\n        let rules= this.config.module.rules;   // webpack.config.js 中rules的数组\n        let content = fs.readFileSync(modulePath, 'utf8')\n\n        for (let i = 0; i < rules.length; i++) {\n            let rule = rules[i]\n            let {test, use} = rule\n            let len = use.length - 1\n\n            if (test.test(modulePath)) {\n                // console.log(use[len]);\n                function normalLoader () {\n                    // console.log(use[len--]);\n                    let loader = require(use[len--])\n                    content = loader(content)\n                    // 递归调用loader 实现转化\n                    if (len >= 0) {\n                        normalLoader()\n                    }\n                }\n                normalLoader()\n            }\n\n        }\n        return content\n    }\n```\n\n运行`npx may-pack`\n\n## 增加plugins\n\n`yarn add tapable`\n\n`may-pack`中`Compiler.js`\n\n```\nconstructor(config) {\n        // entry  output\n        this.config = config\n        // 需要保存入口文件的路径\n        this.entryId = '';   // './src/index.js'\n        // 需要保存所有的模块依赖\n        this.modules = {};\n        this.entry = config.entry  // 入口文件\n        // 工作目录\n        this.root = process.cwd(); // 当前运行npx的路径\n\n        this.hooks = {\n            entryOption: new SyncHook(),  // 入口选项\n            compile: new SyncHook(),      // 编译\n            afterCompile: new SyncHook(),  // 编译完成\n            afterPlugins: new SyncHook(),   // 编译完插件\n            run: new SyncHook(),         // 运行\n            emit: new SyncHook(),        // 发射\n            done: new SyncHook()         // 完成\n        }\n        // 如果传递了plugins参数\n        let plugins = this.config.plugins\n        if (Array.isArray(plugins)) {\n            plugins.forEach(plugin => {\n                plugin.apply(this); // 这里只是appLy方法不是改变this指向\n            })\n        }\n        this.hooks.afterPlugins.call()\n    }\n```\n\n在`webpack.config.js`中写插件方法\n\n```\nclass P {\n    apply(compiler) {   // 这里只是appLy方法不是改变this指向\n        // 绑定\n        compiler.hooks.emit.tap('emit', function () {\n            console.log('emit');\n        })\n    }\n}\n\nclass P1 {\n    apply(compiler) {   // 这里只是appLy方法不是改变this指向\n        // 绑定\n        compiler.hooks.afterPlugins.tap('emit', function () {\n            console.log('afterPlugins');\n        })\n    }\n}\n\n\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.less$/,\n                use: [\n                    path.resolve(__dirname, 'loader', 'style-loader'),\n                    path.resolve(__dirname, 'loader', 'less-loader')\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new P(),\n        new P1()\n    ]\n}\n```\n\n然后在各个地方调用\n\n`may-pack`中`may-pack.js`\n\n\n```\n.....\n// 调用\ncompiler.hooks.entryOption.call()\n// 标识运行编译\ncompiler.run()\n```\n\n`may-pack`中`Compiler.js`\n\n```\nrun() {\n        this.hooks.run.call()\n\n        this.hooks.compile.call()\n        // 执行 创建模块的依赖关系\n        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径\n        // console.log(this.modules, this.entryId);\n        this.hooks.afterCompile.call()\n        // 发射打包后的文件\n        this.emitFile()\n        this.hooks.emit.call()\n        this.hooks.done.call()\n    }\n```\n\n运行`npx may-pack`\n\n\n## loader\n\n\n[手写loader](https://juejin.im/post/59e6a5de518825469c7461da)\n\n`webapck.config.js`\n\n```\nlet path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index',\n    output: {\n        filename: 'build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js/,\n                use: 'loader1' // 如何找到这个loader1\n            }\n        ]\n    },\n}\n\n```\n\n创建`loader`文件`loader1.js`\n\n```\nconsole.log(22);\n\nfunction loader(source) {  // loader的参数就是源代码\n    return source\n}\nmodule.exports = loader\n\n```\n\n\n`webpack.config.js`\n\n```\nlet path = require('path')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    resolveLoader: {\n      // 别名\n      // alias: {\n      //     loader1: path.resolve(__dirname, 'loader', 'loader1')\n      // }\n        modules: ['node_modules', path.resolve(__dirname, 'loader')]  // 先找node_modules, 再去loader中去找\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                // use: [path.resolve(__dirname, 'loader', 'loader1')]\n                use: 'loader1' // 如何找到这个loader1\n\n            },\n            // {\n            //     test: /\\.less$/,\n            //     use: [\n            //         path.resolve(__dirname, 'loader', 'style-loader'),\n            //         path.resolve(__dirname, 'loader', 'less-loader')\n            //     ]\n            // }\n        ]\n    },\n}\n\n```\n\n如何找到这个`loader1`\n\n1. 通过配别名`alias`\n2. 通过`modules`\n\n`npx webpack`\n\n## 配置多个loader\n\n1. 数组方式\n\n先分别在`loader`文件下创建，`loader2.js`和`loader3.js`\n\n```\nfunction loader(source) {  // loader的参数就是源代码\n    console.log('loader2');  // loader3.js 类似\n    return source\n}\nmodule.exports = loader\n\n```\n\n`webpack.config.js`\n\n```\nrules: [\n    {\n        test: /\\.js$/,\n        use: ['loader3', 'loader2', 'loader1']\n    },\n]\n```\n\n运行`npx webpack`,分别打出\n\n```\nloader1\nloader2\nloader3\n```\n\n2. 对象方式\n\n```\nrules: [\n    {\n        test: /\\.js$/,\n        use: ['loader3']\n    },\n    {\n        test: /\\.js$/,\n        use: ['loader2']\n    },\n    {\n        test: /\\.js$/,\n        use: ['loader1']\n    }\n]\n```\n\n运行`npx webpack`,分别打出\n\n```\nloader1\nloader2\nloader3\n```\n\n\n> `loader`的顺序: 从右到左, 从下到上\n\n\n也可以通过配置不同的参数改变`loader`的执行顺序，`pre` 前面的， `post`在后面的， `normal`正常\n\n\n```\n{\n    test: /\\.js$/,\n    use: ['loader1'],\n    enforce: \"pre\"\n},\n{\n    test: /\\.js$/,\n    use: ['loader2']\n},\n{\n    test: /\\.js$/,\n    use: ['loader3'],\n    enforce: \"post\"\n},\n```\n\n`loader` 带参数执行的顺序: `pre  -> normal -> inline -> post`\n\n`inline`为行内`loader`\n\n在`loader`文件中新建`inlin-loader`\n\n```\nfunction loader(source) {  // loader的参数就是源代码\n    console.log('inline');\n    return source\n}\nmodule.exports = loader\n\n```\n\n`src/a.js`\n\n```\nmodule.exports = 'may'\n```\n\n`src/index`\n\n```\nconsole.log('hello')\nlet srt = require('-!inline-loader!./a')\n```\n\n1. `-!`禁用`pre-loader`和 `normal-loader`来处理了\n\n```\nloader1\nloader2\nloader3\ninline\nloader3\n```\n\n\n\n2. `!`禁用`normal-loader`\n\n```\nloader1\nloader2\nloader3\nloader1\ninline\nloader3\n```\n\n\n\n3. `!!` 禁用`pre-loader`、`normal-loader`、`post-loader`,只能行内处理\n\n```\nloader1\nloader2\nloader3\ninline\n```\n\nloader 默认由两部分组成`pitch`和`normal`\n\n`user: [loader3, loader2, loader1]`\n\n\n无返回值: 先执行pitch方法,从左到右，再获取资源\n\n\n```\n    pitch loader - 无返回值\n    \npitch   loader3 → loader2 → loader1  \n                                    ↘\n                                      资源\n                                    ↙\nnormal   loader3 ← loader2 ← loader1 \n```\n\n有返回值: 直接跳过后续所有的`loader`包括自己的,跳到之前的`loader`, 可用于阻断\n\n[loader](https://webpack.docschina.org/api/loaders/)\n\n```\nuser: [loader3, loader2, loader1]\n\n    pitch loader - 有返回值\n    \npitch   loader3 → loader2  loader1  \n                     ↙               \n               有返回值               资源\n               ↙                      \nnormal  loader3  loader2  loader1 \n```\n\n`loadeer2.js`\n\n```\nfunction loader(source) {  // loader的参数就是源代码\n    console.log('loader2');\n    return source\n}\n\nloader.pitch = function () {\n    return '111'\n}\nmodule.exports = loader\n\n```\n\n结果\n\n```\nloader3\n```\n\n## `babel-loader`实现\n\n`yarn add @babel/core @babel/preset-env`\n\n`webpack.config.js`\n\n```\n{\n    test: '\\.js$/',\n    use: {\n        loader: 'babel-loader2',\n        options: {\n            presets: [\n                '@babel/preset-env'\n            ]\n        }\n    }\n}\n```\n\n在`loader`文件创建`babel-loader2.js`(如果你已经装过`babel-loader`)\n\n拿到`babel`的参数\n\n`yarn add loader-utils`\n\n\n```\n// 需要在webpack.config.js拿到babel的预设, 通过预设转换模块, 先引入babel\nlet babel = require('@babel/core')\n\n// 拿到babel的参数 需要工具 loaderUtils\nlet loaderUtils =require('loader-utils')\n\n\nfunction loader(source) {  // loader的参数就是源代码  这里的this就是loader的上下文\n    let options = loaderUtils.getOptions(this)\n    console.log(this.resourcePath, 444);   // [./src/index.js]\n    let callback = this.async(); // babel的转换是异步的,同步的返回是不行的， 不能用return  同步就是直接掉用 异步会在async中\n    babel.transform(source, {\n        ...options,\n        sourceMap: true,         // 是否设置sourceMap 还需要再webpack.config.js 中配置  devtool: 'source-map'\n        filename: this.resourcePath.split('/').pop()   //  给生成的`source-map`指定名字\n    }, function (err, result) {\n        callback(err, result.code, result.map)   // 异步 参数分别是「错误 转化后的代码 和 sourceMap」\n    })\n    console.log(options);\n    // return source  失效\n}\n\nmodule.exports = loader\n\n\n```\n\n\n`index.js`\n\n```\nclass May {\n    constructor () {\n        this.name = 'may'\n    }\n    getName () {\n        return this.name\n    }\n}\n\n\nlet may = new May()\n\nconsole.log(may.getName());\n```\n\n`npx webpack`\n\n## `banner-loader`实现(自创)\n\n给所有匹配的`js`加一个注释\n\n`webpack.config.js`\n\n```\n{    // 给所有匹配的`js`加一个注释\n    test: /\\.js$/,\n    use: {\n        loader: 'banner-loader',\n        options: {\n           text: 'may',\n           filename: path.resolve(__dirname, 'banner.js')\n        }\n    }\n}\n```\n\n`banner.js`\n\n```\n二次星球中毒\n```\n\n\n在`loader`文件创建`banner-loader.js`\n\n`yarn add schema-utils` 校验自己写的`loader`格式是否正确\n\n[schema-utils](https://github.com/webpack-contrib/schema-utils)\n\n`banner-loader.js`\n\n```\n// 拿到loader的配置\nlet loaderUtils = require('loader-utils')\n// 校验loader\nlet validateOptions = require('schema-utils')\n// 读取文件\nlet fs = require('fs')  // 异步\n\nfunction loader(source) {  // loader的参数就是源代码\n    let options = loaderUtils.getOptions(this)\n    let callback = this.async()  // 读取文件是异步\n    let schema = {\n        type: 'object',\n        properties: {\n            text: {\n                type: 'string'\n            },\n            filename: {\n                type: 'string'\n            }\n        }\n    }\n    validateOptions(schema, options, 'banner-loader')  // 自己的校验格式， 自己的写的配置， 对应的loader名字\n    if (options.filename) {\n        this.cacheable(false)  // 不要缓存  如果有大量计算 推荐缓存\n        // this.cacheable && this.cacheable()\n        this.addDependency(options.filename) // 自动增加依赖\n        fs.readFile(options.filename, 'utf8', function (err, data) {\n            callback(err, `/**${data}**/${source}`)\n        })\n    } else {\n        callback(null, `/**${options.text}**/${source}`)\n    }\n    return source\n}\nmodule.exports = loader\n\n```\n\n优化:\n\n1. 修改`banner.js`的内容后, `webpack`进行监控，打包`webapck.config.js`配置`watch: true`\n2. `loader`缓存\n\n## 实现`file-loader`和`url-loader`\n\n`yarn add mime`\n\n其主要用途是设置某种扩展名的文件的响应程序类型\n\n[mime](https://github.com/broofa/node-mime#readme)\n\n创建`file-loader.js1`\n\n```\n// 拿到babel的参数 需要工具 loaderUtils\nlet loaderUtils = require('loader-utils')\n\nfunction loader(source) {  // loader的参数就是源代码\n    // file-loader需要返回路径\n    let filename = loaderUtils.interpolateName(this, '[hash].[ext]', {content: source })\n    this.emitFile(filename, source) // 发射文件\n    console.log('loader1');\n    return `module.exports=\"${filename}\"`\n}\nloader.raw = true // 二进制\nmodule.exports = loader\n\n```\n\n创建`url-loader1.js`\n\n```\n// 拿到babel的参数 需要工具 loaderUtils\nlet loaderUtils = require('loader-utils')\nlet mime = require('mime')  // 途是设置某种扩展名的文件的响应程序类型\n\nfunction loader(source) {  // loader的参数就是源代码\n    let {limit} = loaderUtils.getOptions(this)\n    console.log(this.resourcePath);\n    if (limit && limit > source.length) {\n        return `module.exports=\"data:${mime.getType(this.resourcePath)};base64,${source.toString('base64')}\"`\n    } else {\n        return require('./file-loader1').call(this, source)\n    }\n}\nloader.raw = true // 二进制\nmodule.exports = loader\n\n```\n\n`webpack.config.js`\n\n```\n{\n    test: /\\.png$/,\n    // 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径\n    // use: 'file-loader'\n    // 处理路径\n    use: {\n        loader: 'url-loader1',\n        options: {\n            limit: 200 * 1024\n        }\n    }\n}\n```\n\n`index.js`引入图片\n\n```\nimport p from './photo.png'\n\nlet img = document.createElement('img')\nimg.src = p\ndocument.body.appendChild(img);\n\n```\n\n\n## `less-loader`和`css-loader`\n\n\n先安装`less`\n\n分别创建`style-loader2` `css-loader2` `less-loader2`\n\n`style-loader1` 与 `less-loader1` 同之前的\n\n\n## `css-loader`\n\n主要用来处理`css`中的图片链接，需要把`url`转换成`require`\n\n\n`webpack.config.js`\n\n```\n{\n    test: /\\.png$/,\n    // 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径\n    // use: 'file-loader'\n    // 处理路径\n    use: {\n        loader: 'url-loader1',\n        options: {\n            limit: 200 * 1024\n        }\n    }\n},\n{\n    test: /\\.less$/,\n    use: ['style-loader2', 'css-loader2', 'less-loader2']\n}\n```\n\n创建`index.less`\n\n```\n@base: #f938ab;\nbody {\n  background: @base;\n  background: url(\"./photo.png\");\n}\n```\n\n`less-loader2.js`\n\n```\n// 将less转为css\nlet less = require('less')\n\nfunction loader(source) {\n    let css = ''\n    // console.log(source, 2222);\n    less.render(source, function (err, output) {\n        // console.log(output);\n        css = output.css\n    })\n    // css = css.replace(/\\n/g, '\\\\n');\n    return css\n}\n\nmodule.exports = loader\n```\n\n\n`css-loader2.js`\n\n```\n// css-loader 用来解析@import这种语法,包括css中引入的图片\nfunction loader(source) {\n    let reg = /url\\((.+?)\\)/g   // 匹配括号\n\n    let pos = 0;\n    let current;\n\n    let arr = ['let list = []']\n\n    while (current = reg.exec(source)) {\n        let [matchUrl, g] = current   // matchUrl -> 'url(\"./photo.png\")', g  -> '\"./photo.png\"'\n        // console.log(matchUrl, g, 88);\n        let lastIndex = reg.lastIndex - matchUrl.length    // 拿到css从开通到地址链接之前的index\n        arr.push(`list.push(${JSON.stringify(source.slice(pos, lastIndex))})`)  // 拼入开始和地址之前的代码\n        pos = reg.lastIndex\n        arr.push(`list.push('url('+ require(${g}) +')')`)    // 拼入图片地址\n    }\n    arr.push(`list.push(${JSON.stringify(source.slice(pos))})`)  // 拼入地址到结尾的代码\n    arr.push(`module.exports = list.join('')`)\n    console.log(arr.join('\\r\\n'));\n    // let list = []\n    // list.push(\"body {\\\\n  background: #f938ab;\\\\n  background: \")\n    // list.push('url('+ require(\"./photo.png\") +')')\n    // list.push(\";\\\\n}\\\\n\")\n    // module.exports = list.join('')\n\n    return arr.join('\\r\\n')\n}\nmodule.exports = loader\n\n```\n\n`style-loader2.js`\n\n```\nlet loaderUtils = require('loader-utils')\n\n// 将css插入到html头部\nfunction loader(source) {\n    let str = `\n    let style = document.createElement('style')\n    style.innerHTML = ${JSON.stringify(source)}\n    document.head.appendChild(style)\n   `\n    return str\n}\n\n\n// style-loader写了pitch,有返回后面的跳过，自己的写不会走\nloader.pitch = function (remainingRequest) {  // 剩余的请求\n    console.log(loaderUtils.stringifyRequest(this, '!!' + remainingRequest, 99999999))\n    // 让style-loader 处理 less-loader 和css-loader拼接的结果\n    // 得到 /Users/liuhuimin/work/webpack/loader/css-loader2.js!/Users/liuhuimin/work/webpack/loader/less-loader2.js!/Users/liuhuimin/work/webpack/src/index.less\n    // 剩余的请求 less-loader!css-loader!./index.less\n    // console.log(remainingRequest, 1223);\n    // require返回的就是css-loader处理好的结果require('!!css-loader!less-loader!./index.less')\n    let str = `\n    let style = document.createElement('style')\n    style.innerHTML = require(${loaderUtils.stringifyRequest(this, '!!' + remainingRequest)})\n    document.head.appendChild(style)\n   `\n    // stringifyRequest 绝对路径转相对路径\n    return str\n}\nmodule.exports = loader\n\n```\n\n\n```\nuser: ['style-loader2', 'css-loader2', 'less-loader2']\n\n    pitch loader - 有返回值\n    \npitch   style-loader2 → css-loader2  less-loader2  \n                     ↙               \n               有返回值               资源\n               ↙                      \nnormal  style-loader2  css-loader2  less-loader2\n```\n\n在`style-loader2`中 引用了`less-loader` `css-loader` 和`less`文件\n\n\n## webpack 中的插件\n\n`yarn add webpack webpack-cil -D`\n\n`webpack.config.js`\n\n```\nlet path = require('path')\nlet DonePlugin = require('./plugins/DonePlugins')\nlet AsyncPlugins = require('./plugins/AsyncPlugins')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n        new DonePlugin(),    // 同步\n        new AsyncPlugins()   // 异步\n    ]\n}\n\n```\n\n`node_modules/webpack/lib`中查看`Compiler.js`\n\n1. 同步`plugins/DonePlugins`\n\n打包完成\n\n```\nclass DonePlugins {\n    apply (compiler) {\n        console.log(1);\n        compiler.hooks.done.tap('DonePlugin', (stats) => {\n            console.log('编译完成');\n        })\n    }\n}\n\n\nmodule.exports = DonePlugins\n\n```\n\n\n2. 异步`plugins/AsyncPlugins`\n\n```\nclass AsyncPlugins {\n    apply (compiler) {\n        console.log(2);\n        compiler.hooks.emit.tapAsync('AsyncPlugin', (complete, callback) => {\n            setTimeout(() => {\n                console.log('文件发射出来');\n                callback()\n            }, 1000)\n        })\n        compiler.hooks.emit.tapPromise('AsyncPlugin', (complete, callback) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    console.log('文件发射出来 222');\n                    resolve()\n                }, 1000)\n            })\n        })\n    }\n}\n\n\nmodule.exports = AsyncPlugins\n\n```\n\n## 文件列表插件\n\n希望生成一个文件描述打包出来的文件\n\n在`plugins`中新建`FileListPlugin`\n\n```\nclass FileListPlugin {\n    constructor ({filename}) {\n        this.filename = filename\n    }\n    apply (compiler) {\n        // 文件已经准备好了 要进行发射\n        // emit\n        compiler.hooks.emit.tap('FileListPlugin', (compilation) => {\n            let assets = compilation.assets;\n            console.log(assets, 55);\n            let content = `## 文件名  资源大小\\r\\n`\n            // [ [bundls.js, {}], [index.html, {}]]\n            Object.entries(assets).forEach(([filename, stateObj]) => {\n                content += `- ${filename}    ${stateObj.size()}\\r\\n`\n            })\n            // 资源对象\n            assets[this.filename] = {\n                source () {\n                    return content;\n                },\n                size () {\n                    return content.length\n                }\n            }\n        })\n    }\n}\n\nmodule.exports = FileListPlugin\n\n```\n\n```\nlet path = require('path')\nlet DonePlugin = require('./plugins/DonePlugins')\nlet AsyncPlugins = require('./plugins/AsyncPlugins')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\nlet FileListPlugin = require('./plugins/FileListPlugin')\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n        new DonePlugin(),\n        new AsyncPlugins(),\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            filename: 'index.html'\n        }),\n        new FileListPlugin({\n            filename: 'list.md'\n        })\n    ]\n}\n\n```\n\n生成`list.md`\n\n\n## 内联的`webpack`插件\n\n新建`index.css`引入`index.js`\n\n`yarn add css-loader mini-css-extract-plugin -D`\n\n希望打包后`css、js`内联在`index.html`文件中\n\n创建`plugins`中`InlineSourcePlugins.js`\n\n`yarn add --dev html-webpack-plugin@next`\n\n[HTML Webpack Plugin](https://github.com/jantimon/html-webpack-plugin)\n\n`webpack.config.js`\n\n```\nlet path = require('path')\nlet DonePlugin = require('./plugins/DonePlugins')\nlet AsyncPlugins = require('./plugins/AsyncPlugins')\nlet HtmlWebpackPlugin = require('html-webpack-plugin')\nlet FileListPlugin = require('./plugins/FileListPlugin')\n\nlet InlineSourcePlugins = require('./plugins/InlineSourcePlugins')\n\nlet MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n    mode: 'production',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [MiniCssExtractPlugin.loader, 'css-loader']\n            }\n        ]\n    },\n    plugins: [\n        // new DonePlugin(),\n        // new AsyncPlugins(),\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            filename: 'index.html'\n        }),\n        new MiniCssExtractPlugin({\n            filename: 'index.css'\n        }),\n        new InlineSourcePlugins({\n            match: /\\.(js|css)/\n        }),\n        // new FileListPlugin({\n        //     filename: 'list.md'\n        // })\n    ]\n}\n\n```\n\n`InlineSourcePlugins.js`\n\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\n// 把外链的标签编程内联的标签\nclass InlineSourcePlugins {\n    constructor({match}) {\n        this.reg = match  // 正则\n    }\n\n    // 处理某一个标签\n    processTag(tag, compilation) {\n        let newTag = {}\n        let url = ''\n        if (tag.tagName === 'link' && this.reg.test(tag.attributes.href)) {\n            newTag = {\n                tagName: 'style',\n                attributes: {type: 'text/css'}\n            }\n            url = tag.attributes.href\n        } else if (tag.tagName === 'script' && this.reg.test(tag.attributes.src)) {\n            newTag = {\n                tagName: 'script',\n                attributes: {type: 'application/javascript'}\n            }\n            url = tag.attributes.src\n        }\n        if (url) {\n            newTag.innerHTML = compilation.assets[url].source(); // 文件内容放到innerHTML属性中\n            delete compilation.assets[url]   // 删除原有的资源\n            return newTag\n            // console.log(compilation.assets[url].source());\n        }\n        return tag\n    }\n\n    // 处理引入标签的数据\n    processTags(data, compilation) {\n        let headTags = []\n        let bodyTags = []\n        data.headTags.forEach(headTag => {\n            headTags.push(this.processTag(headTag, compilation))\n        })\n        data.bodyTags.forEach(bodyTag => {\n            bodyTags.push(this.processTag(bodyTag, compilation))\n        })\n        console.log({...data, headTags, bodyTags})\n        return {...data, headTags, bodyTags}\n    }\n\n\n\n    apply(compiler) {\n        // 通过webpackPlugin来实现  npm搜索  html-webpack-plugin\n        compiler.hooks.compilation.tap('InlineSourcePlugins', (compilation) => {\n            HtmlWebpackPlugin.getHooks(compilation).alterAssetTagGroups.tapAsync(\n                'alertPlugin',\n                (data, callback) => {\n                    // console.log('======');\n                    // console.log(data) // 插入html标签的数据\n                    // console.log('======');\n                    data = this.processTags(data, compilation)   // compilation.assets 资源的链接\n                    callback(null, data)\n                })\n        })\n\n    }\n}\n\nmodule.exports = InlineSourcePlugins\n\n```\n\n\n## 打包后自动发布\n\n打包好的文件自动上传致七牛\n\n需要这几个参数\n\n```\nbucket: ''  // 七牛的存储空间\ndomain: '',\naccessKey: '', // 七牛云的两对密匙\nsecretKey: '' // 七牛云的两对密匙\n```\n\n注册七牛，并在对象存储里面,新建存储空间列表`test`,`bucket: 'test'`\n\n内容管理外链接默认域名 `domain: 'xxxxxxxx'`\n\n右上角个人面板里面个人中心,密钥管理分别对应`accessKey`和`secretKey`\n\n[进入开发者中心](https://developer.qiniu.com/) -> SDK&工具 -> 官方SDK -> Node服务端文档 —> 文件上传\n\n\n[node文件上传](https://developer.qiniu.com/kodo/sdk/1289/nodejs)\n\n\n\n`npm install qiniu`\n\n[compiler-hooks](https://webpack.docschina.org/api/compiler-hooks)\n\n\n`webpack.config.js`\n\n```\nplugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            filename: 'index.html'\n        }),\n        new MiniCssExtractPlugin({\n            filename: 'index.css'\n        }),\n        new UploadPlugin({\n            bucket: 'test',  // 七牛的存储空间\n            domain: 'poyrjyh1b.bkt.clouddn.com',\n            accessKey: 'xxxxxx', // 七牛云的两对密匙\n            secretKey: 'yyyyyy' // 七牛云的两对密匙\n        })\n    ]\n```\n\n`UploadPlugin.js`\n\n```\nlet qiniu = require('qiniu')\nlet path = require('path')\n\nclass UploadPlugin {\n    constructor (options = {}) {\n        // 参考 https://developer.qiniu.com/kodo/sdk/1289/nodejs\n        let { bucket = '', domain = '', accessKey = '', secretKey = ''} = options\n        let mac = new qiniu.auth.digest.Mac(accessKey, secretKey)\n        let putPolicy = new qiniu.rs.PutPolicy({\n            scope: bucket\n        });\n        this.uploadToken = putPolicy.uploadToken(mac)\n        let config = new qiniu.conf.Config();\n        this.formUploader = new qiniu.form_up.FormUploader(config)\n        this.putExtra = new qiniu.form_up.PutExtra()\n    }\n    apply (compiler) {\n        compiler.hooks.afterEmit.tapPromise('UploadPlugin', (complication) => {\n            let assets = complication.assets\n            let promise = []\n            Object.keys(assets).forEach(filename => {\n                promise.push(this.upload(filename))\n            })\n            return Promise.all(promise)\n        })\n    }\n\n    upload (filename) {\n        return new Promise((resolve, reject) => {\n            let localFile = path.resolve(__dirname, '../dist', filename)\n            this.formUploader.putFile(this.uploadToken, filename, localFile, this.putExtra, function(respErr,\n                                                                                 respBody, respInfo) {\n                if (respErr) {\n                    reject(respErr)\n                }\n                if (respInfo.statusCode == 200) {\n                    resolve(respBody)\n                } else {\n                    console.log(respInfo.statusCode)\n                    console.log(respBody)\n                }\n            });\n        })\n    }\n}\n\nmodule.exports = UploadPlugin\n\n```","slug":"webpack-multi-config","published":1,"updated":"2020-08-27T08:22:17.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckecjkrhc0060r0u26wb9d54p","content":"<div class='post-summary notification is-warning'>\n    <p>\n        最近学习了node，想再复习一下vue，就准备使用webpack做一个vue+node的后台管理系统，但是刚写一点就发现vue对spa很友好，即单页面多应用，我想在这个后台管理系统实现登录注册以及其他功能，涉及到多个页面，以之前学习的webpack已经不能满足这个项目的需求，所以想重新学习一下webpack的其他稍微进阶的内容。\n    </p>\n</div>\n\n<a id=\"more\"></a>\n\n<ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85%E5%89%8D%E5%85%88npm%E5%88%9D%E5%A7%8B%E5%8C%96\">安装前先npm初始化</a></li>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1\">本地服务</a></li>\n<li><a href=\"#%E5%A4%8D%E5%88%B6html\">复制html</a></li>\n<li><a href=\"#%E5%A4%84%E7%90%86css\">处理css</a></li>\n<li><a href=\"#%E5%A4%84%E7%90%86less\">处理less</a></li>\n<li><a href=\"#%E6%8A%BD%E7%A6%BBcss%E6%96%87%E4%BB%B6%E9%80%9A%E8%BF%87link%E5%BC%95%E5%85%A5\">抽离css文件，通过link引入</a></li>\n<li><a href=\"#%E5%8E%8B%E7%BC%A9css%E5%92%8Cjs\">压缩css和js</a></li>\n<li><a href=\"#%E7%BB%99css%E5%8A%A0%E4%B8%8A%E5%85%BC%E5%AE%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%89%8D%E7%BC%80\">给css加上兼容浏览器的前缀</a></li>\n<li><a href=\"#es6-%E8%BD%AC-es5\">es6 转 es5</a></li>\n<li><a href=\"#es-7%E7%9A%84%E8%AF%AD%E6%B3%95\">es 7的语法</a></li>\n<li><a href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%BC%95%E5%85%A5\">全局变量引入</a></li>\n<li><a href=\"#webpack%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85\">webpack图片打包</a></li>\n<li><a href=\"#%E5%BD%93%E5%9B%BE%E7%89%87%E5%B0%8F%E4%BA%8E%E5%A4%9A%E5%B0%91%E7%94%A8base64\">当图片小于多少，用base64</a></li>\n<li><a href=\"#%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB\">打包文件分类</a></li>\n<li><a href=\"#%E5%B8%8C%E6%9C%9B%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E7%Bimg%E5%8A%A0%E4%B8%8A%E5%89%8D%E7%BC%80%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E8%83%BD%E8%AE%BF%E9%97%AE\">希望输出的时候，给这些<code>css\\img</code>加上前缀，传到服务器也能访问</a></li>\n<li><a href=\"#%E5%A6%82%E6%9E%9C%E5%8F%AA%E5%B8%8C%E6%9C%9B%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87\">如果只希望处理图片</a></li>\n<li><a href=\"#%E6%89%93%E5%8C%85%E5%A4%9A%E9%A1%B5%E5%BA%94%E7%94%A8\">打包多页应用</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AEsource-map\">配置<code>source-map</code></a></li>\n<li><a href=\"#watch-%E6%94%B9%E5%AE%8C%E4%BB%A3%E8%A1%A8%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%E5%AE%9E%E4%BD%93\"><code>watch</code> 改完代表重新打包实体</a></li>\n<li><a href=\"#webpack%E7%9A%84%E5%85%B6%E4%BB%96%E4%B8%89%E4%B8%AA%E5%B0%8F%E6%8F%92%E4%BB%B6\"><code>webpack</code>的其他三个小插件</a></li>\n<li><a href=\"#webpack-%E8%B7%A8%E5%9F%9F\"><code>webpack</code> 跨域</a></li>\n<li><a href=\"#%E5%A6%82%E6%9E%9C%E5%90%8E%E7%AB%AF%E7%BB%99%E7%9A%84%E8%AF%B7%E6%B1%82%E6%B2%A1%E6%9C%89api-%E8%B7%A8%E5%9F%9F\">如果后端给的请求没有API 「跨域」</a></li>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E5%8F%AA%E6%83%B3%E5%8D%95%E7%BA%AFmock%E6%95%B0%E6%8D%AE-%E8%B7%A8%E5%9F%9F\">前端只想单纯mock数据 「跨域」</a></li>\n<li><a href=\"#%E6%9C%89%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8D%E7%94%A8%E4%BB%A3%E7%90%86-%E6%9C%8F%E5%90%AF%E5%8A%A8webpack-%E8%B7%A8%E5%9F%9F\">有服务端，不用代理, 服务端启动webpack 「跨域」</a></li>\n<li><a href=\"#webpack%E8%A7%A3%E6%9E%90resolve\">webpack解析resolve</a></li>\n<li><a href=\"#%E4%BD%86%E6%98%AF%E6%AF%8F%E6%AC%A1%E5%BC%95%E5%85%A5%E9%83%BD%E5%BE%88%E9%95%BF%E5%A6%82%E4%B%9B%85%E5%BC%95%E5%85%A5\">但是每次引入都很长，如何优雅引入</a></li>\n<li><a href=\"#%E7%9C%81%E7%95%A5%E6%89%A9%E5%B1%95%E5%90%8D\">省略扩展名</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">定义环境变量</a></li>\n<li><a href=\"#%E5%8C%BA%E5%88%86%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E7%8E%AF%E5%A2%83\">区分两个不同的环境</a></li>\n<li><a href=\"#webpack-%E4%BC%98%E5%8C%96\">webpack 优化</a></li>\n<li><a href=\"#%E4%BC%98%E5%8C%96%E5%BD%93%E6%9F%90%E4%BA%9B%E5%8C%85%E6%98%AF%E7%8B%AC%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BD%93%E6%B2%A1%E6%9C%89%E4%BE%9D%E8%B5%96\">优化：当某些包是独立的个体没有依赖</a></li>\n<li><a href=\"#%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99%E5%8C%B9%E9%85%8D%E8%AE%BE%E7%BD%AE%E8%8C%83%E5%9B%B4\">优化：规则匹配设置范围</a></li>\n<li><a href=\"#%E4%BC%98%E5%8C%96%E5%BF%BD%E7%95%A5%E4%BE%9D%E8%B5%96%E4%B8%AD%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%A8%80%E5%8C%85\">优化：忽略依赖中不必要的语言包</a></li>\n<li><a href=\"#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93\">动态链接库</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85happypack\">多线程打包happypack</a></li>\n<li><a href=\"#webpack-%E8%87%AA%E5%B8%A6%E7%9A%84%E4%BC%98%E5%8C%96\">webpack 自带的优化</a></li>\n<li><a href=\"#%E6%8A%BD%E5%8F%96%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81\">抽取公共代码</a></li>\n<li><a href=\"#%E6%87%92%E5%8A%A0%E8%BD%BD%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD\">懒加载(延迟加载)</a></li>\n<li><a href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E5%BD%93%E9%A1%B5%E9%9D%A2%E6%94%B9%E5%8F%98%E5%8F%AA%E6%9B%B4%E6%96%B0%E6%94%B9%E5%8F%98%E7%9A%84%E9%83%A8%E5%88%86%E4%B8%8D%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85\">热更新(当页面改变只更新改变的部分，不重新打包)</a></li>\n<li><a href=\"#tapable%E4%BB%8B%E7%BB%8D---synchook\">tapable介绍 - SyncHook</a></li>\n<li><a href=\"#tapable%E4%BB%8B%E7%BB%8D---syncbailhook\">tapable介绍 - SyncBailHook</a></li>\n<li><a href=\"#tapable%E4%BB%8B%E7%BB%8D---syncwaterfallhook\">tapable介绍 - SyncWaterfallHook</a></li>\n<li><a href=\"#tapable%E4%BB%8B%E7%BB%8D---syncloophook\">tapable介绍 - SyncLoopHook</a></li>\n<li><a href=\"#asyncparallelhook-%E4%B8%8E-asyncparallelbailhook\"><code>AsyncParallelHook</code> 与 <code>AsyncParallelBailHook</code></a><ul>\n<li><a href=\"#asyncparallelhook\">AsyncParallelHook</a></li>\n<li><a href=\"#asyncparallelbailhook\">AsyncParallelBailHook</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%BC%82%E6%AD%A5%E4%B8%B2%E8%A1%8C--asyncserieshook\">异步串行 —— AsyncSeriesHook</a></li>\n<li><a href=\"#%E5%BC%82%E6%AD%A5%E4%B8%B2%E8%A1%8C--asyncserieswaterfallhook\">异步串行 —— AsyncSeriesWaterfallHook</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99webpack\">手写webpack</a></li>\n<li><a href=\"#webpack%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%84%E7%90%86\">webpack分析及处理</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB\">创建依赖关系</a></li>\n<li><a href=\"#ast%E9%80%92%E5%BD%92%E8%A7%A3%E6%9E%90\">ast递归解析</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7\">生成打包工具</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0loader\">增加loader</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0plugins\">增加plugins</a></li>\n<li><a href=\"#loader\">loader</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAloader\">配置多个loader</a></li>\n<li><a href=\"#babel-loader%E5%AE%9E%E7%8E%B0\"><code>babel-loader</code>实现</a></li>\n<li><a href=\"#banner-loader%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%88%9B\"><code>banner-loader</code>实现(自创)</a></li>\n<li><a href=\"#%E5%AE%9E%E7%8E%B0file-loader%E5%92%8Curl-loader\">实现<code>file-loader</code>和<code>url-loader</code></a></li>\n<li><a href=\"#less-loader%E5%92%8Ccss-loader\"><code>less-loader</code>和<code>css-loader</code></a></li>\n<li><a href=\"#css-loader\"><code>css-loader</code></a></li>\n<li><a href=\"#webpack-%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6\">webpack 中的插件</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6\">文件列表插件</a></li>\n<li><a href=\"#%E5%86%85%E8%81%94%E7%9A%84webpack%E6%8F%92%E4%BB%B6\">内联的<code>webpack</code>插件</a></li>\n<li><a href=\"#%E6%89%93%E5%8C%85%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83\">打包后自动发布</a></li>\n</ul>\n<h2 id=\"安装前先npm初始化\"><a href=\"#安装前先npm初始化\" class=\"headerlink\" title=\"安装前先npm初始化\"></a>安装前先npm初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)   <span class=\"comment\">// 相对路径变绝对路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>, <span class=\"comment\">// 模式 默认 production development</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index'</span>,    <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.[hash:8].js'</span>,   <span class=\"comment\">// hash: 8只显示8位</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">''</span>  <span class=\"comment\">// // 给所有打包文件引入时加前缀，包括css，js，img，如果只想处理图片可以单独在url-loader配置中加publicPath</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地服务\"><a href=\"#本地服务\" class=\"headerlink\" title=\"本地服务\"></a>本地服务</h2><p><code>npm i webpack-dev-server -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\">  progress: true          &#x2F;&#x2F; 滚动条</span><br><span class=\"line\">  contentBase: &#39;.&#x2F;build&#39;  &#x2F;&#x2F; 起服务的地址</span><br><span class=\"line\">  open: true              &#x2F;&#x2F; 自动打开浏览器</span><br><span class=\"line\">  compress： true         &#x2F;&#x2F; gzip压缩</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"复制html\"><a href=\"#复制html\" class=\"headerlink\" title=\"复制html\"></a>复制html</h2><p><code>npm i html-webpack-plugin -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">plugins: [ &#x2F;&#x2F; 放着所有webpack插件</span><br><span class=\"line\">  new HtmlWebpackPlugin(&#123; &#x2F;&#x2F; 用于使用模板打包时生成index.html文件，并且在run dev时会将模板文件也打包到内存中</span><br><span class=\"line\">    template: &#39;.&#x2F;index.html&#39;, &#x2F;&#x2F; 模板文件</span><br><span class=\"line\">    filename: &#39;index.html&#39;, &#x2F;&#x2F; 打包后生成文件</span><br><span class=\"line\">    hash: true, &#x2F;&#x2F; 添加hash值解决缓存问题</span><br><span class=\"line\">    minify: &#123; &#x2F;&#x2F; 对打包的html模板进行压缩</span><br><span class=\"line\">      removeAttributeQuotes: true, &#x2F;&#x2F; 删除属性双引号</span><br><span class=\"line\">      collapseWhitespace: true &#x2F;&#x2F; 折叠空行变成一行</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/jantimon/html-webpack-plugin#options\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin#options</a></p>\n<h2 id=\"处理css\"><a href=\"#处理css\" class=\"headerlink\" title=\"处理css\"></a>处理css</h2><p><code>npm i css-loader style-loader -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css-loader   作用：用来解析@import这种语法</span><br><span class=\"line\">&#x2F;&#x2F; style-loader 作用：把 css 插入到head标签中</span><br><span class=\"line\">&#x2F;&#x2F; loader的执行顺序： 默认是从右向左（从下向上）</span><br><span class=\"line\">module: &#123;    &#x2F;&#x2F; 模块</span><br><span class=\"line\">  rules: [   &#x2F;&#x2F; 规则</span><br><span class=\"line\">    &#x2F;&#x2F; style-loader 把css插入head标签中</span><br><span class=\"line\">    &#x2F;&#x2F; loader 功能单一</span><br><span class=\"line\">    &#x2F;&#x2F; 多个loader 需要 []</span><br><span class=\"line\">    &#x2F;&#x2F; 顺便默认从右到左</span><br><span class=\"line\">    &#x2F;&#x2F; 也可以写成对象方式</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">      &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">      &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#x2F;&#x2F; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">        &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">        MiniCssExtractPlugin.loader,</span><br><span class=\"line\">        &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">        &#39;postcss-loader&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"处理less\"><a href=\"#处理less\" class=\"headerlink\" title=\"处理less\"></a>处理less</h2><p><code>npm i less-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.less$&#x2F;,   &#x2F;&#x2F; less 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法</span><br><span class=\"line\">    &#39;postcss-loader&#39;,</span><br><span class=\"line\">    &#39;less-loader&#39; &#x2F;&#x2F; less-loader less -&gt; css</span><br><span class=\"line\">    &#x2F;&#x2F; sass node-sass sass-loader</span><br><span class=\"line\">    &#x2F;&#x2F; stylus stylus-loader</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.js.org/loaders/less-loader/#src/components/Sidebar/Sidbar.jsx\" target=\"_blank\" rel=\"noopener\">less-loader</a></p>\n<h2 id=\"抽离css文件，通过link引入\"><a href=\"#抽离css文件，通过link引入\" class=\"headerlink\" title=\"抽离css文件，通过link引入\"></a>抽离css文件，通过link引入</h2><p><code>yarn add mini-css-extract-plugin -D</code></p>\n<p><a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\" target=\"_blank\" rel=\"noopener\">mini-css-extract-plugin</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 压缩css</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: &#39;css&#x2F;main.css&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F; 此时不需要style-loader</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 抽离</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">    &#39;postcss-loader&#39;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽离css插件文件时可使用<code>optimize-css-assets-webpack-plugin</code>优化压缩css以及js文件</p>\n<h2 id=\"压缩css和js\"><a href=\"#压缩css和js\" class=\"headerlink\" title=\"压缩css和js\"></a>压缩css和js</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 用了&#96;mini-css-extract-plugin&#96;抽离css为link需使用&#96;optimize-css-assets-webpack-plugin&#96;进行压缩css,使用此方法压缩了css需要&#96;uglifyjs-webpack-plugin&#96;压缩js</span><br><span class=\"line\">const OptimizeCSSAssetsPlugin &#x3D; require(&quot;optimize-css-assets-webpack-plugin&quot;)</span><br><span class=\"line\">const UglifyJsPlugin &#x3D; require(&quot;uglifyjs-webpack-plugin&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;              &#x2F;&#x2F; 优化项</span><br><span class=\"line\">    minimizer: [</span><br><span class=\"line\">      new UglifyJsPlugin(&#123;     &#x2F;&#x2F; 优化js</span><br><span class=\"line\">        cache: true,           &#x2F;&#x2F; 是否缓存</span><br><span class=\"line\">        parallel: true,        &#x2F;&#x2F; 是否并发打包</span><br><span class=\"line\">        &#x2F;&#x2F; sourceMap: true     &#x2F;&#x2F; 源码映射 set to true if you want JS source maps</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      new OptimizeCSSAssetsPlugin(&#123;&#125;)    &#x2F;&#x2F; css 的优化</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: &#39;production&#39;,</span><br><span class=\"line\">  entry: &#39;&#39;,</span><br><span class=\"line\">  output: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给css加上兼容浏览器的前缀\"><a href=\"#给css加上兼容浏览器的前缀\" class=\"headerlink\" title=\"给css加上兼容浏览器的前缀\"></a>给css加上兼容浏览器的前缀</h2><p><code>yarn add postcss-loader autoprefixer -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">    &#39;postcss-loader&#39;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; less</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.less$&#x2F;,   &#x2F;&#x2F; less 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法</span><br><span class=\"line\">    &#39;postcss-loader&#39;,</span><br><span class=\"line\">    &#39;less-loader&#39; &#x2F;&#x2F; less-loader less -&gt; css</span><br><span class=\"line\">    &#x2F;&#x2F; sass node-sass sass-loader</span><br><span class=\"line\">    &#x2F;&#x2F; stylus stylus-loader</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>postcss 需要配置文档   <code>postcss.config1.js</code></p>\n<p><a href=\"https://github.com/postcss/postcss-loader\" target=\"_blank\" rel=\"noopener\">postcss-loader</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    require(&#39;autoprefixer&#39;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"es6-转-es5\"><a href=\"#es6-转-es5\" class=\"headerlink\" title=\"es6 转 es5\"></a>es6 转 es5</h2><p><code>npm i babel-loader @babel/core  @babel/preset-env -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [ &#x2F;&#x2F;预设</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39; </span><br><span class=\"line\">            ],</span><br><span class=\"line\">            plugins:[</span><br><span class=\"line\">              &#x2F;&#x2F; 转es7的语法</span><br><span class=\"line\">              [&quot;@babel&#x2F;plugin-proposal-decorators&quot;, &#123; &quot;legacy&quot;: true &#125;],</span><br><span class=\"line\">              [&quot;@babel&#x2F;plugin-proposal-class-properties&quot;, &#123; &quot;loose&quot; : true &#125;]</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: &#x2F;node_modules&#x2F;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"转es7的语法\"><a href=\"#转es7的语法\" class=\"headerlink\" title=\"转es7的语法\"></a>转es7的语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 转class</span><br><span class=\"line\">npm i @babel&#x2F;plugin-proposal-class-properties -D</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 转装饰器</span><br><span class=\"line\">npm i @babel&#x2F;plugin-proposal-decorators -D</span><br></pre></td></tr></table></figure>\n\n<p>配置如上</p>\n<h3 id=\"其他不兼容的高级语法\"><a href=\"#其他不兼容的高级语法\" class=\"headerlink\" title=\"其他不兼容的高级语法\"></a>其他不兼容的高级语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 @babel&#x2F;polyfill</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语法检查-eslint\"><a href=\"#语法检查-eslint\" class=\"headerlink\" title=\"语法检查 eslint\"></a>语法检查 eslint</h2><p><code>npm i eslint eslint-loader -S</code></p>\n<p>根目录添加 <code>.eslintrc.json</code> 配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;eslint-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            enforce: &#39;pre&#39;  &#x2F;&#x2F; previous优先执行  post-普通loader之后执行</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,      &#x2F;&#x2F; mormal 普通的loader</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [ &#x2F;&#x2F;预设</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39; </span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: &#x2F;node_modules&#x2F;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局变量引入\"><a href=\"#全局变量引入\" class=\"headerlink\" title=\"全局变量引入\"></a>全局变量引入</h2><p>jquery的引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery -S</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">  $: &#39;jquery&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其他情况</p>\n<ol>\n<li>暴露全局</li>\n</ol>\n<p><code>npm i expose-loader -D</code> 暴露全局的<code>loader</code></p>\n<h4 id=\"法1：\"><a href=\"#法1：\" class=\"headerlink\" title=\"法1：\"></a>法1：</h4><p>可以在js中 <code>import $ from &#39;expose-loader?$!jquery&#39;</code>   // 全局暴露jquery为$符号</p>\n<p>可以调用<code>window.$</code></p>\n<h4 id=\"法2：\"><a href=\"#法2：\" class=\"headerlink\" title=\"法2：\"></a>法2：</h4><p>也可在<code>webpack.config.js</code> 中配置 <code>rules</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: require.resolve(&#39;jquery&#39;),</span><br><span class=\"line\">        use: &#39;expose-loader?$&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以后在<code>.js</code>文件中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"法3-如何在每个模块中注入：\"><a href=\"#法3-如何在每个模块中注入：\" class=\"headerlink\" title=\"法3. 如何在每个模块中注入：\"></a>法3. 如何在每个模块中注入：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      $: &#39;jquery&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">之后代码内直接使用 $</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"法4：\"><a href=\"#法4：\" class=\"headerlink\" title=\"法4：\"></a>法4：</h4><p>在<code>index.html</code>中通过<code>script</code>标签引入<code>jquery</code>, 但是在<code>js</code>中，用<code>import</code>会重新打包<code>jquery</code>,如何避免</p>\n<p>从输出的bundle 中排除依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  externals: &#123; &#x2F;&#x2F; 告知webpack是外部引入的，不需要打包</span><br><span class=\"line\">    jquery: &#39;jQuery&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时在index.js上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log($)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack图片打包\"><a href=\"#webpack图片打包\" class=\"headerlink\" title=\"webpack图片打包\"></a>webpack图片打包</h2><ol>\n<li>js中创建</li>\n<li>css中引入</li>\n<li><code>&lt;img src=&quot;&quot;&gt;</code></li>\n</ol>\n<p><code>yarn add file-loader -D</code></p>\n<p>适合一二情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.export&#x3D;&#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">        use: &#39;file-loader&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认会内部生成一张图片到build,生成图片的路径返回回来</p>\n<p>第一种情况: 图片地址要<code>import</code>引入，直接写图片的地址，会默认为字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logo from &#39;.&#x2F;logo.png&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let image &#x3D; new Image()</span><br><span class=\"line\">image.src &#x3D; logo</span><br><span class=\"line\">document.body.appendChild(image)</span><br></pre></td></tr></table></figure>\n\n<p>第二种情况: <code>css-loader</code>会将<code>css</code>里面的图片转为<code>require</code>的格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">  background: url(&quot;.&#x2F;logo.png&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第三种情况: 解析<code>html</code>中的<code>image</code></p>\n<p><code>yarn add html-withimg-loader -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.html$&#x2F;,</span><br><span class=\"line\">  use: &#39;html-withimg-loader&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"当图片小于多少，用base64\"><a href=\"#当图片小于多少，用base64\" class=\"headerlink\" title=\"当图片小于多少，用base64\"></a>当图片小于多少，用base64</h2><p><code>yarn add url-loader -D</code></p>\n<p>如果过大，才用<code>file-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 200 * 1024,          &#x2F;&#x2F; 小于200k变成base64</span><br><span class=\"line\">      &#x2F;&#x2F; outputPath: &#39;&#x2F;img&#x2F;&#39;,     &#x2F;&#x2F; 打包后输出地址</span><br><span class=\"line\">      &#x2F;&#x2F; publicPath: &#39;&#39;           &#x2F;&#x2F; 给资源加上域名路径</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包文件分类\"><a href=\"#打包文件分类\" class=\"headerlink\" title=\"打包文件分类\"></a>打包文件分类</h2><p>1.图片:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 1,  &#x2F;&#x2F; 200k 200 * 1024</span><br><span class=\"line\">      outputPath: &#39;img&#x2F;&#39;   &#x2F;&#x2F; 打包后输出地址 在dist&#x2F;img</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>2.css:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">    filename: &#39;css&#x2F;main.css&#39;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"希望输出的时候，给这些css-img加上前缀，传到服务器也能访问\"><a href=\"#希望输出的时候，给这些css-img加上前缀，传到服务器也能访问\" class=\"headerlink\" title=\"希望输出的时候，给这些css\\img加上前缀，传到服务器也能访问\"></a>希望输出的时候，给这些<code>css\\img</code>加上前缀，传到服务器也能访问</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  filename: &#39;bundle.[hash:8].js&#39;,   &#x2F;&#x2F; hash: 8只显示8位</span><br><span class=\"line\">  path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">  publicPath: &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;  &#x2F;&#x2F; 给静态资源统一加</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"如果只希望处理图片\"><a href=\"#如果只希望处理图片\" class=\"headerlink\" title=\"如果只希望处理图片\"></a>如果只希望处理图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 1,  &#x2F;&#x2F; 200k 200 * 1024</span><br><span class=\"line\">      outputPath: &#39;&#x2F;img&#x2F;&#39;,   &#x2F;&#x2F; 打包后输出地址</span><br><span class=\"line\">      publicPath: &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包多页应用\"><a href=\"#打包多页应用\" class=\"headerlink\" title=\"打包多页应用\"></a>打包多页应用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 多入口</span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    home: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    other: &#39;.&#x2F;src&#x2F;other.js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &quot;[name].js&quot;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist2&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;home.html&#39;,</span><br><span class=\"line\">      chunks: [&#39;home&#39;]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;other.html&#39;,</span><br><span class=\"line\">      chunks: [&#39;other&#39;, &#39;home&#39;]   &#x2F;&#x2F; other.html 里面有 other.js &amp; home.js</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置source-map\"><a href=\"#配置source-map\" class=\"headerlink\" title=\"配置source-map\"></a>配置<code>source-map</code></h2><p><code>yarn add @babel/core  @babel/preset-env babel-loader  webpack-dev-server -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  devtool: &#39;source-map&#39; &#x2F;&#x2F; 增加映射文件调试源代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>源码映射 会标识错误的代码 打包后生成独立的文件 大而全 「source-map」</li>\n<li>不会陈胜单独的文件 但是可以显示行和列  「eval-source-map」</li>\n<li>不会产生列有行，产生单独的映射文件  「cheap-module-source-map」</li>\n<li>不会产生文件 集成在打包后的文件中 不会产生列有行 「cheap-module-eval-source-map」</li>\n</ol>\n<h2 id=\"watch-改完代表重新打包实体\"><a href=\"#watch-改完代表重新打包实体\" class=\"headerlink\" title=\"watch 改完代表重新打包实体\"></a><code>watch</code> 改完代表重新打包实体</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  watch: true,</span><br><span class=\"line\">  watchOptions: &#123;</span><br><span class=\"line\">    poll: 1000,              &#x2F;&#x2F; 每秒监听1000次</span><br><span class=\"line\">    aggregateTimeout: 300,   &#x2F;&#x2F; 防抖，当第一个文件更改，会在重新构建前增加延迟</span><br><span class=\"line\">    ignored: &#x2F;node_modules&#x2F;  &#x2F;&#x2F; 对于某些系统，监听大量文件系统会导致大量的 CPU 或内存占用。这个选项可以排除一些巨大的文件夹，</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"webpack的其他三个小插件\"><a href=\"#webpack的其他三个小插件\" class=\"headerlink\" title=\"webpack的其他三个小插件\"></a><code>webpack</code>的其他三个小插件</h2><ol>\n<li><code>cleanWebpackPlugin</code></li>\n</ol>\n<p>每次打包之前删掉dist目录<br><code>yarn add clean-webpack-plugin -D</code></p>\n<p><a href=\"https://github.com/johnagan/clean-webpack-plugin\" target=\"_blank\" rel=\"noopener\">clean-webpack-plugin</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(process.cwd(), &#39;dist&#39;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin(&#39;.&#x2F;dist&#39;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>copyWebpackPlugin</code></li>\n</ol>\n<p>一些静态资源也希望拷贝的dist中</p>\n<p><code>yarn add copy-webpack-plugin -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CopyWebpackPlugin &#x3D; require(&#39;copy-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CopyWebpackPlugin([</span><br><span class=\"line\">      &#123;from: &#39;doc&#39;, to: &#39;.&#x2F;dist&#39;&#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><code>bannerPlugin</code>内置模块</li>\n</ol>\n<p>版权声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.BannerPlugin(&#39;hello world&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; or</span><br><span class=\"line\">new webpack.BannerPlugin(&#123; banner: &#39;hello world&#39;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-跨域\"><a href=\"#webpack-跨域\" class=\"headerlink\" title=\"webpack 跨域\"></a><code>webpack</code> 跨域</h2><p>设置一个服务,由于<code>webpack-dev-server</code>内含<code>express</code></p>\n<p><a href=\"https://expressjs.com/zh-cn/starter/hello-world.html\" target=\"_blank\" rel=\"noopener\">express</a></p>\n<p><code>server.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;api&#x2F;user&#39;, (res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)   &#x2F;&#x2F; 服务端口在3000</span><br></pre></td></tr></table></figure>\n\n<p>写完后记得<code>node server.js</code></p>\n<p>访问 <code>http://localhost:3000/api/user</code> 可见内容</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 发送一个请求</span><br><span class=\"line\">let xhr &#x3D; new XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 默认访问 http:&#x2F;&#x2F;localhost:8080  webpack-dev-server 的服务 再转发给3000</span><br><span class=\"line\">xhr.open(&#39;GET&#39;, &#39;&#x2F;api&#x2F;user&#39;, true);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onload &#x3D; function () &#123;</span><br><span class=\"line\">  console.log(xhr.response)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      &#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-如果后端给的请求没有API-「跨域」\"><a href=\"#1-如果后端给的请求没有API-「跨域」\" class=\"headerlink\" title=\"1.如果后端给的请求没有API 「跨域」\"></a>1.如果后端给的请求没有API 「跨域」</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;user&#39;, (res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)   &#x2F;&#x2F; 服务端口在3000</span><br></pre></td></tr></table></figure>\n\n\n<p>请求已api开头, 转发的时候再删掉api</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    &#39;&#x2F;api&#39;: &#123;</span><br><span class=\"line\">      target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">      pathRewrite: &#123;&#39;^&#x2F;api&#39;: &#39;&#39;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-前端只想单纯mock数据-「跨域」\"><a href=\"#2-前端只想单纯mock数据-「跨域」\" class=\"headerlink\" title=\"2.前端只想单纯mock数据 「跨域」\"></a>2.前端只想单纯mock数据 「跨域」</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; proxy: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;     &#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39; &#x2F;&#x2F; 配置一个代理</span><br><span class=\"line\">  &#x2F;&#x2F; &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;   proxy: &#123;   &#x2F;&#x2F; 重写方式 把请求代理到express 上</span><br><span class=\"line\">  &#x2F;&#x2F;       &#39;&#x2F;api&#39;: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;           target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">  &#x2F;&#x2F;           pathRewrite: &#123;&#39;^&#x2F;api&#39;: &#39;&#39;&#125;</span><br><span class=\"line\">  &#x2F;&#x2F;       &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;   &#125;</span><br><span class=\"line\">  before: function (app) &#123;  &#x2F;&#x2F; 勾子</span><br><span class=\"line\">    app.get(&#39;&#x2F;api&#x2F;user&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">      res.json(&#123;name: &#39;tigerHee&#39;&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-有服务端，不用代理-服务端启动webpack-「跨域」\"><a href=\"#3-有服务端，不用代理-服务端启动webpack-「跨域」\" class=\"headerlink\" title=\"3.有服务端，不用代理, 服务端启动webpack 「跨域」\"></a>3.有服务端，不用代理, 服务端启动webpack 「跨域」</h2><p><code>server.js</code>中启动<code>webpack</code></p>\n<p><code>yarn add webpack-dev-middleware -D</code></p>\n<p><code>server.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 中间件</span><br><span class=\"line\">let middle &#x3D; require(&#39;webpack-dev-middleware&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let config &#x3D; require(&#39;.&#x2F;webpack.config&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let compiler &#x3D; webpack(config)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(middle(compiler))</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;user&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack解析resolve\"><a href=\"#webpack解析resolve\" class=\"headerlink\" title=\"webpack解析resolve\"></a>webpack解析resolve</h2><p>以<code>bootstrap</code>为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install bootstrap  -D</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br></pre></td></tr></table></figure>\n\n<p>报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in .&#x2F;node_modules&#x2F;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css 7:0</span><br><span class=\"line\">Module parse failed: Unexpected token (7:0)</span><br><span class=\"line\">You may need an appropriate loader to handle this file type.</span><br><span class=\"line\">|  * Licensed under MIT (https:&#x2F;&#x2F;github.com&#x2F;twbs&#x2F;bootstrap&#x2F;blob&#x2F;master&#x2F;LICENSE)</span><br><span class=\"line\">|  *&#x2F;</span><br><span class=\"line\">&gt; :root &#123;</span><br><span class=\"line\">|   --blue: #007bff;</span><br><span class=\"line\">|   --indigo: #6610f2;</span><br><span class=\"line\"> @ .&#x2F;src&#x2F;index.js 22:0-42</span><br><span class=\"line\"> @ multi (webpack)-dev-server&#x2F;client?http:&#x2F;&#x2F;localhost:8081 .&#x2F;src&#x2F;index.js</span><br></pre></td></tr></table></figure>\n\n<p>这是因为<code>bootstrap</code> 4.0的css引入了新的特性，CSS Variables</p>\n<p>安装<br><code>npm install postcss-custom-properties --save-dev</code></p>\n<p>配置<code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">  use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#123;</span><br><span class=\"line\">    loader: &#39;postcss-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      plugins: (loader) &#x3D;&gt; [</span><br><span class=\"line\">        require(&quot;postcss-custom-properties&quot;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"但是每次引入都很长，如何优雅引入\"><a href=\"#但是每次引入都很长，如何优雅引入\" class=\"headerlink\" title=\"但是每次引入都很长，如何优雅引入\"></a>但是每次引入都很长，如何优雅引入</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 在当前目录查找</span><br><span class=\"line\">  modules: [path.resolve(&#39;node_modules&#39;)],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">      &#39;bootstrapCss&#39;: &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;bootstrapCss&#39;  &#x2F;&#x2F; 在node_modules查找</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"省略扩展名\"><a href=\"#省略扩展名\" class=\"headerlink\" title=\"省略扩展名\"></a>省略扩展名</h2><p>extensions:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 在当前目录查找</span><br><span class=\"line\">  modules: [path.resolve(&#39;node_modules&#39;)],</span><br><span class=\"line\">  &#x2F;&#x2F; alias: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;   &#39;bootstrapCss&#39;: &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">  mainFields: [&#39;style&#39;, &#39;main&#39;],   &#x2F;&#x2F; 先用bootstrap中在package中的style,没有在用main</span><br><span class=\"line\">  &#x2F;&#x2F; mainFiles: []  &#x2F;&#x2F; 入口文件的名字 默认index</span><br><span class=\"line\">  extensions: [&#39;.js&#39;, &#39;.css&#39;, &#39;.json&#39;]  &#x2F;&#x2F; 当没有拓展命的时候，先默认js、次之css、再次之json</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义环境变量\"><a href=\"#定义环境变量\" class=\"headerlink\" title=\"定义环境变量\"></a>定义环境变量</h2><p><code>DefinePlugin</code> 允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和生产模式的构建允许不同的行为非常有用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url &#x3D; &#39;&#39;</span><br><span class=\"line\">if (DEV &#x3D;&#x3D;&#x3D; &#39;dev&#39;) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 开发环境</span><br><span class=\"line\">  url &#x3D; &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 生成环境</span><br><span class=\"line\">  url &#x3D; &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">  &#x2F;&#x2F; DEV: &#39;&quot;production&quot;&#39;,</span><br><span class=\"line\">  DEV: JSON.stringify(&#39;production&#39;),</span><br><span class=\"line\">  FLAG: &#39;true&#39;,   &#x2F;&#x2F; 布尔</span><br><span class=\"line\">  EXPRESSION: &#39;1 + 1&#39;   &#x2F;&#x2F; 字符串 如果希望是字符串 JSON.stringify(&#39;1 + 1&#39;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"区分两个不同的环境\"><a href=\"#区分两个不同的环境\" class=\"headerlink\" title=\"区分两个不同的环境\"></a>区分两个不同的环境</h2><p>分别配置不同的环境</p>\n<ul>\n<li><code>webpack.base4.js</code>   基础配置</li>\n<li><code>webpack.dev4.js</code>    开发环境</li>\n<li><code>webpack.prod4.js</code>   生产环境</li>\n</ul>\n<p><code>yarn add webpack-merge -D</code></p>\n<p><code>npm run build -- -- config webpack.dev4.js</code><br><code>npm run build -- -- config webpack.build.js</code></p>\n<p><a href=\"https://webpack.docschina.org/guides/production/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><code>webpack.base4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    home: &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &quot;[name].js&quot;,</span><br><span class=\"line\">    path: path.resolve(process.cwd(), &#39;dist3&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#123;</span><br><span class=\"line\">          loader: &#39;postcss-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            plugins: (loader) &#x3D;&gt; [</span><br><span class=\"line\">              require(&quot;postcss-custom-properties&quot;)</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;index.html&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.dev4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let merge &#x3D; require(&#39;webpack-merge&#39;)</span><br><span class=\"line\">let base &#x3D; require(&#39;.&#x2F;webpack.base4.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; merge(base, &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  devServer: &#123;&#125;,</span><br><span class=\"line\">  devtool: &#39;source-map&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.prod4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let merge &#x3D; require(&#39;webpack-merge&#39;)</span><br><span class=\"line\">let base &#x3D; require(&#39;.&#x2F;webpack.base4.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; merge(base, &#123;</span><br><span class=\"line\">  mode: &#39;production&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;: &quot;webpack  --config webpack.prod4.js&quot;,</span><br><span class=\"line\">  &quot;dev&quot;: &quot;webpack-dev-server --config webpack.dev4.js&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"webpack-优化\"><a href=\"#webpack-优化\" class=\"headerlink\" title=\"webpack 优化\"></a>webpack 优化</h2><p><code>yarn add webpack webpack-cli html-webpack-plugin @babel/core babel-loader @babel/preset-env @babel/preset-react -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;main.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;index.html&#39;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化：当某些包是独立的个体没有依赖\"><a href=\"#优化：当某些包是独立的个体没有依赖\" class=\"headerlink\" title=\"优化：当某些包是独立的个体没有依赖\"></a>优化：当某些包是独立的个体没有依赖</h2><p>以jquery为例，<code>yarn add jquery -D</code>,它是一个独立的包没有依赖，可以在webpack配置中，配置它不再查找依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    noParse: &#x2F;jquery&#x2F;, &#x2F;&#x2F; 不用解析某些包的依赖</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx webpack</code></p>\n<p>从2057ms  -&gt; 1946 ms</p>\n<h2 id=\"优化：规则匹配设置范围\"><a href=\"#优化：规则匹配设置范围\" class=\"headerlink\" title=\"优化：规则匹配设置范围\"></a>优化：规则匹配设置范围</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    exclude: &#39;&#x2F;node_modules&#x2F;&#39;,   &#x2F;&#x2F; 排除</span><br><span class=\"line\">    include: path.resolve(&#39;src&#39;),  &#x2F;&#x2F; 在这个范围内</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">      loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        presets: [</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>尽量实用<code>include</code>,不使用<code>exclude</code>,使用绝对路径</p>\n<h2 id=\"优化：忽略依赖中不必要的语言包\"><a href=\"#优化：忽略依赖中不必要的语言包\" class=\"headerlink\" title=\"优化：忽略依赖中不必要的语言包\"></a>优化：忽略依赖中不必要的语言包</h2><p><code>yarn add moment webpack-dev-server -D</code></p>\n<p>忽略掉<code>moment</code>的其他语言包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new webpack.IgnorePlugin(&#x2F;\\.\\&#x2F;locale&#x2F;, &#x2F;moment&#x2F;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import moment from &#39;moment&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let r &#x3D; moment().endOf(&#39;day&#39;).fromNow()  &#x2F;&#x2F; 距离现在多少天</span><br><span class=\"line\">console.log(r);</span><br></pre></td></tr></table></figure>\n\n\n<p>从 1.2MB 到  800kb</p>\n<h2 id=\"动态链接库\"><a href=\"#动态链接库\" class=\"headerlink\" title=\"动态链接库\"></a>动态链接库</h2><p><code>yarn add react react-dom</code></p>\n<p>正常使用</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">  exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">  include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;render&#125; from &#39;react-dom&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;h1&gt;111111&lt;&#x2F;h1&gt;, window.root)</span><br></pre></td></tr></table></figure>\n\n<p><code>index.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>独立的将<code>react react-dom</code> 打包好, 打包好再引用，从而减少<code>webpack</code>每次都要打包<code>react</code></p>\n<p>创建<code>webpack.config.react.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; test: &#39;.&#x2F;src&#x2F;test.js&#39;</span><br><span class=\"line\">    react: [&#39;react&#39;, &#39;react-dom&#39;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;_dll_[name].js&#39;,  &#x2F;&#x2F; 产生的文件名</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    library: &#39;_dll_[name]&#39;,     &#x2F;&#x2F; 给输出的结果加个名字</span><br><span class=\"line\">    &#x2F;&#x2F; libraryTarget: &#39;var&#39;   &#x2F;&#x2F; 配置如何暴露 library</span><br><span class=\"line\">    &#x2F;&#x2F; commonjs 结果放在export属性上， umd统一资源模块, 默认是var</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new webpack.DllPlugin(&#123;</span><br><span class=\"line\">      name: &#39;_dll_[name]&#39;,   &#x2F;&#x2F; name &#x3D;&#x3D;&#x3D; library</span><br><span class=\"line\">      path: path.resolve(__dirname, &#39;dist&#39;, &#39;manifest.json&#39;)  &#x2F;&#x2F; manifest.json 定义了各个模块的路径</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/configuration/output/#%E6%9A%B4%E9%9C%B2%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F\" target=\"_blank\" rel=\"noopener\">libraryTarget</a></p>\n<p><code>manifest.json</code>就是一个任务清单or动态链接库，在这个清单里面查找react</p>\n<p><code>npx webpack --config webpack.config.react.js</code></p>\n<p>在<code>index.html</code>增加引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;_dll_react.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在webpack.config.js 中配置，现在动态链接库<code>manifest.json</code>中查找,如果没有再打包react</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">    manifest: path.resolve(__dirname, &#39;dist&#39;, &#39;manifest.json&#39;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/plugins/dll-plugin/#src/components/Sidebar/Sidebar.jsx\" target=\"_blank\" rel=\"noopener\">DLLPlugin 和 DLLReferencePlugin</a></p>\n<p><code>npm run build</code></p>\n<p>打包后的<code>bunle.js</code>文件变小</p>\n<p><code>npm run dev</code></p>\n<p>可以理解为先把react打包，后面每次都直接使用react打包后的结果</p>\n<h2 id=\"多线程打包happypack\"><a href=\"#多线程打包happypack\" class=\"headerlink\" title=\"多线程打包happypack\"></a>多线程打包<code>happypack</code></h2><p><code>yarn add happypack</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let Happypack &#x3D; require(&#39;happypack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">    include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">    use: &#39;happypack&#x2F;loader?id&#x3D;js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  new Happypack(&#123;</span><br><span class=\"line\">    id: &#39;js&#39;,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">      loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        presets: [</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>js启用多线程，由于启用多线程也会浪费时间，因此当项目比较大的时候启用效果更好</p>\n<p>css启用多线程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">  use: &#39;happypack&#x2F;loader?id&#x3D;css&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Happypack(&#123;</span><br><span class=\"line\">  id: &#39;css&#39;,</span><br><span class=\"line\">  use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-自带的优化\"><a href=\"#webpack-自带的优化\" class=\"headerlink\" title=\"webpack 自带的优化\"></a>webpack 自带的优化</h2><p><code>test.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sum &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return a + b + &#39;sum&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let minus &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return a - b + &#39;minus&#39;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  sum, minus</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用import </li>\n</ol>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import calc from &#39;.&#x2F;test&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(calc.sum(1, 2));</span><br></pre></td></tr></table></figure>\n\n\n<p>import在生产环境下会自动去除没有用的代码<code>minus</code>，这叫<code>tree-shaking</code>，将没有用的代码自动删除掉</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let calc &#x3D; require(&#39;.&#x2F;test&#39;)</span><br><span class=\"line\">console.log(calc);   &#x2F;&#x2F; es 6导出，是一个default的对象</span><br><span class=\"line\">console.log(calc.default.sum(1, 2));</span><br></pre></td></tr></table></figure>\n\n<p>require引入es6 模块会把结果放在default上,打包build后并不会把多余<code>minus</code>代码删除掉，不支持<code>tree-shaking</code></p>\n<ol start=\"2\">\n<li>作用域的提升</li>\n</ol>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; 1</span><br><span class=\"line\">let b &#x3D; 2</span><br><span class=\"line\">let c &#x3D; 3</span><br><span class=\"line\">let d &#x3D; a + b + c</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(d, &#39;---------&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>打包出来的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(r.default.sum(1,2));console.log(6,&quot;---------&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>在webpack中可以省略一些可以简化的代码</p>\n<h2 id=\"抽取公共代码\"><a href=\"#抽取公共代码\" class=\"headerlink\" title=\"抽取公共代码\"></a>抽取公共代码</h2><ol>\n<li>抽离自有模块</li>\n</ol>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;             &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">      cacheGroups: &#123;           &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">        common: &#123;              &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">          minSize: 0,          &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">          minChunks: 2,        &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">          chunks: &#39;initial&#39;    &#x2F;&#x2F; 从什么地方开始, 从入口开始</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/plugins/split-chunks-plugin/\" target=\"_blank\" rel=\"noopener\">SplitChunksPlugin</a></p>\n<p>分别有a.js和b.js, index.js和other.js分别引入a和b两个js</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;.&#x2F;a&#39;</span><br><span class=\"line\">import &#39;.&#x2F;b&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;index.js&#39;);</span><br></pre></td></tr></table></figure>\n\n<p><code>other.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;.&#x2F;a&#39;</span><br><span class=\"line\">import &#39;.&#x2F;b&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;other.js&#39;);</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;             &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">      cacheGroups: &#123;           &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">        common: &#123;              &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">          minSize: 0,          &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">          minChunks: 2,        &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">          chunks: &#39;initial&#39;    &#x2F;&#x2F; 从什么地方开始, 从入口开始</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>抽离第三方模块</li>\n</ol>\n<p>比如jquery</p>\n<p><code>index.js</code> 和 <code>other.js</code>分别引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log($);</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>webpack.config.js</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  splitChunks: &#123;              &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">    cacheGroups: &#123;            &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">      common: &#123;               &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">        minSize: 0,           &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">        minChunks: 2,         &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">        chunks: &#39;initial&#39;     &#x2F;&#x2F; 从什么地方开始,刚开始</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      vendor: &#123;</span><br><span class=\"line\">        priority: 1,          &#x2F;&#x2F; 增加权重, (先抽离第三方)</span><br><span class=\"line\">        test: &#x2F;node_modules&#x2F;, &#x2F;&#x2F; 把此目录下的抽离</span><br><span class=\"line\">        minSize: 0,           &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">        minChunks: 2,         &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">        chunks: &#39;initial&#39;     &#x2F;&#x2F; 从什么地方开始,刚开始</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"懒加载-延迟加载\"><a href=\"#懒加载-延迟加载\" class=\"headerlink\" title=\"懒加载(延迟加载)\"></a>懒加载(延迟加载)</h2><p><code>yarn add @babel/plugin-syntax-dynamic-import  -D</code></p>\n<p><code>source.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#39;mayufo&#39;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let button &#x3D; document.createElement(&#39;button&#39;)</span><br><span class=\"line\">button.innerHTML &#x3D; &#39;hello&#39;</span><br><span class=\"line\">button.addEventListener(&#39;click&#39;, function () &#123;</span><br><span class=\"line\">  console.log(&#39;click&#39;)</span><br><span class=\"line\">  &#x2F;&#x2F; es6草案中的语法，jsonp实现动态加载文件</span><br><span class=\"line\">  import(&#39;.&#x2F;source.js&#39;).then(data &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(data.default)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">document.body.appendChild(button)</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">  exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">  include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">  use: [&#123;</span><br><span class=\"line\">    loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        &#39;@babel&#x2F;plugin-syntax-dynamic-import&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"热更新-当页面改变只更新改变的部分，不重新打包\"><a href=\"#热更新-当页面改变只更新改变的部分，不重新打包\" class=\"headerlink\" title=\"热更新(当页面改变只更新改变的部分，不重新打包)\"></a>热更新(当页面改变只更新改变的部分，不重新打包)</h2><p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">    filename: &#39;index.html&#39;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  new webpack.NameModulesPlugin(),          &#x2F;&#x2F; 打印更新的模块路径</span><br><span class=\"line\">  new webpack.HotModuleReplacementPlugin()  &#x2F;&#x2F; 热更新插件</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import str from &#39;.&#x2F;source&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str);</span><br><span class=\"line\"></span><br><span class=\"line\">if (module.hot) &#123;</span><br><span class=\"line\">  module.hot.accept(&#39;.&#x2F;source&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(&#39;文件更新了&#39;);</span><br><span class=\"line\">    require(&#39;.&#x2F;source&#39;)</span><br><span class=\"line\">    console.log(str);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍-SyncHook\"><a href=\"#tapable介绍-SyncHook\" class=\"headerlink\" title=\"tapable介绍 - SyncHook\"></a>tapable介绍 - SyncHook</h2><p><a href=\"https://juejin.im/post/5abf33f16fb9a028e46ec352\" target=\"_blank\" rel=\"noopener\">tapable</a></p>\n<p><code>webpack</code>本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是<code>Tapable</code>，<code>webpack</code>中最核心的负责编译的<code>Compiler</code>和负责创建<code>bundles</code>的<code>Compilation</code>都是<code>Tapable</code>的实例。</p>\n<p><code>SyncHook</code> 不关心监听函数的返回值</p>\n<p><code>yarn add tabable</code></p>\n<p><code>1.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 结构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">  constructor () &#123;</span><br><span class=\"line\">    this.hooks &#x3D; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">      arch: new SyncHook([&#39;name&#39;]),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  start () &#123;</span><br><span class=\"line\">    this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap () &#123;   &#x2F;&#x2F;  注册监听函数</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;node&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;react&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>1.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncHook &#123;  &#x2F;&#x2F; 勾子是同步的</span><br><span class=\"line\">  constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">    this.tasks &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap (name, task) &#123;</span><br><span class=\"line\">    this.tasks.push(task)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  call (...args) &#123;</span><br><span class=\"line\">    this.tasks.forEach((task) &#x3D;&gt; task(...args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">  console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">  console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"tapable介绍-SyncBailHook\"><a href=\"#tapable介绍-SyncBailHook\" class=\"headerlink\" title=\"tapable介绍 - SyncBailHook\"></a>tapable介绍 - SyncBailHook</h2><p><code>SyncBailHook</code>为勾子加了个保险，当<code>return</code>返回不是<code>undefine</code>就会停止</p>\n<p><code>2.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncBailHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">  constructor () &#123;</span><br><span class=\"line\">    this.hooks &#x3D; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">      arch: new SyncBailHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  start () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 发布</span><br><span class=\"line\">    this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;node&#39;, name)</span><br><span class=\"line\">      return &#39;停止学习&#39;  &#x2F;&#x2F; 会停止</span><br><span class=\"line\">      &#x2F;&#x2F; return undefined</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;react&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>2.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncBailHook &#123;  &#x2F;&#x2F; 勾子是同步的</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        let ret;   &#x2F;&#x2F; 当前函数的返回值</span><br><span class=\"line\">        let index &#x3D; 0; &#x2F;&#x2F; 当前要执行的第一个</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            ret &#x3D; this.tasks[index](...args)</span><br><span class=\"line\">        &#125; while (ret &#x3D;&#x3D;&#x3D; undefined  &amp;&amp; index &lt; this.tasks.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncBailHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return &#39;停止学习&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; return undefined</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍-SyncWaterfallHook\"><a href=\"#tapable介绍-SyncWaterfallHook\" class=\"headerlink\" title=\"tapable介绍 - SyncWaterfallHook\"></a>tapable介绍 - SyncWaterfallHook</h2><p><code>SyncWaterfallHook</code>上一个监听函数的返回值可以传给下一个监听函数</p>\n<p><code>3.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncWaterfallHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; waterfall 瀑布</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new SyncWaterfallHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name)</span><br><span class=\"line\">            return &#39;学的不错&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>3.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncWaterfallHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        let [first, ...others] &#x3D; this.tasks;</span><br><span class=\"line\">        let ret &#x3D; first(...args)</span><br><span class=\"line\">        others.reduce((a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return b(a);</span><br><span class=\"line\">        &#125;, ret);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncWaterfallHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return &#39;react Ok&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; return undefined</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">    return &#39;node Ok&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;webpack&#39;, function (data) &#123;</span><br><span class=\"line\">    console.log(&#39;webpack&#39;, data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍-SyncLoopHook\"><a href=\"#tapable介绍-SyncLoopHook\" class=\"headerlink\" title=\"tapable介绍 - SyncLoopHook\"></a>tapable介绍 - SyncLoopHook</h2><p><code>SyncLoopHook</code>当监听函数被触发的时候，如果该监听函数返回<code>true</code>时则这个监听函数会反复执行，如果返回 <code>undefined</code> 则表示退出循环</p>\n<p><code>4.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncLoopHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 不返回undefined 会多次执行</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new SyncLoopHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;node&#39;,  (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name)</span><br><span class=\"line\">            return ++this.index &#x3D;&#x3D;&#x3D; 3 ? undefined : &#39;继续学&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;react&#39;,  (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>4.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncLoopHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        this.tasks.forEach(task &#x3D;&gt; &#123;</span><br><span class=\"line\">            let ret</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                ret &#x3D; task(...args);</span><br><span class=\"line\">            &#125; while(ret !&#x3D;&#x3D; undefined)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncLoopHook([&#39;name&#39;])</span><br><span class=\"line\">let total &#x3D; 0</span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return ++total &#x3D;&#x3D;&#x3D; 3 ? undefined: &#39;继续学&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;webpack&#39;, function (data) &#123;</span><br><span class=\"line\">    console.log(&#39;webpack&#39;, data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"AsyncParallelHook-与-AsyncParallelBailHook\"><a href=\"#AsyncParallelHook-与-AsyncParallelBailHook\" class=\"headerlink\" title=\"AsyncParallelHook 与 AsyncParallelBailHook\"></a><code>AsyncParallelHook</code> 与 <code>AsyncParallelBailHook</code></h2><p>异步的勾子分两种<code>串行</code>和<code>并行</code></p>\n<p><code>并行</code>等待所有并发的异步事件执行后执行回调</p>\n<p>注册的三种方法</p>\n<ol>\n<li>异步的注册方法<code>tap</code></li>\n<li>异步的注册方法<code>tapAsync</code>， 还有个回调参数</li>\n<li><code>topPromise</code>,注册<code>promise</code></li>\n</ol>\n<p>调用的三种</p>\n<ol>\n<li>call (同步)</li>\n<li>callAsync （异步）</li>\n<li>promise （异步）</li>\n</ol>\n<p>这里介绍的是异步并行的</p>\n<h4 id=\"AsyncParallelHook\"><a href=\"#AsyncParallelHook\" class=\"headerlink\" title=\"AsyncParallelHook\"></a>AsyncParallelHook</h4><p>不关心监听函数的返回值。</p>\n<p><code>5.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncParallelHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 不返回undefined 会多次执行</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncParallelHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布callAsync</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布promise</span><br><span class=\"line\">        this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">                console.log(&#39;end&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        &#x2F;&#x2F; 注册tapAsync</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅 tapPromise</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n\n<p><code>5.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncParallelHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()   &#x2F;&#x2F; 拿出最终的函数</span><br><span class=\"line\">        let index &#x3D; 0</span><br><span class=\"line\">        let done &#x3D; () &#x3D;&gt; &#123;   &#x2F;&#x2F; 类似promise.all的实现</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">            if (index &#x3D;&#x3D;&#x3D; this.tasks.length) &#123;</span><br><span class=\"line\">                finalCallback();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.tasks.forEach(task &#x3D;&gt; &#123;</span><br><span class=\"line\">            task(...args, done) &#x2F;&#x2F; 这里的args 已经把最后一个参数删掉</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        let tasks &#x3D; this.tasks.map(task &#x3D;&gt; task(...args))</span><br><span class=\"line\">        return Promise.all(tasks)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncParallelHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"AsyncParallelBailHook\"><a href=\"#AsyncParallelBailHook\" class=\"headerlink\" title=\"AsyncParallelBailHook\"></a>AsyncParallelBailHook</h4><p>只要监听函数的返回值不为 <code>null</code>，就会忽略后面的监听函数执行，直接跳跃到<code>callAsync</code>等触发函数绑定的回调函数，然后执行这个被绑定的回调函数。</p>\n<p>使用和原理与<code>SyncBailHook</code>相似</p>\n<h2 id=\"异步串行-——-AsyncSeriesHook\"><a href=\"#异步串行-——-AsyncSeriesHook\" class=\"headerlink\" title=\"异步串行 —— AsyncSeriesHook\"></a>异步串行 —— AsyncSeriesHook</h2><p><code>串行</code>one by one</p>\n<p><code>6.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncSeriesHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncSeriesHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布</span><br><span class=\"line\">        this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">                console.log(&#39;end&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start(); &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>6.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncSeriesHook &#123;  &#x2F;&#x2F;</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()</span><br><span class=\"line\">        let index &#x3D; 0;</span><br><span class=\"line\">        let next &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (this.tasks.length &#x3D;&#x3D;&#x3D; index) return finalCallback();</span><br><span class=\"line\">            let task &#x3D; this.tasks[index++];</span><br><span class=\"line\">            task(...args, next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 将promise串联起来</span><br><span class=\"line\">        let [first, ...other] &#x3D; this.tasks</span><br><span class=\"line\">        return other.reduce((p, n) &#x3D;&gt; &#123;</span><br><span class=\"line\">             return p.then(() &#x3D;&gt; n (...args))</span><br><span class=\"line\">        &#125;, first(...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncSeriesHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步串行-——-AsyncSeriesWaterfallHook\"><a href=\"#异步串行-——-AsyncSeriesWaterfallHook\" class=\"headerlink\" title=\"异步串行 —— AsyncSeriesWaterfallHook\"></a>异步串行 —— AsyncSeriesWaterfallHook</h2><p>上一个监听函数的中的<code>callback(err, data)</code>的第二个参数,可以作为下一个监听函数的参数</p>\n<p><code>7.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncSeriesWaterfallHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncSeriesWaterfallHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                &#x2F;&#x2F; callback(null, &#39;result&#39;)</span><br><span class=\"line\">                callback(&#39;error&#39;, &#39;result&#39;)   &#x2F;&#x2F; 如果放error, 会跳过直接后面的勾子，直接走到最终的</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                callback()</span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;             console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;             resolve()</span><br><span class=\"line\">        &#x2F;&#x2F;         &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;             console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;             resolve()</span><br><span class=\"line\">        &#x2F;&#x2F;         &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start(); &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>7.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncSeriesWaterfallHook &#123;  &#x2F;&#x2F;</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()</span><br><span class=\"line\">        let index &#x3D; 0;</span><br><span class=\"line\">        let next &#x3D; (err, data) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let task &#x3D; this.tasks[index]</span><br><span class=\"line\">            if(!task) return finalCallback();</span><br><span class=\"line\">            if (index &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 执行的第一个</span><br><span class=\"line\">                task(...args, next)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                task(data, next)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 将promise串联起来</span><br><span class=\"line\">        let [first, ...other] &#x3D; this.tasks</span><br><span class=\"line\">        return other.reduce((p, n) &#x3D;&gt; &#123;</span><br><span class=\"line\">             return p.then((data) &#x3D;&gt; n(data))</span><br><span class=\"line\">        &#125;, first(...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncSeriesWaterfallHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback(null, &#39;结果1&#39;)</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback(null, &#39;结果2&#39;)</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve(&#39;result&#39;)</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"手写webpack\"><a href=\"#手写webpack\" class=\"headerlink\" title=\"手写webpack\"></a>手写webpack</h2><p><a href=\"https://github.com/mayufo/webpack-training\" target=\"_blank\" rel=\"noopener\">对应的may-pack项目</a></p>\n<p><code>yarn add webpack webpack-cli -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>npx webpack</code></p>\n<p>生成文件<code>bundle.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (modules) &#123;</span><br><span class=\"line\">    var installedModules &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (installedModules[moduleId]) &#123;</span><br><span class=\"line\">            return installedModules[moduleId].exports;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class=\"line\">            i: moduleId,</span><br><span class=\"line\">            l: false,</span><br><span class=\"line\">            exports: &#123;&#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">        module.l &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">        return module.exports;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Load entry module and return exports</span><br><span class=\"line\">    return __webpack_require__(__webpack_require__.s &#x3D; &quot;.&#x2F;src&#x2F;index.js&quot;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">(&#123;</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;a.js&quot;:</span><br><span class=\"line\">        (function (module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">            eval(&quot;let b &#x3D; __webpack_require__(&#x2F;*! .&#x2F;base&#x2F;b *&#x2F; \\&quot;.&#x2F;src&#x2F;base&#x2F;b.js\\&quot;)\\n\\nmodule.exports &#x3D; &#39;a&#39;+ b\\n\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;a.js?&quot;);</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;base&#x2F;b.js&quot;:</span><br><span class=\"line\">        (function (module, exports) &#123;</span><br><span class=\"line\">            eval(&quot;module.exports &#x3D; &#39;b&#39;\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;base&#x2F;b.js?&quot;);</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;index.js&quot;:</span><br><span class=\"line\">        (function (module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">            eval(&quot; let str &#x3D; __webpack_require__(&#x2F;*! .&#x2F;a.js *&#x2F; \\&quot;.&#x2F;src&#x2F;a.js\\&quot;)\\n\\n console.log(str);\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;index.js?&quot;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>新建项目用于自己的<code>webpack</code>,这里叫<code>may-pack</code></p>\n<p><code>yarn init</code></p>\n<p>如果在node里想执行命令，创建<code>bin</code>文件,再创建<code>may-pack.js</code></p>\n<p>配置<code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;may-pack&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class=\"line\">  &quot;bin&quot;: &#123;</span><br><span class=\"line\">    &quot;may-pack&quot;: &quot;.&#x2F;bin&#x2F;may-pack.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!  &#x2F;usr&#x2F;bin&#x2F;env node </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; node环境</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;start&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npm link</code>将npm 模块链接到对应的运行项目中去，方便地对模块进行调试和测试</p>\n<p>在想运行<code>may-pack</code>的项目中运行，<code>npm link may-pack</code> 得到 <code>start</code></p>\n<h2 id=\"webpack分析及处理\"><a href=\"#webpack分析及处理\" class=\"headerlink\" title=\"webpack分析及处理\"></a>webpack分析及处理</h2><p><code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!  &#x2F;usr&#x2F;bin&#x2F;env node</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; node环境</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;start&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 拿到配置文件webpack.config.js</span><br><span class=\"line\">let config &#x3D; require(path.resolve(&#39;webpack.config.js&#39;));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let Compiler &#x3D; require(&#39;..&#x2F;lib&#x2F;Compiler.js&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">let compiler &#x3D; new Compiler(config);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 标识运行编译</span><br><span class=\"line\">compiler.run()</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>lib</code>文件<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n\n<p>主要两个任务</p>\n<ol>\n<li>拿到入口Id</li>\n<li>解析模块，也就是实现<code>buildModule</code>方法</li>\n</ol>\n<h2 id=\"创建依赖关系\"><a href=\"#创建依赖关系\" class=\"headerlink\" title=\"创建依赖关系\"></a>创建依赖关系</h2><p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;traverse 对ast解析遍历语法树 负责替换，删除和添加节点</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;types 用于AST节点的Lodash-esque实用程序库</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;generator 结果生成</span><br><span class=\"line\"></span><br><span class=\"line\">let babylon &#x3D; require(&#39;babylon&#39;)</span><br><span class=\"line\">let traverse &#x3D; require(&#39;@babel&#x2F;traverse&#39;).default;</span><br><span class=\"line\">let type &#x3D; require(&#39;@babel&#x2F;types&#39;);</span><br><span class=\"line\">let generator &#x3D; require(&#39;@babel&#x2F;generator&#39;).default</span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parse (source, parentPath) &#123;</span><br><span class=\"line\">        console.log(source, parentPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">        let source &#x3D; this.getSource(modulePath)  &#x2F;&#x2F; 得到入口文件的内容</span><br><span class=\"line\">        &#x2F;&#x2F; 模块id modulePath(需要相对路径) &#x3D; modulePath(模块路径) - this.root(项目工作路径)   src&#x2F;index.js</span><br><span class=\"line\">        let moduleName &#x3D; &#39;.&#x2F;&#39; + path.relative(this.root, modulePath)</span><br><span class=\"line\">        console.log(source, moduleName);  &#x2F;&#x2F; 拿到代码 和相对路径 .&#x2F;src&#x2F;index.js</span><br><span class=\"line\">        if (isEntry) &#123;</span><br><span class=\"line\">            this.entryId &#x3D; moduleName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let &#123;sourceCode, dependencies&#125; &#x3D; this.parse(source, path.dirname(moduleName))   &#x2F;&#x2F; .&#x2F;src</span><br><span class=\"line\">        &#x2F;&#x2F; 把相对路径和模块中的内容对应起来</span><br><span class=\"line\">        this.modules[moduleName] &#x3D; sourceCode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        console.log(this.modules, this.entryId);</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ast递归解析\"><a href=\"#ast递归解析\" class=\"headerlink\" title=\"ast递归解析\"></a>ast递归解析</h2><p><code>parse</code>方法主要靠解析语法树来进行转义<br><code>babylon</code>  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。<br><code>@babel/traverse</code> 对ast解析遍历语法树 负责替换，删除和添加节点<br><code>@babel/types</code> 用于AST节点的Lodash-esque实用程序库<br><code>@babel/generator</code> 结果生成</p>\n<p><code>yarn add babylon @babel/traverse @babel/types @babel/generator</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;traverse 对ast解析遍历语法树 负责替换，删除和添加节点</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;types 用于AST节点的Lodash-esque实用程序库</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;generator 结果生成</span><br><span class=\"line\"></span><br><span class=\"line\">let babylon &#x3D; require(&#39;babylon&#39;)</span><br><span class=\"line\">let traverse &#x3D; require(&#39;@babel&#x2F;traverse&#39;).default;</span><br><span class=\"line\">let type &#x3D; require(&#39;@babel&#x2F;types&#39;);</span><br><span class=\"line\">let generator &#x3D; require(&#39;@babel&#x2F;generator&#39;).default</span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parse (source, parentPath) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; AST解析语法树</span><br><span class=\"line\">        let ast &#x3D; babylon.parse(source)</span><br><span class=\"line\">        let dependencies &#x3D; []; &#x2F;&#x2F; 依赖的数组</span><br><span class=\"line\">        &#x2F;&#x2F; https:&#x2F;&#x2F;astexplorer.net&#x2F;</span><br><span class=\"line\">        traverse(ast, &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 调用表达式</span><br><span class=\"line\">            CallExpression(p) &#123;</span><br><span class=\"line\">                let node &#x3D; p.node; &#x2F;&#x2F;对应的节点</span><br><span class=\"line\">                if(node.callee.name &#x3D;&#x3D;&#x3D; &#39;require&#39;) &#123;</span><br><span class=\"line\">                   node.callee.name &#x3D; &#39;__webpack_require__&#39;</span><br><span class=\"line\">                    let moduledName &#x3D; node.arguments[0].value   &#x2F;&#x2F; 取到模块的引用名字</span><br><span class=\"line\">                    moduledName &#x3D; moduledName + (path.extname(moduledName) ? &#39;&#39;: &#39;.js&#39;);  &#x2F;&#x2F; .&#x2F;a.js</span><br><span class=\"line\">                    moduledName &#x3D; &#39;.&#x2F;&#39; + path.join(parentPath, moduledName)  &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;a.js&#39;</span><br><span class=\"line\">                    dependencies.push(moduledName)</span><br><span class=\"line\">                    node.arguments &#x3D; [type.stringLiteral(moduledName)] &#x2F;&#x2F; 改掉源码</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        let sourceCode &#x3D; generator(ast).code</span><br><span class=\"line\">        return &#123; sourceCode, dependencies &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">        let source &#x3D; this.getSource(modulePath)  &#x2F;&#x2F; 得到入口文件的内容</span><br><span class=\"line\">        &#x2F;&#x2F; 模块id modulePath(需要相对路径) &#x3D; modulePath(模块路径) - this.root(项目工作路径)   src&#x2F;index.js</span><br><span class=\"line\">        let moduleName &#x3D; &#39;.&#x2F;&#39; + path.relative(this.root, modulePath)</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(source, moduleName);  &#x2F;&#x2F; 拿到代码 和相对路径 .&#x2F;src&#x2F;index.js</span><br><span class=\"line\">        if (isEntry) &#123;</span><br><span class=\"line\">            this.entryId &#x3D; moduleName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 解析把source源码进行改造， 返回一个依赖列表</span><br><span class=\"line\">        let &#123;sourceCode, dependencies&#125; &#x3D; this.parse(source, path.dirname(moduleName))   &#x2F;&#x2F; .&#x2F;src</span><br><span class=\"line\">        &#x2F;&#x2F; 把相对路径和模块中的内容对应起来</span><br><span class=\"line\">        this.modules[moduleName] &#x3D; sourceCode</span><br><span class=\"line\">        dependencies.forEach(dep &#x3D;&gt; &#123;  &#x2F;&#x2F; 附模块的加载 递归加载</span><br><span class=\"line\">            this.buildModule(path.join(this.root, dep), false)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        console.log(this.modules, this.entryId);</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成打包工具\"><a href=\"#生成打包工具\" class=\"headerlink\" title=\"生成打包工具\"></a>生成打包工具</h2><p>使用ejs模板</p>\n<p><code>may-pack</code>中<code>main.ejs</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (modules) &#123;</span><br><span class=\"line\">var installedModules &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">if (installedModules[moduleId]) &#123;</span><br><span class=\"line\">return installedModules[moduleId].exports;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class=\"line\">i: moduleId,</span><br><span class=\"line\">l: false,</span><br><span class=\"line\">exports: &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">module.l &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">return module.exports;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Load entry module and return exports</span><br><span class=\"line\">return __webpack_require__(__webpack_require__.s &#x3D; &quot;&lt;%-entryId %&gt;&quot;);</span><br><span class=\"line\">&#125;)(&#123;</span><br><span class=\"line\">&lt;% for(let key in modules)&#123; %&gt;</span><br><span class=\"line\">    &quot;&lt;%- key %&gt;&quot;:</span><br><span class=\"line\">    (function (module, exports,__webpack_require__) &#123;</span><br><span class=\"line\">eval(&#96;&lt;%-modules[key] %&gt;&#96;);</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ejs.bootcss.com/\" target=\"_blank\" rel=\"noopener\">ejs入门</a></p>\n<p><code>yarn add ejs</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ejs &#x3D; require(&#39;ejs&#39;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">        &#x2F;&#x2F; 输出到那个目录下</span><br><span class=\"line\">        let main &#x3D; path.join(this.config.output.path, this.config.output.filename)</span><br><span class=\"line\">        let templateStr &#x3D; this.getSource(path.join(__dirname, &#39;main.ejs&#39;))</span><br><span class=\"line\">        let code &#x3D; ejs.render(templateStr, &#123; entryId: this.entryId, modules: this.modules&#125;)</span><br><span class=\"line\">        this.assets &#x3D; &#123;&#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 路径对应的代码</span><br><span class=\"line\">        this.assets[main] &#x3D; code</span><br><span class=\"line\">        fs.writeFileSync(main, this.assets[main])</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack-training</code>项目中运行<code>npx may-pack</code>, 得到<code>bundle.js</code>,运行得到结果</p>\n<h2 id=\"增加loader\"><a href=\"#增加loader\" class=\"headerlink\" title=\"增加loader\"></a>增加loader</h2><p>创建<code>loader</code>文件夹，创建<code>less-loader1.js</code>和<code>style-loader1.js</code></p>\n<p><code>yarn add less</code></p>\n<p><a href=\"http://lesscss.cn/#using-less\" target=\"_blank\" rel=\"noopener\">less使用</a></p>\n<p><code>less-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将less转为css</span><br><span class=\"line\">let less &#x3D; require(&#39;less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let css &#x3D; &#39;&#39;</span><br><span class=\"line\">    less.render(source, function (err, output) &#123;</span><br><span class=\"line\">        css &#x3D; output.css</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    css &#x3D; css.replace(&#x2F;\\n&#x2F;g, &#39;\\\\n&#39;);</span><br><span class=\"line\">    return css</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>style-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将css插入到html头部</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    console.log(111);</span><br><span class=\"line\">    let style &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; $&#123;JSON.stringify(source)&#125;</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    return style</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; JSON.stringify(source) 可以将代码转为一行</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader1&#39;),</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader1&#39;)</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>index.less</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str &#x3D; require(&#39;.&#x2F;a.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">require(&#39;.&#x2F;index.less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str);</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 匹配各种文件的规则</span><br><span class=\"line\">        let rules&#x3D; this.config.module.rules;   &#x2F;&#x2F; webpack.config.js 中rules的数组</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">        for (let i &#x3D; 0; i &lt; rules.length; i++) &#123;</span><br><span class=\"line\">            let rule &#x3D; rules[i]</span><br><span class=\"line\">            let &#123;test, use&#125; &#x3D; rule</span><br><span class=\"line\">            let len &#x3D; use.length - 1</span><br><span class=\"line\"></span><br><span class=\"line\">            if (test.test(modulePath)) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; console.log(use[len]);</span><br><span class=\"line\">                function normalLoader () &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(use[len--]);</span><br><span class=\"line\">                    let loader &#x3D; require(use[len--])</span><br><span class=\"line\">                    content &#x3D; loader(content)</span><br><span class=\"line\">                    &#x2F;&#x2F; 递归调用loader 实现转化</span><br><span class=\"line\">                    if (len &gt;&#x3D; 0) &#123;</span><br><span class=\"line\">                        normalLoader()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                normalLoader()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx may-pack</code></p>\n<h2 id=\"增加plugins\"><a href=\"#增加plugins\" class=\"headerlink\" title=\"增加plugins\"></a>增加plugins</h2><p><code>yarn add tapable</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            entryOption: new SyncHook(),  &#x2F;&#x2F; 入口选项</span><br><span class=\"line\">            compile: new SyncHook(),      &#x2F;&#x2F; 编译</span><br><span class=\"line\">            afterCompile: new SyncHook(),  &#x2F;&#x2F; 编译完成</span><br><span class=\"line\">            afterPlugins: new SyncHook(),   &#x2F;&#x2F; 编译完插件</span><br><span class=\"line\">            run: new SyncHook(),         &#x2F;&#x2F; 运行</span><br><span class=\"line\">            emit: new SyncHook(),        &#x2F;&#x2F; 发射</span><br><span class=\"line\">            done: new SyncHook()         &#x2F;&#x2F; 完成</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 如果传递了plugins参数</span><br><span class=\"line\">        let plugins &#x3D; this.config.plugins</span><br><span class=\"line\">        if (Array.isArray(plugins)) &#123;</span><br><span class=\"line\">            plugins.forEach(plugin &#x3D;&gt; &#123;</span><br><span class=\"line\">                plugin.apply(this); &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.hooks.afterPlugins.call()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack.config.js</code>中写插件方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class P &#123;</span><br><span class=\"line\">    apply(compiler) &#123;   &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">        &#x2F;&#x2F; 绑定</span><br><span class=\"line\">        compiler.hooks.emit.tap(&#39;emit&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;emit&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class P1 &#123;</span><br><span class=\"line\">    apply(compiler) &#123;   &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">        &#x2F;&#x2F; 绑定</span><br><span class=\"line\">        compiler.hooks.afterPlugins.tap(&#39;emit&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;afterPlugins&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader&#39;),</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader&#39;)</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new P(),</span><br><span class=\"line\">        new P1()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在各个地方调用</p>\n<p><code>may-pack</code>中<code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">&#x2F;&#x2F; 调用</span><br><span class=\"line\">compiler.hooks.entryOption.call()</span><br><span class=\"line\">&#x2F;&#x2F; 标识运行编译</span><br><span class=\"line\">compiler.run()</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run() &#123;</span><br><span class=\"line\">        this.hooks.run.call()</span><br><span class=\"line\"></span><br><span class=\"line\">        this.hooks.compile.call()</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(this.modules, this.entryId);</span><br><span class=\"line\">        this.hooks.afterCompile.call()</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">        this.hooks.emit.call()</span><br><span class=\"line\">        this.hooks.done.call()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx may-pack</code></p>\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p><a href=\"https://juejin.im/post/59e6a5de518825469c7461da\" target=\"_blank\" rel=\"noopener\">手写loader</a></p>\n<p><code>webapck.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.js&#x2F;,</span><br><span class=\"line\">                use: &#39;loader1&#39; &#x2F;&#x2F; 如何找到这个loader1</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>loader</code>文件<code>loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(22);</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolveLoader: &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 别名</span><br><span class=\"line\">      &#x2F;&#x2F; alias: &#123;</span><br><span class=\"line\">      &#x2F;&#x2F;     loader1: path.resolve(__dirname, &#39;loader&#39;, &#39;loader1&#39;)</span><br><span class=\"line\">      &#x2F;&#x2F; &#125;</span><br><span class=\"line\">        modules: [&#39;node_modules&#39;, path.resolve(__dirname, &#39;loader&#39;)]  &#x2F;&#x2F; 先找node_modules, 再去loader中去找</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">                &#x2F;&#x2F; use: [path.resolve(__dirname, &#39;loader&#39;, &#39;loader1&#39;)]</span><br><span class=\"line\">                use: &#39;loader1&#39; &#x2F;&#x2F; 如何找到这个loader1</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#x2F;&#x2F; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;     test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">            &#x2F;&#x2F;     use: [</span><br><span class=\"line\">            &#x2F;&#x2F;         path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader&#39;),</span><br><span class=\"line\">            &#x2F;&#x2F;         path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader&#39;)</span><br><span class=\"line\">            &#x2F;&#x2F;     ]</span><br><span class=\"line\">            &#x2F;&#x2F; &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何找到这个<code>loader1</code></p>\n<ol>\n<li>通过配别名<code>alias</code></li>\n<li>通过<code>modules</code></li>\n</ol>\n<p><code>npx webpack</code></p>\n<h2 id=\"配置多个loader\"><a href=\"#配置多个loader\" class=\"headerlink\" title=\"配置多个loader\"></a>配置多个loader</h2><ol>\n<li>数组方式</li>\n</ol>\n<p>先分别在<code>loader</code>文件下创建，<code>loader2.js</code>和<code>loader3.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;loader2&#39;);  &#x2F;&#x2F; loader3.js 类似</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader3&#39;, &#39;loader2&#39;, &#39;loader1&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx webpack</code>,分别打出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>对象方式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader3&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader2&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader1&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx webpack</code>,分别打出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p><code>loader</code>的顺序: 从右到左, 从下到上</p>\n</blockquote>\n<p>也可以通过配置不同的参数改变<code>loader</code>的执行顺序，<code>pre</code> 前面的， <code>post</code>在后面的， <code>normal</code>正常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader1&#39;],</span><br><span class=\"line\">    enforce: &quot;pre&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader2&#39;]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader3&#39;],</span><br><span class=\"line\">    enforce: &quot;post&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>loader</code> 带参数执行的顺序: <code>pre  -&gt; normal -&gt; inline -&gt; post</code></p>\n<p><code>inline</code>为行内<code>loader</code></p>\n<p>在<code>loader</code>文件中新建<code>inlin-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;inline&#39;);</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>src/a.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#39;may&#39;</span><br></pre></td></tr></table></figure>\n\n<p><code>src/index</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#39;hello&#39;)</span><br><span class=\"line\">let srt &#x3D; require(&#39;-!inline-loader!.&#x2F;a&#39;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>-!</code>禁用<code>pre-loader</code>和 <code>normal-loader</code>来处理了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">inline</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li><code>!</code>禁用<code>normal-loader</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">loader1</span><br><span class=\"line\">inline</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li><code>!!</code> 禁用<code>pre-loader</code>、<code>normal-loader</code>、<code>post-loader</code>,只能行内处理</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">inline</span><br></pre></td></tr></table></figure>\n\n<p>loader 默认由两部分组成<code>pitch</code>和<code>normal</code></p>\n<p><code>user: [loader3, loader2, loader1]</code></p>\n<p>无返回值: 先执行pitch方法,从左到右，再获取资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    pitch loader - 无返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   loader3 → loader2 → loader1  </span><br><span class=\"line\">                                    ↘</span><br><span class=\"line\">                                      资源</span><br><span class=\"line\">                                    ↙</span><br><span class=\"line\">normal   loader3 ← loader2 ← loader1</span><br></pre></td></tr></table></figure>\n\n<p>有返回值: 直接跳过后续所有的<code>loader</code>包括自己的,跳到之前的<code>loader</code>, 可用于阻断</p>\n<p><a href=\"https://webpack.docschina.org/api/loaders/\" target=\"_blank\" rel=\"noopener\">loader</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user: [loader3, loader2, loader1]</span><br><span class=\"line\"></span><br><span class=\"line\">    pitch loader - 有返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   loader3 → loader2  loader1  </span><br><span class=\"line\">                     ↙               </span><br><span class=\"line\">               有返回值               资源</span><br><span class=\"line\">               ↙                      </span><br><span class=\"line\">normal  loader3  loader2  loader1</span><br></pre></td></tr></table></figure>\n\n<p><code>loadeer2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;loader2&#39;);</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loader.pitch &#x3D; function () &#123;</span><br><span class=\"line\">    return &#39;111&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"babel-loader实现\"><a href=\"#babel-loader实现\" class=\"headerlink\" title=\"babel-loader实现\"></a><code>babel-loader</code>实现</h2><p><code>yarn add @babel/core @babel/preset-env</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#39;\\.js$&#x2F;&#39;,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;babel-loader2&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">                &#39;@babel&#x2F;preset-env&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>loader</code>文件创建<code>babel-loader2.js</code>(如果你已经装过<code>babel-loader</code>)</p>\n<p>拿到<code>babel</code>的参数</p>\n<p><code>yarn add loader-utils</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 需要在webpack.config.js拿到babel的预设, 通过预设转换模块, 先引入babel</span><br><span class=\"line\">let babel &#x3D; require(&#39;@babel&#x2F;core&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D;require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码  这里的this就是loader的上下文</span><br><span class=\"line\">    let options &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    console.log(this.resourcePath, 444);   &#x2F;&#x2F; [.&#x2F;src&#x2F;index.js]</span><br><span class=\"line\">    let callback &#x3D; this.async(); &#x2F;&#x2F; babel的转换是异步的,同步的返回是不行的， 不能用return  同步就是直接掉用 异步会在async中</span><br><span class=\"line\">    babel.transform(source, &#123;</span><br><span class=\"line\">        ...options,</span><br><span class=\"line\">        sourceMap: true,         &#x2F;&#x2F; 是否设置sourceMap 还需要再webpack.config.js 中配置  devtool: &#39;source-map&#39;</span><br><span class=\"line\">        filename: this.resourcePath.split(&#39;&#x2F;&#39;).pop()   &#x2F;&#x2F;  给生成的&#96;source-map&#96;指定名字</span><br><span class=\"line\">    &#125;, function (err, result) &#123;</span><br><span class=\"line\">        callback(err, result.code, result.map)   &#x2F;&#x2F; 异步 参数分别是「错误 转化后的代码 和 sourceMap」</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(options);</span><br><span class=\"line\">    &#x2F;&#x2F; return source  失效</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class May &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.name &#x3D; &#39;may&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getName () &#123;</span><br><span class=\"line\">        return this.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let may &#x3D; new May()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(may.getName());</span><br></pre></td></tr></table></figure>\n\n<p><code>npx webpack</code></p>\n<h2 id=\"banner-loader实现-自创\"><a href=\"#banner-loader实现-自创\" class=\"headerlink\" title=\"banner-loader实现(自创)\"></a><code>banner-loader</code>实现(自创)</h2><p>给所有匹配的<code>js</code>加一个注释</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    &#x2F;&#x2F; 给所有匹配的&#96;js&#96;加一个注释</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;banner-loader&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">           text: &#39;may&#39;,</span><br><span class=\"line\">           filename: path.resolve(__dirname, &#39;banner.js&#39;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>banner.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二次星球中毒</span><br></pre></td></tr></table></figure>\n\n\n<p>在<code>loader</code>文件创建<code>banner-loader.js</code></p>\n<p><code>yarn add schema-utils</code> 校验自己写的<code>loader</code>格式是否正确</p>\n<p><a href=\"https://github.com/webpack-contrib/schema-utils\" target=\"_blank\" rel=\"noopener\">schema-utils</a></p>\n<p><code>banner-loader.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到loader的配置</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 校验loader</span><br><span class=\"line\">let validateOptions &#x3D; require(&#39;schema-utils&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 读取文件</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)  &#x2F;&#x2F; 异步</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    let options &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    let callback &#x3D; this.async()  &#x2F;&#x2F; 读取文件是异步</span><br><span class=\"line\">    let schema &#x3D; &#123;</span><br><span class=\"line\">        type: &#39;object&#39;,</span><br><span class=\"line\">        properties: &#123;</span><br><span class=\"line\">            text: &#123;</span><br><span class=\"line\">                type: &#39;string&#39;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            filename: &#123;</span><br><span class=\"line\">                type: &#39;string&#39;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    validateOptions(schema, options, &#39;banner-loader&#39;)  &#x2F;&#x2F; 自己的校验格式， 自己的写的配置， 对应的loader名字</span><br><span class=\"line\">    if (options.filename) &#123;</span><br><span class=\"line\">        this.cacheable(false)  &#x2F;&#x2F; 不要缓存  如果有大量计算 推荐缓存</span><br><span class=\"line\">        &#x2F;&#x2F; this.cacheable &amp;&amp; this.cacheable()</span><br><span class=\"line\">        this.addDependency(options.filename) &#x2F;&#x2F; 自动增加依赖</span><br><span class=\"line\">        fs.readFile(options.filename, &#39;utf8&#39;, function (err, data) &#123;</span><br><span class=\"line\">            callback(err, &#96;&#x2F;**$&#123;data&#125;**&#x2F;$&#123;source&#125;&#96;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        callback(null, &#96;&#x2F;**$&#123;options.text&#125;**&#x2F;$&#123;source&#125;&#96;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>优化:</p>\n<ol>\n<li>修改<code>banner.js</code>的内容后, <code>webpack</code>进行监控，打包<code>webapck.config.js</code>配置<code>watch: true</code></li>\n<li><code>loader</code>缓存</li>\n</ol>\n<h2 id=\"实现file-loader和url-loader\"><a href=\"#实现file-loader和url-loader\" class=\"headerlink\" title=\"实现file-loader和url-loader\"></a>实现<code>file-loader</code>和<code>url-loader</code></h2><p><code>yarn add mime</code></p>\n<p>其主要用途是设置某种扩展名的文件的响应程序类型</p>\n<p><a href=\"https://github.com/broofa/node-mime#readme\" target=\"_blank\" rel=\"noopener\">mime</a></p>\n<p>创建<code>file-loader.js1</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    &#x2F;&#x2F; file-loader需要返回路径</span><br><span class=\"line\">    let filename &#x3D; loaderUtils.interpolateName(this, &#39;[hash].[ext]&#39;, &#123;content: source &#125;)</span><br><span class=\"line\">    this.emitFile(filename, source) &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    console.log(&#39;loader1&#39;);</span><br><span class=\"line\">    return &#96;module.exports&#x3D;&quot;$&#123;filename&#125;&quot;&#96;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loader.raw &#x3D; true &#x2F;&#x2F; 二进制</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>url-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\">let mime &#x3D; require(&#39;mime&#39;)  &#x2F;&#x2F; 途是设置某种扩展名的文件的响应程序类型</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    let &#123;limit&#125; &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    console.log(this.resourcePath);</span><br><span class=\"line\">    if (limit &amp;&amp; limit &gt; source.length) &#123;</span><br><span class=\"line\">        return &#96;module.exports&#x3D;&quot;data:$&#123;mime.getType(this.resourcePath)&#125;;base64,$&#123;source.toString(&#39;base64&#39;)&#125;&quot;&#96;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return require(&#39;.&#x2F;file-loader1&#39;).call(this, source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loader.raw &#x3D; true &#x2F;&#x2F; 二进制</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.png$&#x2F;,</span><br><span class=\"line\">    &#x2F;&#x2F; 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径</span><br><span class=\"line\">    &#x2F;&#x2F; use: &#39;file-loader&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; 处理路径</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;url-loader1&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            limit: 200 * 1024</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code>引入图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import p from &#39;.&#x2F;photo.png&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let img &#x3D; document.createElement(&#39;img&#39;)</span><br><span class=\"line\">img.src &#x3D; p</span><br><span class=\"line\">document.body.appendChild(img);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"less-loader和css-loader\"><a href=\"#less-loader和css-loader\" class=\"headerlink\" title=\"less-loader和css-loader\"></a><code>less-loader</code>和<code>css-loader</code></h2><p>先安装<code>less</code></p>\n<p>分别创建<code>style-loader2</code> <code>css-loader2</code> <code>less-loader2</code></p>\n<p><code>style-loader1</code> 与 <code>less-loader1</code> 同之前的</p>\n<h2 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css-loader\"></a><code>css-loader</code></h2><p>主要用来处理<code>css</code>中的图片链接，需要把<code>url</code>转换成<code>require</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.png$&#x2F;,</span><br><span class=\"line\">    &#x2F;&#x2F; 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径</span><br><span class=\"line\">    &#x2F;&#x2F; use: &#39;file-loader&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; 处理路径</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;url-loader1&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            limit: 200 * 1024</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">    use: [&#39;style-loader2&#39;, &#39;css-loader2&#39;, &#39;less-loader2&#39;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>index.less</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@base: #f938ab;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: @base;</span><br><span class=\"line\">  background: url(&quot;.&#x2F;photo.png&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>less-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将less转为css</span><br><span class=\"line\">let less &#x3D; require(&#39;less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let css &#x3D; &#39;&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(source, 2222);</span><br><span class=\"line\">    less.render(source, function (err, output) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(output);</span><br><span class=\"line\">        css &#x3D; output.css</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    &#x2F;&#x2F; css &#x3D; css.replace(&#x2F;\\n&#x2F;g, &#39;\\\\n&#39;);</span><br><span class=\"line\">    return css</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>css-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css-loader 用来解析@import这种语法,包括css中引入的图片</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let reg &#x3D; &#x2F;url\\((.+?)\\)&#x2F;g   &#x2F;&#x2F; 匹配括号</span><br><span class=\"line\"></span><br><span class=\"line\">    let pos &#x3D; 0;</span><br><span class=\"line\">    let current;</span><br><span class=\"line\"></span><br><span class=\"line\">    let arr &#x3D; [&#39;let list &#x3D; []&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">    while (current &#x3D; reg.exec(source)) &#123;</span><br><span class=\"line\">        let [matchUrl, g] &#x3D; current   &#x2F;&#x2F; matchUrl -&gt; &#39;url(&quot;.&#x2F;photo.png&quot;)&#39;, g  -&gt; &#39;&quot;.&#x2F;photo.png&quot;&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(matchUrl, g, 88);</span><br><span class=\"line\">        let lastIndex &#x3D; reg.lastIndex - matchUrl.length    &#x2F;&#x2F; 拿到css从开通到地址链接之前的index</span><br><span class=\"line\">        arr.push(&#96;list.push($&#123;JSON.stringify(source.slice(pos, lastIndex))&#125;)&#96;)  &#x2F;&#x2F; 拼入开始和地址之前的代码</span><br><span class=\"line\">        pos &#x3D; reg.lastIndex</span><br><span class=\"line\">        arr.push(&#96;list.push(&#39;url(&#39;+ require($&#123;g&#125;) +&#39;)&#39;)&#96;)    &#x2F;&#x2F; 拼入图片地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr.push(&#96;list.push($&#123;JSON.stringify(source.slice(pos))&#125;)&#96;)  &#x2F;&#x2F; 拼入地址到结尾的代码</span><br><span class=\"line\">    arr.push(&#96;module.exports &#x3D; list.join(&#39;&#39;)&#96;)</span><br><span class=\"line\">    console.log(arr.join(&#39;\\r\\n&#39;));</span><br><span class=\"line\">    &#x2F;&#x2F; let list &#x3D; []</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&quot;body &#123;\\\\n  background: #f938ab;\\\\n  background: &quot;)</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&#39;url(&#39;+ require(&quot;.&#x2F;photo.png&quot;) +&#39;)&#39;)</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&quot;;\\\\n&#125;\\\\n&quot;)</span><br><span class=\"line\">    &#x2F;&#x2F; module.exports &#x3D; list.join(&#39;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return arr.join(&#39;\\r\\n&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>style-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将css插入到html头部</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let str &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; $&#123;JSON.stringify(source)&#125;</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    return str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; style-loader写了pitch,有返回后面的跳过，自己的写不会走</span><br><span class=\"line\">loader.pitch &#x3D; function (remainingRequest) &#123;  &#x2F;&#x2F; 剩余的请求</span><br><span class=\"line\">    console.log(loaderUtils.stringifyRequest(this, &#39;!!&#39; + remainingRequest, 99999999))</span><br><span class=\"line\">    &#x2F;&#x2F; 让style-loader 处理 less-loader 和css-loader拼接的结果</span><br><span class=\"line\">    &#x2F;&#x2F; 得到 &#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;loader&#x2F;css-loader2.js!&#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;loader&#x2F;less-loader2.js!&#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;src&#x2F;index.less</span><br><span class=\"line\">    &#x2F;&#x2F; 剩余的请求 less-loader!css-loader!.&#x2F;index.less</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(remainingRequest, 1223);</span><br><span class=\"line\">    &#x2F;&#x2F; require返回的就是css-loader处理好的结果require(&#39;!!css-loader!less-loader!.&#x2F;index.less&#39;)</span><br><span class=\"line\">    let str &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; require($&#123;loaderUtils.stringifyRequest(this, &#39;!!&#39; + remainingRequest)&#125;)</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    &#x2F;&#x2F; stringifyRequest 绝对路径转相对路径</span><br><span class=\"line\">    return str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user: [&#39;style-loader2&#39;, &#39;css-loader2&#39;, &#39;less-loader2&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">    pitch loader - 有返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   style-loader2 → css-loader2  less-loader2  </span><br><span class=\"line\">                     ↙               </span><br><span class=\"line\">               有返回值               资源</span><br><span class=\"line\">               ↙                      </span><br><span class=\"line\">normal  style-loader2  css-loader2  less-loader2</span><br></pre></td></tr></table></figure>\n\n<p>在<code>style-loader2</code>中 引用了<code>less-loader</code> <code>css-loader</code> 和<code>less</code>文件</p>\n<h2 id=\"webpack-中的插件\"><a href=\"#webpack-中的插件\" class=\"headerlink\" title=\"webpack 中的插件\"></a>webpack 中的插件</h2><p><code>yarn add webpack webpack-cil -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new DonePlugin(),    &#x2F;&#x2F; 同步</span><br><span class=\"line\">        new AsyncPlugins()   &#x2F;&#x2F; 异步</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>node_modules/webpack/lib</code>中查看<code>Compiler.js</code></p>\n<ol>\n<li>同步<code>plugins/DonePlugins</code></li>\n</ol>\n<p>打包完成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DonePlugins &#123;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        console.log(1);</span><br><span class=\"line\">        compiler.hooks.done.tap(&#39;DonePlugin&#39;, (stats) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;编译完成&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; DonePlugins</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>异步<code>plugins/AsyncPlugins</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncPlugins &#123;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        console.log(2);</span><br><span class=\"line\">        compiler.hooks.emit.tapAsync(&#39;AsyncPlugin&#39;, (complete, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;文件发射出来&#39;);</span><br><span class=\"line\">                callback()</span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        compiler.hooks.emit.tapPromise(&#39;AsyncPlugin&#39;, (complete, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;文件发射出来 222&#39;);</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; AsyncPlugins</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件列表插件\"><a href=\"#文件列表插件\" class=\"headerlink\" title=\"文件列表插件\"></a>文件列表插件</h2><p>希望生成一个文件描述打包出来的文件</p>\n<p>在<code>plugins</code>中新建<code>FileListPlugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FileListPlugin &#123;</span><br><span class=\"line\">    constructor (&#123;filename&#125;) &#123;</span><br><span class=\"line\">        this.filename &#x3D; filename</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 文件已经准备好了 要进行发射</span><br><span class=\"line\">        &#x2F;&#x2F; emit</span><br><span class=\"line\">        compiler.hooks.emit.tap(&#39;FileListPlugin&#39;, (compilation) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let assets &#x3D; compilation.assets;</span><br><span class=\"line\">            console.log(assets, 55);</span><br><span class=\"line\">            let content &#x3D; &#96;## 文件名  资源大小\\r\\n&#96;</span><br><span class=\"line\">            &#x2F;&#x2F; [ [bundls.js, &#123;&#125;], [index.html, &#123;&#125;]]</span><br><span class=\"line\">            Object.entries(assets).forEach(([filename, stateObj]) &#x3D;&gt; &#123;</span><br><span class=\"line\">                content +&#x3D; &#96;- $&#123;filename&#125;    $&#123;stateObj.size()&#125;\\r\\n&#96;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            &#x2F;&#x2F; 资源对象</span><br><span class=\"line\">            assets[this.filename] &#x3D; &#123;</span><br><span class=\"line\">                source () &#123;</span><br><span class=\"line\">                    return content;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                size () &#123;</span><br><span class=\"line\">                    return content.length</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; FileListPlugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let FileListPlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;FileListPlugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new DonePlugin(),</span><br><span class=\"line\">        new AsyncPlugins(),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new FileListPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;list.md&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成<code>list.md</code></p>\n<h2 id=\"内联的webpack插件\"><a href=\"#内联的webpack插件\" class=\"headerlink\" title=\"内联的webpack插件\"></a>内联的<code>webpack</code>插件</h2><p>新建<code>index.css</code>引入<code>index.js</code></p>\n<p><code>yarn add css-loader mini-css-extract-plugin -D</code></p>\n<p>希望打包后<code>css、js</code>内联在<code>index.html</code>文件中</p>\n<p>创建<code>plugins</code>中<code>InlineSourcePlugins.js</code></p>\n<p><code>yarn add --dev html-webpack-plugin@next</code></p>\n<p><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">HTML Webpack Plugin</a></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let FileListPlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;FileListPlugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let InlineSourcePlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;InlineSourcePlugins&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;production&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">                use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        &#x2F;&#x2F; new DonePlugin(),</span><br><span class=\"line\">        &#x2F;&#x2F; new AsyncPlugins(),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;index.css&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new InlineSourcePlugins(&#123;</span><br><span class=\"line\">            match: &#x2F;\\.(js|css)&#x2F;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        &#x2F;&#x2F; new FileListPlugin(&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     filename: &#39;list.md&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>InlineSourcePlugins.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 把外链的标签编程内联的标签</span><br><span class=\"line\">class InlineSourcePlugins &#123;</span><br><span class=\"line\">    constructor(&#123;match&#125;) &#123;</span><br><span class=\"line\">        this.reg &#x3D; match  &#x2F;&#x2F; 正则</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 处理某一个标签</span><br><span class=\"line\">    processTag(tag, compilation) &#123;</span><br><span class=\"line\">        let newTag &#x3D; &#123;&#125;</span><br><span class=\"line\">        let url &#x3D; &#39;&#39;</span><br><span class=\"line\">        if (tag.tagName &#x3D;&#x3D;&#x3D; &#39;link&#39; &amp;&amp; this.reg.test(tag.attributes.href)) &#123;</span><br><span class=\"line\">            newTag &#x3D; &#123;</span><br><span class=\"line\">                tagName: &#39;style&#39;,</span><br><span class=\"line\">                attributes: &#123;type: &#39;text&#x2F;css&#39;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url &#x3D; tag.attributes.href</span><br><span class=\"line\">        &#125; else if (tag.tagName &#x3D;&#x3D;&#x3D; &#39;script&#39; &amp;&amp; this.reg.test(tag.attributes.src)) &#123;</span><br><span class=\"line\">            newTag &#x3D; &#123;</span><br><span class=\"line\">                tagName: &#39;script&#39;,</span><br><span class=\"line\">                attributes: &#123;type: &#39;application&#x2F;javascript&#39;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url &#x3D; tag.attributes.src</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (url) &#123;</span><br><span class=\"line\">            newTag.innerHTML &#x3D; compilation.assets[url].source(); &#x2F;&#x2F; 文件内容放到innerHTML属性中</span><br><span class=\"line\">            delete compilation.assets[url]   &#x2F;&#x2F; 删除原有的资源</span><br><span class=\"line\">            return newTag</span><br><span class=\"line\">            &#x2F;&#x2F; console.log(compilation.assets[url].source());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return tag</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 处理引入标签的数据</span><br><span class=\"line\">    processTags(data, compilation) &#123;</span><br><span class=\"line\">        let headTags &#x3D; []</span><br><span class=\"line\">        let bodyTags &#x3D; []</span><br><span class=\"line\">        data.headTags.forEach(headTag &#x3D;&gt; &#123;</span><br><span class=\"line\">            headTags.push(this.processTag(headTag, compilation))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        data.bodyTags.forEach(bodyTag &#x3D;&gt; &#123;</span><br><span class=\"line\">            bodyTags.push(this.processTag(bodyTag, compilation))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        console.log(&#123;...data, headTags, bodyTags&#125;)</span><br><span class=\"line\">        return &#123;...data, headTags, bodyTags&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    apply(compiler) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过webpackPlugin来实现  npm搜索  html-webpack-plugin</span><br><span class=\"line\">        compiler.hooks.compilation.tap(&#39;InlineSourcePlugins&#39;, (compilation) &#x3D;&gt; &#123;</span><br><span class=\"line\">            HtmlWebpackPlugin.getHooks(compilation).alterAssetTagGroups.tapAsync(</span><br><span class=\"line\">                &#39;alertPlugin&#39;,</span><br><span class=\"line\">                (data, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;);</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(data) &#x2F;&#x2F; 插入html标签的数据</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;);</span><br><span class=\"line\">                    data &#x3D; this.processTags(data, compilation)   &#x2F;&#x2F; compilation.assets 资源的链接</span><br><span class=\"line\">                    callback(null, data)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; InlineSourcePlugins</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"打包后自动发布\"><a href=\"#打包后自动发布\" class=\"headerlink\" title=\"打包后自动发布\"></a>打包后自动发布</h2><p>打包好的文件自动上传致七牛</p>\n<p>需要这几个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bucket: &#39;&#39;  &#x2F;&#x2F; 七牛的存储空间</span><br><span class=\"line\">domain: &#39;&#39;,</span><br><span class=\"line\">accessKey: &#39;&#39;, &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">secretKey: &#39;&#39; &#x2F;&#x2F; 七牛云的两对密匙</span><br></pre></td></tr></table></figure>\n\n<p>注册七牛，并在对象存储里面,新建存储空间列表<code>test</code>,<code>bucket: &#39;test&#39;</code></p>\n<p>内容管理外链接默认域名 <code>domain: &#39;xxxxxxxx&#39;</code></p>\n<p>右上角个人面板里面个人中心,密钥管理分别对应<code>accessKey</code>和<code>secretKey</code></p>\n<p><a href=\"https://developer.qiniu.com/\" target=\"_blank\" rel=\"noopener\">进入开发者中心</a> -&gt; SDK&amp;工具 -&gt; 官方SDK -&gt; Node服务端文档 —&gt; 文件上传</p>\n<p><a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\" target=\"_blank\" rel=\"noopener\">node文件上传</a></p>\n<p><code>npm install qiniu</code></p>\n<p><a href=\"https://webpack.docschina.org/api/compiler-hooks\" target=\"_blank\" rel=\"noopener\">compiler-hooks</a></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;index.css&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new UploadPlugin(&#123;</span><br><span class=\"line\">            bucket: &#39;test&#39;,  &#x2F;&#x2F; 七牛的存储空间</span><br><span class=\"line\">            domain: &#39;poyrjyh1b.bkt.clouddn.com&#39;,</span><br><span class=\"line\">            accessKey: &#39;xxxxxx&#39;, &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">            secretKey: &#39;yyyyyy&#39; &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<p><code>UploadPlugin.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let qiniu &#x3D; require(&#39;qiniu&#39;)</span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">class UploadPlugin &#123;</span><br><span class=\"line\">    constructor (options &#x3D; &#123;&#125;) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 参考 https:&#x2F;&#x2F;developer.qiniu.com&#x2F;kodo&#x2F;sdk&#x2F;1289&#x2F;nodejs</span><br><span class=\"line\">        let &#123; bucket &#x3D; &#39;&#39;, domain &#x3D; &#39;&#39;, accessKey &#x3D; &#39;&#39;, secretKey &#x3D; &#39;&#39;&#125; &#x3D; options</span><br><span class=\"line\">        let mac &#x3D; new qiniu.auth.digest.Mac(accessKey, secretKey)</span><br><span class=\"line\">        let putPolicy &#x3D; new qiniu.rs.PutPolicy(&#123;</span><br><span class=\"line\">            scope: bucket</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.uploadToken &#x3D; putPolicy.uploadToken(mac)</span><br><span class=\"line\">        let config &#x3D; new qiniu.conf.Config();</span><br><span class=\"line\">        this.formUploader &#x3D; new qiniu.form_up.FormUploader(config)</span><br><span class=\"line\">        this.putExtra &#x3D; new qiniu.form_up.PutExtra()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        compiler.hooks.afterEmit.tapPromise(&#39;UploadPlugin&#39;, (complication) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let assets &#x3D; complication.assets</span><br><span class=\"line\">            let promise &#x3D; []</span><br><span class=\"line\">            Object.keys(assets).forEach(filename &#x3D;&gt; &#123;</span><br><span class=\"line\">                promise.push(this.upload(filename))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            return Promise.all(promise)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    upload (filename) &#123;</span><br><span class=\"line\">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let localFile &#x3D; path.resolve(__dirname, &#39;..&#x2F;dist&#39;, filename)</span><br><span class=\"line\">            this.formUploader.putFile(this.uploadToken, filename, localFile, this.putExtra, function(respErr,</span><br><span class=\"line\">                                                                                 respBody, respInfo) &#123;</span><br><span class=\"line\">                if (respErr) &#123;</span><br><span class=\"line\">                    reject(respErr)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (respInfo.statusCode &#x3D;&#x3D; 200) &#123;</span><br><span class=\"line\">                    resolve(respBody)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    console.log(respInfo.statusCode)</span><br><span class=\"line\">                    console.log(respBody)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; UploadPlugin</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class='post-summary notification is-warning'>\n    <p>\n        最近学习了node，想再复习一下vue，就准备使用webpack做一个vue+node的后台管理系统，但是刚写一点就发现vue对spa很友好，即单页面多应用，我想在这个后台管理系统实现登录注册以及其他功能，涉及到多个页面，以之前学习的webpack已经不能满足这个项目的需求，所以想重新学习一下webpack的其他稍微进阶的内容。\n    </p>\n</div>","more":"<ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85%E5%89%8D%E5%85%88npm%E5%88%9D%E5%A7%8B%E5%8C%96\">安装前先npm初始化</a></li>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1\">本地服务</a></li>\n<li><a href=\"#%E5%A4%8D%E5%88%B6html\">复制html</a></li>\n<li><a href=\"#%E5%A4%84%E7%90%86css\">处理css</a></li>\n<li><a href=\"#%E5%A4%84%E7%90%86less\">处理less</a></li>\n<li><a href=\"#%E6%8A%BD%E7%A6%BBcss%E6%96%87%E4%BB%B6%E9%80%9A%E8%BF%87link%E5%BC%95%E5%85%A5\">抽离css文件，通过link引入</a></li>\n<li><a href=\"#%E5%8E%8B%E7%BC%A9css%E5%92%8Cjs\">压缩css和js</a></li>\n<li><a href=\"#%E7%BB%99css%E5%8A%A0%E4%B8%8A%E5%85%BC%E5%AE%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%89%8D%E7%BC%80\">给css加上兼容浏览器的前缀</a></li>\n<li><a href=\"#es6-%E8%BD%AC-es5\">es6 转 es5</a></li>\n<li><a href=\"#es-7%E7%9A%84%E8%AF%AD%E6%B3%95\">es 7的语法</a></li>\n<li><a href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%BC%95%E5%85%A5\">全局变量引入</a></li>\n<li><a href=\"#webpack%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85\">webpack图片打包</a></li>\n<li><a href=\"#%E5%BD%93%E5%9B%BE%E7%89%87%E5%B0%8F%E4%BA%8E%E5%A4%9A%E5%B0%91%E7%94%A8base64\">当图片小于多少，用base64</a></li>\n<li><a href=\"#%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB\">打包文件分类</a></li>\n<li><a href=\"#%E5%B8%8C%E6%9C%9B%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E7%Bimg%E5%8A%A0%E4%B8%8A%E5%89%8D%E7%BC%80%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%9F%E8%83%BD%E8%AE%BF%E9%97%AE\">希望输出的时候，给这些<code>css\\img</code>加上前缀，传到服务器也能访问</a></li>\n<li><a href=\"#%E5%A6%82%E6%9E%9C%E5%8F%AA%E5%B8%8C%E6%9C%9B%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87\">如果只希望处理图片</a></li>\n<li><a href=\"#%E6%89%93%E5%8C%85%E5%A4%9A%E9%A1%B5%E5%BA%94%E7%94%A8\">打包多页应用</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AEsource-map\">配置<code>source-map</code></a></li>\n<li><a href=\"#watch-%E6%94%B9%E5%AE%8C%E4%BB%A3%E8%A1%A8%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%E5%AE%9E%E4%BD%93\"><code>watch</code> 改完代表重新打包实体</a></li>\n<li><a href=\"#webpack%E7%9A%84%E5%85%B6%E4%BB%96%E4%B8%89%E4%B8%AA%E5%B0%8F%E6%8F%92%E4%BB%B6\"><code>webpack</code>的其他三个小插件</a></li>\n<li><a href=\"#webpack-%E8%B7%A8%E5%9F%9F\"><code>webpack</code> 跨域</a></li>\n<li><a href=\"#%E5%A6%82%E6%9E%9C%E5%90%8E%E7%AB%AF%E7%BB%99%E7%9A%84%E8%AF%B7%E6%B1%82%E6%B2%A1%E6%9C%89api-%E8%B7%A8%E5%9F%9F\">如果后端给的请求没有API 「跨域」</a></li>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E5%8F%AA%E6%83%B3%E5%8D%95%E7%BA%AFmock%E6%95%B0%E6%8D%AE-%E8%B7%A8%E5%9F%9F\">前端只想单纯mock数据 「跨域」</a></li>\n<li><a href=\"#%E6%9C%89%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8D%E7%94%A8%E4%BB%A3%E7%90%86-%E6%9C%8F%E5%90%AF%E5%8A%A8webpack-%E8%B7%A8%E5%9F%9F\">有服务端，不用代理, 服务端启动webpack 「跨域」</a></li>\n<li><a href=\"#webpack%E8%A7%A3%E6%9E%90resolve\">webpack解析resolve</a></li>\n<li><a href=\"#%E4%BD%86%E6%98%AF%E6%AF%8F%E6%AC%A1%E5%BC%95%E5%85%A5%E9%83%BD%E5%BE%88%E9%95%BF%E5%A6%82%E4%B%9B%85%E5%BC%95%E5%85%A5\">但是每次引入都很长，如何优雅引入</a></li>\n<li><a href=\"#%E7%9C%81%E7%95%A5%E6%89%A9%E5%B1%95%E5%90%8D\">省略扩展名</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">定义环境变量</a></li>\n<li><a href=\"#%E5%8C%BA%E5%88%86%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E7%8E%AF%E5%A2%83\">区分两个不同的环境</a></li>\n<li><a href=\"#webpack-%E4%BC%98%E5%8C%96\">webpack 优化</a></li>\n<li><a href=\"#%E4%BC%98%E5%8C%96%E5%BD%93%E6%9F%90%E4%BA%9B%E5%8C%85%E6%98%AF%E7%8B%AC%E7%AB%8B%E7%9A%84%E4%B8%AA%E4%BD%93%E6%B2%A1%E6%9C%89%E4%BE%9D%E8%B5%96\">优化：当某些包是独立的个体没有依赖</a></li>\n<li><a href=\"#%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99%E5%8C%B9%E9%85%8D%E8%AE%BE%E7%BD%AE%E8%8C%83%E5%9B%B4\">优化：规则匹配设置范围</a></li>\n<li><a href=\"#%E4%BC%98%E5%8C%96%E5%BF%BD%E7%95%A5%E4%BE%9D%E8%B5%96%E4%B8%AD%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%A8%80%E5%8C%85\">优化：忽略依赖中不必要的语言包</a></li>\n<li><a href=\"#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93\">动态链接库</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8C%85happypack\">多线程打包happypack</a></li>\n<li><a href=\"#webpack-%E8%87%AA%E5%B8%A6%E7%9A%84%E4%BC%98%E5%8C%96\">webpack 自带的优化</a></li>\n<li><a href=\"#%E6%8A%BD%E5%8F%96%E5%85%AC%E5%85%B1%E4%BB%A3%E7%A0%81\">抽取公共代码</a></li>\n<li><a href=\"#%E6%87%92%E5%8A%A0%E8%BD%BD%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD\">懒加载(延迟加载)</a></li>\n<li><a href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E5%BD%93%E9%A1%B5%E9%9D%A2%E6%94%B9%E5%8F%98%E5%8F%AA%E6%9B%B4%E6%96%B0%E6%94%B9%E5%8F%98%E7%9A%84%E9%83%A8%E5%88%86%E4%B8%8D%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85\">热更新(当页面改变只更新改变的部分，不重新打包)</a></li>\n<li><a href=\"#tapable%E4%BB%8B%E7%BB%8D---synchook\">tapable介绍 - SyncHook</a></li>\n<li><a href=\"#tapable%E4%BB%8B%E7%BB%8D---syncbailhook\">tapable介绍 - SyncBailHook</a></li>\n<li><a href=\"#tapable%E4%BB%8B%E7%BB%8D---syncwaterfallhook\">tapable介绍 - SyncWaterfallHook</a></li>\n<li><a href=\"#tapable%E4%BB%8B%E7%BB%8D---syncloophook\">tapable介绍 - SyncLoopHook</a></li>\n<li><a href=\"#asyncparallelhook-%E4%B8%8E-asyncparallelbailhook\"><code>AsyncParallelHook</code> 与 <code>AsyncParallelBailHook</code></a><ul>\n<li><a href=\"#asyncparallelhook\">AsyncParallelHook</a></li>\n<li><a href=\"#asyncparallelbailhook\">AsyncParallelBailHook</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%BC%82%E6%AD%A5%E4%B8%B2%E8%A1%8C--asyncserieshook\">异步串行 —— AsyncSeriesHook</a></li>\n<li><a href=\"#%E5%BC%82%E6%AD%A5%E4%B8%B2%E8%A1%8C--asyncserieswaterfallhook\">异步串行 —— AsyncSeriesWaterfallHook</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99webpack\">手写webpack</a></li>\n<li><a href=\"#webpack%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%84%E7%90%86\">webpack分析及处理</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB\">创建依赖关系</a></li>\n<li><a href=\"#ast%E9%80%92%E5%BD%92%E8%A7%A3%E6%9E%90\">ast递归解析</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7\">生成打包工具</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0loader\">增加loader</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0plugins\">增加plugins</a></li>\n<li><a href=\"#loader\">loader</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAloader\">配置多个loader</a></li>\n<li><a href=\"#babel-loader%E5%AE%9E%E7%8E%B0\"><code>babel-loader</code>实现</a></li>\n<li><a href=\"#banner-loader%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%88%9B\"><code>banner-loader</code>实现(自创)</a></li>\n<li><a href=\"#%E5%AE%9E%E7%8E%B0file-loader%E5%92%8Curl-loader\">实现<code>file-loader</code>和<code>url-loader</code></a></li>\n<li><a href=\"#less-loader%E5%92%8Ccss-loader\"><code>less-loader</code>和<code>css-loader</code></a></li>\n<li><a href=\"#css-loader\"><code>css-loader</code></a></li>\n<li><a href=\"#webpack-%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6\">webpack 中的插件</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6\">文件列表插件</a></li>\n<li><a href=\"#%E5%86%85%E8%81%94%E7%9A%84webpack%E6%8F%92%E4%BB%B6\">内联的<code>webpack</code>插件</a></li>\n<li><a href=\"#%E6%89%93%E5%8C%85%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83\">打包后自动发布</a></li>\n</ul>\n<h2 id=\"安装前先npm初始化\"><a href=\"#安装前先npm初始化\" class=\"headerlink\" title=\"安装前先npm初始化\"></a>安装前先npm初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)   <span class=\"comment\">// 相对路径变绝对路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>, <span class=\"comment\">// 模式 默认 production development</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index'</span>,    <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.[hash:8].js'</span>,   <span class=\"comment\">// hash: 8只显示8位</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">''</span>  <span class=\"comment\">// // 给所有打包文件引入时加前缀，包括css，js，img，如果只想处理图片可以单独在url-loader配置中加publicPath</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地服务\"><a href=\"#本地服务\" class=\"headerlink\" title=\"本地服务\"></a>本地服务</h2><p><code>npm i webpack-dev-server -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\">  progress: true          &#x2F;&#x2F; 滚动条</span><br><span class=\"line\">  contentBase: &#39;.&#x2F;build&#39;  &#x2F;&#x2F; 起服务的地址</span><br><span class=\"line\">  open: true              &#x2F;&#x2F; 自动打开浏览器</span><br><span class=\"line\">  compress： true         &#x2F;&#x2F; gzip压缩</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"复制html\"><a href=\"#复制html\" class=\"headerlink\" title=\"复制html\"></a>复制html</h2><p><code>npm i html-webpack-plugin -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">plugins: [ &#x2F;&#x2F; 放着所有webpack插件</span><br><span class=\"line\">  new HtmlWebpackPlugin(&#123; &#x2F;&#x2F; 用于使用模板打包时生成index.html文件，并且在run dev时会将模板文件也打包到内存中</span><br><span class=\"line\">    template: &#39;.&#x2F;index.html&#39;, &#x2F;&#x2F; 模板文件</span><br><span class=\"line\">    filename: &#39;index.html&#39;, &#x2F;&#x2F; 打包后生成文件</span><br><span class=\"line\">    hash: true, &#x2F;&#x2F; 添加hash值解决缓存问题</span><br><span class=\"line\">    minify: &#123; &#x2F;&#x2F; 对打包的html模板进行压缩</span><br><span class=\"line\">      removeAttributeQuotes: true, &#x2F;&#x2F; 删除属性双引号</span><br><span class=\"line\">      collapseWhitespace: true &#x2F;&#x2F; 折叠空行变成一行</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/jantimon/html-webpack-plugin#options\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin#options</a></p>\n<h2 id=\"处理css\"><a href=\"#处理css\" class=\"headerlink\" title=\"处理css\"></a>处理css</h2><p><code>npm i css-loader style-loader -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css-loader   作用：用来解析@import这种语法</span><br><span class=\"line\">&#x2F;&#x2F; style-loader 作用：把 css 插入到head标签中</span><br><span class=\"line\">&#x2F;&#x2F; loader的执行顺序： 默认是从右向左（从下向上）</span><br><span class=\"line\">module: &#123;    &#x2F;&#x2F; 模块</span><br><span class=\"line\">  rules: [   &#x2F;&#x2F; 规则</span><br><span class=\"line\">    &#x2F;&#x2F; style-loader 把css插入head标签中</span><br><span class=\"line\">    &#x2F;&#x2F; loader 功能单一</span><br><span class=\"line\">    &#x2F;&#x2F; 多个loader 需要 []</span><br><span class=\"line\">    &#x2F;&#x2F; 顺便默认从右到左</span><br><span class=\"line\">    &#x2F;&#x2F; 也可以写成对象方式</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">      &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">      &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#x2F;&#x2F; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">        &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">        MiniCssExtractPlugin.loader,</span><br><span class=\"line\">        &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">        &#39;postcss-loader&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"处理less\"><a href=\"#处理less\" class=\"headerlink\" title=\"处理less\"></a>处理less</h2><p><code>npm i less-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.less$&#x2F;,   &#x2F;&#x2F; less 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法</span><br><span class=\"line\">    &#39;postcss-loader&#39;,</span><br><span class=\"line\">    &#39;less-loader&#39; &#x2F;&#x2F; less-loader less -&gt; css</span><br><span class=\"line\">    &#x2F;&#x2F; sass node-sass sass-loader</span><br><span class=\"line\">    &#x2F;&#x2F; stylus stylus-loader</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.js.org/loaders/less-loader/#src/components/Sidebar/Sidbar.jsx\" target=\"_blank\" rel=\"noopener\">less-loader</a></p>\n<h2 id=\"抽离css文件，通过link引入\"><a href=\"#抽离css文件，通过link引入\" class=\"headerlink\" title=\"抽离css文件，通过link引入\"></a>抽离css文件，通过link引入</h2><p><code>yarn add mini-css-extract-plugin -D</code></p>\n<p><a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\" target=\"_blank\" rel=\"noopener\">mini-css-extract-plugin</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 压缩css</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: &#39;css&#x2F;main.css&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F; 此时不需要style-loader</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 抽离</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">    &#39;postcss-loader&#39;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽离css插件文件时可使用<code>optimize-css-assets-webpack-plugin</code>优化压缩css以及js文件</p>\n<h2 id=\"压缩css和js\"><a href=\"#压缩css和js\" class=\"headerlink\" title=\"压缩css和js\"></a>压缩css和js</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 用了&#96;mini-css-extract-plugin&#96;抽离css为link需使用&#96;optimize-css-assets-webpack-plugin&#96;进行压缩css,使用此方法压缩了css需要&#96;uglifyjs-webpack-plugin&#96;压缩js</span><br><span class=\"line\">const OptimizeCSSAssetsPlugin &#x3D; require(&quot;optimize-css-assets-webpack-plugin&quot;)</span><br><span class=\"line\">const UglifyJsPlugin &#x3D; require(&quot;uglifyjs-webpack-plugin&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;              &#x2F;&#x2F; 优化项</span><br><span class=\"line\">    minimizer: [</span><br><span class=\"line\">      new UglifyJsPlugin(&#123;     &#x2F;&#x2F; 优化js</span><br><span class=\"line\">        cache: true,           &#x2F;&#x2F; 是否缓存</span><br><span class=\"line\">        parallel: true,        &#x2F;&#x2F; 是否并发打包</span><br><span class=\"line\">        &#x2F;&#x2F; sourceMap: true     &#x2F;&#x2F; 源码映射 set to true if you want JS source maps</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      new OptimizeCSSAssetsPlugin(&#123;&#125;)    &#x2F;&#x2F; css 的优化</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: &#39;production&#39;,</span><br><span class=\"line\">  entry: &#39;&#39;,</span><br><span class=\"line\">  output: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给css加上兼容浏览器的前缀\"><a href=\"#给css加上兼容浏览器的前缀\" class=\"headerlink\" title=\"给css加上兼容浏览器的前缀\"></a>给css加上兼容浏览器的前缀</h2><p><code>yarn add postcss-loader autoprefixer -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,   &#x2F;&#x2F; css 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法,</span><br><span class=\"line\">    &#39;postcss-loader&#39;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; less</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.less$&#x2F;,   &#x2F;&#x2F; less 处理</span><br><span class=\"line\">  &#x2F;&#x2F; use: &#39;css-loader&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#x2F;&#x2F; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;     loader: &#39;style-loader&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F;     options: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;         insertAt: &#39;top&#39; &#x2F;&#x2F; 将css标签插入最顶头  这样可以自定义style不被覆盖</span><br><span class=\"line\">    &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">    MiniCssExtractPlugin.loader,   &#x2F;&#x2F; 这样相当于抽离成一个css文件， 如果希望抽离成分别不同的css, 需要再引入MiniCssExtractPlugin，再配置</span><br><span class=\"line\">    &#39;css-loader&#39;, &#x2F;&#x2F; css-loader 用来解析@import这种语法</span><br><span class=\"line\">    &#39;postcss-loader&#39;,</span><br><span class=\"line\">    &#39;less-loader&#39; &#x2F;&#x2F; less-loader less -&gt; css</span><br><span class=\"line\">    &#x2F;&#x2F; sass node-sass sass-loader</span><br><span class=\"line\">    &#x2F;&#x2F; stylus stylus-loader</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>postcss 需要配置文档   <code>postcss.config1.js</code></p>\n<p><a href=\"https://github.com/postcss/postcss-loader\" target=\"_blank\" rel=\"noopener\">postcss-loader</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    require(&#39;autoprefixer&#39;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"es6-转-es5\"><a href=\"#es6-转-es5\" class=\"headerlink\" title=\"es6 转 es5\"></a>es6 转 es5</h2><p><code>npm i babel-loader @babel/core  @babel/preset-env -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [ &#x2F;&#x2F;预设</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39; </span><br><span class=\"line\">            ],</span><br><span class=\"line\">            plugins:[</span><br><span class=\"line\">              &#x2F;&#x2F; 转es7的语法</span><br><span class=\"line\">              [&quot;@babel&#x2F;plugin-proposal-decorators&quot;, &#123; &quot;legacy&quot;: true &#125;],</span><br><span class=\"line\">              [&quot;@babel&#x2F;plugin-proposal-class-properties&quot;, &#123; &quot;loose&quot; : true &#125;]</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: &#x2F;node_modules&#x2F;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"转es7的语法\"><a href=\"#转es7的语法\" class=\"headerlink\" title=\"转es7的语法\"></a>转es7的语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 转class</span><br><span class=\"line\">npm i @babel&#x2F;plugin-proposal-class-properties -D</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 转装饰器</span><br><span class=\"line\">npm i @babel&#x2F;plugin-proposal-decorators -D</span><br></pre></td></tr></table></figure>\n\n<p>配置如上</p>\n<h3 id=\"其他不兼容的高级语法\"><a href=\"#其他不兼容的高级语法\" class=\"headerlink\" title=\"其他不兼容的高级语法\"></a>其他不兼容的高级语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 @babel&#x2F;polyfill</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语法检查-eslint\"><a href=\"#语法检查-eslint\" class=\"headerlink\" title=\"语法检查 eslint\"></a>语法检查 eslint</h2><p><code>npm i eslint eslint-loader -S</code></p>\n<p>根目录添加 <code>.eslintrc.json</code> 配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;eslint-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            enforce: &#39;pre&#39;  &#x2F;&#x2F; previous优先执行  post-普通loader之后执行</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,      &#x2F;&#x2F; mormal 普通的loader</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [ &#x2F;&#x2F;预设</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39; </span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude: &#x2F;node_modules&#x2F;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局变量引入\"><a href=\"#全局变量引入\" class=\"headerlink\" title=\"全局变量引入\"></a>全局变量引入</h2><p>jquery的引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery -S</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">  $: &#39;jquery&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其他情况</p>\n<ol>\n<li>暴露全局</li>\n</ol>\n<p><code>npm i expose-loader -D</code> 暴露全局的<code>loader</code></p>\n<h4 id=\"法1：\"><a href=\"#法1：\" class=\"headerlink\" title=\"法1：\"></a>法1：</h4><p>可以在js中 <code>import $ from &#39;expose-loader?$!jquery&#39;</code>   // 全局暴露jquery为$符号</p>\n<p>可以调用<code>window.$</code></p>\n<h4 id=\"法2：\"><a href=\"#法2：\" class=\"headerlink\" title=\"法2：\"></a>法2：</h4><p>也可在<code>webpack.config.js</code> 中配置 <code>rules</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: require.resolve(&#39;jquery&#39;),</span><br><span class=\"line\">        use: &#39;expose-loader?$&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以后在<code>.js</code>文件中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"法3-如何在每个模块中注入：\"><a href=\"#法3-如何在每个模块中注入：\" class=\"headerlink\" title=\"法3. 如何在每个模块中注入：\"></a>法3. 如何在每个模块中注入：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      $: &#39;jquery&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">之后代码内直接使用 $</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"法4：\"><a href=\"#法4：\" class=\"headerlink\" title=\"法4：\"></a>法4：</h4><p>在<code>index.html</code>中通过<code>script</code>标签引入<code>jquery</code>, 但是在<code>js</code>中，用<code>import</code>会重新打包<code>jquery</code>,如何避免</p>\n<p>从输出的bundle 中排除依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  externals: &#123; &#x2F;&#x2F; 告知webpack是外部引入的，不需要打包</span><br><span class=\"line\">    jquery: &#39;jQuery&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时在index.js上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log($)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack图片打包\"><a href=\"#webpack图片打包\" class=\"headerlink\" title=\"webpack图片打包\"></a>webpack图片打包</h2><ol>\n<li>js中创建</li>\n<li>css中引入</li>\n<li><code>&lt;img src=&quot;&quot;&gt;</code></li>\n</ol>\n<p><code>yarn add file-loader -D</code></p>\n<p>适合一二情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.export&#x3D;&#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">        use: &#39;file-loader&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认会内部生成一张图片到build,生成图片的路径返回回来</p>\n<p>第一种情况: 图片地址要<code>import</code>引入，直接写图片的地址，会默认为字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logo from &#39;.&#x2F;logo.png&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let image &#x3D; new Image()</span><br><span class=\"line\">image.src &#x3D; logo</span><br><span class=\"line\">document.body.appendChild(image)</span><br></pre></td></tr></table></figure>\n\n<p>第二种情况: <code>css-loader</code>会将<code>css</code>里面的图片转为<code>require</code>的格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">  background: url(&quot;.&#x2F;logo.png&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第三种情况: 解析<code>html</code>中的<code>image</code></p>\n<p><code>yarn add html-withimg-loader -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.html$&#x2F;,</span><br><span class=\"line\">  use: &#39;html-withimg-loader&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"当图片小于多少，用base64\"><a href=\"#当图片小于多少，用base64\" class=\"headerlink\" title=\"当图片小于多少，用base64\"></a>当图片小于多少，用base64</h2><p><code>yarn add url-loader -D</code></p>\n<p>如果过大，才用<code>file-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 200 * 1024,          &#x2F;&#x2F; 小于200k变成base64</span><br><span class=\"line\">      &#x2F;&#x2F; outputPath: &#39;&#x2F;img&#x2F;&#39;,     &#x2F;&#x2F; 打包后输出地址</span><br><span class=\"line\">      &#x2F;&#x2F; publicPath: &#39;&#39;           &#x2F;&#x2F; 给资源加上域名路径</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包文件分类\"><a href=\"#打包文件分类\" class=\"headerlink\" title=\"打包文件分类\"></a>打包文件分类</h2><p>1.图片:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 1,  &#x2F;&#x2F; 200k 200 * 1024</span><br><span class=\"line\">      outputPath: &#39;img&#x2F;&#39;   &#x2F;&#x2F; 打包后输出地址 在dist&#x2F;img</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>2.css:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">    filename: &#39;css&#x2F;main.css&#39;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"希望输出的时候，给这些css-img加上前缀，传到服务器也能访问\"><a href=\"#希望输出的时候，给这些css-img加上前缀，传到服务器也能访问\" class=\"headerlink\" title=\"希望输出的时候，给这些css\\img加上前缀，传到服务器也能访问\"></a>希望输出的时候，给这些<code>css\\img</code>加上前缀，传到服务器也能访问</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  filename: &#39;bundle.[hash:8].js&#39;,   &#x2F;&#x2F; hash: 8只显示8位</span><br><span class=\"line\">  path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">  publicPath: &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;  &#x2F;&#x2F; 给静态资源统一加</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"如果只希望处理图片\"><a href=\"#如果只希望处理图片\" class=\"headerlink\" title=\"如果只希望处理图片\"></a>如果只希望处理图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.(png|jpg|gif)$&#x2F;,</span><br><span class=\"line\">  &#x2F;&#x2F; 当图片小于多少，用base64,否则用file-loader产生真实的图片</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;url-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      limit: 1,  &#x2F;&#x2F; 200k 200 * 1024</span><br><span class=\"line\">      outputPath: &#39;&#x2F;img&#x2F;&#39;,   &#x2F;&#x2F; 打包后输出地址</span><br><span class=\"line\">      publicPath: &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包多页应用\"><a href=\"#打包多页应用\" class=\"headerlink\" title=\"打包多页应用\"></a>打包多页应用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 多入口</span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    home: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    other: &#39;.&#x2F;src&#x2F;other.js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &quot;[name].js&quot;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist2&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;home.html&#39;,</span><br><span class=\"line\">      chunks: [&#39;home&#39;]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;other.html&#39;,</span><br><span class=\"line\">      chunks: [&#39;other&#39;, &#39;home&#39;]   &#x2F;&#x2F; other.html 里面有 other.js &amp; home.js</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置source-map\"><a href=\"#配置source-map\" class=\"headerlink\" title=\"配置source-map\"></a>配置<code>source-map</code></h2><p><code>yarn add @babel/core  @babel/preset-env babel-loader  webpack-dev-server -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  devtool: &#39;source-map&#39; &#x2F;&#x2F; 增加映射文件调试源代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>源码映射 会标识错误的代码 打包后生成独立的文件 大而全 「source-map」</li>\n<li>不会陈胜单独的文件 但是可以显示行和列  「eval-source-map」</li>\n<li>不会产生列有行，产生单独的映射文件  「cheap-module-source-map」</li>\n<li>不会产生文件 集成在打包后的文件中 不会产生列有行 「cheap-module-eval-source-map」</li>\n</ol>\n<h2 id=\"watch-改完代表重新打包实体\"><a href=\"#watch-改完代表重新打包实体\" class=\"headerlink\" title=\"watch 改完代表重新打包实体\"></a><code>watch</code> 改完代表重新打包实体</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  watch: true,</span><br><span class=\"line\">  watchOptions: &#123;</span><br><span class=\"line\">    poll: 1000,              &#x2F;&#x2F; 每秒监听1000次</span><br><span class=\"line\">    aggregateTimeout: 300,   &#x2F;&#x2F; 防抖，当第一个文件更改，会在重新构建前增加延迟</span><br><span class=\"line\">    ignored: &#x2F;node_modules&#x2F;  &#x2F;&#x2F; 对于某些系统，监听大量文件系统会导致大量的 CPU 或内存占用。这个选项可以排除一些巨大的文件夹，</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"webpack的其他三个小插件\"><a href=\"#webpack的其他三个小插件\" class=\"headerlink\" title=\"webpack的其他三个小插件\"></a><code>webpack</code>的其他三个小插件</h2><ol>\n<li><code>cleanWebpackPlugin</code></li>\n</ol>\n<p>每次打包之前删掉dist目录<br><code>yarn add clean-webpack-plugin -D</code></p>\n<p><a href=\"https://github.com/johnagan/clean-webpack-plugin\" target=\"_blank\" rel=\"noopener\">clean-webpack-plugin</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(process.cwd(), &#39;dist&#39;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin(&#39;.&#x2F;dist&#39;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>copyWebpackPlugin</code></li>\n</ol>\n<p>一些静态资源也希望拷贝的dist中</p>\n<p><code>yarn add copy-webpack-plugin -D</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CopyWebpackPlugin &#x3D; require(&#39;copy-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CopyWebpackPlugin([</span><br><span class=\"line\">      &#123;from: &#39;doc&#39;, to: &#39;.&#x2F;dist&#39;&#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><code>bannerPlugin</code>内置模块</li>\n</ol>\n<p>版权声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">new webpack.BannerPlugin(&#39;hello world&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; or</span><br><span class=\"line\">new webpack.BannerPlugin(&#123; banner: &#39;hello world&#39;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-跨域\"><a href=\"#webpack-跨域\" class=\"headerlink\" title=\"webpack 跨域\"></a><code>webpack</code> 跨域</h2><p>设置一个服务,由于<code>webpack-dev-server</code>内含<code>express</code></p>\n<p><a href=\"https://expressjs.com/zh-cn/starter/hello-world.html\" target=\"_blank\" rel=\"noopener\">express</a></p>\n<p><code>server.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;api&#x2F;user&#39;, (res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)   &#x2F;&#x2F; 服务端口在3000</span><br></pre></td></tr></table></figure>\n\n<p>写完后记得<code>node server.js</code></p>\n<p>访问 <code>http://localhost:3000/api/user</code> 可见内容</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 发送一个请求</span><br><span class=\"line\">let xhr &#x3D; new XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 默认访问 http:&#x2F;&#x2F;localhost:8080  webpack-dev-server 的服务 再转发给3000</span><br><span class=\"line\">xhr.open(&#39;GET&#39;, &#39;&#x2F;api&#x2F;user&#39;, true);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onload &#x3D; function () &#123;</span><br><span class=\"line\">  console.log(xhr.response)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      &#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-如果后端给的请求没有API-「跨域」\"><a href=\"#1-如果后端给的请求没有API-「跨域」\" class=\"headerlink\" title=\"1.如果后端给的请求没有API 「跨域」\"></a>1.如果后端给的请求没有API 「跨域」</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;user&#39;, (res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)   &#x2F;&#x2F; 服务端口在3000</span><br></pre></td></tr></table></figure>\n\n\n<p>请求已api开头, 转发的时候再删掉api</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    &#39;&#x2F;api&#39;: &#123;</span><br><span class=\"line\">      target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">      pathRewrite: &#123;&#39;^&#x2F;api&#39;: &#39;&#39;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-前端只想单纯mock数据-「跨域」\"><a href=\"#2-前端只想单纯mock数据-「跨域」\" class=\"headerlink\" title=\"2.前端只想单纯mock数据 「跨域」\"></a>2.前端只想单纯mock数据 「跨域」</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; proxy: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;     &#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39; &#x2F;&#x2F; 配置一个代理</span><br><span class=\"line\">  &#x2F;&#x2F; &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;   proxy: &#123;   &#x2F;&#x2F; 重写方式 把请求代理到express 上</span><br><span class=\"line\">  &#x2F;&#x2F;       &#39;&#x2F;api&#39;: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;           target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">  &#x2F;&#x2F;           pathRewrite: &#123;&#39;^&#x2F;api&#39;: &#39;&#39;&#125;</span><br><span class=\"line\">  &#x2F;&#x2F;       &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;   &#125;</span><br><span class=\"line\">  before: function (app) &#123;  &#x2F;&#x2F; 勾子</span><br><span class=\"line\">    app.get(&#39;&#x2F;api&#x2F;user&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">      res.json(&#123;name: &#39;tigerHee&#39;&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-有服务端，不用代理-服务端启动webpack-「跨域」\"><a href=\"#3-有服务端，不用代理-服务端启动webpack-「跨域」\" class=\"headerlink\" title=\"3.有服务端，不用代理, 服务端启动webpack 「跨域」\"></a>3.有服务端，不用代理, 服务端启动webpack 「跨域」</h2><p><code>server.js</code>中启动<code>webpack</code></p>\n<p><code>yarn add webpack-dev-middleware -D</code></p>\n<p><code>server.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; express</span><br><span class=\"line\"></span><br><span class=\"line\">let express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\">let app &#x3D; express();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 中间件</span><br><span class=\"line\">let middle &#x3D; require(&#39;webpack-dev-middleware&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let config &#x3D; require(&#39;.&#x2F;webpack.config&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let compiler &#x3D; webpack(config)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(middle(compiler))</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&#39;&#x2F;user&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.json(&#123;name: &#39;mayufo&#39;&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack解析resolve\"><a href=\"#webpack解析resolve\" class=\"headerlink\" title=\"webpack解析resolve\"></a>webpack解析resolve</h2><p>以<code>bootstrap</code>为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install bootstrap  -D</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br></pre></td></tr></table></figure>\n\n<p>报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in .&#x2F;node_modules&#x2F;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css 7:0</span><br><span class=\"line\">Module parse failed: Unexpected token (7:0)</span><br><span class=\"line\">You may need an appropriate loader to handle this file type.</span><br><span class=\"line\">|  * Licensed under MIT (https:&#x2F;&#x2F;github.com&#x2F;twbs&#x2F;bootstrap&#x2F;blob&#x2F;master&#x2F;LICENSE)</span><br><span class=\"line\">|  *&#x2F;</span><br><span class=\"line\">&gt; :root &#123;</span><br><span class=\"line\">|   --blue: #007bff;</span><br><span class=\"line\">|   --indigo: #6610f2;</span><br><span class=\"line\"> @ .&#x2F;src&#x2F;index.js 22:0-42</span><br><span class=\"line\"> @ multi (webpack)-dev-server&#x2F;client?http:&#x2F;&#x2F;localhost:8081 .&#x2F;src&#x2F;index.js</span><br></pre></td></tr></table></figure>\n\n<p>这是因为<code>bootstrap</code> 4.0的css引入了新的特性，CSS Variables</p>\n<p>安装<br><code>npm install postcss-custom-properties --save-dev</code></p>\n<p>配置<code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">  use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#123;</span><br><span class=\"line\">    loader: &#39;postcss-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      plugins: (loader) &#x3D;&gt; [</span><br><span class=\"line\">        require(&quot;postcss-custom-properties&quot;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"但是每次引入都很长，如何优雅引入\"><a href=\"#但是每次引入都很长，如何优雅引入\" class=\"headerlink\" title=\"但是每次引入都很长，如何优雅引入\"></a>但是每次引入都很长，如何优雅引入</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 在当前目录查找</span><br><span class=\"line\">  modules: [path.resolve(&#39;node_modules&#39;)],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">      &#39;bootstrapCss&#39;: &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;bootstrapCss&#39;  &#x2F;&#x2F; 在node_modules查找</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"省略扩展名\"><a href=\"#省略扩展名\" class=\"headerlink\" title=\"省略扩展名\"></a>省略扩展名</h2><p>extensions:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 在当前目录查找</span><br><span class=\"line\">  modules: [path.resolve(&#39;node_modules&#39;)],</span><br><span class=\"line\">  &#x2F;&#x2F; alias: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;   &#39;bootstrapCss&#39;: &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br><span class=\"line\">  &#x2F;&#x2F; &#125;,</span><br><span class=\"line\">  mainFields: [&#39;style&#39;, &#39;main&#39;],   &#x2F;&#x2F; 先用bootstrap中在package中的style,没有在用main</span><br><span class=\"line\">  &#x2F;&#x2F; mainFiles: []  &#x2F;&#x2F; 入口文件的名字 默认index</span><br><span class=\"line\">  extensions: [&#39;.js&#39;, &#39;.css&#39;, &#39;.json&#39;]  &#x2F;&#x2F; 当没有拓展命的时候，先默认js、次之css、再次之json</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义环境变量\"><a href=\"#定义环境变量\" class=\"headerlink\" title=\"定义环境变量\"></a>定义环境变量</h2><p><code>DefinePlugin</code> 允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和生产模式的构建允许不同的行为非常有用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url &#x3D; &#39;&#39;</span><br><span class=\"line\">if (DEV &#x3D;&#x3D;&#x3D; &#39;dev&#39;) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 开发环境</span><br><span class=\"line\">  url &#x3D; &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 生成环境</span><br><span class=\"line\">  url &#x3D; &#39;http:&#x2F;&#x2F;www.mayufo.cn&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">  &#x2F;&#x2F; DEV: &#39;&quot;production&quot;&#39;,</span><br><span class=\"line\">  DEV: JSON.stringify(&#39;production&#39;),</span><br><span class=\"line\">  FLAG: &#39;true&#39;,   &#x2F;&#x2F; 布尔</span><br><span class=\"line\">  EXPRESSION: &#39;1 + 1&#39;   &#x2F;&#x2F; 字符串 如果希望是字符串 JSON.stringify(&#39;1 + 1&#39;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"区分两个不同的环境\"><a href=\"#区分两个不同的环境\" class=\"headerlink\" title=\"区分两个不同的环境\"></a>区分两个不同的环境</h2><p>分别配置不同的环境</p>\n<ul>\n<li><code>webpack.base4.js</code>   基础配置</li>\n<li><code>webpack.dev4.js</code>    开发环境</li>\n<li><code>webpack.prod4.js</code>   生产环境</li>\n</ul>\n<p><code>yarn add webpack-merge -D</code></p>\n<p><code>npm run build -- -- config webpack.dev4.js</code><br><code>npm run build -- -- config webpack.build.js</code></p>\n<p><a href=\"https://webpack.docschina.org/guides/production/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><code>webpack.base4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    home: &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &quot;[name].js&quot;,</span><br><span class=\"line\">    path: path.resolve(process.cwd(), &#39;dist3&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#123;</span><br><span class=\"line\">          loader: &#39;postcss-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            plugins: (loader) &#x3D;&gt; [</span><br><span class=\"line\">              require(&quot;postcss-custom-properties&quot;)</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;index.html&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.dev4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let merge &#x3D; require(&#39;webpack-merge&#39;)</span><br><span class=\"line\">let base &#x3D; require(&#39;.&#x2F;webpack.base4.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; merge(base, &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  devServer: &#123;&#125;,</span><br><span class=\"line\">  devtool: &#39;source-map&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.prod4.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let merge &#x3D; require(&#39;webpack-merge&#39;)</span><br><span class=\"line\">let base &#x3D; require(&#39;.&#x2F;webpack.base4.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; merge(base, &#123;</span><br><span class=\"line\">  mode: &#39;production&#39;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;: &quot;webpack  --config webpack.prod4.js&quot;,</span><br><span class=\"line\">  &quot;dev&quot;: &quot;webpack-dev-server --config webpack.dev4.js&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"webpack-优化\"><a href=\"#webpack-优化\" class=\"headerlink\" title=\"webpack 优化\"></a>webpack 优化</h2><p><code>yarn add webpack webpack-cli html-webpack-plugin @babel/core babel-loader @babel/preset-env @babel/preset-react -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;main.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">      filename: &#39;index.html&#39;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化：当某些包是独立的个体没有依赖\"><a href=\"#优化：当某些包是独立的个体没有依赖\" class=\"headerlink\" title=\"优化：当某些包是独立的个体没有依赖\"></a>优化：当某些包是独立的个体没有依赖</h2><p>以jquery为例，<code>yarn add jquery -D</code>,它是一个独立的包没有依赖，可以在webpack配置中，配置它不再查找依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    noParse: &#x2F;jquery&#x2F;, &#x2F;&#x2F; 不用解析某些包的依赖</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">              &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx webpack</code></p>\n<p>从2057ms  -&gt; 1946 ms</p>\n<h2 id=\"优化：规则匹配设置范围\"><a href=\"#优化：规则匹配设置范围\" class=\"headerlink\" title=\"优化：规则匹配设置范围\"></a>优化：规则匹配设置范围</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    exclude: &#39;&#x2F;node_modules&#x2F;&#39;,   &#x2F;&#x2F; 排除</span><br><span class=\"line\">    include: path.resolve(&#39;src&#39;),  &#x2F;&#x2F; 在这个范围内</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">      loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        presets: [</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>尽量实用<code>include</code>,不使用<code>exclude</code>,使用绝对路径</p>\n<h2 id=\"优化：忽略依赖中不必要的语言包\"><a href=\"#优化：忽略依赖中不必要的语言包\" class=\"headerlink\" title=\"优化：忽略依赖中不必要的语言包\"></a>优化：忽略依赖中不必要的语言包</h2><p><code>yarn add moment webpack-dev-server -D</code></p>\n<p>忽略掉<code>moment</code>的其他语言包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new webpack.IgnorePlugin(&#x2F;\\.\\&#x2F;locale&#x2F;, &#x2F;moment&#x2F;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import moment from &#39;moment&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let r &#x3D; moment().endOf(&#39;day&#39;).fromNow()  &#x2F;&#x2F; 距离现在多少天</span><br><span class=\"line\">console.log(r);</span><br></pre></td></tr></table></figure>\n\n\n<p>从 1.2MB 到  800kb</p>\n<h2 id=\"动态链接库\"><a href=\"#动态链接库\" class=\"headerlink\" title=\"动态链接库\"></a>动态链接库</h2><p><code>yarn add react react-dom</code></p>\n<p>正常使用</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">  exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">  include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;render&#125; from &#39;react-dom&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;h1&gt;111111&lt;&#x2F;h1&gt;, window.root)</span><br></pre></td></tr></table></figure>\n\n<p><code>index.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>独立的将<code>react react-dom</code> 打包好, 打包好再引用，从而减少<code>webpack</code>每次都要打包<code>react</code></p>\n<p>创建<code>webpack.config.react.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; test: &#39;.&#x2F;src&#x2F;test.js&#39;</span><br><span class=\"line\">    react: [&#39;react&#39;, &#39;react-dom&#39;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;_dll_[name].js&#39;,  &#x2F;&#x2F; 产生的文件名</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    library: &#39;_dll_[name]&#39;,     &#x2F;&#x2F; 给输出的结果加个名字</span><br><span class=\"line\">    &#x2F;&#x2F; libraryTarget: &#39;var&#39;   &#x2F;&#x2F; 配置如何暴露 library</span><br><span class=\"line\">    &#x2F;&#x2F; commonjs 结果放在export属性上， umd统一资源模块, 默认是var</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new webpack.DllPlugin(&#123;</span><br><span class=\"line\">      name: &#39;_dll_[name]&#39;,   &#x2F;&#x2F; name &#x3D;&#x3D;&#x3D; library</span><br><span class=\"line\">      path: path.resolve(__dirname, &#39;dist&#39;, &#39;manifest.json&#39;)  &#x2F;&#x2F; manifest.json 定义了各个模块的路径</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/configuration/output/#%E6%9A%B4%E9%9C%B2%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F\" target=\"_blank\" rel=\"noopener\">libraryTarget</a></p>\n<p><code>manifest.json</code>就是一个任务清单or动态链接库，在这个清单里面查找react</p>\n<p><code>npx webpack --config webpack.config.react.js</code></p>\n<p>在<code>index.html</code>增加引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;_dll_react.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在webpack.config.js 中配置，现在动态链接库<code>manifest.json</code>中查找,如果没有再打包react</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">    manifest: path.resolve(__dirname, &#39;dist&#39;, &#39;manifest.json&#39;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/plugins/dll-plugin/#src/components/Sidebar/Sidebar.jsx\" target=\"_blank\" rel=\"noopener\">DLLPlugin 和 DLLReferencePlugin</a></p>\n<p><code>npm run build</code></p>\n<p>打包后的<code>bunle.js</code>文件变小</p>\n<p><code>npm run dev</code></p>\n<p>可以理解为先把react打包，后面每次都直接使用react打包后的结果</p>\n<h2 id=\"多线程打包happypack\"><a href=\"#多线程打包happypack\" class=\"headerlink\" title=\"多线程打包happypack\"></a>多线程打包<code>happypack</code></h2><p><code>yarn add happypack</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let Happypack &#x3D; require(&#39;happypack&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">    include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">    use: &#39;happypack&#x2F;loader?id&#x3D;js&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  new Happypack(&#123;</span><br><span class=\"line\">    id: &#39;js&#39;,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">      loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        presets: [</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">          &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>js启用多线程，由于启用多线程也会浪费时间，因此当项目比较大的时候启用效果更好</p>\n<p>css启用多线程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">  use: &#39;happypack&#x2F;loader?id&#x3D;css&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Happypack(&#123;</span><br><span class=\"line\">  id: &#39;css&#39;,</span><br><span class=\"line\">  use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-自带的优化\"><a href=\"#webpack-自带的优化\" class=\"headerlink\" title=\"webpack 自带的优化\"></a>webpack 自带的优化</h2><p><code>test.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sum &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return a + b + &#39;sum&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let minus &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return a - b + &#39;minus&#39;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  sum, minus</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用import </li>\n</ol>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import calc from &#39;.&#x2F;test&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(calc.sum(1, 2));</span><br></pre></td></tr></table></figure>\n\n\n<p>import在生产环境下会自动去除没有用的代码<code>minus</code>，这叫<code>tree-shaking</code>，将没有用的代码自动删除掉</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let calc &#x3D; require(&#39;.&#x2F;test&#39;)</span><br><span class=\"line\">console.log(calc);   &#x2F;&#x2F; es 6导出，是一个default的对象</span><br><span class=\"line\">console.log(calc.default.sum(1, 2));</span><br></pre></td></tr></table></figure>\n\n<p>require引入es6 模块会把结果放在default上,打包build后并不会把多余<code>minus</code>代码删除掉，不支持<code>tree-shaking</code></p>\n<ol start=\"2\">\n<li>作用域的提升</li>\n</ol>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a &#x3D; 1</span><br><span class=\"line\">let b &#x3D; 2</span><br><span class=\"line\">let c &#x3D; 3</span><br><span class=\"line\">let d &#x3D; a + b + c</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(d, &#39;---------&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>打包出来的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(r.default.sum(1,2));console.log(6,&quot;---------&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>在webpack中可以省略一些可以简化的代码</p>\n<h2 id=\"抽取公共代码\"><a href=\"#抽取公共代码\" class=\"headerlink\" title=\"抽取公共代码\"></a>抽取公共代码</h2><ol>\n<li>抽离自有模块</li>\n</ol>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;             &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">      cacheGroups: &#123;           &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">        common: &#123;              &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">          minSize: 0,          &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">          minChunks: 2,        &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">          chunks: &#39;initial&#39;    &#x2F;&#x2F; 从什么地方开始, 从入口开始</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/plugins/split-chunks-plugin/\" target=\"_blank\" rel=\"noopener\">SplitChunksPlugin</a></p>\n<p>分别有a.js和b.js, index.js和other.js分别引入a和b两个js</p>\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;.&#x2F;a&#39;</span><br><span class=\"line\">import &#39;.&#x2F;b&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;index.js&#39;);</span><br></pre></td></tr></table></figure>\n\n<p><code>other.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;.&#x2F;a&#39;</span><br><span class=\"line\">import &#39;.&#x2F;b&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;other.js&#39;);</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;             &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">      cacheGroups: &#123;           &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">        common: &#123;              &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">          minSize: 0,          &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">          minChunks: 2,        &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">          chunks: &#39;initial&#39;    &#x2F;&#x2F; 从什么地方开始, 从入口开始</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>抽离第三方模块</li>\n</ol>\n<p>比如jquery</p>\n<p><code>index.js</code> 和 <code>other.js</code>分别引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log($);</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>webpack.config.js</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  splitChunks: &#123;              &#x2F;&#x2F; 分割代码块，针对多入口</span><br><span class=\"line\">    cacheGroups: &#123;            &#x2F;&#x2F; 缓存组</span><br><span class=\"line\">      common: &#123;               &#x2F;&#x2F; 公共模块</span><br><span class=\"line\">        minSize: 0,           &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">        minChunks: 2,         &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">        chunks: &#39;initial&#39;     &#x2F;&#x2F; 从什么地方开始,刚开始</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      vendor: &#123;</span><br><span class=\"line\">        priority: 1,          &#x2F;&#x2F; 增加权重, (先抽离第三方)</span><br><span class=\"line\">        test: &#x2F;node_modules&#x2F;, &#x2F;&#x2F; 把此目录下的抽离</span><br><span class=\"line\">        minSize: 0,           &#x2F;&#x2F; 大于多少抽离</span><br><span class=\"line\">        minChunks: 2,         &#x2F;&#x2F; 使用多少次以上抽离抽离</span><br><span class=\"line\">        chunks: &#39;initial&#39;     &#x2F;&#x2F; 从什么地方开始,刚开始</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"懒加载-延迟加载\"><a href=\"#懒加载-延迟加载\" class=\"headerlink\" title=\"懒加载(延迟加载)\"></a>懒加载(延迟加载)</h2><p><code>yarn add @babel/plugin-syntax-dynamic-import  -D</code></p>\n<p><code>source.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#39;mayufo&#39;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let button &#x3D; document.createElement(&#39;button&#39;)</span><br><span class=\"line\">button.innerHTML &#x3D; &#39;hello&#39;</span><br><span class=\"line\">button.addEventListener(&#39;click&#39;, function () &#123;</span><br><span class=\"line\">  console.log(&#39;click&#39;)</span><br><span class=\"line\">  &#x2F;&#x2F; es6草案中的语法，jsonp实现动态加载文件</span><br><span class=\"line\">  import(&#39;.&#x2F;source.js&#39;).then(data &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(data.default)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">document.body.appendChild(button)</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">  exclude: &#39;&#x2F;node_modules&#x2F;&#39;,</span><br><span class=\"line\">  include: path.resolve(&#39;src&#39;),</span><br><span class=\"line\">  use: [&#123;</span><br><span class=\"line\">    loader: &#39;babel-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-env&#39;,</span><br><span class=\"line\">        &#39;@babel&#x2F;preset-react&#39;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        &#39;@babel&#x2F;plugin-syntax-dynamic-import&#39;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"热更新-当页面改变只更新改变的部分，不重新打包\"><a href=\"#热更新-当页面改变只更新改变的部分，不重新打包\" class=\"headerlink\" title=\"热更新(当页面改变只更新改变的部分，不重新打包)\"></a>热更新(当页面改变只更新改变的部分，不重新打包)</h2><p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">    filename: &#39;index.html&#39;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  new webpack.NameModulesPlugin(),          &#x2F;&#x2F; 打印更新的模块路径</span><br><span class=\"line\">  new webpack.HotModuleReplacementPlugin()  &#x2F;&#x2F; 热更新插件</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import str from &#39;.&#x2F;source&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str);</span><br><span class=\"line\"></span><br><span class=\"line\">if (module.hot) &#123;</span><br><span class=\"line\">  module.hot.accept(&#39;.&#x2F;source&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(&#39;文件更新了&#39;);</span><br><span class=\"line\">    require(&#39;.&#x2F;source&#39;)</span><br><span class=\"line\">    console.log(str);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍-SyncHook\"><a href=\"#tapable介绍-SyncHook\" class=\"headerlink\" title=\"tapable介绍 - SyncHook\"></a>tapable介绍 - SyncHook</h2><p><a href=\"https://juejin.im/post/5abf33f16fb9a028e46ec352\" target=\"_blank\" rel=\"noopener\">tapable</a></p>\n<p><code>webpack</code>本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是<code>Tapable</code>，<code>webpack</code>中最核心的负责编译的<code>Compiler</code>和负责创建<code>bundles</code>的<code>Compilation</code>都是<code>Tapable</code>的实例。</p>\n<p><code>SyncHook</code> 不关心监听函数的返回值</p>\n<p><code>yarn add tabable</code></p>\n<p><code>1.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 结构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">  constructor () &#123;</span><br><span class=\"line\">    this.hooks &#x3D; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">      arch: new SyncHook([&#39;name&#39;]),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  start () &#123;</span><br><span class=\"line\">    this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap () &#123;   &#x2F;&#x2F;  注册监听函数</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;node&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;react&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>1.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncHook &#123;  &#x2F;&#x2F; 勾子是同步的</span><br><span class=\"line\">  constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">    this.tasks &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap (name, task) &#123;</span><br><span class=\"line\">    this.tasks.push(task)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  call (...args) &#123;</span><br><span class=\"line\">    this.tasks.forEach((task) &#x3D;&gt; task(...args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">  console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">  console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"tapable介绍-SyncBailHook\"><a href=\"#tapable介绍-SyncBailHook\" class=\"headerlink\" title=\"tapable介绍 - SyncBailHook\"></a>tapable介绍 - SyncBailHook</h2><p><code>SyncBailHook</code>为勾子加了个保险，当<code>return</code>返回不是<code>undefine</code>就会停止</p>\n<p><code>2.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncBailHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">  constructor () &#123;</span><br><span class=\"line\">    this.hooks &#x3D; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">      arch: new SyncBailHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  start () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 发布</span><br><span class=\"line\">    this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;node&#39;, name)</span><br><span class=\"line\">      return &#39;停止学习&#39;  &#x2F;&#x2F; 会停止</span><br><span class=\"line\">      &#x2F;&#x2F; return undefined</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">      console.log(&#39;react&#39;, name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>2.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncBailHook &#123;  &#x2F;&#x2F; 勾子是同步的</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        let ret;   &#x2F;&#x2F; 当前函数的返回值</span><br><span class=\"line\">        let index &#x3D; 0; &#x2F;&#x2F; 当前要执行的第一个</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            ret &#x3D; this.tasks[index](...args)</span><br><span class=\"line\">        &#125; while (ret &#x3D;&#x3D;&#x3D; undefined  &amp;&amp; index &lt; this.tasks.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncBailHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return &#39;停止学习&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; return undefined</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍-SyncWaterfallHook\"><a href=\"#tapable介绍-SyncWaterfallHook\" class=\"headerlink\" title=\"tapable介绍 - SyncWaterfallHook\"></a>tapable介绍 - SyncWaterfallHook</h2><p><code>SyncWaterfallHook</code>上一个监听函数的返回值可以传给下一个监听函数</p>\n<p><code>3.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncWaterfallHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; waterfall 瀑布</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new SyncWaterfallHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name)</span><br><span class=\"line\">            return &#39;学的不错&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>3.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncWaterfallHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        let [first, ...others] &#x3D; this.tasks;</span><br><span class=\"line\">        let ret &#x3D; first(...args)</span><br><span class=\"line\">        others.reduce((a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return b(a);</span><br><span class=\"line\">        &#125;, ret);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncWaterfallHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return &#39;react Ok&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; return undefined</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">    return &#39;node Ok&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;webpack&#39;, function (data) &#123;</span><br><span class=\"line\">    console.log(&#39;webpack&#39;, data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tapable介绍-SyncLoopHook\"><a href=\"#tapable介绍-SyncLoopHook\" class=\"headerlink\" title=\"tapable介绍 - SyncLoopHook\"></a>tapable介绍 - SyncLoopHook</h2><p><code>SyncLoopHook</code>当监听函数被触发的时候，如果该监听函数返回<code>true</code>时则这个监听函数会反复执行，如果返回 <code>undefined</code> 则表示退出循环</p>\n<p><code>4.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;SyncLoopHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 不返回undefined 会多次执行</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new SyncLoopHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.call(&#39;may&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap () &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;node&#39;,  (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name)</span><br><span class=\"line\">            return ++this.index &#x3D;&#x3D;&#x3D; 3 ? undefined : &#39;继续学&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tap(&#39;react&#39;,  (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>4.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncLoopHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tap (name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    call (...args) &#123;</span><br><span class=\"line\">        this.tasks.forEach(task &#x3D;&gt; &#123;</span><br><span class=\"line\">            let ret</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                ret &#x3D; task(...args);</span><br><span class=\"line\">            &#125; while(ret !&#x3D;&#x3D; undefined)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new SyncLoopHook([&#39;name&#39;])</span><br><span class=\"line\">let total &#x3D; 0</span><br><span class=\"line\">hook.tap(&#39;react&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;react&#39;, name);</span><br><span class=\"line\">    return ++total &#x3D;&#x3D;&#x3D; 3 ? undefined: &#39;继续学&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;node&#39;, function (name) &#123;</span><br><span class=\"line\">    console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tap(&#39;webpack&#39;, function (data) &#123;</span><br><span class=\"line\">    console.log(&#39;webpack&#39;, data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.call(&#39;jw&#39;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"AsyncParallelHook-与-AsyncParallelBailHook\"><a href=\"#AsyncParallelHook-与-AsyncParallelBailHook\" class=\"headerlink\" title=\"AsyncParallelHook 与 AsyncParallelBailHook\"></a><code>AsyncParallelHook</code> 与 <code>AsyncParallelBailHook</code></h2><p>异步的勾子分两种<code>串行</code>和<code>并行</code></p>\n<p><code>并行</code>等待所有并发的异步事件执行后执行回调</p>\n<p>注册的三种方法</p>\n<ol>\n<li>异步的注册方法<code>tap</code></li>\n<li>异步的注册方法<code>tapAsync</code>， 还有个回调参数</li>\n<li><code>topPromise</code>,注册<code>promise</code></li>\n</ol>\n<p>调用的三种</p>\n<ol>\n<li>call (同步)</li>\n<li>callAsync （异步）</li>\n<li>promise （异步）</li>\n</ol>\n<p>这里介绍的是异步并行的</p>\n<h4 id=\"AsyncParallelHook\"><a href=\"#AsyncParallelHook\" class=\"headerlink\" title=\"AsyncParallelHook\"></a>AsyncParallelHook</h4><p>不关心监听函数的返回值。</p>\n<p><code>5.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncParallelHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 不返回undefined 会多次执行</span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncParallelHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布callAsync</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布promise</span><br><span class=\"line\">        this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">                console.log(&#39;end&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        &#x2F;&#x2F; 注册tapAsync</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅 tapPromise</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start() &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n\n<p><code>5.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncParallelHook &#123;  &#x2F;&#x2F; 勾子是同步的 - 瀑布</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()   &#x2F;&#x2F; 拿出最终的函数</span><br><span class=\"line\">        let index &#x3D; 0</span><br><span class=\"line\">        let done &#x3D; () &#x3D;&gt; &#123;   &#x2F;&#x2F; 类似promise.all的实现</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">            if (index &#x3D;&#x3D;&#x3D; this.tasks.length) &#123;</span><br><span class=\"line\">                finalCallback();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.tasks.forEach(task &#x3D;&gt; &#123;</span><br><span class=\"line\">            task(...args, done) &#x2F;&#x2F; 这里的args 已经把最后一个参数删掉</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        let tasks &#x3D; this.tasks.map(task &#x3D;&gt; task(...args))</span><br><span class=\"line\">        return Promise.all(tasks)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncParallelHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"AsyncParallelBailHook\"><a href=\"#AsyncParallelBailHook\" class=\"headerlink\" title=\"AsyncParallelBailHook\"></a>AsyncParallelBailHook</h4><p>只要监听函数的返回值不为 <code>null</code>，就会忽略后面的监听函数执行，直接跳跃到<code>callAsync</code>等触发函数绑定的回调函数，然后执行这个被绑定的回调函数。</p>\n<p>使用和原理与<code>SyncBailHook</code>相似</p>\n<h2 id=\"异步串行-——-AsyncSeriesHook\"><a href=\"#异步串行-——-AsyncSeriesHook\" class=\"headerlink\" title=\"异步串行 —— AsyncSeriesHook\"></a>异步串行 —— AsyncSeriesHook</h2><p><code>串行</code>one by one</p>\n<p><code>6.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncSeriesHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncSeriesHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布</span><br><span class=\"line\">        this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">                console.log(&#39;end&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;         callback()</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start(); &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>6.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncSeriesHook &#123;  &#x2F;&#x2F;</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()</span><br><span class=\"line\">        let index &#x3D; 0;</span><br><span class=\"line\">        let next &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (this.tasks.length &#x3D;&#x3D;&#x3D; index) return finalCallback();</span><br><span class=\"line\">            let task &#x3D; this.tasks[index++];</span><br><span class=\"line\">            task(...args, next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 将promise串联起来</span><br><span class=\"line\">        let [first, ...other] &#x3D; this.tasks</span><br><span class=\"line\">        return other.reduce((p, n) &#x3D;&gt; &#123;</span><br><span class=\"line\">             return p.then(() &#x3D;&gt; n (...args))</span><br><span class=\"line\">        &#125;, first(...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncSeriesHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步串行-——-AsyncSeriesWaterfallHook\"><a href=\"#异步串行-——-AsyncSeriesWaterfallHook\" class=\"headerlink\" title=\"异步串行 —— AsyncSeriesWaterfallHook\"></a>异步串行 —— AsyncSeriesWaterfallHook</h2><p>上一个监听函数的中的<code>callback(err, data)</code>的第二个参数,可以作为下一个监听函数的参数</p>\n<p><code>7.use.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;AsyncSeriesWaterfallHook&#125; &#x3D; require(&#39;tapable&#39;)   &#x2F;&#x2F; 解构同步勾子</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Lesson &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.index &#x3D; 0</span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 订阅勾子</span><br><span class=\"line\">            arch: new AsyncSeriesWaterfallHook([&#39;name&#39;]),</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发布</span><br><span class=\"line\">        this.hooks.arch.callAsync(&#39;may&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种发布</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.promise(&#39;may&#39;).then(function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         console.log(&#39;end&#39;);</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tap() &#123;   &#x2F;&#x2F;  注册监听函数,订阅</span><br><span class=\"line\">        this.hooks.arch.tapAsync(&#39;node&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;node&#39;, name)</span><br><span class=\"line\">                &#x2F;&#x2F; callback(null, &#39;result&#39;)</span><br><span class=\"line\">                callback(&#39;error&#39;, &#39;result&#39;)   &#x2F;&#x2F; 如果放error, 会跳过直接后面的勾子，直接走到最终的</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        this.hooks.arch.tapAsync(&#39;react&#39;,  (name, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;react&#39;, name)</span><br><span class=\"line\">                callback()</span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; 另一种订阅</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapPromise(&#39;node&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;             console.log(&#39;node&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;             resolve()</span><br><span class=\"line\">        &#x2F;&#x2F;         &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; this.hooks.arch.tapPromise(&#39;react&#39;, (name) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;         setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;             console.log(&#39;react&#39;, name)</span><br><span class=\"line\">        &#x2F;&#x2F;             resolve()</span><br><span class=\"line\">        &#x2F;&#x2F;         &#125;, 1000)</span><br><span class=\"line\">        &#x2F;&#x2F;     &#125;)</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let l &#x3D; new Lesson()</span><br><span class=\"line\"></span><br><span class=\"line\">l.tap();  &#x2F;&#x2F;注册两个函数</span><br><span class=\"line\">l.start(); &#x2F;&#x2F; 启动勾子</span><br></pre></td></tr></table></figure>\n\n<p><code>7.theory.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncSeriesWaterfallHook &#123;  &#x2F;&#x2F;</span><br><span class=\"line\">    constructor(args) &#123;  &#x2F;&#x2F; args &#x3D;&gt; [&#39;name&#39;]</span><br><span class=\"line\">        this.tasks &#x3D; []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapAsync(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tapPromise(name, task) &#123;</span><br><span class=\"line\">        this.tasks.push(task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callAsync(...args) &#123;</span><br><span class=\"line\">        let finalCallback &#x3D; args.pop()</span><br><span class=\"line\">        let index &#x3D; 0;</span><br><span class=\"line\">        let next &#x3D; (err, data) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let task &#x3D; this.tasks[index]</span><br><span class=\"line\">            if(!task) return finalCallback();</span><br><span class=\"line\">            if (index &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 执行的第一个</span><br><span class=\"line\">                task(...args, next)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                task(data, next)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    promise(...args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 将promise串联起来</span><br><span class=\"line\">        let [first, ...other] &#x3D; this.tasks</span><br><span class=\"line\">        return other.reduce((p, n) &#x3D;&gt; &#123;</span><br><span class=\"line\">             return p.then((data) &#x3D;&gt; n(data))</span><br><span class=\"line\">        &#125;, first(...args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let hook &#x3D; new AsyncSeriesWaterfallHook([&#39;name&#39;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;react&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback(null, &#39;结果1&#39;)</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;node&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback(null, &#39;结果2&#39;)</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.tapAsync(&#39;webpack&#39;, function (name, callback) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         console.log(&#39;webpack&#39;, name);</span><br><span class=\"line\">&#x2F;&#x2F;         callback()</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;, 1000)</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">hook.tapPromise(&#39;react&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;react&#39;, name);</span><br><span class=\"line\">            resolve(&#39;result&#39;)</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">hook.tapPromise(&#39;node&#39;, function (name, callback) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;node&#39;, name);</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; hook.callAsync(&#39;jw&#39;, function () &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     console.log(&#39;end&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hook.promise(&#39;jw&#39;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#39;end&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"手写webpack\"><a href=\"#手写webpack\" class=\"headerlink\" title=\"手写webpack\"></a>手写webpack</h2><p><a href=\"https://github.com/mayufo/webpack-training\" target=\"_blank\" rel=\"noopener\">对应的may-pack项目</a></p>\n<p><code>yarn add webpack webpack-cli -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>npx webpack</code></p>\n<p>生成文件<code>bundle.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (modules) &#123;</span><br><span class=\"line\">    var installedModules &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (installedModules[moduleId]) &#123;</span><br><span class=\"line\">            return installedModules[moduleId].exports;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class=\"line\">            i: moduleId,</span><br><span class=\"line\">            l: false,</span><br><span class=\"line\">            exports: &#123;&#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">        module.l &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">        return module.exports;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Load entry module and return exports</span><br><span class=\"line\">    return __webpack_require__(__webpack_require__.s &#x3D; &quot;.&#x2F;src&#x2F;index.js&quot;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">(&#123;</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;a.js&quot;:</span><br><span class=\"line\">        (function (module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">            eval(&quot;let b &#x3D; __webpack_require__(&#x2F;*! .&#x2F;base&#x2F;b *&#x2F; \\&quot;.&#x2F;src&#x2F;base&#x2F;b.js\\&quot;)\\n\\nmodule.exports &#x3D; &#39;a&#39;+ b\\n\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;a.js?&quot;);</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;base&#x2F;b.js&quot;:</span><br><span class=\"line\">        (function (module, exports) &#123;</span><br><span class=\"line\">            eval(&quot;module.exports &#x3D; &#39;b&#39;\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;base&#x2F;b.js?&quot;);</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    &quot;.&#x2F;src&#x2F;index.js&quot;:</span><br><span class=\"line\">        (function (module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">            eval(&quot; let str &#x3D; __webpack_require__(&#x2F;*! .&#x2F;a.js *&#x2F; \\&quot;.&#x2F;src&#x2F;a.js\\&quot;)\\n\\n console.log(str);\\n\\n\\n&#x2F;&#x2F;# sourceURL&#x3D;webpack:&#x2F;&#x2F;&#x2F;.&#x2F;src&#x2F;index.js?&quot;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>新建项目用于自己的<code>webpack</code>,这里叫<code>may-pack</code></p>\n<p><code>yarn init</code></p>\n<p>如果在node里想执行命令，创建<code>bin</code>文件,再创建<code>may-pack.js</code></p>\n<p>配置<code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;may-pack&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class=\"line\">  &quot;bin&quot;: &#123;</span><br><span class=\"line\">    &quot;may-pack&quot;: &quot;.&#x2F;bin&#x2F;may-pack.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!  &#x2F;usr&#x2F;bin&#x2F;env node </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; node环境</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;start&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npm link</code>将npm 模块链接到对应的运行项目中去，方便地对模块进行调试和测试</p>\n<p>在想运行<code>may-pack</code>的项目中运行，<code>npm link may-pack</code> 得到 <code>start</code></p>\n<h2 id=\"webpack分析及处理\"><a href=\"#webpack分析及处理\" class=\"headerlink\" title=\"webpack分析及处理\"></a>webpack分析及处理</h2><p><code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!  &#x2F;usr&#x2F;bin&#x2F;env node</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; node环境</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;start&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 拿到配置文件webpack.config.js</span><br><span class=\"line\">let config &#x3D; require(path.resolve(&#39;webpack.config.js&#39;));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let Compiler &#x3D; require(&#39;..&#x2F;lib&#x2F;Compiler.js&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">let compiler &#x3D; new Compiler(config);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 标识运行编译</span><br><span class=\"line\">compiler.run()</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>lib</code>文件<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n\n<p>主要两个任务</p>\n<ol>\n<li>拿到入口Id</li>\n<li>解析模块，也就是实现<code>buildModule</code>方法</li>\n</ol>\n<h2 id=\"创建依赖关系\"><a href=\"#创建依赖关系\" class=\"headerlink\" title=\"创建依赖关系\"></a>创建依赖关系</h2><p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;traverse 对ast解析遍历语法树 负责替换，删除和添加节点</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;types 用于AST节点的Lodash-esque实用程序库</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;generator 结果生成</span><br><span class=\"line\"></span><br><span class=\"line\">let babylon &#x3D; require(&#39;babylon&#39;)</span><br><span class=\"line\">let traverse &#x3D; require(&#39;@babel&#x2F;traverse&#39;).default;</span><br><span class=\"line\">let type &#x3D; require(&#39;@babel&#x2F;types&#39;);</span><br><span class=\"line\">let generator &#x3D; require(&#39;@babel&#x2F;generator&#39;).default</span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parse (source, parentPath) &#123;</span><br><span class=\"line\">        console.log(source, parentPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">        let source &#x3D; this.getSource(modulePath)  &#x2F;&#x2F; 得到入口文件的内容</span><br><span class=\"line\">        &#x2F;&#x2F; 模块id modulePath(需要相对路径) &#x3D; modulePath(模块路径) - this.root(项目工作路径)   src&#x2F;index.js</span><br><span class=\"line\">        let moduleName &#x3D; &#39;.&#x2F;&#39; + path.relative(this.root, modulePath)</span><br><span class=\"line\">        console.log(source, moduleName);  &#x2F;&#x2F; 拿到代码 和相对路径 .&#x2F;src&#x2F;index.js</span><br><span class=\"line\">        if (isEntry) &#123;</span><br><span class=\"line\">            this.entryId &#x3D; moduleName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let &#123;sourceCode, dependencies&#125; &#x3D; this.parse(source, path.dirname(moduleName))   &#x2F;&#x2F; .&#x2F;src</span><br><span class=\"line\">        &#x2F;&#x2F; 把相对路径和模块中的内容对应起来</span><br><span class=\"line\">        this.modules[moduleName] &#x3D; sourceCode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        console.log(this.modules, this.entryId);</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ast递归解析\"><a href=\"#ast递归解析\" class=\"headerlink\" title=\"ast递归解析\"></a>ast递归解析</h2><p><code>parse</code>方法主要靠解析语法树来进行转义<br><code>babylon</code>  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。<br><code>@babel/traverse</code> 对ast解析遍历语法树 负责替换，删除和添加节点<br><code>@babel/types</code> 用于AST节点的Lodash-esque实用程序库<br><code>@babel/generator</code> 结果生成</p>\n<p><code>yarn add babylon @babel/traverse @babel/types @babel/generator</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;traverse 对ast解析遍历语法树 负责替换，删除和添加节点</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;types 用于AST节点的Lodash-esque实用程序库</span><br><span class=\"line\">&#x2F;&#x2F; @babel&#x2F;generator 结果生成</span><br><span class=\"line\"></span><br><span class=\"line\">let babylon &#x3D; require(&#39;babylon&#39;)</span><br><span class=\"line\">let traverse &#x3D; require(&#39;@babel&#x2F;traverse&#39;).default;</span><br><span class=\"line\">let type &#x3D; require(&#39;@babel&#x2F;types&#39;);</span><br><span class=\"line\">let generator &#x3D; require(&#39;@babel&#x2F;generator&#39;).default</span><br><span class=\"line\">class Compiler &#123;</span><br><span class=\"line\">    constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parse (source, parentPath) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; AST解析语法树</span><br><span class=\"line\">        let ast &#x3D; babylon.parse(source)</span><br><span class=\"line\">        let dependencies &#x3D; []; &#x2F;&#x2F; 依赖的数组</span><br><span class=\"line\">        &#x2F;&#x2F; https:&#x2F;&#x2F;astexplorer.net&#x2F;</span><br><span class=\"line\">        traverse(ast, &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 调用表达式</span><br><span class=\"line\">            CallExpression(p) &#123;</span><br><span class=\"line\">                let node &#x3D; p.node; &#x2F;&#x2F;对应的节点</span><br><span class=\"line\">                if(node.callee.name &#x3D;&#x3D;&#x3D; &#39;require&#39;) &#123;</span><br><span class=\"line\">                   node.callee.name &#x3D; &#39;__webpack_require__&#39;</span><br><span class=\"line\">                    let moduledName &#x3D; node.arguments[0].value   &#x2F;&#x2F; 取到模块的引用名字</span><br><span class=\"line\">                    moduledName &#x3D; moduledName + (path.extname(moduledName) ? &#39;&#39;: &#39;.js&#39;);  &#x2F;&#x2F; .&#x2F;a.js</span><br><span class=\"line\">                    moduledName &#x3D; &#39;.&#x2F;&#39; + path.join(parentPath, moduledName)  &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;a.js&#39;</span><br><span class=\"line\">                    dependencies.push(moduledName)</span><br><span class=\"line\">                    node.arguments &#x3D; [type.stringLiteral(moduledName)] &#x2F;&#x2F; 改掉源码</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        let sourceCode &#x3D; generator(ast).code</span><br><span class=\"line\">        return &#123; sourceCode, dependencies &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 构建模块</span><br><span class=\"line\">    buildModule(modulePath, isEntry) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">        let source &#x3D; this.getSource(modulePath)  &#x2F;&#x2F; 得到入口文件的内容</span><br><span class=\"line\">        &#x2F;&#x2F; 模块id modulePath(需要相对路径) &#x3D; modulePath(模块路径) - this.root(项目工作路径)   src&#x2F;index.js</span><br><span class=\"line\">        let moduleName &#x3D; &#39;.&#x2F;&#39; + path.relative(this.root, modulePath)</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(source, moduleName);  &#x2F;&#x2F; 拿到代码 和相对路径 .&#x2F;src&#x2F;index.js</span><br><span class=\"line\">        if (isEntry) &#123;</span><br><span class=\"line\">            this.entryId &#x3D; moduleName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 解析把source源码进行改造， 返回一个依赖列表</span><br><span class=\"line\">        let &#123;sourceCode, dependencies&#125; &#x3D; this.parse(source, path.dirname(moduleName))   &#x2F;&#x2F; .&#x2F;src</span><br><span class=\"line\">        &#x2F;&#x2F; 把相对路径和模块中的内容对应起来</span><br><span class=\"line\">        this.modules[moduleName] &#x3D; sourceCode</span><br><span class=\"line\">        dependencies.forEach(dep &#x3D;&gt; &#123;  &#x2F;&#x2F; 附模块的加载 递归加载</span><br><span class=\"line\">            this.buildModule(path.join(this.root, dep), false)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        console.log(this.modules, this.entryId);</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; Compiler</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成打包工具\"><a href=\"#生成打包工具\" class=\"headerlink\" title=\"生成打包工具\"></a>生成打包工具</h2><p>使用ejs模板</p>\n<p><code>may-pack</code>中<code>main.ejs</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (modules) &#123;</span><br><span class=\"line\">var installedModules &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">if (installedModules[moduleId]) &#123;</span><br><span class=\"line\">return installedModules[moduleId].exports;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class=\"line\">i: moduleId,</span><br><span class=\"line\">l: false,</span><br><span class=\"line\">exports: &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">module.l &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">return module.exports;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Load entry module and return exports</span><br><span class=\"line\">return __webpack_require__(__webpack_require__.s &#x3D; &quot;&lt;%-entryId %&gt;&quot;);</span><br><span class=\"line\">&#125;)(&#123;</span><br><span class=\"line\">&lt;% for(let key in modules)&#123; %&gt;</span><br><span class=\"line\">    &quot;&lt;%- key %&gt;&quot;:</span><br><span class=\"line\">    (function (module, exports,__webpack_require__) &#123;</span><br><span class=\"line\">eval(&#96;&lt;%-modules[key] %&gt;&#96;);</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ejs.bootcss.com/\" target=\"_blank\" rel=\"noopener\">ejs入门</a></p>\n<p><code>yarn add ejs</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ejs &#x3D; require(&#39;ejs&#39;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    emitFile() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用数据 渲染想要的</span><br><span class=\"line\">        &#x2F;&#x2F; 输出到那个目录下</span><br><span class=\"line\">        let main &#x3D; path.join(this.config.output.path, this.config.output.filename)</span><br><span class=\"line\">        let templateStr &#x3D; this.getSource(path.join(__dirname, &#39;main.ejs&#39;))</span><br><span class=\"line\">        let code &#x3D; ejs.render(templateStr, &#123; entryId: this.entryId, modules: this.modules&#125;)</span><br><span class=\"line\">        this.assets &#x3D; &#123;&#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 路径对应的代码</span><br><span class=\"line\">        this.assets[main] &#x3D; code</span><br><span class=\"line\">        fs.writeFileSync(main, this.assets[main])</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack-training</code>项目中运行<code>npx may-pack</code>, 得到<code>bundle.js</code>,运行得到结果</p>\n<h2 id=\"增加loader\"><a href=\"#增加loader\" class=\"headerlink\" title=\"增加loader\"></a>增加loader</h2><p>创建<code>loader</code>文件夹，创建<code>less-loader1.js</code>和<code>style-loader1.js</code></p>\n<p><code>yarn add less</code></p>\n<p><a href=\"http://lesscss.cn/#using-less\" target=\"_blank\" rel=\"noopener\">less使用</a></p>\n<p><code>less-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将less转为css</span><br><span class=\"line\">let less &#x3D; require(&#39;less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let css &#x3D; &#39;&#39;</span><br><span class=\"line\">    less.render(source, function (err, output) &#123;</span><br><span class=\"line\">        css &#x3D; output.css</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    css &#x3D; css.replace(&#x2F;\\n&#x2F;g, &#39;\\\\n&#39;);</span><br><span class=\"line\">    return css</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>style-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将css插入到html头部</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    console.log(111);</span><br><span class=\"line\">    let style &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; $&#123;JSON.stringify(source)&#125;</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    return style</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; JSON.stringify(source) 可以将代码转为一行</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader1&#39;),</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader1&#39;)</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>index.less</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: red</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str &#x3D; require(&#39;.&#x2F;a.js&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">require(&#39;.&#x2F;index.less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str);</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到模块内容</span><br><span class=\"line\">    getSource (modulePath) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 匹配各种文件的规则</span><br><span class=\"line\">        let rules&#x3D; this.config.module.rules;   &#x2F;&#x2F; webpack.config.js 中rules的数组</span><br><span class=\"line\">        let content &#x3D; fs.readFileSync(modulePath, &#39;utf8&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">        for (let i &#x3D; 0; i &lt; rules.length; i++) &#123;</span><br><span class=\"line\">            let rule &#x3D; rules[i]</span><br><span class=\"line\">            let &#123;test, use&#125; &#x3D; rule</span><br><span class=\"line\">            let len &#x3D; use.length - 1</span><br><span class=\"line\"></span><br><span class=\"line\">            if (test.test(modulePath)) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; console.log(use[len]);</span><br><span class=\"line\">                function normalLoader () &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(use[len--]);</span><br><span class=\"line\">                    let loader &#x3D; require(use[len--])</span><br><span class=\"line\">                    content &#x3D; loader(content)</span><br><span class=\"line\">                    &#x2F;&#x2F; 递归调用loader 实现转化</span><br><span class=\"line\">                    if (len &gt;&#x3D; 0) &#123;</span><br><span class=\"line\">                        normalLoader()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                normalLoader()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return content</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx may-pack</code></p>\n<h2 id=\"增加plugins\"><a href=\"#增加plugins\" class=\"headerlink\" title=\"增加plugins\"></a>增加plugins</h2><p><code>yarn add tapable</code></p>\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(config) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; entry  output</span><br><span class=\"line\">        this.config &#x3D; config</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存入口文件的路径</span><br><span class=\"line\">        this.entryId &#x3D; &#39;&#39;;   &#x2F;&#x2F; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; 需要保存所有的模块依赖</span><br><span class=\"line\">        this.modules &#x3D; &#123;&#125;;</span><br><span class=\"line\">        this.entry &#x3D; config.entry  &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">        &#x2F;&#x2F; 工作目录</span><br><span class=\"line\">        this.root &#x3D; process.cwd(); &#x2F;&#x2F; 当前运行npx的路径</span><br><span class=\"line\"></span><br><span class=\"line\">        this.hooks &#x3D; &#123;</span><br><span class=\"line\">            entryOption: new SyncHook(),  &#x2F;&#x2F; 入口选项</span><br><span class=\"line\">            compile: new SyncHook(),      &#x2F;&#x2F; 编译</span><br><span class=\"line\">            afterCompile: new SyncHook(),  &#x2F;&#x2F; 编译完成</span><br><span class=\"line\">            afterPlugins: new SyncHook(),   &#x2F;&#x2F; 编译完插件</span><br><span class=\"line\">            run: new SyncHook(),         &#x2F;&#x2F; 运行</span><br><span class=\"line\">            emit: new SyncHook(),        &#x2F;&#x2F; 发射</span><br><span class=\"line\">            done: new SyncHook()         &#x2F;&#x2F; 完成</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 如果传递了plugins参数</span><br><span class=\"line\">        let plugins &#x3D; this.config.plugins</span><br><span class=\"line\">        if (Array.isArray(plugins)) &#123;</span><br><span class=\"line\">            plugins.forEach(plugin &#x3D;&gt; &#123;</span><br><span class=\"line\">                plugin.apply(this); &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.hooks.afterPlugins.call()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack.config.js</code>中写插件方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class P &#123;</span><br><span class=\"line\">    apply(compiler) &#123;   &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">        &#x2F;&#x2F; 绑定</span><br><span class=\"line\">        compiler.hooks.emit.tap(&#39;emit&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;emit&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class P1 &#123;</span><br><span class=\"line\">    apply(compiler) &#123;   &#x2F;&#x2F; 这里只是appLy方法不是改变this指向</span><br><span class=\"line\">        &#x2F;&#x2F; 绑定</span><br><span class=\"line\">        compiler.hooks.afterPlugins.tap(&#39;emit&#39;, function () &#123;</span><br><span class=\"line\">            console.log(&#39;afterPlugins&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader&#39;),</span><br><span class=\"line\">                    path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader&#39;)</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new P(),</span><br><span class=\"line\">        new P1()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在各个地方调用</p>\n<p><code>may-pack</code>中<code>may-pack.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">&#x2F;&#x2F; 调用</span><br><span class=\"line\">compiler.hooks.entryOption.call()</span><br><span class=\"line\">&#x2F;&#x2F; 标识运行编译</span><br><span class=\"line\">compiler.run()</span><br></pre></td></tr></table></figure>\n\n<p><code>may-pack</code>中<code>Compiler.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run() &#123;</span><br><span class=\"line\">        this.hooks.run.call()</span><br><span class=\"line\"></span><br><span class=\"line\">        this.hooks.compile.call()</span><br><span class=\"line\">        &#x2F;&#x2F; 执行 创建模块的依赖关系</span><br><span class=\"line\">        this.buildModule(path.resolve(this.root, this.entry), true)  &#x2F;&#x2F; path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(this.modules, this.entryId);</span><br><span class=\"line\">        this.hooks.afterCompile.call()</span><br><span class=\"line\">        &#x2F;&#x2F; 发射打包后的文件</span><br><span class=\"line\">        this.emitFile()</span><br><span class=\"line\">        this.hooks.emit.call()</span><br><span class=\"line\">        this.hooks.done.call()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx may-pack</code></p>\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p><a href=\"https://juejin.im/post/59e6a5de518825469c7461da\" target=\"_blank\" rel=\"noopener\">手写loader</a></p>\n<p><code>webapck.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.js&#x2F;,</span><br><span class=\"line\">                use: &#39;loader1&#39; &#x2F;&#x2F; 如何找到这个loader1</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>loader</code>文件<code>loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(22);</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolveLoader: &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 别名</span><br><span class=\"line\">      &#x2F;&#x2F; alias: &#123;</span><br><span class=\"line\">      &#x2F;&#x2F;     loader1: path.resolve(__dirname, &#39;loader&#39;, &#39;loader1&#39;)</span><br><span class=\"line\">      &#x2F;&#x2F; &#125;</span><br><span class=\"line\">        modules: [&#39;node_modules&#39;, path.resolve(__dirname, &#39;loader&#39;)]  &#x2F;&#x2F; 先找node_modules, 再去loader中去找</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">                &#x2F;&#x2F; use: [path.resolve(__dirname, &#39;loader&#39;, &#39;loader1&#39;)]</span><br><span class=\"line\">                use: &#39;loader1&#39; &#x2F;&#x2F; 如何找到这个loader1</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#x2F;&#x2F; &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;     test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">            &#x2F;&#x2F;     use: [</span><br><span class=\"line\">            &#x2F;&#x2F;         path.resolve(__dirname, &#39;loader&#39;, &#39;style-loader&#39;),</span><br><span class=\"line\">            &#x2F;&#x2F;         path.resolve(__dirname, &#39;loader&#39;, &#39;less-loader&#39;)</span><br><span class=\"line\">            &#x2F;&#x2F;     ]</span><br><span class=\"line\">            &#x2F;&#x2F; &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何找到这个<code>loader1</code></p>\n<ol>\n<li>通过配别名<code>alias</code></li>\n<li>通过<code>modules</code></li>\n</ol>\n<p><code>npx webpack</code></p>\n<h2 id=\"配置多个loader\"><a href=\"#配置多个loader\" class=\"headerlink\" title=\"配置多个loader\"></a>配置多个loader</h2><ol>\n<li>数组方式</li>\n</ol>\n<p>先分别在<code>loader</code>文件下创建，<code>loader2.js</code>和<code>loader3.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;loader2&#39;);  &#x2F;&#x2F; loader3.js 类似</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader3&#39;, &#39;loader2&#39;, &#39;loader1&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx webpack</code>,分别打出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>对象方式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader3&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader2&#39;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">        use: [&#39;loader1&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>npx webpack</code>,分别打出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p><code>loader</code>的顺序: 从右到左, 从下到上</p>\n</blockquote>\n<p>也可以通过配置不同的参数改变<code>loader</code>的执行顺序，<code>pre</code> 前面的， <code>post</code>在后面的， <code>normal</code>正常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader1&#39;],</span><br><span class=\"line\">    enforce: &quot;pre&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader2&#39;]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#39;loader3&#39;],</span><br><span class=\"line\">    enforce: &quot;post&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>loader</code> 带参数执行的顺序: <code>pre  -&gt; normal -&gt; inline -&gt; post</code></p>\n<p><code>inline</code>为行内<code>loader</code></p>\n<p>在<code>loader</code>文件中新建<code>inlin-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;inline&#39;);</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>src/a.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#39;may&#39;</span><br></pre></td></tr></table></figure>\n\n<p><code>src/index</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#39;hello&#39;)</span><br><span class=\"line\">let srt &#x3D; require(&#39;-!inline-loader!.&#x2F;a&#39;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>-!</code>禁用<code>pre-loader</code>和 <code>normal-loader</code>来处理了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">inline</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li><code>!</code>禁用<code>normal-loader</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">loader1</span><br><span class=\"line\">inline</span><br><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li><code>!!</code> 禁用<code>pre-loader</code>、<code>normal-loader</code>、<code>post-loader</code>,只能行内处理</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader1</span><br><span class=\"line\">loader2</span><br><span class=\"line\">loader3</span><br><span class=\"line\">inline</span><br></pre></td></tr></table></figure>\n\n<p>loader 默认由两部分组成<code>pitch</code>和<code>normal</code></p>\n<p><code>user: [loader3, loader2, loader1]</code></p>\n<p>无返回值: 先执行pitch方法,从左到右，再获取资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    pitch loader - 无返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   loader3 → loader2 → loader1  </span><br><span class=\"line\">                                    ↘</span><br><span class=\"line\">                                      资源</span><br><span class=\"line\">                                    ↙</span><br><span class=\"line\">normal   loader3 ← loader2 ← loader1</span><br></pre></td></tr></table></figure>\n\n<p>有返回值: 直接跳过后续所有的<code>loader</code>包括自己的,跳到之前的<code>loader</code>, 可用于阻断</p>\n<p><a href=\"https://webpack.docschina.org/api/loaders/\" target=\"_blank\" rel=\"noopener\">loader</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user: [loader3, loader2, loader1]</span><br><span class=\"line\"></span><br><span class=\"line\">    pitch loader - 有返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   loader3 → loader2  loader1  </span><br><span class=\"line\">                     ↙               </span><br><span class=\"line\">               有返回值               资源</span><br><span class=\"line\">               ↙                      </span><br><span class=\"line\">normal  loader3  loader2  loader1</span><br></pre></td></tr></table></figure>\n\n<p><code>loadeer2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    console.log(&#39;loader2&#39;);</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loader.pitch &#x3D; function () &#123;</span><br><span class=\"line\">    return &#39;111&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"babel-loader实现\"><a href=\"#babel-loader实现\" class=\"headerlink\" title=\"babel-loader实现\"></a><code>babel-loader</code>实现</h2><p><code>yarn add @babel/core @babel/preset-env</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#39;\\.js$&#x2F;&#39;,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;babel-loader2&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">                &#39;@babel&#x2F;preset-env&#39;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>loader</code>文件创建<code>babel-loader2.js</code>(如果你已经装过<code>babel-loader</code>)</p>\n<p>拿到<code>babel</code>的参数</p>\n<p><code>yarn add loader-utils</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 需要在webpack.config.js拿到babel的预设, 通过预设转换模块, 先引入babel</span><br><span class=\"line\">let babel &#x3D; require(&#39;@babel&#x2F;core&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D;require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码  这里的this就是loader的上下文</span><br><span class=\"line\">    let options &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    console.log(this.resourcePath, 444);   &#x2F;&#x2F; [.&#x2F;src&#x2F;index.js]</span><br><span class=\"line\">    let callback &#x3D; this.async(); &#x2F;&#x2F; babel的转换是异步的,同步的返回是不行的， 不能用return  同步就是直接掉用 异步会在async中</span><br><span class=\"line\">    babel.transform(source, &#123;</span><br><span class=\"line\">        ...options,</span><br><span class=\"line\">        sourceMap: true,         &#x2F;&#x2F; 是否设置sourceMap 还需要再webpack.config.js 中配置  devtool: &#39;source-map&#39;</span><br><span class=\"line\">        filename: this.resourcePath.split(&#39;&#x2F;&#39;).pop()   &#x2F;&#x2F;  给生成的&#96;source-map&#96;指定名字</span><br><span class=\"line\">    &#125;, function (err, result) &#123;</span><br><span class=\"line\">        callback(err, result.code, result.map)   &#x2F;&#x2F; 异步 参数分别是「错误 转化后的代码 和 sourceMap」</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(options);</span><br><span class=\"line\">    &#x2F;&#x2F; return source  失效</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>index.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class May &#123;</span><br><span class=\"line\">    constructor () &#123;</span><br><span class=\"line\">        this.name &#x3D; &#39;may&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getName () &#123;</span><br><span class=\"line\">        return this.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let may &#x3D; new May()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(may.getName());</span><br></pre></td></tr></table></figure>\n\n<p><code>npx webpack</code></p>\n<h2 id=\"banner-loader实现-自创\"><a href=\"#banner-loader实现-自创\" class=\"headerlink\" title=\"banner-loader实现(自创)\"></a><code>banner-loader</code>实现(自创)</h2><p>给所有匹配的<code>js</code>加一个注释</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    &#x2F;&#x2F; 给所有匹配的&#96;js&#96;加一个注释</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;banner-loader&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">           text: &#39;may&#39;,</span><br><span class=\"line\">           filename: path.resolve(__dirname, &#39;banner.js&#39;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>banner.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二次星球中毒</span><br></pre></td></tr></table></figure>\n\n\n<p>在<code>loader</code>文件创建<code>banner-loader.js</code></p>\n<p><code>yarn add schema-utils</code> 校验自己写的<code>loader</code>格式是否正确</p>\n<p><a href=\"https://github.com/webpack-contrib/schema-utils\" target=\"_blank\" rel=\"noopener\">schema-utils</a></p>\n<p><code>banner-loader.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到loader的配置</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 校验loader</span><br><span class=\"line\">let validateOptions &#x3D; require(&#39;schema-utils&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 读取文件</span><br><span class=\"line\">let fs &#x3D; require(&#39;fs&#39;)  &#x2F;&#x2F; 异步</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    let options &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    let callback &#x3D; this.async()  &#x2F;&#x2F; 读取文件是异步</span><br><span class=\"line\">    let schema &#x3D; &#123;</span><br><span class=\"line\">        type: &#39;object&#39;,</span><br><span class=\"line\">        properties: &#123;</span><br><span class=\"line\">            text: &#123;</span><br><span class=\"line\">                type: &#39;string&#39;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            filename: &#123;</span><br><span class=\"line\">                type: &#39;string&#39;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    validateOptions(schema, options, &#39;banner-loader&#39;)  &#x2F;&#x2F; 自己的校验格式， 自己的写的配置， 对应的loader名字</span><br><span class=\"line\">    if (options.filename) &#123;</span><br><span class=\"line\">        this.cacheable(false)  &#x2F;&#x2F; 不要缓存  如果有大量计算 推荐缓存</span><br><span class=\"line\">        &#x2F;&#x2F; this.cacheable &amp;&amp; this.cacheable()</span><br><span class=\"line\">        this.addDependency(options.filename) &#x2F;&#x2F; 自动增加依赖</span><br><span class=\"line\">        fs.readFile(options.filename, &#39;utf8&#39;, function (err, data) &#123;</span><br><span class=\"line\">            callback(err, &#96;&#x2F;**$&#123;data&#125;**&#x2F;$&#123;source&#125;&#96;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        callback(null, &#96;&#x2F;**$&#123;options.text&#125;**&#x2F;$&#123;source&#125;&#96;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return source</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>优化:</p>\n<ol>\n<li>修改<code>banner.js</code>的内容后, <code>webpack</code>进行监控，打包<code>webapck.config.js</code>配置<code>watch: true</code></li>\n<li><code>loader</code>缓存</li>\n</ol>\n<h2 id=\"实现file-loader和url-loader\"><a href=\"#实现file-loader和url-loader\" class=\"headerlink\" title=\"实现file-loader和url-loader\"></a>实现<code>file-loader</code>和<code>url-loader</code></h2><p><code>yarn add mime</code></p>\n<p>其主要用途是设置某种扩展名的文件的响应程序类型</p>\n<p><a href=\"https://github.com/broofa/node-mime#readme\" target=\"_blank\" rel=\"noopener\">mime</a></p>\n<p>创建<code>file-loader.js1</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    &#x2F;&#x2F; file-loader需要返回路径</span><br><span class=\"line\">    let filename &#x3D; loaderUtils.interpolateName(this, &#39;[hash].[ext]&#39;, &#123;content: source &#125;)</span><br><span class=\"line\">    this.emitFile(filename, source) &#x2F;&#x2F; 发射文件</span><br><span class=\"line\">    console.log(&#39;loader1&#39;);</span><br><span class=\"line\">    return &#96;module.exports&#x3D;&quot;$&#123;filename&#125;&quot;&#96;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loader.raw &#x3D; true &#x2F;&#x2F; 二进制</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>url-loader1.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拿到babel的参数 需要工具 loaderUtils</span><br><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\">let mime &#x3D; require(&#39;mime&#39;)  &#x2F;&#x2F; 途是设置某种扩展名的文件的响应程序类型</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;  &#x2F;&#x2F; loader的参数就是源代码</span><br><span class=\"line\">    let &#123;limit&#125; &#x3D; loaderUtils.getOptions(this)</span><br><span class=\"line\">    console.log(this.resourcePath);</span><br><span class=\"line\">    if (limit &amp;&amp; limit &gt; source.length) &#123;</span><br><span class=\"line\">        return &#96;module.exports&#x3D;&quot;data:$&#123;mime.getType(this.resourcePath)&#125;;base64,$&#123;source.toString(&#39;base64&#39;)&#125;&quot;&#96;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return require(&#39;.&#x2F;file-loader1&#39;).call(this, source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loader.raw &#x3D; true &#x2F;&#x2F; 二进制</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.png$&#x2F;,</span><br><span class=\"line\">    &#x2F;&#x2F; 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径</span><br><span class=\"line\">    &#x2F;&#x2F; use: &#39;file-loader&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; 处理路径</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;url-loader1&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            limit: 200 * 1024</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>index.js</code>引入图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import p from &#39;.&#x2F;photo.png&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let img &#x3D; document.createElement(&#39;img&#39;)</span><br><span class=\"line\">img.src &#x3D; p</span><br><span class=\"line\">document.body.appendChild(img);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"less-loader和css-loader\"><a href=\"#less-loader和css-loader\" class=\"headerlink\" title=\"less-loader和css-loader\"></a><code>less-loader</code>和<code>css-loader</code></h2><p>先安装<code>less</code></p>\n<p>分别创建<code>style-loader2</code> <code>css-loader2</code> <code>less-loader2</code></p>\n<p><code>style-loader1</code> 与 <code>less-loader1</code> 同之前的</p>\n<h2 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css-loader\"></a><code>css-loader</code></h2><p>主要用来处理<code>css</code>中的图片链接，需要把<code>url</code>转换成<code>require</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.png$&#x2F;,</span><br><span class=\"line\">    &#x2F;&#x2F; 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径</span><br><span class=\"line\">    &#x2F;&#x2F; use: &#39;file-loader&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; 处理路径</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        loader: &#39;url-loader1&#39;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            limit: 200 * 1024</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.less$&#x2F;,</span><br><span class=\"line\">    use: [&#39;style-loader2&#39;, &#39;css-loader2&#39;, &#39;less-loader2&#39;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>index.less</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@base: #f938ab;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: @base;</span><br><span class=\"line\">  background: url(&quot;.&#x2F;photo.png&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>less-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将less转为css</span><br><span class=\"line\">let less &#x3D; require(&#39;less&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let css &#x3D; &#39;&#39;</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(source, 2222);</span><br><span class=\"line\">    less.render(source, function (err, output) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(output);</span><br><span class=\"line\">        css &#x3D; output.css</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    &#x2F;&#x2F; css &#x3D; css.replace(&#x2F;\\n&#x2F;g, &#39;\\\\n&#39;);</span><br><span class=\"line\">    return css</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<p><code>css-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css-loader 用来解析@import这种语法,包括css中引入的图片</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let reg &#x3D; &#x2F;url\\((.+?)\\)&#x2F;g   &#x2F;&#x2F; 匹配括号</span><br><span class=\"line\"></span><br><span class=\"line\">    let pos &#x3D; 0;</span><br><span class=\"line\">    let current;</span><br><span class=\"line\"></span><br><span class=\"line\">    let arr &#x3D; [&#39;let list &#x3D; []&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">    while (current &#x3D; reg.exec(source)) &#123;</span><br><span class=\"line\">        let [matchUrl, g] &#x3D; current   &#x2F;&#x2F; matchUrl -&gt; &#39;url(&quot;.&#x2F;photo.png&quot;)&#39;, g  -&gt; &#39;&quot;.&#x2F;photo.png&quot;&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(matchUrl, g, 88);</span><br><span class=\"line\">        let lastIndex &#x3D; reg.lastIndex - matchUrl.length    &#x2F;&#x2F; 拿到css从开通到地址链接之前的index</span><br><span class=\"line\">        arr.push(&#96;list.push($&#123;JSON.stringify(source.slice(pos, lastIndex))&#125;)&#96;)  &#x2F;&#x2F; 拼入开始和地址之前的代码</span><br><span class=\"line\">        pos &#x3D; reg.lastIndex</span><br><span class=\"line\">        arr.push(&#96;list.push(&#39;url(&#39;+ require($&#123;g&#125;) +&#39;)&#39;)&#96;)    &#x2F;&#x2F; 拼入图片地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr.push(&#96;list.push($&#123;JSON.stringify(source.slice(pos))&#125;)&#96;)  &#x2F;&#x2F; 拼入地址到结尾的代码</span><br><span class=\"line\">    arr.push(&#96;module.exports &#x3D; list.join(&#39;&#39;)&#96;)</span><br><span class=\"line\">    console.log(arr.join(&#39;\\r\\n&#39;));</span><br><span class=\"line\">    &#x2F;&#x2F; let list &#x3D; []</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&quot;body &#123;\\\\n  background: #f938ab;\\\\n  background: &quot;)</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&#39;url(&#39;+ require(&quot;.&#x2F;photo.png&quot;) +&#39;)&#39;)</span><br><span class=\"line\">    &#x2F;&#x2F; list.push(&quot;;\\\\n&#125;\\\\n&quot;)</span><br><span class=\"line\">    &#x2F;&#x2F; module.exports &#x3D; list.join(&#39;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return arr.join(&#39;\\r\\n&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n<p><code>style-loader2.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let loaderUtils &#x3D; require(&#39;loader-utils&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将css插入到html头部</span><br><span class=\"line\">function loader(source) &#123;</span><br><span class=\"line\">    let str &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; $&#123;JSON.stringify(source)&#125;</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    return str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; style-loader写了pitch,有返回后面的跳过，自己的写不会走</span><br><span class=\"line\">loader.pitch &#x3D; function (remainingRequest) &#123;  &#x2F;&#x2F; 剩余的请求</span><br><span class=\"line\">    console.log(loaderUtils.stringifyRequest(this, &#39;!!&#39; + remainingRequest, 99999999))</span><br><span class=\"line\">    &#x2F;&#x2F; 让style-loader 处理 less-loader 和css-loader拼接的结果</span><br><span class=\"line\">    &#x2F;&#x2F; 得到 &#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;loader&#x2F;css-loader2.js!&#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;loader&#x2F;less-loader2.js!&#x2F;Users&#x2F;liuhuimin&#x2F;work&#x2F;webpack&#x2F;src&#x2F;index.less</span><br><span class=\"line\">    &#x2F;&#x2F; 剩余的请求 less-loader!css-loader!.&#x2F;index.less</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(remainingRequest, 1223);</span><br><span class=\"line\">    &#x2F;&#x2F; require返回的就是css-loader处理好的结果require(&#39;!!css-loader!less-loader!.&#x2F;index.less&#39;)</span><br><span class=\"line\">    let str &#x3D; &#96;</span><br><span class=\"line\">    let style &#x3D; document.createElement(&#39;style&#39;)</span><br><span class=\"line\">    style.innerHTML &#x3D; require($&#123;loaderUtils.stringifyRequest(this, &#39;!!&#39; + remainingRequest)&#125;)</span><br><span class=\"line\">    document.head.appendChild(style)</span><br><span class=\"line\">   &#96;</span><br><span class=\"line\">    &#x2F;&#x2F; stringifyRequest 绝对路径转相对路径</span><br><span class=\"line\">    return str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports &#x3D; loader</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user: [&#39;style-loader2&#39;, &#39;css-loader2&#39;, &#39;less-loader2&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">    pitch loader - 有返回值</span><br><span class=\"line\">    </span><br><span class=\"line\">pitch   style-loader2 → css-loader2  less-loader2  </span><br><span class=\"line\">                     ↙               </span><br><span class=\"line\">               有返回值               资源</span><br><span class=\"line\">               ↙                      </span><br><span class=\"line\">normal  style-loader2  css-loader2  less-loader2</span><br></pre></td></tr></table></figure>\n\n<p>在<code>style-loader2</code>中 引用了<code>less-loader</code> <code>css-loader</code> 和<code>less</code>文件</p>\n<h2 id=\"webpack-中的插件\"><a href=\"#webpack-中的插件\" class=\"headerlink\" title=\"webpack 中的插件\"></a>webpack 中的插件</h2><p><code>yarn add webpack webpack-cil -D</code></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new DonePlugin(),    &#x2F;&#x2F; 同步</span><br><span class=\"line\">        new AsyncPlugins()   &#x2F;&#x2F; 异步</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>node_modules/webpack/lib</code>中查看<code>Compiler.js</code></p>\n<ol>\n<li>同步<code>plugins/DonePlugins</code></li>\n</ol>\n<p>打包完成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DonePlugins &#123;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        console.log(1);</span><br><span class=\"line\">        compiler.hooks.done.tap(&#39;DonePlugin&#39;, (stats) &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;编译完成&#39;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; DonePlugins</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>异步<code>plugins/AsyncPlugins</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AsyncPlugins &#123;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        console.log(2);</span><br><span class=\"line\">        compiler.hooks.emit.tapAsync(&#39;AsyncPlugin&#39;, (complete, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                console.log(&#39;文件发射出来&#39;);</span><br><span class=\"line\">                callback()</span><br><span class=\"line\">            &#125;, 1000)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        compiler.hooks.emit.tapPromise(&#39;AsyncPlugin&#39;, (complete, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">            return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">                    console.log(&#39;文件发射出来 222&#39;);</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, 1000)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; AsyncPlugins</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件列表插件\"><a href=\"#文件列表插件\" class=\"headerlink\" title=\"文件列表插件\"></a>文件列表插件</h2><p>希望生成一个文件描述打包出来的文件</p>\n<p>在<code>plugins</code>中新建<code>FileListPlugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FileListPlugin &#123;</span><br><span class=\"line\">    constructor (&#123;filename&#125;) &#123;</span><br><span class=\"line\">        this.filename &#x3D; filename</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 文件已经准备好了 要进行发射</span><br><span class=\"line\">        &#x2F;&#x2F; emit</span><br><span class=\"line\">        compiler.hooks.emit.tap(&#39;FileListPlugin&#39;, (compilation) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let assets &#x3D; compilation.assets;</span><br><span class=\"line\">            console.log(assets, 55);</span><br><span class=\"line\">            let content &#x3D; &#96;## 文件名  资源大小\\r\\n&#96;</span><br><span class=\"line\">            &#x2F;&#x2F; [ [bundls.js, &#123;&#125;], [index.html, &#123;&#125;]]</span><br><span class=\"line\">            Object.entries(assets).forEach(([filename, stateObj]) &#x3D;&gt; &#123;</span><br><span class=\"line\">                content +&#x3D; &#96;- $&#123;filename&#125;    $&#123;stateObj.size()&#125;\\r\\n&#96;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            &#x2F;&#x2F; 资源对象</span><br><span class=\"line\">            assets[this.filename] &#x3D; &#123;</span><br><span class=\"line\">                source () &#123;</span><br><span class=\"line\">                    return content;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                size () &#123;</span><br><span class=\"line\">                    return content.length</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; FileListPlugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let FileListPlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;FileListPlugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;development&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;build.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new DonePlugin(),</span><br><span class=\"line\">        new AsyncPlugins(),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new FileListPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;list.md&#39;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成<code>list.md</code></p>\n<h2 id=\"内联的webpack插件\"><a href=\"#内联的webpack插件\" class=\"headerlink\" title=\"内联的webpack插件\"></a>内联的<code>webpack</code>插件</h2><p>新建<code>index.css</code>引入<code>index.js</code></p>\n<p><code>yarn add css-loader mini-css-extract-plugin -D</code></p>\n<p>希望打包后<code>css、js</code>内联在<code>index.html</code>文件中</p>\n<p>创建<code>plugins</code>中<code>InlineSourcePlugins.js</code></p>\n<p><code>yarn add --dev html-webpack-plugin@next</code></p>\n<p><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">HTML Webpack Plugin</a></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">let DonePlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;DonePlugins&#39;)</span><br><span class=\"line\">let AsyncPlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;AsyncPlugins&#39;)</span><br><span class=\"line\">let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\">let FileListPlugin &#x3D; require(&#39;.&#x2F;plugins&#x2F;FileListPlugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let InlineSourcePlugins &#x3D; require(&#39;.&#x2F;plugins&#x2F;InlineSourcePlugins&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    mode: &#39;production&#39;,</span><br><span class=\"line\">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: &#x2F;\\.css$&#x2F;,</span><br><span class=\"line\">                use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        &#x2F;&#x2F; new DonePlugin(),</span><br><span class=\"line\">        &#x2F;&#x2F; new AsyncPlugins(),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;index.css&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new InlineSourcePlugins(&#123;</span><br><span class=\"line\">            match: &#x2F;\\.(js|css)&#x2F;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        &#x2F;&#x2F; new FileListPlugin(&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;     filename: &#39;list.md&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>InlineSourcePlugins.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 把外链的标签编程内联的标签</span><br><span class=\"line\">class InlineSourcePlugins &#123;</span><br><span class=\"line\">    constructor(&#123;match&#125;) &#123;</span><br><span class=\"line\">        this.reg &#x3D; match  &#x2F;&#x2F; 正则</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 处理某一个标签</span><br><span class=\"line\">    processTag(tag, compilation) &#123;</span><br><span class=\"line\">        let newTag &#x3D; &#123;&#125;</span><br><span class=\"line\">        let url &#x3D; &#39;&#39;</span><br><span class=\"line\">        if (tag.tagName &#x3D;&#x3D;&#x3D; &#39;link&#39; &amp;&amp; this.reg.test(tag.attributes.href)) &#123;</span><br><span class=\"line\">            newTag &#x3D; &#123;</span><br><span class=\"line\">                tagName: &#39;style&#39;,</span><br><span class=\"line\">                attributes: &#123;type: &#39;text&#x2F;css&#39;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url &#x3D; tag.attributes.href</span><br><span class=\"line\">        &#125; else if (tag.tagName &#x3D;&#x3D;&#x3D; &#39;script&#39; &amp;&amp; this.reg.test(tag.attributes.src)) &#123;</span><br><span class=\"line\">            newTag &#x3D; &#123;</span><br><span class=\"line\">                tagName: &#39;script&#39;,</span><br><span class=\"line\">                attributes: &#123;type: &#39;application&#x2F;javascript&#39;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url &#x3D; tag.attributes.src</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (url) &#123;</span><br><span class=\"line\">            newTag.innerHTML &#x3D; compilation.assets[url].source(); &#x2F;&#x2F; 文件内容放到innerHTML属性中</span><br><span class=\"line\">            delete compilation.assets[url]   &#x2F;&#x2F; 删除原有的资源</span><br><span class=\"line\">            return newTag</span><br><span class=\"line\">            &#x2F;&#x2F; console.log(compilation.assets[url].source());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return tag</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 处理引入标签的数据</span><br><span class=\"line\">    processTags(data, compilation) &#123;</span><br><span class=\"line\">        let headTags &#x3D; []</span><br><span class=\"line\">        let bodyTags &#x3D; []</span><br><span class=\"line\">        data.headTags.forEach(headTag &#x3D;&gt; &#123;</span><br><span class=\"line\">            headTags.push(this.processTag(headTag, compilation))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        data.bodyTags.forEach(bodyTag &#x3D;&gt; &#123;</span><br><span class=\"line\">            bodyTags.push(this.processTag(bodyTag, compilation))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        console.log(&#123;...data, headTags, bodyTags&#125;)</span><br><span class=\"line\">        return &#123;...data, headTags, bodyTags&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    apply(compiler) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过webpackPlugin来实现  npm搜索  html-webpack-plugin</span><br><span class=\"line\">        compiler.hooks.compilation.tap(&#39;InlineSourcePlugins&#39;, (compilation) &#x3D;&gt; &#123;</span><br><span class=\"line\">            HtmlWebpackPlugin.getHooks(compilation).alterAssetTagGroups.tapAsync(</span><br><span class=\"line\">                &#39;alertPlugin&#39;,</span><br><span class=\"line\">                (data, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;);</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(data) &#x2F;&#x2F; 插入html标签的数据</span><br><span class=\"line\">                    &#x2F;&#x2F; console.log(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;);</span><br><span class=\"line\">                    data &#x3D; this.processTags(data, compilation)   &#x2F;&#x2F; compilation.assets 资源的链接</span><br><span class=\"line\">                    callback(null, data)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; InlineSourcePlugins</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"打包后自动发布\"><a href=\"#打包后自动发布\" class=\"headerlink\" title=\"打包后自动发布\"></a>打包后自动发布</h2><p>打包好的文件自动上传致七牛</p>\n<p>需要这几个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bucket: &#39;&#39;  &#x2F;&#x2F; 七牛的存储空间</span><br><span class=\"line\">domain: &#39;&#39;,</span><br><span class=\"line\">accessKey: &#39;&#39;, &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">secretKey: &#39;&#39; &#x2F;&#x2F; 七牛云的两对密匙</span><br></pre></td></tr></table></figure>\n\n<p>注册七牛，并在对象存储里面,新建存储空间列表<code>test</code>,<code>bucket: &#39;test&#39;</code></p>\n<p>内容管理外链接默认域名 <code>domain: &#39;xxxxxxxx&#39;</code></p>\n<p>右上角个人面板里面个人中心,密钥管理分别对应<code>accessKey</code>和<code>secretKey</code></p>\n<p><a href=\"https://developer.qiniu.com/\" target=\"_blank\" rel=\"noopener\">进入开发者中心</a> -&gt; SDK&amp;工具 -&gt; 官方SDK -&gt; Node服务端文档 —&gt; 文件上传</p>\n<p><a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\" target=\"_blank\" rel=\"noopener\">node文件上传</a></p>\n<p><code>npm install qiniu</code></p>\n<p><a href=\"https://webpack.docschina.org/api/compiler-hooks\" target=\"_blank\" rel=\"noopener\">compiler-hooks</a></p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class=\"line\">            filename: &#39;index.html&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: &#39;index.css&#39;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new UploadPlugin(&#123;</span><br><span class=\"line\">            bucket: &#39;test&#39;,  &#x2F;&#x2F; 七牛的存储空间</span><br><span class=\"line\">            domain: &#39;poyrjyh1b.bkt.clouddn.com&#39;,</span><br><span class=\"line\">            accessKey: &#39;xxxxxx&#39;, &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">            secretKey: &#39;yyyyyy&#39; &#x2F;&#x2F; 七牛云的两对密匙</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<p><code>UploadPlugin.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let qiniu &#x3D; require(&#39;qiniu&#39;)</span><br><span class=\"line\">let path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">class UploadPlugin &#123;</span><br><span class=\"line\">    constructor (options &#x3D; &#123;&#125;) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 参考 https:&#x2F;&#x2F;developer.qiniu.com&#x2F;kodo&#x2F;sdk&#x2F;1289&#x2F;nodejs</span><br><span class=\"line\">        let &#123; bucket &#x3D; &#39;&#39;, domain &#x3D; &#39;&#39;, accessKey &#x3D; &#39;&#39;, secretKey &#x3D; &#39;&#39;&#125; &#x3D; options</span><br><span class=\"line\">        let mac &#x3D; new qiniu.auth.digest.Mac(accessKey, secretKey)</span><br><span class=\"line\">        let putPolicy &#x3D; new qiniu.rs.PutPolicy(&#123;</span><br><span class=\"line\">            scope: bucket</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.uploadToken &#x3D; putPolicy.uploadToken(mac)</span><br><span class=\"line\">        let config &#x3D; new qiniu.conf.Config();</span><br><span class=\"line\">        this.formUploader &#x3D; new qiniu.form_up.FormUploader(config)</span><br><span class=\"line\">        this.putExtra &#x3D; new qiniu.form_up.PutExtra()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        compiler.hooks.afterEmit.tapPromise(&#39;UploadPlugin&#39;, (complication) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let assets &#x3D; complication.assets</span><br><span class=\"line\">            let promise &#x3D; []</span><br><span class=\"line\">            Object.keys(assets).forEach(filename &#x3D;&gt; &#123;</span><br><span class=\"line\">                promise.push(this.upload(filename))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            return Promise.all(promise)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    upload (filename) &#123;</span><br><span class=\"line\">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">            let localFile &#x3D; path.resolve(__dirname, &#39;..&#x2F;dist&#39;, filename)</span><br><span class=\"line\">            this.formUploader.putFile(this.uploadToken, filename, localFile, this.putExtra, function(respErr,</span><br><span class=\"line\">                                                                                 respBody, respInfo) &#123;</span><br><span class=\"line\">                if (respErr) &#123;</span><br><span class=\"line\">                    reject(respErr)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (respInfo.statusCode &#x3D;&#x3D; 200) &#123;</span><br><span class=\"line\">                    resolve(respBody)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    console.log(respInfo.statusCode)</span><br><span class=\"line\">                    console.log(respBody)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; UploadPlugin</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckecjkrf90000r0u26xohg7ou","category_id":"ckecjkrfh0004r0u2hptv9pbi","_id":"ckecjkrfn000er0u25mhq95yn"},{"post_id":"ckecjkrff0002r0u20ttl5elm","category_id":"ckecjkrfl0009r0u26t7ibbam","_id":"ckecjkrfo000kr0u26al6eqxn"},{"post_id":"ckecjkrfi0006r0u207ij73zv","category_id":"ckecjkrfn000fr0u28lovgtcg","_id":"ckecjkrfs000rr0u220vu1sga"},{"post_id":"ckecjkrfj0007r0u2fyq3d4vb","category_id":"ckecjkrfn000fr0u28lovgtcg","_id":"ckecjkrft000wr0u2dwq11wwx"},{"post_id":"ckecjkrfk0008r0u27gxr5c03","category_id":"ckecjkrfr000qr0u22n7q0bue","_id":"ckecjkrfv0013r0u22m8202ut"},{"post_id":"ckecjkrft000zr0u2cgos9kpd","category_id":"ckecjkrfr000qr0u22n7q0bue","_id":"ckecjkrfw0018r0u2b25jbmmg"},{"post_id":"ckecjkrfl000cr0u23vn36xf6","category_id":"ckecjkrfn000fr0u28lovgtcg","_id":"ckecjkrfx001cr0u2haq1gdnv"},{"post_id":"ckecjkrfu0011r0u29hc1ai9k","category_id":"ckecjkrfr000qr0u22n7q0bue","_id":"ckecjkrfy001fr0u26b73f89k"},{"post_id":"ckecjkrfv0015r0u26h1w49cy","category_id":"ckecjkrfr000qr0u22n7q0bue","_id":"ckecjkrfz001hr0u2ec8e9yvh"},{"post_id":"ckecjkrfm000dr0u21vhvfqaf","category_id":"ckecjkrfn000fr0u28lovgtcg","_id":"ckecjkrg0001mr0u2ch02baoy"},{"post_id":"ckecjkrfn000hr0u2arjz1s88","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrg2001or0u2bx7c37sl"},{"post_id":"ckecjkrfo000jr0u285jybwxz","category_id":"ckecjkrfz001ir0u2enqs2627","_id":"ckecjkrg3001tr0u2epgrbmf9"},{"post_id":"ckecjkrfp000nr0u295du1ezu","category_id":"ckecjkrg2001pr0u24r1z15ux","_id":"ckecjkrg50021r0u21sof3q88"},{"post_id":"ckecjkrfr000pr0u22ee7dkvj","category_id":"ckecjkrfz001ir0u2enqs2627","_id":"ckecjkrg70026r0u29lsa22tq"},{"post_id":"ckecjkrfs000tr0u2ezbj7igr","category_id":"ckecjkrg50020r0u23cyjghbt","_id":"ckecjkrgb002cr0u2ev04b14w"},{"post_id":"ckecjkrga002br0u2dlgs5hwy","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgd002kr0u2cyv75vkq"},{"post_id":"ckecjkrft000vr0u20pbw5qfp","category_id":"ckecjkrg70027r0u24h5z0ivz","_id":"ckecjkrge002pr0u22g289x4j"},{"post_id":"ckecjkrgb002dr0u26j3xchux","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgf002sr0u2azbq15h4"},{"post_id":"ckecjkrgc002hr0u2atgv95n5","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgg002xr0u25caadgsj"},{"post_id":"ckecjkrfw0017r0u2cmq6f3q2","category_id":"ckecjkrgb002er0u29rg35eao","_id":"ckecjkrgh0030r0u2e9kt4ei2"},{"post_id":"ckecjkrgd002jr0u2e0oe0x5m","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgj0035r0u266t421i7"},{"post_id":"ckecjkrge002or0u22fsibv1e","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgk0038r0u2cp8f882u"},{"post_id":"ckecjkrfx001br0u26pw982fu","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgl003dr0u2eboh3plo"},{"post_id":"ckecjkrgf002rr0u203jrdv6f","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgn003gr0u22sc4bb0l"},{"post_id":"ckecjkrgg002wr0u222i97miz","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgo003lr0u2442d0rn4"},{"post_id":"ckecjkrfy001er0u2fto31bsi","category_id":"ckecjkrgf002tr0u2hzdx8gr9","_id":"ckecjkrgp003or0u2da473z6z"},{"post_id":"ckecjkrgh002zr0u2gza48o5w","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgr003sr0u263clfikd"},{"post_id":"ckecjkrgj0034r0u2g72x009m","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgs003wr0u2d0lwg79d"},{"post_id":"ckecjkrfy001gr0u21gva0k61","category_id":"ckecjkrgf002tr0u2hzdx8gr9","_id":"ckecjkrgt0040r0u2g9zq2hgw"},{"post_id":"ckecjkrgk0037r0u29fjqfxm1","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgu0044r0u21dok29h2"},{"post_id":"ckecjkrgl003cr0u2ampgblhz","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgv0048r0u262wgep9j"},{"post_id":"ckecjkrg0001lr0u2acq0ayfu","category_id":"ckecjkrgf002tr0u2hzdx8gr9","_id":"ckecjkrgv004cr0u2cs2s3aao"},{"post_id":"ckecjkrgm003fr0u28u3c6zo3","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgw004fr0u2ex9qevmx"},{"post_id":"ckecjkrgo003kr0u22fzvbg4t","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgw004ir0u2hzxigwrd"},{"post_id":"ckecjkrg1001nr0u21zdcar9x","category_id":"ckecjkrgf002tr0u2hzdx8gr9","_id":"ckecjkrgx004lr0u20te21oqt"},{"post_id":"ckecjkrgo003nr0u2g7cd0r5j","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgy004or0u25i86d1qh"},{"post_id":"ckecjkrgr003rr0u2fhn68u63","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgy004rr0u21ebcbld6"},{"post_id":"ckecjkrg2001rr0u217xbf2xr","category_id":"ckecjkrgf002tr0u2hzdx8gr9","_id":"ckecjkrgy004ur0u2a20p42e1"},{"post_id":"ckecjkrgr003vr0u28e73ar9s","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgz004xr0u21qn8fpv3"},{"post_id":"ckecjkrgs003zr0u282uwg3f0","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrgz0050r0u2ggibck2y"},{"post_id":"ckecjkrg3001sr0u2gk4vgq5c","category_id":"ckecjkrgb002er0u29rg35eao","_id":"ckecjkrh00052r0u274es0e7r"},{"post_id":"ckecjkrgt0043r0u27jk875j6","category_id":"ckecjkrfz001ir0u2enqs2627","_id":"ckecjkrh00055r0u2g31pfjlj"},{"post_id":"ckecjkrgu0047r0u227ush4et","category_id":"ckecjkrfz001ir0u2enqs2627","_id":"ckecjkrh10057r0u2gnwwa32i"},{"post_id":"ckecjkrg4001wr0u234yw2hjt","category_id":"ckecjkrg70027r0u24h5z0ivz","_id":"ckecjkrh10059r0u2d7l70d5k"},{"post_id":"ckecjkrgv004br0u27mrh7si1","category_id":"ckecjkrfz001ir0u2enqs2627","_id":"ckecjkrh2005cr0u2af57chmo"},{"post_id":"ckecjkrg5001yr0u2cr9ocbvx","category_id":"ckecjkrgw004dr0u22drb1pmm","_id":"ckecjkrh2005er0u2awny5isb"},{"post_id":"ckecjkrg60023r0u2e5frgpql","category_id":"ckecjkrgw004dr0u22drb1pmm","_id":"ckecjkrh2005hr0u2az82gk5f"},{"post_id":"ckecjkrg60025r0u24jzx82wl","category_id":"ckecjkrgb002er0u29rg35eao","_id":"ckecjkrh3005jr0u2ag657a03"},{"post_id":"ckecjkrg70028r0u20zr03mgl","category_id":"ckecjkrg70027r0u24h5z0ivz","_id":"ckecjkrh3005mr0u27qgif3mh"},{"post_id":"ckecjkrh7005ur0u28u9l1ote","category_id":"ckecjkrgf002tr0u2hzdx8gr9","_id":"ckecjkrh7005wr0u28mz1agij"},{"post_id":"ckecjkrh9005xr0u22rzw6hi4","category_id":"ckecjkrfx0019r0u2h9yse4aq","_id":"ckecjkrha005zr0u2ad4peyj0"},{"post_id":"ckecjkrhc0060r0u26wb9d54p","category_id":"ckecjkrfz001ir0u2enqs2627","_id":"ckecjkrhc0062r0u2e52bg7oq"}],"PostTag":[{"post_id":"ckecjkrf90000r0u26xohg7ou","tag_id":"ckecjkrfi0005r0u29jy8fmxi","_id":"ckecjkrfl000br0u236rifzv9"},{"post_id":"ckecjkrff0002r0u20ttl5elm","tag_id":"ckecjkrfl000ar0u215dv31yo","_id":"ckecjkrfo000ir0u2hbvc4l1p"},{"post_id":"ckecjkrfi0006r0u207ij73zv","tag_id":"ckecjkrfn000gr0u2aja26n7c","_id":"ckecjkrfr000or0u2815v5fdj"},{"post_id":"ckecjkrfj0007r0u2fyq3d4vb","tag_id":"ckecjkrfn000gr0u2aja26n7c","_id":"ckecjkrfs000ur0u2as8f8bqz"},{"post_id":"ckecjkrfk0008r0u27gxr5c03","tag_id":"ckecjkrfs000sr0u23x76959z","_id":"ckecjkrfu0010r0u2brdy4dg7"},{"post_id":"ckecjkrfl000cr0u23vn36xf6","tag_id":"ckecjkrfn000gr0u2aja26n7c","_id":"ckecjkrfw0016r0u29ipk1nze"},{"post_id":"ckecjkrfm000dr0u21vhvfqaf","tag_id":"ckecjkrfn000gr0u2aja26n7c","_id":"ckecjkrfy001dr0u267fv1oqp"},{"post_id":"ckecjkrfn000hr0u2arjz1s88","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrfz001kr0u22gvv1fw5"},{"post_id":"ckecjkrfo000jr0u285jybwxz","tag_id":"ckecjkrfz001jr0u2fth1bea6","_id":"ckecjkrg4001xr0u2316b5piu"},{"post_id":"ckecjkrfo000jr0u285jybwxz","tag_id":"ckecjkrg2001qr0u27n4pbqdw","_id":"ckecjkrg5001zr0u28oom4sud"},{"post_id":"ckecjkrfp000nr0u295du1ezu","tag_id":"ckecjkrg4001vr0u263kofroj","_id":"ckecjkrg60024r0u23zufh2tb"},{"post_id":"ckecjkrfr000pr0u22ee7dkvj","tag_id":"ckecjkrg60022r0u21gifdgww","_id":"ckecjkrga002ar0u2g2a3elx7"},{"post_id":"ckecjkrga002br0u2dlgs5hwy","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgc002gr0u2g8i73tz2"},{"post_id":"ckecjkrfs000tr0u2ezbj7igr","tag_id":"ckecjkrga0029r0u29w9odbnp","_id":"ckecjkrgd002ir0u2ftl4grf0"},{"post_id":"ckecjkrgb002dr0u26j3xchux","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrge002nr0u240rp78cu"},{"post_id":"ckecjkrgc002hr0u2atgv95n5","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgf002qr0u284ex5iyb"},{"post_id":"ckecjkrft000vr0u20pbw5qfp","tag_id":"ckecjkrgc002fr0u25iq47hhb","_id":"ckecjkrgg002ur0u20g0v72gp"},{"post_id":"ckecjkrge002or0u22fsibv1e","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgh002yr0u20f5r6vmq"},{"post_id":"ckecjkrft000zr0u2cgos9kpd","tag_id":"ckecjkrge002mr0u20ecn8k94","_id":"ckecjkrgj0032r0u2cay9cbyf"},{"post_id":"ckecjkrgf002rr0u203jrdv6f","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgk0036r0u22spf76lb"},{"post_id":"ckecjkrgg002wr0u222i97miz","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgl003ar0u2c9fud6eg"},{"post_id":"ckecjkrfu0011r0u29hc1ai9k","tag_id":"ckecjkrge002mr0u20ecn8k94","_id":"ckecjkrgm003er0u28dh57w3t"},{"post_id":"ckecjkrgh002zr0u2gza48o5w","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgn003ir0u2b5r4cdux"},{"post_id":"ckecjkrgj0034r0u2g72x009m","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgo003mr0u257mc6080"},{"post_id":"ckecjkrfv0015r0u26h1w49cy","tag_id":"ckecjkrge002mr0u20ecn8k94","_id":"ckecjkrgq003qr0u2h9wcb7vp"},{"post_id":"ckecjkrgk0037r0u29fjqfxm1","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgr003ur0u2afh0b2iv"},{"post_id":"ckecjkrgl003cr0u2ampgblhz","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgs003yr0u2gb740ntw"},{"post_id":"ckecjkrfw0017r0u2cmq6f3q2","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgt0042r0u2glfng6se"},{"post_id":"ckecjkrgm003fr0u28u3c6zo3","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgu0046r0u2cdpd21q0"},{"post_id":"ckecjkrgo003kr0u22fzvbg4t","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgv004ar0u286pgg7cf"},{"post_id":"ckecjkrgo003nr0u2g7cd0r5j","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgw004er0u24myf339n"},{"post_id":"ckecjkrfx001br0u26pw982fu","tag_id":"ckecjkrgn003jr0u29yw06sxv","_id":"ckecjkrgw004hr0u2erlh5gme"},{"post_id":"ckecjkrgr003rr0u2fhn68u63","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgx004jr0u2f4p7ahbd"},{"post_id":"ckecjkrgr003vr0u28e73ar9s","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgx004nr0u2azcf12bs"},{"post_id":"ckecjkrfy001er0u2fto31bsi","tag_id":"ckecjkrgr003tr0u22y5e8qe4","_id":"ckecjkrgy004pr0u25qxodzha"},{"post_id":"ckecjkrgs003zr0u282uwg3f0","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrgy004tr0u21pyn2dw8"},{"post_id":"ckecjkrgt0043r0u27jk875j6","tag_id":"ckecjkrfz001jr0u2fth1bea6","_id":"ckecjkrgz004vr0u2ctrn3gcs"},{"post_id":"ckecjkrfy001gr0u21gva0k61","tag_id":"ckecjkrgn003jr0u29yw06sxv","_id":"ckecjkrgz004zr0u2efb1h88l"},{"post_id":"ckecjkrgu0047r0u227ush4et","tag_id":"ckecjkrfz001jr0u2fth1bea6","_id":"ckecjkrgz0051r0u29lb46hds"},{"post_id":"ckecjkrgv004br0u27mrh7si1","tag_id":"ckecjkrfz001jr0u2fth1bea6","_id":"ckecjkrh00053r0u242jg2fc0"},{"post_id":"ckecjkrg0001lr0u2acq0ayfu","tag_id":"ckecjkrgv0049r0u2648wby54","_id":"ckecjkrh10056r0u2hlr6bbh5"},{"post_id":"ckecjkrg1001nr0u21zdcar9x","tag_id":"ckecjkrgv0049r0u2648wby54","_id":"ckecjkrh10058r0u28cm163nz"},{"post_id":"ckecjkrg2001rr0u217xbf2xr","tag_id":"ckecjkrgv0049r0u2648wby54","_id":"ckecjkrh2005br0u25usn1gdh"},{"post_id":"ckecjkrg3001sr0u2gk4vgq5c","tag_id":"ckecjkrgr003tr0u22y5e8qe4","_id":"ckecjkrh2005dr0u209f54bcp"},{"post_id":"ckecjkrg4001wr0u234yw2hjt","tag_id":"ckecjkrgz004yr0u2hjkw839t","_id":"ckecjkrh2005gr0u2377jeye1"},{"post_id":"ckecjkrg5001yr0u2cr9ocbvx","tag_id":"ckecjkrh00054r0u24z6zhjd3","_id":"ckecjkrh3005ir0u2adq05tgx"},{"post_id":"ckecjkrg60023r0u2e5frgpql","tag_id":"ckecjkrh00054r0u24z6zhjd3","_id":"ckecjkrh3005lr0u2b0a78y5e"},{"post_id":"ckecjkrg60025r0u24jzx82wl","tag_id":"ckecjkrh2005fr0u2au2y1ml4","_id":"ckecjkrh3005nr0u23m0x89kh"},{"post_id":"ckecjkrg70028r0u20zr03mgl","tag_id":"ckecjkrh3005kr0u27xlzaxgg","_id":"ckecjkrh3005pr0u270s3atb6"},{"post_id":"ckecjkrgd002jr0u2e0oe0x5m","tag_id":"ckecjkrh3005or0u22g0i50jt","_id":"ckecjkrh3005qr0u26k3n8pei"},{"post_id":"ckecjkrh7005ur0u28u9l1ote","tag_id":"ckecjkrgr003tr0u22y5e8qe4","_id":"ckecjkrh7005vr0u25rcbh4y3"},{"post_id":"ckecjkrh9005xr0u22rzw6hi4","tag_id":"ckecjkrfx001ar0u29oqg1t77","_id":"ckecjkrha005yr0u2h5d18nw4"},{"post_id":"ckecjkrhc0060r0u26wb9d54p","tag_id":"ckecjkrfz001jr0u2fth1bea6","_id":"ckecjkrhc0061r0u27bk7elqu"}],"Tag":[{"name":"CSS","_id":"ckecjkrfi0005r0u29jy8fmxi"},{"name":"ES6","_id":"ckecjkrfl000ar0u215dv31yo"},{"name":"数据结构","_id":"ckecjkrfn000gr0u2aja26n7c"},{"name":"Python","_id":"ckecjkrfs000sr0u23x76959z"},{"name":"Vue","_id":"ckecjkrfx001ar0u29oqg1t77"},{"name":"webpack","_id":"ckecjkrfz001jr0u2fth1bea6"},{"name":"babel","_id":"ckecjkrg2001qr0u27n4pbqdw"},{"name":"Github","_id":"ckecjkrg4001vr0u263kofroj"},{"name":"跨域","_id":"ckecjkrg60022r0u21gifdgww"},{"name":"git","_id":"ckecjkrga0029r0u29w9odbnp"},{"name":"Windows技巧","_id":"ckecjkrgc002fr0u25iq47hhb"},{"name":"java","_id":"ckecjkrge002mr0u20ecn8k94"},{"name":"项目","_id":"ckecjkrgn003jr0u29yw06sxv"},{"name":"笔记","_id":"ckecjkrgr003tr0u22y5e8qe4"},{"name":"node","_id":"ckecjkrgv0049r0u2648wby54"},{"name":"电脑","_id":"ckecjkrgz004yr0u2hjkw839t"},{"name":"Python,爬虫","_id":"ckecjkrh00054r0u24z6zhjd3"},{"name":"笔记, Vue.js, Webpack","_id":"ckecjkrh2005fr0u2au2y1ml4"},{"name":"激活","_id":"ckecjkrh3005kr0u27xlzaxgg"},{"name":"Vue笔记","_id":"ckecjkrh3005or0u22g0i50jt"}]}}